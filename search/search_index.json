{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4ecb\u7ecd \ud83d\udca8 \u6b64\u9879\u76ee\u81f4\u529b\u4e8e\u5e2e\u52a9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\u548c\u5feb\u901f\u4e0a\u624b Jetpack Compose \u6846\u67b6, \u66f4\u591a\u7684\u90e8\u5206\u662f\u4e3a\u4e86\u8865\u5145\u5b98\u7f51\u53ef\u80fd\u6ca1\u6709\u4ecb\u7ecd\u7684\u4e1c\u897f \u672a\u6765\u53ef\u80fd\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u6837\u4f8b app\uff08\u5f00\u53d1\u4e2d\uff09 1. Jetpack Composes \u662f\u4ec0\u4e48 \uff1f Jetpack Compose \u662f\u7528\u4e8e\u6784\u5efa\u539f\u751f\u754c\u9762\u7684\u6700\u65b0\u7684 Android \u5de5\u5177\u5305\uff0c\u91c7\u7528\u58f0\u660e\u5f0f UI \u7684\u8bbe\u8ba1\uff0c\u62e5\u6709\u66f4\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u548c\u5b9e\u65f6\u7684\u4ea4\u4e92\u9884\u89c8\u529f\u80fd\uff0c\u7531 Android \u5b98\u65b9\u56e2\u961f\u5168\u65b0\u6253\u9020\u7684 UI \u6846\u67b6","title":"\u6982\u8ff0"},{"location":"#_1","text":"\u6b64\u9879\u76ee\u81f4\u529b\u4e8e\u5e2e\u52a9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\u548c\u5feb\u901f\u4e0a\u624b Jetpack Compose \u6846\u67b6, \u66f4\u591a\u7684\u90e8\u5206\u662f\u4e3a\u4e86\u8865\u5145\u5b98\u7f51\u53ef\u80fd\u6ca1\u6709\u4ecb\u7ecd\u7684\u4e1c\u897f \u672a\u6765\u53ef\u80fd\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u6837\u4f8b app\uff08\u5f00\u53d1\u4e2d\uff09","title":"\u4ecb\u7ecd \ud83d\udca8"},{"location":"#1-jetpack-composes","text":"Jetpack Compose \u662f\u7528\u4e8e\u6784\u5efa\u539f\u751f\u754c\u9762\u7684\u6700\u65b0\u7684 Android \u5de5\u5177\u5305\uff0c\u91c7\u7528\u58f0\u660e\u5f0f UI \u7684\u8bbe\u8ba1\uff0c\u62e5\u6709\u66f4\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u548c\u5b9e\u65f6\u7684\u4ea4\u4e92\u9884\u89c8\u529f\u80fd\uff0c\u7531 Android \u5b98\u65b9\u56e2\u961f\u5168\u65b0\u6253\u9020\u7684 UI \u6846\u67b6","title":"1. Jetpack Composes \u662f\u4ec0\u4e48 \uff1f"},{"location":"codelabs/","text":"Codelabs \u4e3b\u8981\u662f\u5e2e\u52a9\u5927\u5bb6\u80fd\u591f\u5b9e\u73b0\u4e00\u4e9b\u7b80\u5355/\u6709\u7528/\u597d\u73a9\u7684\u4e1c\u897f \u6b22\u8fce\u5927\u5bb6\u7ed9\u81ea\u5df1\u7684 APP \u5199\u4e0a\u6b65\u9aa4\u5e76\u4e0a\u4f20\u5230\u8fd9\u91cc\uff01 Codelabs \u4e3b\u9875 \u5b9e\u9a8c\u5ba4 \u4ecb\u7ecd \u8bd7\u53e5\u5361\u7247 \u5b9e\u73b0\u7b80\u5355\u7684\u7ed3\u6784\u5e03\u5c40 \u5173\u4e8e\u5982\u4f55\u8d21\u732e Codelabs \u6216\u8005\u4fee\u6539\u9519\u8bef Fork Codelabs \u7684\u9879\u76ee \u4f60\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u7684\u73af\u5883 Go Node.js \u548c npm Claat \uff0c\u63a8\u8350\u7528 go \u547d\u4ee4\u6765\u5b89\u88c5 \u63a5\u4e0b\u6765 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c npm install \u8fd0\u884c gulp serve --codelabs-dir=codelabs \u5728 http://localhost:8000/ \u4e2d\u67e5\u770b\u7f51\u9875 \u4fee\u6539 \u8fdb\u5165 codelabs \u6587\u4ef6\u5939\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u8bb8\u591a\u6587\u4ef6\u5939\u548c .md \u6587\u4ef6 \u4fee\u6539\u5bf9\u5e94\u7684 .md \u6587\u4ef6 \u6267\u884c claat export xxxx.md \uff0c\u6210\u529f\u7684\u8bdd\u4f1a\u770b\u5230 ok ----- \u5e76\u4e14\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u5939(\u5982\u679c\u5df2\u6709\u7684\u8bdd\u4f1a\u8986\u76d6) \u5237\u65b0 http://localhost:8000/ \u6ce8\u610f \u5982\u679c\u662f windows \u7cfb\u7edf\uff0c\u8bf7\u52a1\u5fc5\u4f7f\u7528 Unix LF \u884c\u5c3e\u6765\u4fdd\u5b58\u6587\u4ef6\uff0c\u5426\u5219\u5728\u7f51\u9875\u4e0a\u4f1a\u6709\u5f88\u591a\u9519\u8bef \u6bcf\u6b21\u66f4\u65b0\u4e86 .md \u9700\u8981\u624b\u52a8\u8f93\u5165 claat export xxxx.md \u6587\u4ef6\uff0c\u76ee\u524d claat \u4f3c\u4e4e\u8fd8\u4e0d\u652f\u6301\u70ed\u66f4\u65b0 TAT \u63d0\u4ea4\u66f4\u6539 pr \u5230 -> gh-pages \u5206\u652f \u63d0\u4ea4 issue \u5982\u679c\u89c9\u5f97\u81ea\u5df1\u4fee\u6539\u6709\u70b9\u9ebb\u70e6\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u5230 \u8fd9\u91cc \u63d0\u4ea4 issue \uff0c\u5c3d\u91cf\u63d0\u4f9b\u662f\u54ea\u4e9b\u9875\u9762/\u4ee3\u7801\u6709\u9519\u8bef","title":"\u4ee3\u7801\u5b9e\u9a8c\u5ba4"},{"location":"codelabs/#codelabs","text":"Fork Codelabs \u7684\u9879\u76ee","title":"\u5173\u4e8e\u5982\u4f55\u8d21\u732e Codelabs \u6216\u8005\u4fee\u6539\u9519\u8bef"},{"location":"codelabs/#_1","text":"Go Node.js \u548c npm Claat \uff0c\u63a8\u8350\u7528 go \u547d\u4ee4\u6765\u5b89\u88c5","title":"\u4f60\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u7684\u73af\u5883"},{"location":"codelabs/#_2","text":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c npm install \u8fd0\u884c gulp serve --codelabs-dir=codelabs \u5728 http://localhost:8000/ \u4e2d\u67e5\u770b\u7f51\u9875","title":"\u63a5\u4e0b\u6765"},{"location":"codelabs/#_3","text":"\u8fdb\u5165 codelabs \u6587\u4ef6\u5939\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u8bb8\u591a\u6587\u4ef6\u5939\u548c .md \u6587\u4ef6 \u4fee\u6539\u5bf9\u5e94\u7684 .md \u6587\u4ef6 \u6267\u884c claat export xxxx.md \uff0c\u6210\u529f\u7684\u8bdd\u4f1a\u770b\u5230 ok ----- \u5e76\u4e14\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u5939(\u5982\u679c\u5df2\u6709\u7684\u8bdd\u4f1a\u8986\u76d6) \u5237\u65b0 http://localhost:8000/ \u6ce8\u610f \u5982\u679c\u662f windows \u7cfb\u7edf\uff0c\u8bf7\u52a1\u5fc5\u4f7f\u7528 Unix LF \u884c\u5c3e\u6765\u4fdd\u5b58\u6587\u4ef6\uff0c\u5426\u5219\u5728\u7f51\u9875\u4e0a\u4f1a\u6709\u5f88\u591a\u9519\u8bef \u6bcf\u6b21\u66f4\u65b0\u4e86 .md \u9700\u8981\u624b\u52a8\u8f93\u5165 claat export xxxx.md \u6587\u4ef6\uff0c\u76ee\u524d claat \u4f3c\u4e4e\u8fd8\u4e0d\u652f\u6301\u70ed\u66f4\u65b0 TAT","title":"\u4fee\u6539"},{"location":"codelabs/#_4","text":"pr \u5230 -> gh-pages \u5206\u652f","title":"\u63d0\u4ea4\u66f4\u6539"},{"location":"codelabs/#issue","text":"\u5982\u679c\u89c9\u5f97\u81ea\u5df1\u4fee\u6539\u6709\u70b9\u9ebb\u70e6\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u5230 \u8fd9\u91cc \u63d0\u4ea4 issue \uff0c\u5c3d\u91cf\u63d0\u4f9b\u662f\u54ea\u4e9b\u9875\u9762/\u4ee3\u7801\u6709\u9519\u8bef","title":"\u63d0\u4ea4 issue"},{"location":"contributing/","text":"Jetpack Compose \u5982\u679c\u4f60\u60f3\u4e3a Jetpack Compose \u505a\u8d21\u732e\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u52a0\u5165 Kotlin \u7684 Slack \u9891\u9053 #Compose , \u6216\u8005\u5728 https://issuetracker.google.com/issues?q=componentid:612128 \u4e2d\u63d0\u4ea4 Compose \u7684 Bug \u6216\u8005\u9519\u8bef \u5173\u4e8e Codelabs \u672c\u9879\u76ee \u6211\u4eec\u975e\u5e38\u6b22\u8fce\u5404\u79cd\u7684 PR \u8bf7\u6c42\uff0c_(:\u0437)\u2220)_\u672c\u9879\u76ee\u8fd8\u5904\u4e8e\u521d\u671f\u9636\u6bb5\uff0c\u975e\u5e38\u9700\u8981\u5404\u4f4d\u5927\u4f6c\u7684\u5b8c\u5584\u548c\u7ea0\u9519 \u6587\u6863\u91c7\u7528 Material \u4e3b\u9898\u7684 MkDocs \u6765\u7f16\u8f91\uff0c\u975e\u5e38\u597d\u4e0a\u624b,\u4f60\u53ea\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u7684\u6b65\u9aa4\uff1a \u5b89\u88c5\u63d2\u4ef6 pip install mkdocs-material pip install mkdocs-git-revision-date-localized-plugin pip install mkdocs-macros-plugin \u5728\u672c\u5730\u8fd0\u884c\u548c\u6d4b\u8bd5 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u7ec8\u7aef\u6267\u884c mkdocs serve \uff0c\u5c06\u4f1a\u5728 http://localhost:8000/ \u770b\u5230\u6587\u6863 \u5982\u4f55\u6dfb\u52a0/\u66f4\u6539\u6587\u6863\uff1f \u6587\u6863\u90fd\u662f\u7531 Markdown \u8bed\u6cd5\u6765\u7f16\u5199\u7684\uff0c\u6240\u6709\u6587\u6863\u4f4d\u4e8e /docs \u4e2d, \u5982\u679c\u9700\u8981\u6269\u5c55\u5de6\u8fb9\u7684\u5bfc\u822a\u4fa7\u680f\uff0c\u8bf7\u5728 mkdocs.yml \u66f4\u65b0 nav \u56fe\u7247\u6dfb\u52a0\u9700\u8981\u5728 /assets/ \u4e0b\uff0c\u548c\u6587\u6863\u540c\u7b49\u8def\u5f84\u540d\u5b57\u6dfb\u52a0\uff0c \u4f8b\u5982\u5982\u679c\u6211\u4fee\u6539\u4e86 Text \u7684\u6587\u6863\uff0c\u5e76\u4e14\u6dfb\u52a0\u4e86\u4e00\u5f20\u4f8b\u56fe \u90a3\u4e48\u5c31\u662f\u653e\u5728 /assets/elements/text/xxx.png \u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\u5b8f\u5b9a\u4e49,\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u6587\u6863\u4e2d\u8c03\u7528 img \u6807\u7b7e\u6216\u8005 markdown \u8c03\u7528\u56fe\u7247\u8bed\u53e5\u4e2d\u7684 config.assets \u6700\u540e \u606d\u559c\u4f60\uff0c\u5f53\u4f60\u540c\u6b65\u4e86\u672c\u9879\u76ee\u7684\u6700\u65b0\u8fdb\u5ea6\u5e76\u4e14\u6dfb\u52a0\u4e86\u4f60\u6240\u60f3\u7684\u4e1c\u897f\uff0c\u4f60\u53ea\u9700\u8981\u63d0\u4ea4 PR \u5373\u53ef\uff0c\u6211\u4eec\u5728\u5ba1\u6838\u901a\u8fc7\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u7f51\u7ad9\u4e0a \u5982\u679c\u4f60\u89c9\u5f97\u6b64\u9879\u76ee\u5bf9\u4f60\u6709\u5e2e\u52a9\u7684\u8bdd\uff0c\u4e0d\u59a8\u70b9\u4e2a Star \u652f\u6301\u4e0b\u4f5c\u8005\u5427~\uff01 \u8d21\u732e\u8005 License MIT License Copyright (c) 2021 Compose-Museum Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"\u5173\u4e8e\u8d21\u732e"},{"location":"contributing/#jetpack-compose","text":"\u5982\u679c\u4f60\u60f3\u4e3a Jetpack Compose \u505a\u8d21\u732e\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u52a0\u5165 Kotlin \u7684 Slack \u9891\u9053 #Compose , \u6216\u8005\u5728 https://issuetracker.google.com/issues?q=componentid:612128 \u4e2d\u63d0\u4ea4 Compose \u7684 Bug \u6216\u8005\u9519\u8bef","title":"Jetpack Compose"},{"location":"contributing/#codelabs","text":"","title":"\u5173\u4e8e Codelabs"},{"location":"contributing/#_1","text":"\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u5404\u79cd\u7684 PR \u8bf7\u6c42\uff0c_(:\u0437)\u2220)_\u672c\u9879\u76ee\u8fd8\u5904\u4e8e\u521d\u671f\u9636\u6bb5\uff0c\u975e\u5e38\u9700\u8981\u5404\u4f4d\u5927\u4f6c\u7684\u5b8c\u5584\u548c\u7ea0\u9519 \u6587\u6863\u91c7\u7528 Material \u4e3b\u9898\u7684 MkDocs \u6765\u7f16\u8f91\uff0c\u975e\u5e38\u597d\u4e0a\u624b,\u4f60\u53ea\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u7684\u6b65\u9aa4\uff1a \u5b89\u88c5\u63d2\u4ef6 pip install mkdocs-material pip install mkdocs-git-revision-date-localized-plugin pip install mkdocs-macros-plugin \u5728\u672c\u5730\u8fd0\u884c\u548c\u6d4b\u8bd5 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u7ec8\u7aef\u6267\u884c mkdocs serve \uff0c\u5c06\u4f1a\u5728 http://localhost:8000/ \u770b\u5230\u6587\u6863 \u5982\u4f55\u6dfb\u52a0/\u66f4\u6539\u6587\u6863\uff1f \u6587\u6863\u90fd\u662f\u7531 Markdown \u8bed\u6cd5\u6765\u7f16\u5199\u7684\uff0c\u6240\u6709\u6587\u6863\u4f4d\u4e8e /docs \u4e2d, \u5982\u679c\u9700\u8981\u6269\u5c55\u5de6\u8fb9\u7684\u5bfc\u822a\u4fa7\u680f\uff0c\u8bf7\u5728 mkdocs.yml \u66f4\u65b0 nav \u56fe\u7247\u6dfb\u52a0\u9700\u8981\u5728 /assets/ \u4e0b\uff0c\u548c\u6587\u6863\u540c\u7b49\u8def\u5f84\u540d\u5b57\u6dfb\u52a0\uff0c \u4f8b\u5982\u5982\u679c\u6211\u4fee\u6539\u4e86 Text \u7684\u6587\u6863\uff0c\u5e76\u4e14\u6dfb\u52a0\u4e86\u4e00\u5f20\u4f8b\u56fe \u90a3\u4e48\u5c31\u662f\u653e\u5728 /assets/elements/text/xxx.png \u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\u5b8f\u5b9a\u4e49,\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u6587\u6863\u4e2d\u8c03\u7528 img \u6807\u7b7e\u6216\u8005 markdown \u8c03\u7528\u56fe\u7247\u8bed\u53e5\u4e2d\u7684 config.assets \u6700\u540e \u606d\u559c\u4f60\uff0c\u5f53\u4f60\u540c\u6b65\u4e86\u672c\u9879\u76ee\u7684\u6700\u65b0\u8fdb\u5ea6\u5e76\u4e14\u6dfb\u52a0\u4e86\u4f60\u6240\u60f3\u7684\u4e1c\u897f\uff0c\u4f60\u53ea\u9700\u8981\u63d0\u4ea4 PR \u5373\u53ef\uff0c\u6211\u4eec\u5728\u5ba1\u6838\u901a\u8fc7\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u7f51\u7ad9\u4e0a","title":"\u672c\u9879\u76ee"},{"location":"contributing/#star","text":"","title":"\u5982\u679c\u4f60\u89c9\u5f97\u6b64\u9879\u76ee\u5bf9\u4f60\u6709\u5e2e\u52a9\u7684\u8bdd\uff0c\u4e0d\u59a8\u70b9\u4e2a Star \u652f\u6301\u4e0b\u4f5c\u8005\u5427~\uff01"},{"location":"contributing/#_2","text":"","title":"\u8d21\u732e\u8005"},{"location":"contributing/#license","text":"MIT License Copyright (c) 2021 Compose-Museum Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"resources/","text":"\u4e00\u4e9b\u5bf9 Compose \u9879\u76ee\u5f00\u53d1\u6709\u5e2e\u52a9\u7684\u8d44\u6e90 \u5b98\u65b9\u4f9d\u8d56 \u4f9d\u8d56\u540d \u7248\u672c GradlePluginVersion\uff08\u7a33\u5b9a\u7248 Android Studio \u5317\u6781\u72d0\u53ef\u7528\u7684\u6700\u65b0\u7248\u672c\uff09 7.0.3 GradlePluginVersion (Android Studio Canary \u7b49\u7248\u672c\u53ef\u7528\u7684\u6700\u65b0\u7248\u672c) 7.1.0-alpha13 kotlinVersion (Compose \u6700\u4f4e\u652f\u6301\u7684 Kotlin \u7248\u672c\uff0c\u548c\u5e95\u4e0b\u7684 Compose \u7248\u672c\u5bf9\u5e94) 1.5.31 composeVersion\uff08\u7a33\u5b9a\u7248\uff09 1.0.5 navigationComposeVersion 2.4.0-alpha10 hilt 2.38.1 \u5e93 \u9879\u76ee\u540d \u4ecb\u7ecd Accompanist Jetpack Compose \u7684\u4e00\u4e9b\u529f\u80fd\u8865\u5145\u5e93 Ucrop \u53ef\u4ee5\u5b8c\u6210\u56fe\u7247\u7684\u88c1\u526a\uff0c\u5bf9\u7528\u6237\u7684\u56fe\u7247\u4e0a\u4f20\u529f\u80fd\u6709\u5e2e\u52a9(\u5df2\u77e5 Bilibili \u5728\u7528) Material Design \u5b89\u5353\u5e94\u7528\u7684\u8bbe\u8ba1\u6807\u51c6\uff0c\u5185\u6db5\u4e30\u5bcc\u7684\u56fe\u6807\u6309\u94ae\u8d44\u6e90 CMaterialColors \u5305\u542b\u6240\u6709 MaterialDesignColor\uff0c\u5728 Jetpack Compose \u4e2d\u8f7b\u677e\u4f7f\u7528 Intent \u5b89\u5353\u5e94\u7528\u7684\u5206\u4eab\u529f\u80fd Material Dialog \u542b\u6709\u989c\u8272\u3001\u65f6\u95f4\u9009\u62e9\u5bf9\u8bdd\u6846\u7b49\u7b49 Material Motion for Jetpack Compose \u4e00\u4e9b\u7528\u4e8e Compose \u5f88\u4e0d\u9519\u7684\u8fc7\u6e21\u52a8\u753b Coil Compose \u989d\u5916\u7684\u56fe\u50cf\u5e93\uff0c\u652f\u6301\u663e\u793a Svg Gif\uff0c\u652f\u6301\u663e\u793a\u7f51\u7edc\u8d44\u6e90\u7684\u56fe\u7247 Landscapist \u540c\u6837\u4e5f\u662f\u56fe\u50cf\u52a0\u8f7d\u7684\u5e93\uff0c\u652f\u6301\u4f7f\u7528 Glide, Coil, Fresco \u7b49\u5e93","title":"\u8d44\u6e90"},{"location":"resources/#compose","text":"","title":"\u4e00\u4e9b\u5bf9 Compose \u9879\u76ee\u5f00\u53d1\u6709\u5e2e\u52a9\u7684\u8d44\u6e90"},{"location":"resources/#_1","text":"\u4f9d\u8d56\u540d \u7248\u672c GradlePluginVersion\uff08\u7a33\u5b9a\u7248 Android Studio \u5317\u6781\u72d0\u53ef\u7528\u7684\u6700\u65b0\u7248\u672c\uff09 7.0.3 GradlePluginVersion (Android Studio Canary \u7b49\u7248\u672c\u53ef\u7528\u7684\u6700\u65b0\u7248\u672c) 7.1.0-alpha13 kotlinVersion (Compose \u6700\u4f4e\u652f\u6301\u7684 Kotlin \u7248\u672c\uff0c\u548c\u5e95\u4e0b\u7684 Compose \u7248\u672c\u5bf9\u5e94) 1.5.31 composeVersion\uff08\u7a33\u5b9a\u7248\uff09 1.0.5 navigationComposeVersion 2.4.0-alpha10 hilt 2.38.1","title":"\u5b98\u65b9\u4f9d\u8d56"},{"location":"resources/#_2","text":"\u9879\u76ee\u540d \u4ecb\u7ecd Accompanist Jetpack Compose \u7684\u4e00\u4e9b\u529f\u80fd\u8865\u5145\u5e93 Ucrop \u53ef\u4ee5\u5b8c\u6210\u56fe\u7247\u7684\u88c1\u526a\uff0c\u5bf9\u7528\u6237\u7684\u56fe\u7247\u4e0a\u4f20\u529f\u80fd\u6709\u5e2e\u52a9(\u5df2\u77e5 Bilibili \u5728\u7528) Material Design \u5b89\u5353\u5e94\u7528\u7684\u8bbe\u8ba1\u6807\u51c6\uff0c\u5185\u6db5\u4e30\u5bcc\u7684\u56fe\u6807\u6309\u94ae\u8d44\u6e90 CMaterialColors \u5305\u542b\u6240\u6709 MaterialDesignColor\uff0c\u5728 Jetpack Compose \u4e2d\u8f7b\u677e\u4f7f\u7528 Intent \u5b89\u5353\u5e94\u7528\u7684\u5206\u4eab\u529f\u80fd Material Dialog \u542b\u6709\u989c\u8272\u3001\u65f6\u95f4\u9009\u62e9\u5bf9\u8bdd\u6846\u7b49\u7b49 Material Motion for Jetpack Compose \u4e00\u4e9b\u7528\u4e8e Compose \u5f88\u4e0d\u9519\u7684\u8fc7\u6e21\u52a8\u753b Coil Compose \u989d\u5916\u7684\u56fe\u50cf\u5e93\uff0c\u652f\u6301\u663e\u793a Svg Gif\uff0c\u652f\u6301\u663e\u793a\u7f51\u7edc\u8d44\u6e90\u7684\u56fe\u7247 Landscapist \u540c\u6837\u4e5f\u662f\u56fe\u50cf\u52a0\u8f7d\u7684\u5e93\uff0c\u652f\u6301\u4f7f\u7528 Glide, Coil, Fresco \u7b49\u5e93","title":"\u5e93"},{"location":"start/","text":"\u5728\u5f00\u59cb\u7528 Jetpack Compose \u6765\u7f16\u5199\u8f6f\u4ef6\u65f6\uff0c\u6211\u4eec\u9700\u8981 1. \u4e00\u53f0\u53ef\u4ee5 \u8054\u7f51 \u7684\u7535\u8111 2. \u5b89\u88c5\u6216\u66f4\u65b0\u5230 \u6700\u65b0\u7248\u7684 Android Studio 3. \u9009\u62e9\u521b\u5efa Empty Compose Activity 4. \u4fdd\u6301\u7248\u672c\u66f4\u65b0 \u5c1d\u8bd5\u4f7f\u7528\u6700\u65b0\u7684 Compose \u7248\u672c \u548c Compose \u8981\u6c42\u7684 Kotlin \u7248\u672c (1.5.31) Gradle \u7248\u672c : 7.2 \u53ef\u624b\u52a8\u5728 gradle-wrapper.properties \u4e2d\u66f4\u65b0 distributionUrl=https\\://services.gradle.org/distributions/gradle-7.2-bin.zip build.gralde.kts (Project) buildscript { val compose_version by extra ( \"1.0.5\" ) // Compose \u7248\u672c repositories { google () mavenCentral () } dependencies { classpath ( \"com.android.tools.build:gradle:7.0.3\" ) // Kotlin \u7248\u672c\uff0c\u6ce8\u610f\uff1aCompose \u7248\u672c\u6709\u65f6\u5019\u9700\u8981\u8981\u6c42 Kotlin \u5230\u8fbe\u4e00\u5b9a\u7684\u7248\u672c\uff0c\u8bf7\u540c\u6b65\u66f4\u65b0 classpath ( \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31\" ) // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle.kts files } } build.gradle (Project) buildscript { ext { compose_version = ' 1.0 . 5 ' } repositories { google () mavenCentral () } dependencies { classpath ' com . android . tools . build : gradle : 7.0 . 3 \"' classpath \" org . jetbrains . kotlin : kotlin - gradle - plugin : 1.5 . 31 \" // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } 5. \u914d\u7f6e Gradle\uff08\u53ef\u5ffd\u7565\uff09 \u60a8\u9700\u8981\u5c06\u5e94\u7528\u7684\u6700\u4f4e API \u7ea7\u522b\u8bbe\u7f6e\u4e3a 21 \u6216\u66f4\u9ad8\u7ea7\u522b\uff0c\u5e76\u5728\u5e94\u7528\u7684 build.gradle \u6587\u4ef6\u4e2d\u542f\u7528 Jetpack Compose\uff0c\u5982\u4e0b\u6240\u793a\u3002\u53e6\u5916\u8fd8\u8981\u8bbe\u7f6e Kotlin \u7f16\u8bd1\u5668\u63d2\u4ef6\u7684\u7248\u672c\u3002 build.gradle plugins { id ' com . android . application ' id ' org . jetbrains . kotlin . android ' } android { compileSdk 31 defaultConfig { applicationId \"yourAppId\" minSdk 21 targetSdk 31 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\" vectorDrawables { useSupportLibrary true } } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile ( ' proguard - android - optimize . txt ' ), ' proguard - rules . pro ' } } compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = ' 1.8 ' } buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion compose_version } packagingOptions { resources { excludes += ' / META - INF / { AL2 . 0 , LGPL2 . 1 } ' } } } dependencies { implementation ' androidx . core : core - ktx : 1.6 . 0 ' implementation \"androidx.compose.ui:ui: $ compose_version \" implementation \"androidx.compose.material:material: $ compose_version \" implementation \"androidx.compose.ui:ui-tooling-preview: $ compose_version \" implementation ' androidx . lifecycle : lifecycle - runtime - ktx : 2.3 . 1 ' implementation ' androidx . activity : activity - compose : 1.3 . 1 ' testImplementation ' junit : junit : 4.13 . 2 ' androidTestImplementation ' androidx . test . ext : junit : 1.1 . 3 ' androidTestImplementation ' androidx . test . espresso : espresso - core : 3.4 . 0 ' androidTestImplementation \"androidx.compose.ui:ui-test-junit4: $ compose_version \" debugImplementation \"androidx.compose.ui:ui-tooling: $ compose_version \" } 6. \u7f16\u5199\u7b2c\u4e00\u4e2a Compose \u7a0b\u5e8f \u73b0\u5728\uff0c\u5982\u679c\u4e00\u5207\u90fd\u6b63\u5e38\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c MainActivity.kt \u4e0a\u663e\u793a\u4ee5\u4e0b\u4ee3\u7801 class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { MyApplicationTheme { // \u6ce8\u610f\uff1a\u8fd9\u91cc\u4f1a\u6839\u636e\u4f60\u521b\u5efa\u7684\u9879\u76ee\u540d\u800c\u4e0d\u540c // A surface container using the 'background' color from the theme Surface ( color = MaterialTheme . colors . background ) { Greeting ( \"Android\" ) } } } } } @Composable fun Greeting ( name : String ) { Text ( text = \"Hello $ name !\" ) } @Preview ( showBackground = true ) @Composable fun DefaultPreview () { MyApplicationTheme { Greeting ( \"Android\" ) } } \u73b0\u5728\uff0c\u6211\u4eec\u5c06 MainActivity.kt \u4fee\u6539\u6210\u4ee5\u4e0b\uff1a class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { } } } \u5728\u4e0b\u4e00\u8282\u7684\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u4f1a\u901a\u8fc7\u6dfb\u52a0\u4e0d\u540c\u7684\u5143\u7d20\u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 app","title":"\u5728\u5f00\u59cb\u4e4b\u524d"},{"location":"start/#1","text":"","title":"1. \u4e00\u53f0\u53ef\u4ee5 \u8054\u7f51 \u7684\u7535\u8111"},{"location":"start/#2-android-studio","text":"","title":"2. \u5b89\u88c5\u6216\u66f4\u65b0\u5230 \u6700\u65b0\u7248\u7684 Android Studio"},{"location":"start/#3-empty-compose-activity","text":"","title":"3. \u9009\u62e9\u521b\u5efa Empty Compose Activity"},{"location":"start/#4","text":"\u5c1d\u8bd5\u4f7f\u7528\u6700\u65b0\u7684 Compose \u7248\u672c \u548c Compose \u8981\u6c42\u7684 Kotlin \u7248\u672c (1.5.31) Gradle \u7248\u672c : 7.2 \u53ef\u624b\u52a8\u5728 gradle-wrapper.properties \u4e2d\u66f4\u65b0 distributionUrl=https\\://services.gradle.org/distributions/gradle-7.2-bin.zip build.gralde.kts (Project) buildscript { val compose_version by extra ( \"1.0.5\" ) // Compose \u7248\u672c repositories { google () mavenCentral () } dependencies { classpath ( \"com.android.tools.build:gradle:7.0.3\" ) // Kotlin \u7248\u672c\uff0c\u6ce8\u610f\uff1aCompose \u7248\u672c\u6709\u65f6\u5019\u9700\u8981\u8981\u6c42 Kotlin \u5230\u8fbe\u4e00\u5b9a\u7684\u7248\u672c\uff0c\u8bf7\u540c\u6b65\u66f4\u65b0 classpath ( \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31\" ) // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle.kts files } } build.gradle (Project) buildscript { ext { compose_version = ' 1.0 . 5 ' } repositories { google () mavenCentral () } dependencies { classpath ' com . android . tools . build : gradle : 7.0 . 3 \"' classpath \" org . jetbrains . kotlin : kotlin - gradle - plugin : 1.5 . 31 \" // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } }","title":"4. \u4fdd\u6301\u7248\u672c\u66f4\u65b0"},{"location":"start/#5-gradle","text":"\u60a8\u9700\u8981\u5c06\u5e94\u7528\u7684\u6700\u4f4e API \u7ea7\u522b\u8bbe\u7f6e\u4e3a 21 \u6216\u66f4\u9ad8\u7ea7\u522b\uff0c\u5e76\u5728\u5e94\u7528\u7684 build.gradle \u6587\u4ef6\u4e2d\u542f\u7528 Jetpack Compose\uff0c\u5982\u4e0b\u6240\u793a\u3002\u53e6\u5916\u8fd8\u8981\u8bbe\u7f6e Kotlin \u7f16\u8bd1\u5668\u63d2\u4ef6\u7684\u7248\u672c\u3002 build.gradle plugins { id ' com . android . application ' id ' org . jetbrains . kotlin . android ' } android { compileSdk 31 defaultConfig { applicationId \"yourAppId\" minSdk 21 targetSdk 31 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\" vectorDrawables { useSupportLibrary true } } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile ( ' proguard - android - optimize . txt ' ), ' proguard - rules . pro ' } } compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = ' 1.8 ' } buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion compose_version } packagingOptions { resources { excludes += ' / META - INF / { AL2 . 0 , LGPL2 . 1 } ' } } } dependencies { implementation ' androidx . core : core - ktx : 1.6 . 0 ' implementation \"androidx.compose.ui:ui: $ compose_version \" implementation \"androidx.compose.material:material: $ compose_version \" implementation \"androidx.compose.ui:ui-tooling-preview: $ compose_version \" implementation ' androidx . lifecycle : lifecycle - runtime - ktx : 2.3 . 1 ' implementation ' androidx . activity : activity - compose : 1.3 . 1 ' testImplementation ' junit : junit : 4.13 . 2 ' androidTestImplementation ' androidx . test . ext : junit : 1.1 . 3 ' androidTestImplementation ' androidx . test . espresso : espresso - core : 3.4 . 0 ' androidTestImplementation \"androidx.compose.ui:ui-test-junit4: $ compose_version \" debugImplementation \"androidx.compose.ui:ui-tooling: $ compose_version \" }","title":"5. \u914d\u7f6e Gradle\uff08\u53ef\u5ffd\u7565\uff09"},{"location":"start/#6-compose","text":"\u73b0\u5728\uff0c\u5982\u679c\u4e00\u5207\u90fd\u6b63\u5e38\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c MainActivity.kt \u4e0a\u663e\u793a\u4ee5\u4e0b\u4ee3\u7801 class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { MyApplicationTheme { // \u6ce8\u610f\uff1a\u8fd9\u91cc\u4f1a\u6839\u636e\u4f60\u521b\u5efa\u7684\u9879\u76ee\u540d\u800c\u4e0d\u540c // A surface container using the 'background' color from the theme Surface ( color = MaterialTheme . colors . background ) { Greeting ( \"Android\" ) } } } } } @Composable fun Greeting ( name : String ) { Text ( text = \"Hello $ name !\" ) } @Preview ( showBackground = true ) @Composable fun DefaultPreview () { MyApplicationTheme { Greeting ( \"Android\" ) } } \u73b0\u5728\uff0c\u6211\u4eec\u5c06 MainActivity.kt \u4fee\u6539\u6210\u4ee5\u4e0b\uff1a class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { } } } \u5728\u4e0b\u4e00\u8282\u7684\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u4f1a\u901a\u8fc7\u6dfb\u52a0\u4e0d\u540c\u7684\u5143\u7d20\u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 app","title":"6. \u7f16\u5199\u7b2c\u4e00\u4e2a Compose \u7a0b\u5e8f"},{"location":"tutorial/","text":"\u4ecb\u7ecd Jetpack Compose \u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u539f\u751f Android UI \u7684\u73b0\u4ee3\u5de5\u5177\u5305\u3002 Jetpack Compose \u7528\u66f4\u5c11\u7684\u4ee3\u7801\u3001\u5f3a\u5927\u7684\u5de5\u5177\u548c\u76f4\u89c2\u7684 Kotlin API \u7b80\u5316\u5e76\u52a0\u901f\u4e86 Android \u4e0a\u7684 UI \u5f00\u53d1\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u7528\u58f0\u660e\u5f0f\u51fd\u6570\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 UI \u7ec4\u4ef6\u3002\u4f60\u5c06\u4e0d\u4f1a\u7f16\u8f91\u4efb\u4f55 XML \u5e03\u5c40\u6216\u4f7f\u7528\u5e03\u5c40\u7f16\u8f91\u5668\u3002\u76f8\u53cd\uff0c\u4f60\u5c06\u8c03\u7528 Jetpack Compose \u51fd\u6570\u6765\u8bf4\u660e\u4f60\u60f3\u8981\u7684\u5143\u7d20\uff0c\u5269\u4e0b\u7684\u5c31\u7531 Compose \u7f16\u8bd1\u5668\u6765\u5b8c\u6210\u3002 \u6ce8\u610f \u8bf7\u53c2\u9605 Jetpack \u53d1\u5e03 \u8bf4\u660e\uff0c\u4e86\u89e3\u6700\u65b0\u7684\u66f4\u65b0\u3002 1. \u7b2c\u4e00\u6b65\uff1aComposable \u51fd\u6570 Jetpack Compose \u662f\u56f4\u7ed5\u7740 Composable \u51fd\u6570\u5efa\u7acb\u7684\u3002\u8fd9\u4e9b\u51fd\u6570\u8ba9\u4f60\u901a\u8fc7\u63cf\u8ff0\u5b83\u7684\u5f62\u72b6\u548c\u6570\u636e\u4f9d\u8d56\u6027\uff0c\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u5b9a\u4e49\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7528\u6237\u754c\u9762\uff0c\u800c\u4e0d\u662f\u4e13\u6ce8\u4e8e\u7528\u6237\u754c\u9762\u7684\u6784\u5efa\u8fc7\u7a0b\u3002\u8981\u521b\u5efa\u4e00\u4e2a Composable \u51fd\u6570\uff0c\u53ea\u9700\u5728\u51fd\u6570\u540d\u79f0\u4e2d\u6dfb\u52a0 @Composable \u6ce8\u89e3\u3002 \u6dfb\u52a0\u4e00\u4e2a Text \u5143\u7d20 \u9996\u5148\uff0c\u6211\u4eec\u4f1a\u5728 onCreate \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4e00\u4e2a Text \u5143\u7d20\u6765\u663e\u793a\u4e00\u4e2a \"Hello World!\" \u7684\u6587\u672c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u5185\u5bb9\u5757\uff0c\u7136\u540e\u8c03\u7528 Text() \u51fd\u6570\u6765\u505a\u5230 setContent \u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 Composable \u51fd\u6570\u7684 avtivity \u7684\u5e03\u5c40\uff0cComposable \u51fd\u6570\u53ea\u80fd\u4ece\u5176\u4ed6\u7684 Composable \u51fd\u6570\u4e2d\u8c03\u7528 Jetpack Compose \u4f7f\u7528\u4e00\u4e2a Kotlin \u7f16\u8bd1\u5668\u63d2\u4ef6\u6765\u5c06\u8fd9\u4e9b Composable \u51fd\u6570\u8f6c\u5316\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684 UI \u5143\u7d20\u3002\u4f8b\u5982\uff0c\u7531 Compose UI \u5e93\u5b9a\u4e49\u7684 Text() \u51fd\u6570\u5c31\u53ef\u4ee5\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u4e00\u4e2a\u6587\u672c\u6807\u7b7e\u3002 class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { Text ( \"Hello world!\" ) } } } \u5b9a\u4e49\u4e00\u4e2a composable \u51fd\u6570 Composable \u51fd\u6570\u53ea\u80fd\u4ece\u5176\u4ed6 Composable \u51fd\u6570\u7684\u8303\u56f4\u5185\u8c03\u7528\u3002\u8981\u5199\u4e00\u4e2a Composable \u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a @Composable \u7684\u6ce8\u89e3\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a MessageCard() \u51fd\u6570\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u4e2a name \u53c2\u6570\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u53c2\u6570\u6765\u914d\u7f6e\u6587\u672c\u5143\u7d20 class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { MessageCard ( \"Android\" ) } } } @Composable fun MessageCard ( name : String ) { // Composable \u51fd\u6570\u4e00\u822c\u7528\u5927\u5199\u5f00\u5934\uff0c\u4e3a\u4e86\u548c\u666e\u901a\u7684\u51fd\u6570\u4f5c\u4e3a\u533a\u5206 Text ( text = \"Hello $ name \" ) } \u5728 Android Studio \u4e2d\u9884\u89c8\u4f60\u7684\u51fd\u6570 Android Studio \u53ef\u4ee5\u8ba9\u4f60\u5728 IDE \u4e2d\u9884\u89c8\u4f60\u7684 Composable \u51fd\u6570\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u5e94\u7528\u4e0b\u8f7d\u5230 Android \u8bbe\u5907\u6216\u6a21\u62df\u5668\u4e0a\u3002\u4f46\u662f\u6709\u4e2a\u9650\u5236, \u9700\u8981\u9884\u89c8\u7684 Composable \u51fd\u6570\u5fc5\u987b\u4e0d\u80fd\u6709\u4efb\u4f55\u53c2\u6570\u3002\u56e0\u4e3a\u8fd9\u4e2a\u9650\u5236\uff0c\u4f60\u4e0d\u80fd\u76f4\u63a5\u9884\u89c8 MessageCard() \u51fd\u6570\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5199\u7b2c\u4e00\u4e2a\u53eb PreviewMessageCard() \u7684\u51fd\u6570\uff0c\u5b83\u8c03\u7528\u5e26\u6709\u53c2\u6570\u7684 MessageCard() \u3002\u5728 @Composable \u4e4b\u524d\u6dfb\u52a0 @Preview \u6ce8\u89e3\u3002 @Composable fun MessageCard ( name : String ) { Text ( text = \"Hello $ name !\" ) } @Preview @Composable fun PreviewMessageCard () { MessageCard ( \"Android\" ) } \u91cd\u65b0\u8fd0\u884c\u4f60\u7684\u9879\u76ee\uff0capp \u672c\u8eab\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u56e0\u4e3a\u65b0\u7684 PreviewMessageCard() \u51fd\u6570\u5e76\u6ca1\u6709\u5728\u4efb\u4f55\u5730\u65b9\u88ab\u8c03\u7528\uff0c\u4f46 Android Studio \u589e\u52a0\u4e86\u4e00\u4e2a\u9884\u89c8\u7a97\u53e3\u3002\u8fd9\u4e2a\u7a97\u53e3\u663e\u793a\u4e86\u7531\u6807\u6709 @Preview \u6ce8\u89e3\u7684 Composable \u51fd\u6570\u521b\u5efa\u7684 UI \u5143\u7d20\u7684\u9884\u89c8\u3002\u5982\u679c\u4f60\u9700\u8981\u5728\u4efb\u4f55\u65f6\u5019\u66f4\u65b0\u9884\u89c8\uff0c\u8bf7\u70b9\u51fb\u9884\u89c8\u7a97\u53e3\u9876\u90e8\u7684\u5237\u65b0\u6309\u94ae\u3002 2. \u7b2c\u4e8c\u6b65\uff1a\u754c\u9762 UI \u5143\u7d20\u662f\u5206\u5c42\u6b21\u7684\uff0c\u5143\u7d20\u5305\u542b\u5728\u5176\u4ed6\u5143\u7d20\u4e2d\u3002\u5728 Compose \u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ece\u5176\u4ed6 Composable \u51fd\u6570\u4e2d\u8c03\u7528 Composable \u51fd\u6570\u6765\u5efa\u7acb\u4e00\u4e2a UI \u5c42\u6b21\u7ed3\u6784\u3002 \u6dfb\u52a0\u591a\u4e2a\u6587\u672c \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a Composable \u7684\u51fd\u6570\u548c\u9884\u89c8! \u4e3a\u4e86\u53d1\u73b0\u66f4\u591a\u7684 Jetpack Compose \u529f\u80fd\uff0c\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6d88\u606f\u5c4f\u5e55\uff0c\u5176\u4e2d\u5305\u542b\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u52a8\u753b\u5c55\u5f00\u7684\u6d88\u606f\u5217\u8868\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u901a\u8fc7\u663e\u793a\u4f5c\u8005\u7684\u540d\u5b57\u548c\u4fe1\u606f\u5185\u5bb9\uff0c\u4f7f\u6211\u4eec\u7684 MessageCard \u51fd\u6570\u66f4\u4e30\u5bcc\u3002\u6211\u4eec\u9996\u5148\u9700\u8981\u6539\u53d8\u6211\u4eec\u7684\u51fd\u6570\u53c2\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a\u6d88\u606f\u5bf9\u8c61\u800c\u4e0d\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5728 MessageCard \u51fd\u6570\u4e2d\u6dfb\u52a0\u53e6\u4e00\u4e2a Text \u51fd\u6570\u3002\u786e\u4fdd\u4e5f\u8981\u66f4\u65b0\u9884\u89c8\u3002 data class Message ( val author : String , val body : String ) @Composable fun MessageCard ( msg : Message ) { Text ( text = msg . author ) Text ( text = msg . body ) } @Preview @Composable fun PreviewMessageCard () { MessageCard ( msg = Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" ) ) } \u8fd9\u6bb5\u4ee3\u7801\u5728 app \u5185\u521b\u5efa\u4e86\u4e24\u4e2a Text \u5143\u7d20\u3002\u7136\u800c\uff0c\u7531\u4e8e\u6211\u4eec\u5e76\u6ca1\u6709\u5b89\u6392\u5982\u4f55\u6392\u5217\u5b83\u4eec\uff0c\u8fd9\u4e24\u4e2a Text \u5143\u7d20\u91cd\u53e0\u5728\u4e86\u4e00\u5757\uff0c\u4f7f\u5f97\u6211\u4eec\u65e0\u6cd5\u9605\u8bfb\u3002 \u4f7f\u7528 Column Column \u51fd\u6570\u53ef\u4ee5\u8ba9\u4f60\u5782\u76f4\u5730\u6392\u5217\u5143\u7d20,\u5728 MessageCard() \u51fd\u6570\u4e2d\u52a0\u5165 Column \u3002 \u4f60\u53ef\u4ee5\u7528 Row \u6765\u6c34\u5e73\u6392\u5217\u9879\u76ee\uff0c\u7528 Box \u6765\u5806\u53e0\u5143\u7d20\u3002 @Composable fun MessageCard ( msg : Message ) { Column { Text ( text = msg . author ) Text ( text = msg . body ) } } \u6dfb\u52a0\u4e00\u4e2a Image \u5143\u7d20 \u4e3a\u4e86\u4e30\u5bcc\u6211\u4eec\u7684 MessageCard \uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u5934\u50cf\uff0c\u4f7f\u7528\u8d44\u6e90\u7ba1\u7406\u5668\u6765\u6dfb\u52a0\u4e00\u5f20\u56fe\u7247\u5230\u5de5\u7a0b\u4e2d\u3002 \u6211\u4eec\u5c06\u4f1a\u6dfb\u52a0\u4e00\u4e2a Row() \u51fd\u6570\u6765\u8ba9\u6211\u4eec\u6709\u4e2a\u826f\u597d\u7684\u7ed3\u6784\u8bbe\u8ba1\uff0c\u5e76\u4e14\u6211\u4eec\u7684 Image \u5143\u7d20\u5c06\u4f1a\u6dfb\u52a0\u5728\u8fd9\u91cc\u9762\u3002 @Composable fun MessageCard ( msg : Message ) { Row { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" //\u8fd9\u4e2a\u63cf\u8ff0\u7528\u4e8e\u65e0\u969c\u788d ) Column { Text ( text = msg . author ) Text ( text = msg . body ) } } } \u4f18\u5316\u4f60\u7684 UI \u73b0\u5728\u6211\u4eec\u7684\u5e03\u5c40\u6709\u6b63\u786e\u7684\u7ed3\u6784\uff0c\u4f46\u662f\u5143\u7d20\u4e4b\u95f4\u6ca1\u6709\u5f88\u597d\u7684\u95f4\u9694\uff0c\u800c\u4e14\u5de6\u8fb9\u7684\u56fe\u7247\u592a\u5927\u4e86\uff0c\u4e3a\u4e86\u4fee\u9970\u548c\u914d\u7f6e\u4e00\u4e2a Composable, Compose \u4f7f\u7528\u4e86 modifiers \uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u6539\u53d8 Composable \u7684\u5c3a\u5bf8\u3001\u5e03\u5c40\u3001\u5916\u89c2\u6216\u6dfb\u52a0\u9ad8\u7ea7\u4ea4\u4e92\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u5143\u7d20\u53d8\u5f97\u53ef\u4ee5\u70b9\u51fb\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u7528\u6765\u521b\u5efa\u66f4\u4e30\u5bcc\u7684 Composables\uff0c\u63a5\u4e0b\u6765\u5c31\u8ba9\u6211\u4eec\u4f7f\u7528\u5176\u4e2d\u4e00\u4e9b\u6765\u6539\u5584\u5e03\u5c40\u3002 @Composable fun MessageCard ( msg : Message ) { Row ( modifier = Modifier . padding ( all = 8. dp ) // \u5728\u6211\u4eec\u7684 Card \u5468\u56f4\u6dfb\u52a0 padding ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) // \u6539\u53d8 Image \u5143\u7d20\u7684\u5927\u5c0f . clip ( CircleShape ) // \u5c06\u56fe\u7247\u88c1\u526a\u6210\u5706\u5f62 ) Spacer ( Modifier . padding ( horizontal = 8. dp )) // \u6dfb\u52a0\u4e00\u4e2a\u7a7a\u7684\u63a7\u4ef6\u7528\u6765\u586b\u5145\u6c34\u5e73\u95f4\u8ddd\uff0c\u8bbe\u7f6e padding \u4e3a 8.dp Column { Text ( text = msg . author ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body ) } } } 3. \u7b2c\u4e09\u6b65\uff1aMaterial design Compose \u662f\u4e3a\u652f\u6301 Material design \u539f\u5219\u800c\u5efa\u7acb\u7684\u3002\u5b83\u7684\u8bb8\u591a UI \u5143\u7d20\u90fd\u662f\u5f00\u7bb1\u5373\u7528\u7684 Material design \u3002\u5728\u8fd9\u4e00\u6b65\u4e2d\uff0c\u4f60\u5c06\u7528 Material \u5c0f\u90e8\u4ef6\u6765\u8bbe\u8ba1\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u4f7f\u7528 Material Design \u6211\u4eec\u7684 MessageCard \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u5e03\u5c40\uff0c\u4f46\u5b83\u770b\u8d77\u6765\u8fd8\u4e0d\u662f\u592a\u597d, Jetpack Compose \u63d0\u4f9b\u4e86 Material Design \u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Material Design \u7684\u98ce\u683c\u6765\u6539\u5584\u6211\u4eec\u7684 MessageCard \u3002 \u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u521b\u5efa\u7684 Material \u4e3b\u9898\u6765\u5305\u88c5\u6211\u4eec\u7684 MessageCard \u51fd\u6570\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f ExamplesTheme\u3002\u5728 @Preview \u548c setContent \u4e2d\u90fd\u6dfb\u52a0\u5b83\u3002 Material Design \u662f\u56f4\u7ed5\u4e09\u4e2a\u5143\u7d20\u5efa\u7acb\u7684\u3002\u989c\u8272\uff08Color\uff09\u3001\u6392\u7248\uff08Typography\uff09\u3001\u5f62\u72b6\uff08Shape\uff09\u3002\u8ba9\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u5730\u6dfb\u52a0\u5b83\u4eec\u3002 override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { ExamplesTheme { MessageCard ( Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" )) } } } @Preview @Composable fun PreviewMessageCard () { ExamplesTheme { MessageCard ( msg = Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" ) ) } } \u6ce8\u610f \u4e00\u4e2a\u7a7a\u7684 Compose Activity \u5df2\u7ecf\u81ea\u52a8\u4e3a\u4f60\u7684\u9879\u76ee\u751f\u6210\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898\uff0c\u5141\u8bb8\u4f60\u81ea\u5b9a\u4e49 MaterialTheme\u3002\u5982\u679c\u4f60\u7ed9\u4f60\u7684\u9879\u76ee\u547d\u540d\u4e0e ExamplesTheme \u4e0d\u540c\uff0c\u4f60\u53ef\u4ee5\u5728 ui.theme \u5305\u4e2d\u627e\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u4e3b\u9898\u3002 \u989c\u8272\uff08Color\uff09 \u4f7f\u7528\u5305\u88c5\u597d\u7684\u4e3b\u9898\u4e2d\u7684\u989c\u8272\u8fdb\u884c\u4fee\u9970\u5f88\u5bb9\u6613\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u9700\u8981\u989c\u8272\u7684\u5730\u65b9\u4f7f\u7528\u4e3b\u9898\u4e2d\u7684\u503c\u3002 \u8ba9\u6211\u4eec\u5bf9\u6807\u9898\u8fdb\u884c\u4fee\u9970\uff0c\u5e76\u4e3a\u56fe\u7247\u6dfb\u52a0\u8fb9\u6846\u3002 Row ( modifier = Modifier . padding ( all = 8. dp ) ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) . clip ( CircleShape ) . border ( 1.5 . dp , MaterialTheme . colors . secondary , shape = CircleShape ) // \u6dfb\u52a0\u8fb9\u6846 ) Spacer ( Modifier . padding ( horizontal = 8. dp )) Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant // \u6dfb\u52a0\u989c\u8272 ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body ) } } \u6392\u7248\uff08Typography\uff09 Material Typography \u98ce\u683c\u5728 MaterialTheme \u4e2d\u662f\u53ef\u7528\u7684\uff0c\u53ea\u8981\u628a\u5b83\u4eec\u6dfb\u52a0\u5230 Text composables \u4e2d\u3002 Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant , style = MaterialTheme . typography . subtitle2 // \u6dfb\u52a0 style ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body , style = MaterialTheme . typography . body2 // \u6dfb\u52a0 style ) } \u5f62\u72b6\uff08Shape\uff09 \u6709\u4e86\u5f62\u72b6\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u6700\u540e\u7684\u4fee\u9970\u3002\u6211\u4eec\u4e3a\u6574\u4e2a MessageCard \u5b9e\u73b0\u4e86\u4e00\u4e2a\u5361\u7247\u5f0f\u7684\u8bbe\u8ba1 @Composable fun MessageCard ( msg : Message ) { Surface ( shape = MaterialTheme . shapes . medium , // \u4f7f\u7528 MaterialTheme \u81ea\u5e26\u7684\u5f62\u72b6 elevation = 5. dp , modifier = Modifier . padding ( all = 8. dp ) ) { Row ( modifier = Modifier . padding ( all = 8. dp ) ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) . clip ( CircleShape ) . border ( 1.5 . dp , MaterialTheme . colors . secondary , shape = CircleShape ) ) Spacer ( Modifier . padding ( horizontal = 8. dp )) Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant , style = MaterialTheme . typography . subtitle2 ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body , style = MaterialTheme . typography . body2 ) } } } } \u542f\u7528\u6df1\u8272\u4e3b\u9898 \u6df1\u8272\u4e3b\u9898\uff08\u6216\u591c\u95f4\u6a21\u5f0f\uff09\u53ef\u4ee5\u907f\u514d\u660e\u4eae\u7684\u663e\u793a\uff0c\u7279\u522b\u662f\u5728\u665a\u4e0a\uff0c\u6216\u8005\u53ea\u662f\u4e3a\u4e86\u8282\u7701\u8bbe\u5907\u7684\u7535\u6c60\u3002\u7531\u4e8e\u652f\u6301 Material Design \uff0cJetpack Compose \u9ed8\u8ba4\u53ef\u4ee5\u5904\u7406\u6df1\u8272\u4e3b\u9898\u3002\u5728\u4f7f\u7528\u4e86 Material \u989c\u8272\u540e\uff0c\u6587\u672c\u548c\u80cc\u666f\u5c06\u81ea\u52a8\u9002\u5e94\u9ed1\u6697\u7684\u80cc\u666f\u3002 \u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u6587\u4ef6\u4e2d\u521b\u5efa\u591a\u4e2a\u9884\u89c8\uff0c\u4f5c\u4e3a\u5355\u72ec\u7684\u51fd\u6570\uff0c\u6216\u8005\u5728\u540c\u4e00\u4e2a\u51fd\u6570\u4e2d\u6dfb\u52a0\u591a\u4e2a\u6ce8\u89e3\u3002 \u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u9884\u89c8\u6ce8\u89e3\u5e76\u5728\u624b\u673a\u4e0a\u6216\u8005\u865a\u62df\u673a\u4e0a\u542f\u7528\u591c\u95f4\u6a21\u5f0f\u3002 @Preview ( name = \"Light Mode\" ) @Preview ( uiMode = Configuration . UI_MODE_NIGHT_YES , showBackground = true , name = \"Dark Mode\" ) @Composable fun PreviewMessageCard () { ExamplesTheme { MessageCard ( msg = Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" ) ) } } \u6d45\u8272\u548c\u6df1\u8272\u4e3b\u9898\u7684\u989c\u8272\u9009\u62e9\u662f\u5728 IDE \u751f\u6210\u7684 Theme.kt \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a MessageCard \u5143\u7d20\uff0c\u5b83\u53ef\u4ee5\u663e\u793a\u4e00\u4e2a\u56fe\u50cf\u548c\u4e24\u4e2a\u4e0d\u540c\u98ce\u683c\u7684\u6587\u672c\uff0c\u800c\u4e14\u5728\u6d45\u8272\u548c\u6df1\u8272\u4e3b\u9898\u4e2d\u90fd\u770b\u8d77\u6765\u5f88\u597d 4. \u5217\u8868\u548c\u52a8\u753b \u521b\u5efa\u4e00\u4e2a\u5217\u8868\u6d88\u606f\u5361\u7247 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u6d88\u606f\u7684\u5361\u7247\uff0c\u770b\u4e0a\u53bb\u6709\u70b9\u5355\u8c03\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u6539\u5584\u5b83\uff0c\u8ba9\u5b83\u62e5\u6709\u591a\u6761\u4fe1\u606f\u3002\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u80fd\u591f\u663e\u793a\u591a\u6761\u6d88\u606f\u7684\u51fd\u6570\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Compose \u7684 LazyColumn \u548c LazyRow\u3002\u8fd9\u4e9b Composable \u53ea\u6e32\u67d3\u5c4f\u5e55\u4e0a\u53ef\u89c1\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u8bbe\u8ba1\u5bf9\u4e8e\u957f\u5217\u8868\u6765\u8bf4\u5f88\u6709\u6548\u679c\u3002\u540c\u65f6\uff0c\u5b83\u4eec\u907f\u514d\u4e86 RecyclerView \u4e0e XML \u5e03\u5c40\u7684\u590d\u6742\u6027\u3002 import androidx.compose.foundation.lazy.items @Composable fun Conversation ( messages : List < Message > ) { LazyColumn { items ( messages ) { message -> MessageCard ( msg = message ) } } } @Composable fun PreviewMessageCard () { ExamplesTheme { Conversation ( messages = MsgData . messages ) } } \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u83b7\u53d6 MsgData \u7684\u4ee3\u7801 \u5728\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230 LazyColumn \u6709\u4e00\u4e2a items \u5b50\u9879\u3002\u5b83\u63a5\u6536\u4e00\u4e2a List \u4f5c\u4e3a\u53c2\u6570\uff0c\u5b83\u7684 lambda \u63a5\u6536\u4e00\u4e2a\u6211\u4eec\u547d\u540d\u4e3a message \u7684\u53c2\u6570\uff08\u6211\u4eec\u53ef\u4ee5\u968f\u4fbf\u547d\u540d\uff09\u3002 \u800c\u8fd9\u4e2a lambda \u5c06\u4f1a\u8c03\u7528\u6bcf\u4e2a List \u4e2d\u91cc\u9762\u63d0\u4f9b\u7684 item\u3002 \u53ef\u4ea4\u4e92\u7684\u52a8\u753b\u6548\u679c \u6211\u4eec\u7684\u5bf9\u8bdd\u8d8a\u6765\u8d8a\u6709\u8da3\u4e86\uff0c\u662f\u65f6\u5019\u73a9\u73a9\u52a8\u753b\u4e86! \u6211\u4eec\u5c06\u4f1a\u5b9e\u73b0\u5f53\u70b9\u51fb\u4e00\u4e2a\u5361\u7247\u67e5\u770b\u8be6\u7ec6\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u4f7f\u5185\u5bb9\u7684\u5927\u5c0f\u548c\u80cc\u666f\u989c\u8272\u90fd\u6709\u52a8\u753b\u6548\u679c\u3002\u4e3a\u4e86\u5b58\u50a8\u8fd9\u4e2a\u672c\u5730 UI \u72b6\u6001\uff0c\u6211\u4eec\u9700\u8981\u8ddf\u8e2a\u4e00\u6761\u6d88\u606f\u662f\u5426\u5df2\u7ecf\u5c55\u5f00\u4e86\u3002\u4e3a\u4e86\u8ddf\u8e2a\u8fd9\u79cd\u72b6\u6001\u53d8\u5316\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 remember \u548c mutableStateOf \u51fd\u6570\u3002 Composable \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 remember \u5c06\u672c\u5730\u72b6\u6001\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u8ddf\u8e2a\u4f20\u9012\u7ed9 mutableStateOf \u7684\u503c\u7684\u53d8\u5316\u3002\u5f53\u503c\u88ab\u66f4\u65b0\u65f6\uff0c\u4f7f\u7528\u8be5\u72b6\u6001\u7684 Composable \u51fd\u6570\uff08\u53ca\u5176\u5b50\u51fd\u6570\uff09\u5c06\u88ab\u81ea\u52a8\u91cd\u65b0\u7ed8\u5236\u3002\u6211\u4eec\u628a\u8fd9\u79f0\u4e3a\u91cd\u7ec4\uff08recomposition\uff09\u3002 \u901a\u8fc7\u4f7f\u7528 Compose \u7684\u72b6\u6001 API\uff0c\u5982 remember \u548c mutableStateOf\uff0c\u4efb\u4f55\u5bf9\u72b6\u6001\u7684\u6539\u53d8\u90fd\u4f1a\u81ea\u52a8\u66f4\u65b0 UI\u3002 @Composable fun MessageCard ( msg : Message ) { var isExpanded by remember { mutableStateOf ( false ) } // \u521b\u5efa\u4e00\u4e2a\u80fd\u591f\u68c0\u6d4b\u5361\u7247\u662f\u5426\u88ab\u5c55\u5f00\u7684\u53d8\u91cf Surface ( shape = MaterialTheme . shapes . medium , elevation = 5. dp , modifier = Modifier . padding ( all = 8. dp ) . clickable { // \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 Modifier \u6269\u5c55\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u5143\u7d20\u5177\u6709\u70b9\u51fb\u7684\u6548\u679c isExpanded = ! isExpanded // \u7f16\u5199\u70b9\u51fb\u7684\u4e8b\u4ef6\u5185\u5bb9 } ) { Row ( modifier = Modifier . padding ( all = 8. dp ) ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) . clip ( CircleShape ) . border ( 1.5 . dp , MaterialTheme . colors . secondary , shape = CircleShape ) ) Spacer ( Modifier . padding ( horizontal = 8. dp )) Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant , style = MaterialTheme . typography . subtitle2 ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body , style = MaterialTheme . typography . body2 , // \u4fee\u6539 maxLines \u53c2\u6570\uff0c\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u663e\u793a\u4e00\u884c\u6587\u672c\u5185\u5bb9 maxLines = if ( isExpanded ) Int . MAX_VALUE else 1 , // Composable \u5927\u5c0f\u7684\u52a8\u753b\u6548\u679c modifier = Modifier . animateContentSize () ) } } } } \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u5b8c\u6210\u6bcf\u4e2a\u5361\u7247\u7684\u68c0\u6d4b\u4e86\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528 isExpanded \u6765\u505a\u70b9\u5176\u4ed6\u7684\u4e8b\u60c5\u5427\uff01\u6bd4\u5982\u6539\u53d8\u5361\u7247\u7684\u989c\u8272 // \u521b\u5efa\u4e00\u4e2a\u80fd\u591f\u6839\u636e isExpanded \u53d8\u91cf\u503c\u800c\u6539\u53d8\u989c\u8272\u7684\u53d8\u91cf val surfaceColor by animateColorAsState ( targetValue = if ( isExpanded ) Color ( 0 xFFCCCCCC ) else MaterialTheme . colors . surface ) Surface ( shape = MaterialTheme . shapes . medium , elevation = 5. dp , modifier = Modifier . padding ( all = 8. dp ) . clickable { isExpanded = ! isExpanded }, color = surfaceColor ) { ... ... } 5. \u5b8c\u6210 \u606d\u559c\u4f60\uff0c\u770b\u5230\u8fd9\u91cc \u4f60\u5df2\u7ecf\u5b66\u4f1a\u4e86 Compose \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4fe1\u606f\u5c4f\u5e55\uff0c\u5e76\u4e14\u6709\u6548\u5730\u663e\u793a\u4e86\u4e00\u4e2a\u5305\u542b\u56fe\u7247\u548c\u6587\u5b57\u7684\u5217\u8868\uff0c\u6309\u7167 Material Design \u7684\u98ce\u683c\u8bbe\u8ba1\uff0c\u5305\u62ec\u4e00\u4e2a\u6df1\u8272\u4e3b\u9898\u548c\u9884\u89c8\uff0c\u4ee5\u4e0b\u90fd\u662f\u4f60\u901a\u8fc7 100 \u884c\u4ee5\u5185\u7684\u4ee3\u7801\u6765\u5b8c\u6210\u7684\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\u4f60\u5b66\u5230\u7684\u5185\u5bb9 \u5b9a\u4e49\u4e00\u4e2a Composable \u51fd\u6570 \u5728\u4f60\u7684 Composable \u51fd\u6570\u4e2d\u6dfb\u52a0\u4e0d\u540c\u7684\u5143\u7d20 \u4f7f\u7528\u5e03\u5c40 Composable \u6765\u6784\u5efa\u4f60\u7684 UI \u7ed3\u6784 \u901a\u8fc7 modifiers \u6765\u6269\u5c55\u4f60\u7684 Composables \u521b\u5efa\u4e00\u4e2a\u6709\u6548\u5217\u8868 \u8ffd\u8e2a\u72b6\u6001\uff0c\u5e76\u4e14\u4fee\u6539\u5b83 \u5728\u4e00\u4e2a Composable \u4e0a\u6dfb\u52a0\u4e86\u7528\u6237\u4e92\u52a8 \u5728\u6269\u5c55\u4fe1\u606f\u7684\u540c\u65f6\u8fdb\u884c\u4e86\u52a8\u753b\u5904\u7406 \u8fd9\u7bc7\u6587\u7ae0\u7684\u6240\u6709\u4ee3\u7801\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230 \u5982\u679c\u4f60\u60f3\u6df1\u5165\u4e86\u89e3\u5176\u4e2d\u7684\u4e00\u4e9b\u6b65\u9aa4\uff0c\u8bf7\u63a2\u7d22\u4e0b\u9762\u7684\u8d44\u6e90\u3002 \u57fa\u7840 Compose \u7f16\u7a0b\u601d\u60f3 \u72b6\u6001\u7ba1\u7406 \u751f\u547d\u5468\u671f \u8d1f\u9762\u5f71\u54cd \u67b6\u6784\u5206\u5c42 \u8bed\u4e49 CompositionLocal \u8bbe\u8ba1 \u5e03\u5c40\u6982\u8ff0 \u52a8\u753b\u6982\u8ff0 \u4e3b\u9898\u6982\u8ff0 \u624b\u52bf\u6982\u8ff0 \u5217\u8868\u6982\u8ff0","title":"\u5feb\u901f\u5165\u95e8"},{"location":"tutorial/#_1","text":"Jetpack Compose \u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa\u539f\u751f Android UI \u7684\u73b0\u4ee3\u5de5\u5177\u5305\u3002 Jetpack Compose \u7528\u66f4\u5c11\u7684\u4ee3\u7801\u3001\u5f3a\u5927\u7684\u5de5\u5177\u548c\u76f4\u89c2\u7684 Kotlin API \u7b80\u5316\u5e76\u52a0\u901f\u4e86 Android \u4e0a\u7684 UI \u5f00\u53d1\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u4f60\u5c06\u7528\u58f0\u660e\u5f0f\u51fd\u6570\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 UI \u7ec4\u4ef6\u3002\u4f60\u5c06\u4e0d\u4f1a\u7f16\u8f91\u4efb\u4f55 XML \u5e03\u5c40\u6216\u4f7f\u7528\u5e03\u5c40\u7f16\u8f91\u5668\u3002\u76f8\u53cd\uff0c\u4f60\u5c06\u8c03\u7528 Jetpack Compose \u51fd\u6570\u6765\u8bf4\u660e\u4f60\u60f3\u8981\u7684\u5143\u7d20\uff0c\u5269\u4e0b\u7684\u5c31\u7531 Compose \u7f16\u8bd1\u5668\u6765\u5b8c\u6210\u3002 \u6ce8\u610f \u8bf7\u53c2\u9605 Jetpack \u53d1\u5e03 \u8bf4\u660e\uff0c\u4e86\u89e3\u6700\u65b0\u7684\u66f4\u65b0\u3002","title":"\u4ecb\u7ecd"},{"location":"tutorial/#1-composable","text":"Jetpack Compose \u662f\u56f4\u7ed5\u7740 Composable \u51fd\u6570\u5efa\u7acb\u7684\u3002\u8fd9\u4e9b\u51fd\u6570\u8ba9\u4f60\u901a\u8fc7\u63cf\u8ff0\u5b83\u7684\u5f62\u72b6\u548c\u6570\u636e\u4f9d\u8d56\u6027\uff0c\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u5b9a\u4e49\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7528\u6237\u754c\u9762\uff0c\u800c\u4e0d\u662f\u4e13\u6ce8\u4e8e\u7528\u6237\u754c\u9762\u7684\u6784\u5efa\u8fc7\u7a0b\u3002\u8981\u521b\u5efa\u4e00\u4e2a Composable \u51fd\u6570\uff0c\u53ea\u9700\u5728\u51fd\u6570\u540d\u79f0\u4e2d\u6dfb\u52a0 @Composable \u6ce8\u89e3\u3002","title":"1. \u7b2c\u4e00\u6b65\uff1aComposable \u51fd\u6570"},{"location":"tutorial/#text","text":"\u9996\u5148\uff0c\u6211\u4eec\u4f1a\u5728 onCreate \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4e00\u4e2a Text \u5143\u7d20\u6765\u663e\u793a\u4e00\u4e2a \"Hello World!\" \u7684\u6587\u672c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u5185\u5bb9\u5757\uff0c\u7136\u540e\u8c03\u7528 Text() \u51fd\u6570\u6765\u505a\u5230 setContent \u5757\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 Composable \u51fd\u6570\u7684 avtivity \u7684\u5e03\u5c40\uff0cComposable \u51fd\u6570\u53ea\u80fd\u4ece\u5176\u4ed6\u7684 Composable \u51fd\u6570\u4e2d\u8c03\u7528 Jetpack Compose \u4f7f\u7528\u4e00\u4e2a Kotlin \u7f16\u8bd1\u5668\u63d2\u4ef6\u6765\u5c06\u8fd9\u4e9b Composable \u51fd\u6570\u8f6c\u5316\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684 UI \u5143\u7d20\u3002\u4f8b\u5982\uff0c\u7531 Compose UI \u5e93\u5b9a\u4e49\u7684 Text() \u51fd\u6570\u5c31\u53ef\u4ee5\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u4e00\u4e2a\u6587\u672c\u6807\u7b7e\u3002 class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { Text ( \"Hello world!\" ) } } }","title":"\u6dfb\u52a0\u4e00\u4e2a Text \u5143\u7d20"},{"location":"tutorial/#composable","text":"Composable \u51fd\u6570\u53ea\u80fd\u4ece\u5176\u4ed6 Composable \u51fd\u6570\u7684\u8303\u56f4\u5185\u8c03\u7528\u3002\u8981\u5199\u4e00\u4e2a Composable \u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a @Composable \u7684\u6ce8\u89e3\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a MessageCard() \u51fd\u6570\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u4e2a name \u53c2\u6570\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u53c2\u6570\u6765\u914d\u7f6e\u6587\u672c\u5143\u7d20 class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { MessageCard ( \"Android\" ) } } } @Composable fun MessageCard ( name : String ) { // Composable \u51fd\u6570\u4e00\u822c\u7528\u5927\u5199\u5f00\u5934\uff0c\u4e3a\u4e86\u548c\u666e\u901a\u7684\u51fd\u6570\u4f5c\u4e3a\u533a\u5206 Text ( text = \"Hello $ name \" ) }","title":"\u5b9a\u4e49\u4e00\u4e2a composable \u51fd\u6570"},{"location":"tutorial/#android-studio","text":"Android Studio \u53ef\u4ee5\u8ba9\u4f60\u5728 IDE \u4e2d\u9884\u89c8\u4f60\u7684 Composable \u51fd\u6570\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u5e94\u7528\u4e0b\u8f7d\u5230 Android \u8bbe\u5907\u6216\u6a21\u62df\u5668\u4e0a\u3002\u4f46\u662f\u6709\u4e2a\u9650\u5236, \u9700\u8981\u9884\u89c8\u7684 Composable \u51fd\u6570\u5fc5\u987b\u4e0d\u80fd\u6709\u4efb\u4f55\u53c2\u6570\u3002\u56e0\u4e3a\u8fd9\u4e2a\u9650\u5236\uff0c\u4f60\u4e0d\u80fd\u76f4\u63a5\u9884\u89c8 MessageCard() \u51fd\u6570\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5199\u7b2c\u4e00\u4e2a\u53eb PreviewMessageCard() \u7684\u51fd\u6570\uff0c\u5b83\u8c03\u7528\u5e26\u6709\u53c2\u6570\u7684 MessageCard() \u3002\u5728 @Composable \u4e4b\u524d\u6dfb\u52a0 @Preview \u6ce8\u89e3\u3002 @Composable fun MessageCard ( name : String ) { Text ( text = \"Hello $ name !\" ) } @Preview @Composable fun PreviewMessageCard () { MessageCard ( \"Android\" ) } \u91cd\u65b0\u8fd0\u884c\u4f60\u7684\u9879\u76ee\uff0capp \u672c\u8eab\u5e76\u6ca1\u6709\u6539\u53d8\uff0c\u56e0\u4e3a\u65b0\u7684 PreviewMessageCard() \u51fd\u6570\u5e76\u6ca1\u6709\u5728\u4efb\u4f55\u5730\u65b9\u88ab\u8c03\u7528\uff0c\u4f46 Android Studio \u589e\u52a0\u4e86\u4e00\u4e2a\u9884\u89c8\u7a97\u53e3\u3002\u8fd9\u4e2a\u7a97\u53e3\u663e\u793a\u4e86\u7531\u6807\u6709 @Preview \u6ce8\u89e3\u7684 Composable \u51fd\u6570\u521b\u5efa\u7684 UI \u5143\u7d20\u7684\u9884\u89c8\u3002\u5982\u679c\u4f60\u9700\u8981\u5728\u4efb\u4f55\u65f6\u5019\u66f4\u65b0\u9884\u89c8\uff0c\u8bf7\u70b9\u51fb\u9884\u89c8\u7a97\u53e3\u9876\u90e8\u7684\u5237\u65b0\u6309\u94ae\u3002","title":"\u5728 Android Studio \u4e2d\u9884\u89c8\u4f60\u7684\u51fd\u6570"},{"location":"tutorial/#2","text":"UI \u5143\u7d20\u662f\u5206\u5c42\u6b21\u7684\uff0c\u5143\u7d20\u5305\u542b\u5728\u5176\u4ed6\u5143\u7d20\u4e2d\u3002\u5728 Compose \u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ece\u5176\u4ed6 Composable \u51fd\u6570\u4e2d\u8c03\u7528 Composable \u51fd\u6570\u6765\u5efa\u7acb\u4e00\u4e2a UI \u5c42\u6b21\u7ed3\u6784\u3002","title":"2. \u7b2c\u4e8c\u6b65\uff1a\u754c\u9762"},{"location":"tutorial/#_2","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a Composable \u7684\u51fd\u6570\u548c\u9884\u89c8! \u4e3a\u4e86\u53d1\u73b0\u66f4\u591a\u7684 Jetpack Compose \u529f\u80fd\uff0c\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6d88\u606f\u5c4f\u5e55\uff0c\u5176\u4e2d\u5305\u542b\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u52a8\u753b\u5c55\u5f00\u7684\u6d88\u606f\u5217\u8868\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u901a\u8fc7\u663e\u793a\u4f5c\u8005\u7684\u540d\u5b57\u548c\u4fe1\u606f\u5185\u5bb9\uff0c\u4f7f\u6211\u4eec\u7684 MessageCard \u51fd\u6570\u66f4\u4e30\u5bcc\u3002\u6211\u4eec\u9996\u5148\u9700\u8981\u6539\u53d8\u6211\u4eec\u7684\u51fd\u6570\u53c2\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a\u6d88\u606f\u5bf9\u8c61\u800c\u4e0d\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5728 MessageCard \u51fd\u6570\u4e2d\u6dfb\u52a0\u53e6\u4e00\u4e2a Text \u51fd\u6570\u3002\u786e\u4fdd\u4e5f\u8981\u66f4\u65b0\u9884\u89c8\u3002 data class Message ( val author : String , val body : String ) @Composable fun MessageCard ( msg : Message ) { Text ( text = msg . author ) Text ( text = msg . body ) } @Preview @Composable fun PreviewMessageCard () { MessageCard ( msg = Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" ) ) } \u8fd9\u6bb5\u4ee3\u7801\u5728 app \u5185\u521b\u5efa\u4e86\u4e24\u4e2a Text \u5143\u7d20\u3002\u7136\u800c\uff0c\u7531\u4e8e\u6211\u4eec\u5e76\u6ca1\u6709\u5b89\u6392\u5982\u4f55\u6392\u5217\u5b83\u4eec\uff0c\u8fd9\u4e24\u4e2a Text \u5143\u7d20\u91cd\u53e0\u5728\u4e86\u4e00\u5757\uff0c\u4f7f\u5f97\u6211\u4eec\u65e0\u6cd5\u9605\u8bfb\u3002","title":"\u6dfb\u52a0\u591a\u4e2a\u6587\u672c"},{"location":"tutorial/#column","text":"Column \u51fd\u6570\u53ef\u4ee5\u8ba9\u4f60\u5782\u76f4\u5730\u6392\u5217\u5143\u7d20,\u5728 MessageCard() \u51fd\u6570\u4e2d\u52a0\u5165 Column \u3002 \u4f60\u53ef\u4ee5\u7528 Row \u6765\u6c34\u5e73\u6392\u5217\u9879\u76ee\uff0c\u7528 Box \u6765\u5806\u53e0\u5143\u7d20\u3002 @Composable fun MessageCard ( msg : Message ) { Column { Text ( text = msg . author ) Text ( text = msg . body ) } }","title":"\u4f7f\u7528 Column"},{"location":"tutorial/#image","text":"\u4e3a\u4e86\u4e30\u5bcc\u6211\u4eec\u7684 MessageCard \uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u5934\u50cf\uff0c\u4f7f\u7528\u8d44\u6e90\u7ba1\u7406\u5668\u6765\u6dfb\u52a0\u4e00\u5f20\u56fe\u7247\u5230\u5de5\u7a0b\u4e2d\u3002 \u6211\u4eec\u5c06\u4f1a\u6dfb\u52a0\u4e00\u4e2a Row() \u51fd\u6570\u6765\u8ba9\u6211\u4eec\u6709\u4e2a\u826f\u597d\u7684\u7ed3\u6784\u8bbe\u8ba1\uff0c\u5e76\u4e14\u6211\u4eec\u7684 Image \u5143\u7d20\u5c06\u4f1a\u6dfb\u52a0\u5728\u8fd9\u91cc\u9762\u3002 @Composable fun MessageCard ( msg : Message ) { Row { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" //\u8fd9\u4e2a\u63cf\u8ff0\u7528\u4e8e\u65e0\u969c\u788d ) Column { Text ( text = msg . author ) Text ( text = msg . body ) } } }","title":"\u6dfb\u52a0\u4e00\u4e2a Image \u5143\u7d20"},{"location":"tutorial/#ui","text":"\u73b0\u5728\u6211\u4eec\u7684\u5e03\u5c40\u6709\u6b63\u786e\u7684\u7ed3\u6784\uff0c\u4f46\u662f\u5143\u7d20\u4e4b\u95f4\u6ca1\u6709\u5f88\u597d\u7684\u95f4\u9694\uff0c\u800c\u4e14\u5de6\u8fb9\u7684\u56fe\u7247\u592a\u5927\u4e86\uff0c\u4e3a\u4e86\u4fee\u9970\u548c\u914d\u7f6e\u4e00\u4e2a Composable, Compose \u4f7f\u7528\u4e86 modifiers \uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u6539\u53d8 Composable \u7684\u5c3a\u5bf8\u3001\u5e03\u5c40\u3001\u5916\u89c2\u6216\u6dfb\u52a0\u9ad8\u7ea7\u4ea4\u4e92\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u5143\u7d20\u53d8\u5f97\u53ef\u4ee5\u70b9\u51fb\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u7528\u6765\u521b\u5efa\u66f4\u4e30\u5bcc\u7684 Composables\uff0c\u63a5\u4e0b\u6765\u5c31\u8ba9\u6211\u4eec\u4f7f\u7528\u5176\u4e2d\u4e00\u4e9b\u6765\u6539\u5584\u5e03\u5c40\u3002 @Composable fun MessageCard ( msg : Message ) { Row ( modifier = Modifier . padding ( all = 8. dp ) // \u5728\u6211\u4eec\u7684 Card \u5468\u56f4\u6dfb\u52a0 padding ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) // \u6539\u53d8 Image \u5143\u7d20\u7684\u5927\u5c0f . clip ( CircleShape ) // \u5c06\u56fe\u7247\u88c1\u526a\u6210\u5706\u5f62 ) Spacer ( Modifier . padding ( horizontal = 8. dp )) // \u6dfb\u52a0\u4e00\u4e2a\u7a7a\u7684\u63a7\u4ef6\u7528\u6765\u586b\u5145\u6c34\u5e73\u95f4\u8ddd\uff0c\u8bbe\u7f6e padding \u4e3a 8.dp Column { Text ( text = msg . author ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body ) } } }","title":"\u4f18\u5316\u4f60\u7684 UI"},{"location":"tutorial/#3-material-design","text":"Compose \u662f\u4e3a\u652f\u6301 Material design \u539f\u5219\u800c\u5efa\u7acb\u7684\u3002\u5b83\u7684\u8bb8\u591a UI \u5143\u7d20\u90fd\u662f\u5f00\u7bb1\u5373\u7528\u7684 Material design \u3002\u5728\u8fd9\u4e00\u6b65\u4e2d\uff0c\u4f60\u5c06\u7528 Material \u5c0f\u90e8\u4ef6\u6765\u8bbe\u8ba1\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002","title":"3. \u7b2c\u4e09\u6b65\uff1aMaterial design"},{"location":"tutorial/#material-design","text":"\u6211\u4eec\u7684 MessageCard \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u5e03\u5c40\uff0c\u4f46\u5b83\u770b\u8d77\u6765\u8fd8\u4e0d\u662f\u592a\u597d, Jetpack Compose \u63d0\u4f9b\u4e86 Material Design \u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Material Design \u7684\u98ce\u683c\u6765\u6539\u5584\u6211\u4eec\u7684 MessageCard \u3002 \u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u521b\u5efa\u7684 Material \u4e3b\u9898\u6765\u5305\u88c5\u6211\u4eec\u7684 MessageCard \u51fd\u6570\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f ExamplesTheme\u3002\u5728 @Preview \u548c setContent \u4e2d\u90fd\u6dfb\u52a0\u5b83\u3002 Material Design \u662f\u56f4\u7ed5\u4e09\u4e2a\u5143\u7d20\u5efa\u7acb\u7684\u3002\u989c\u8272\uff08Color\uff09\u3001\u6392\u7248\uff08Typography\uff09\u3001\u5f62\u72b6\uff08Shape\uff09\u3002\u8ba9\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u5730\u6dfb\u52a0\u5b83\u4eec\u3002 override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { ExamplesTheme { MessageCard ( Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" )) } } } @Preview @Composable fun PreviewMessageCard () { ExamplesTheme { MessageCard ( msg = Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" ) ) } } \u6ce8\u610f \u4e00\u4e2a\u7a7a\u7684 Compose Activity \u5df2\u7ecf\u81ea\u52a8\u4e3a\u4f60\u7684\u9879\u76ee\u751f\u6210\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7684\u4e3b\u9898\uff0c\u5141\u8bb8\u4f60\u81ea\u5b9a\u4e49 MaterialTheme\u3002\u5982\u679c\u4f60\u7ed9\u4f60\u7684\u9879\u76ee\u547d\u540d\u4e0e ExamplesTheme \u4e0d\u540c\uff0c\u4f60\u53ef\u4ee5\u5728 ui.theme \u5305\u4e2d\u627e\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u4e3b\u9898\u3002","title":"\u4f7f\u7528 Material Design"},{"location":"tutorial/#color","text":"\u4f7f\u7528\u5305\u88c5\u597d\u7684\u4e3b\u9898\u4e2d\u7684\u989c\u8272\u8fdb\u884c\u4fee\u9970\u5f88\u5bb9\u6613\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u9700\u8981\u989c\u8272\u7684\u5730\u65b9\u4f7f\u7528\u4e3b\u9898\u4e2d\u7684\u503c\u3002 \u8ba9\u6211\u4eec\u5bf9\u6807\u9898\u8fdb\u884c\u4fee\u9970\uff0c\u5e76\u4e3a\u56fe\u7247\u6dfb\u52a0\u8fb9\u6846\u3002 Row ( modifier = Modifier . padding ( all = 8. dp ) ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) . clip ( CircleShape ) . border ( 1.5 . dp , MaterialTheme . colors . secondary , shape = CircleShape ) // \u6dfb\u52a0\u8fb9\u6846 ) Spacer ( Modifier . padding ( horizontal = 8. dp )) Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant // \u6dfb\u52a0\u989c\u8272 ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body ) } }","title":"\u989c\u8272\uff08Color\uff09"},{"location":"tutorial/#typography","text":"Material Typography \u98ce\u683c\u5728 MaterialTheme \u4e2d\u662f\u53ef\u7528\u7684\uff0c\u53ea\u8981\u628a\u5b83\u4eec\u6dfb\u52a0\u5230 Text composables \u4e2d\u3002 Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant , style = MaterialTheme . typography . subtitle2 // \u6dfb\u52a0 style ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body , style = MaterialTheme . typography . body2 // \u6dfb\u52a0 style ) }","title":"\u6392\u7248\uff08Typography\uff09"},{"location":"tutorial/#shape","text":"\u6709\u4e86\u5f62\u72b6\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u6700\u540e\u7684\u4fee\u9970\u3002\u6211\u4eec\u4e3a\u6574\u4e2a MessageCard \u5b9e\u73b0\u4e86\u4e00\u4e2a\u5361\u7247\u5f0f\u7684\u8bbe\u8ba1 @Composable fun MessageCard ( msg : Message ) { Surface ( shape = MaterialTheme . shapes . medium , // \u4f7f\u7528 MaterialTheme \u81ea\u5e26\u7684\u5f62\u72b6 elevation = 5. dp , modifier = Modifier . padding ( all = 8. dp ) ) { Row ( modifier = Modifier . padding ( all = 8. dp ) ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) . clip ( CircleShape ) . border ( 1.5 . dp , MaterialTheme . colors . secondary , shape = CircleShape ) ) Spacer ( Modifier . padding ( horizontal = 8. dp )) Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant , style = MaterialTheme . typography . subtitle2 ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body , style = MaterialTheme . typography . body2 ) } } } }","title":"\u5f62\u72b6\uff08Shape\uff09"},{"location":"tutorial/#_3","text":"\u6df1\u8272\u4e3b\u9898\uff08\u6216\u591c\u95f4\u6a21\u5f0f\uff09\u53ef\u4ee5\u907f\u514d\u660e\u4eae\u7684\u663e\u793a\uff0c\u7279\u522b\u662f\u5728\u665a\u4e0a\uff0c\u6216\u8005\u53ea\u662f\u4e3a\u4e86\u8282\u7701\u8bbe\u5907\u7684\u7535\u6c60\u3002\u7531\u4e8e\u652f\u6301 Material Design \uff0cJetpack Compose \u9ed8\u8ba4\u53ef\u4ee5\u5904\u7406\u6df1\u8272\u4e3b\u9898\u3002\u5728\u4f7f\u7528\u4e86 Material \u989c\u8272\u540e\uff0c\u6587\u672c\u548c\u80cc\u666f\u5c06\u81ea\u52a8\u9002\u5e94\u9ed1\u6697\u7684\u80cc\u666f\u3002 \u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u6587\u4ef6\u4e2d\u521b\u5efa\u591a\u4e2a\u9884\u89c8\uff0c\u4f5c\u4e3a\u5355\u72ec\u7684\u51fd\u6570\uff0c\u6216\u8005\u5728\u540c\u4e00\u4e2a\u51fd\u6570\u4e2d\u6dfb\u52a0\u591a\u4e2a\u6ce8\u89e3\u3002 \u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u9884\u89c8\u6ce8\u89e3\u5e76\u5728\u624b\u673a\u4e0a\u6216\u8005\u865a\u62df\u673a\u4e0a\u542f\u7528\u591c\u95f4\u6a21\u5f0f\u3002 @Preview ( name = \"Light Mode\" ) @Preview ( uiMode = Configuration . UI_MODE_NIGHT_YES , showBackground = true , name = \"Dark Mode\" ) @Composable fun PreviewMessageCard () { ExamplesTheme { MessageCard ( msg = Message ( \"Jetpack Compose \u535a\u7269\u9986\" , \"\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5566\" ) ) } } \u6d45\u8272\u548c\u6df1\u8272\u4e3b\u9898\u7684\u989c\u8272\u9009\u62e9\u662f\u5728 IDE \u751f\u6210\u7684 Theme.kt \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a MessageCard \u5143\u7d20\uff0c\u5b83\u53ef\u4ee5\u663e\u793a\u4e00\u4e2a\u56fe\u50cf\u548c\u4e24\u4e2a\u4e0d\u540c\u98ce\u683c\u7684\u6587\u672c\uff0c\u800c\u4e14\u5728\u6d45\u8272\u548c\u6df1\u8272\u4e3b\u9898\u4e2d\u90fd\u770b\u8d77\u6765\u5f88\u597d","title":"\u542f\u7528\u6df1\u8272\u4e3b\u9898"},{"location":"tutorial/#4","text":"","title":"4. \u5217\u8868\u548c\u52a8\u753b"},{"location":"tutorial/#_4","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u6d88\u606f\u7684\u5361\u7247\uff0c\u770b\u4e0a\u53bb\u6709\u70b9\u5355\u8c03\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u6539\u5584\u5b83\uff0c\u8ba9\u5b83\u62e5\u6709\u591a\u6761\u4fe1\u606f\u3002\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u80fd\u591f\u663e\u793a\u591a\u6761\u6d88\u606f\u7684\u51fd\u6570\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Compose \u7684 LazyColumn \u548c LazyRow\u3002\u8fd9\u4e9b Composable \u53ea\u6e32\u67d3\u5c4f\u5e55\u4e0a\u53ef\u89c1\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u8bbe\u8ba1\u5bf9\u4e8e\u957f\u5217\u8868\u6765\u8bf4\u5f88\u6709\u6548\u679c\u3002\u540c\u65f6\uff0c\u5b83\u4eec\u907f\u514d\u4e86 RecyclerView \u4e0e XML \u5e03\u5c40\u7684\u590d\u6742\u6027\u3002 import androidx.compose.foundation.lazy.items @Composable fun Conversation ( messages : List < Message > ) { LazyColumn { items ( messages ) { message -> MessageCard ( msg = message ) } } } @Composable fun PreviewMessageCard () { ExamplesTheme { Conversation ( messages = MsgData . messages ) } } \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u83b7\u53d6 MsgData \u7684\u4ee3\u7801 \u5728\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230 LazyColumn \u6709\u4e00\u4e2a items \u5b50\u9879\u3002\u5b83\u63a5\u6536\u4e00\u4e2a List \u4f5c\u4e3a\u53c2\u6570\uff0c\u5b83\u7684 lambda \u63a5\u6536\u4e00\u4e2a\u6211\u4eec\u547d\u540d\u4e3a message \u7684\u53c2\u6570\uff08\u6211\u4eec\u53ef\u4ee5\u968f\u4fbf\u547d\u540d\uff09\u3002 \u800c\u8fd9\u4e2a lambda \u5c06\u4f1a\u8c03\u7528\u6bcf\u4e2a List \u4e2d\u91cc\u9762\u63d0\u4f9b\u7684 item\u3002","title":"\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u6d88\u606f\u5361\u7247"},{"location":"tutorial/#_5","text":"\u6211\u4eec\u7684\u5bf9\u8bdd\u8d8a\u6765\u8d8a\u6709\u8da3\u4e86\uff0c\u662f\u65f6\u5019\u73a9\u73a9\u52a8\u753b\u4e86! \u6211\u4eec\u5c06\u4f1a\u5b9e\u73b0\u5f53\u70b9\u51fb\u4e00\u4e2a\u5361\u7247\u67e5\u770b\u8be6\u7ec6\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u4f7f\u5185\u5bb9\u7684\u5927\u5c0f\u548c\u80cc\u666f\u989c\u8272\u90fd\u6709\u52a8\u753b\u6548\u679c\u3002\u4e3a\u4e86\u5b58\u50a8\u8fd9\u4e2a\u672c\u5730 UI \u72b6\u6001\uff0c\u6211\u4eec\u9700\u8981\u8ddf\u8e2a\u4e00\u6761\u6d88\u606f\u662f\u5426\u5df2\u7ecf\u5c55\u5f00\u4e86\u3002\u4e3a\u4e86\u8ddf\u8e2a\u8fd9\u79cd\u72b6\u6001\u53d8\u5316\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 remember \u548c mutableStateOf \u51fd\u6570\u3002 Composable \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 remember \u5c06\u672c\u5730\u72b6\u6001\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u8ddf\u8e2a\u4f20\u9012\u7ed9 mutableStateOf \u7684\u503c\u7684\u53d8\u5316\u3002\u5f53\u503c\u88ab\u66f4\u65b0\u65f6\uff0c\u4f7f\u7528\u8be5\u72b6\u6001\u7684 Composable \u51fd\u6570\uff08\u53ca\u5176\u5b50\u51fd\u6570\uff09\u5c06\u88ab\u81ea\u52a8\u91cd\u65b0\u7ed8\u5236\u3002\u6211\u4eec\u628a\u8fd9\u79f0\u4e3a\u91cd\u7ec4\uff08recomposition\uff09\u3002 \u901a\u8fc7\u4f7f\u7528 Compose \u7684\u72b6\u6001 API\uff0c\u5982 remember \u548c mutableStateOf\uff0c\u4efb\u4f55\u5bf9\u72b6\u6001\u7684\u6539\u53d8\u90fd\u4f1a\u81ea\u52a8\u66f4\u65b0 UI\u3002 @Composable fun MessageCard ( msg : Message ) { var isExpanded by remember { mutableStateOf ( false ) } // \u521b\u5efa\u4e00\u4e2a\u80fd\u591f\u68c0\u6d4b\u5361\u7247\u662f\u5426\u88ab\u5c55\u5f00\u7684\u53d8\u91cf Surface ( shape = MaterialTheme . shapes . medium , elevation = 5. dp , modifier = Modifier . padding ( all = 8. dp ) . clickable { // \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 Modifier \u6269\u5c55\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u5143\u7d20\u5177\u6709\u70b9\u51fb\u7684\u6548\u679c isExpanded = ! isExpanded // \u7f16\u5199\u70b9\u51fb\u7684\u4e8b\u4ef6\u5185\u5bb9 } ) { Row ( modifier = Modifier . padding ( all = 8. dp ) ) { Image ( painterResource ( id = R . drawable . profile_picture ), contentDescription = \"profile picture\" , modifier = Modifier . size ( 50. dp ) . clip ( CircleShape ) . border ( 1.5 . dp , MaterialTheme . colors . secondary , shape = CircleShape ) ) Spacer ( Modifier . padding ( horizontal = 8. dp )) Column { Text ( text = msg . author , color = MaterialTheme . colors . secondaryVariant , style = MaterialTheme . typography . subtitle2 ) Spacer ( Modifier . padding ( vertical = 4. dp )) Text ( text = msg . body , style = MaterialTheme . typography . body2 , // \u4fee\u6539 maxLines \u53c2\u6570\uff0c\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u663e\u793a\u4e00\u884c\u6587\u672c\u5185\u5bb9 maxLines = if ( isExpanded ) Int . MAX_VALUE else 1 , // Composable \u5927\u5c0f\u7684\u52a8\u753b\u6548\u679c modifier = Modifier . animateContentSize () ) } } } } \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u5b8c\u6210\u6bcf\u4e2a\u5361\u7247\u7684\u68c0\u6d4b\u4e86\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528 isExpanded \u6765\u505a\u70b9\u5176\u4ed6\u7684\u4e8b\u60c5\u5427\uff01\u6bd4\u5982\u6539\u53d8\u5361\u7247\u7684\u989c\u8272 // \u521b\u5efa\u4e00\u4e2a\u80fd\u591f\u6839\u636e isExpanded \u53d8\u91cf\u503c\u800c\u6539\u53d8\u989c\u8272\u7684\u53d8\u91cf val surfaceColor by animateColorAsState ( targetValue = if ( isExpanded ) Color ( 0 xFFCCCCCC ) else MaterialTheme . colors . surface ) Surface ( shape = MaterialTheme . shapes . medium , elevation = 5. dp , modifier = Modifier . padding ( all = 8. dp ) . clickable { isExpanded = ! isExpanded }, color = surfaceColor ) { ... ... }","title":"\u53ef\u4ea4\u4e92\u7684\u52a8\u753b\u6548\u679c"},{"location":"tutorial/#5","text":"\u606d\u559c\u4f60\uff0c\u770b\u5230\u8fd9\u91cc \u4f60\u5df2\u7ecf\u5b66\u4f1a\u4e86 Compose \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4fe1\u606f\u5c4f\u5e55\uff0c\u5e76\u4e14\u6709\u6548\u5730\u663e\u793a\u4e86\u4e00\u4e2a\u5305\u542b\u56fe\u7247\u548c\u6587\u5b57\u7684\u5217\u8868\uff0c\u6309\u7167 Material Design \u7684\u98ce\u683c\u8bbe\u8ba1\uff0c\u5305\u62ec\u4e00\u4e2a\u6df1\u8272\u4e3b\u9898\u548c\u9884\u89c8\uff0c\u4ee5\u4e0b\u90fd\u662f\u4f60\u901a\u8fc7 100 \u884c\u4ee5\u5185\u7684\u4ee3\u7801\u6765\u5b8c\u6210\u7684\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\u4f60\u5b66\u5230\u7684\u5185\u5bb9 \u5b9a\u4e49\u4e00\u4e2a Composable \u51fd\u6570 \u5728\u4f60\u7684 Composable \u51fd\u6570\u4e2d\u6dfb\u52a0\u4e0d\u540c\u7684\u5143\u7d20 \u4f7f\u7528\u5e03\u5c40 Composable \u6765\u6784\u5efa\u4f60\u7684 UI \u7ed3\u6784 \u901a\u8fc7 modifiers \u6765\u6269\u5c55\u4f60\u7684 Composables \u521b\u5efa\u4e00\u4e2a\u6709\u6548\u5217\u8868 \u8ffd\u8e2a\u72b6\u6001\uff0c\u5e76\u4e14\u4fee\u6539\u5b83 \u5728\u4e00\u4e2a Composable \u4e0a\u6dfb\u52a0\u4e86\u7528\u6237\u4e92\u52a8 \u5728\u6269\u5c55\u4fe1\u606f\u7684\u540c\u65f6\u8fdb\u884c\u4e86\u52a8\u753b\u5904\u7406 \u8fd9\u7bc7\u6587\u7ae0\u7684\u6240\u6709\u4ee3\u7801\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230 \u5982\u679c\u4f60\u60f3\u6df1\u5165\u4e86\u89e3\u5176\u4e2d\u7684\u4e00\u4e9b\u6b65\u9aa4\uff0c\u8bf7\u63a2\u7d22\u4e0b\u9762\u7684\u8d44\u6e90\u3002 \u57fa\u7840 Compose \u7f16\u7a0b\u601d\u60f3 \u72b6\u6001\u7ba1\u7406 \u751f\u547d\u5468\u671f \u8d1f\u9762\u5f71\u54cd \u67b6\u6784\u5206\u5c42 \u8bed\u4e49 CompositionLocal \u8bbe\u8ba1 \u5e03\u5c40\u6982\u8ff0 \u52a8\u753b\u6982\u8ff0 \u4e3b\u9898\u6982\u8ff0 \u624b\u52bf\u6982\u8ff0 \u5217\u8868\u6982\u8ff0","title":"5. \u5b8c\u6210"},{"location":"version/","text":"\u7248\u672c 1.0.4 \u4e3b\u8981\u66f4\u65b0\uff1a\u4f9d\u8d56\u9879\u66f4\u65b0 Kotlin 1.5.31 \u53d1\u5e03\u65f6\u95f4 2021 \u5e74 10 \u6708 13 \u65e5 \u5185\u5bb9\uff1a androidx.compose.animation \u53d1\u5e03\u4e86 androidx.compose.animation:animation:1.0.4 \u548c androidx.compose.animation:animation-core:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31 androidx.compose.compiler \u53d1\u5e03\u4e86 androidx.compose.compiler:compiler:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31 androidx.compose.foundation \u53d1\u5e03\u4e86 androidx.compose.foundation:foundation:1.0.4 \u548c androidx.compose.foundation:foundation-layout:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31 androidx.compose.material \u53d1\u5e03\u4e86 androidx.compose.material:material-*:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31 androidx.compose.runtime \u53d1\u5e03\u4e86 androidx.compose.runtime:runtime-*:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31 androidx.compose.ui \u53d1\u5e03\u4e86 androidx.compose.ui:ui-*:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u7248\u672c 1.1.0-alpha01 \u53d1\u5e03\u65f6\u95f4\uff1a2021 \u5e74 8 \u6708 4 \u65e5 \u5185\u5bb9\uff1a androidx.compose.material \u53d1\u5e03\u4e86 androidx.compose.material:material-*:1.1.0-alpha01 , \u63d0\u4ea4\u5185\u5bb9 API \u53d8\u66f4 \u66f4\u65b0\u4e86 DrawScope#drawImage \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u4f7f\u7528\u6765\u6e90\u548c\u76ee\u7684\u5730 rect \u6765\u4f7f\u7528\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\u3002\u5bf9\u4e8e\u60f3\u8981\u5728\u9488\u5bf9\u57fa\u4e8e\u50cf\u7d20\u7684\u827a\u672f\u4f5c\u54c1\u6269\u5927\u65f6\u5448\u73b0\u50cf\u7d20\u5316\u98ce\u683c\u7684\u50cf\u7d20\u827a\u672f\u4f5c\u54c1\u800c\u8a00\uff0c\u6b64\u53d8\u66f4\u975e\u5e38\u6709\u7528\u3002\u66f4\u65b0\u4e86 BitmapPainter + Image \u53ef\u7ec4\u5408\u9879\uff0c\u4f7f\u5176\u4e5f\u4f7f\u7528\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\uff08 Ie4fb0 \u3001 b/180311607 \uff09 \u5df2\u5c06 BadgeBox \u91cd\u547d\u540d\u4e3a BadgedBox\uff0c\u66f4\u6539\u4e86\u76f8\u5173\u53c2\u6570\u4ee5\u63a5\u53d7 Badge \u53ef\u7ec4\u5408\u9879\u3002\u6dfb\u52a0\u4e86 Badge \u7ec4\u4ef6\uff0c\u5b83\u662f BadgedBox \u7684\u5178\u578b\u6807\u8bb0\u5185\u5bb9\u3002( I639c6 ) \u6dfb\u52a0\u4e86 NavigationRail \u7ec4\u4ef6\uff1b\u8bf7\u67e5\u770b\u76f8\u5173\u6587\u6863\u548c\u793a\u4f8b\uff0c\u4e86\u89e3\u4f7f\u7528\u4fe1\u606f ( I8de77 ) bug \u4fee\u590d \u6dfb\u52a0\u4e86\u5e95\u90e8\u5bf9\u9f50\u7684 NavigationRail \u793a\u4f8b\u548c Catalog \u5e94\u7528\u6f14\u793a\u3002( I3cffc ) \u5bf9\u8bdd\u6846\u73b0\u5728\u6839\u636e\u5e73\u53f0\u5927\u5c0f\u8c03\u6574\u884c\u4e3a\u8fdb\u884c\u8c03\u6574\u3002\u5c06 usePlatformDefaultWidth \u8bbe\u4e3a false \u53ef\u66ff\u6362\u6b64\u884c\u4e3a\u3002\uff08 Iffaed \u3001 b/192682388 \uff09 \u5411\u76ee\u5f55\u5e94\u7528\u6dfb\u52a0\u4e86 navigation-rail \u6f14\u793a\u3002( I04960 ) \u5411\u76ee\u5f55\u5e94\u7528\u6dfb\u52a0\u4e86\u6807\u8bb0\u6f14\u793a\u3002( If285d ) androidx.compose.runtime \u53d1\u5e03\u4e86 androidx.compose.runtime:runtime-*:1.1.0-alpha01 , \u63d0\u4ea4\u5185\u5bb9 androidx.compose.ui \u53d1\u5e03\u4e86 androidx.compose.ui:ui-*:1.1.0-alpha01 \u3002 \u63d0\u4ea4\u5185\u5bb9 \u3002 API \u53d8\u66f4 \u73b0\u5728\uff0c RelocationRequester.bringIntoView \u53ef\u4ee5\u63a5\u53d7\u77e9\u5f62\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u5c06\u53ef\u7ec4\u5408\u9879\u7684\u4e00\u90e8\u5206\u5448\u73b0\u5728\u89c6\u56fe\u4e2d\u3002\uff08 Ice2c5 \u3001 b/194330245 \uff09 AnimatedImageVector \u548c\u76f8\u5173 API \u73b0\u5728\u4f4d\u4e8e\u65b0\u7684 androidx.compose.animation:animation-graphics \u6a21\u5757\u4e2d\u3002( I60873 ) \u6dfb\u52a0\u4e86\u5b9e\u9a8c\u6027\u4fee\u9970\u7b26\u6765\u5904\u7406\u91cd\u5b9a\u4f4d\u8bf7\u6c42\u3002\uff08 I65a97 \u3001 b/178211874 \uff09 \u5f15\u5165\u4e86 BrushPainter API\uff0c\u4ee5\u4fbf\u652f\u6301\u5728 Painter \u4e2d\u7ed8\u5236\u4efb\u610f Brush\uff08\u7c7b\u4f3c\u4e8e ColorPainter\uff09\u3002 \u66f4\u65b0\u4e86 Brush API\uff0c\u4ee5\u4f7f\u5176\u5177\u6709\u4e00\u4e2a\u5728 BrushPainter \u4e2d\u67e5\u8be2\u7684\u56fa\u6709\u5c3a\u5bf8\u53c2\u6570\uff08 Ia2752 \u3001 b/189466433 \uff09 \u5df2\u5c06\u6d88\u8017\u6765\u6e90\u548c\u76ee\u6807 rect \u7684 DrawScope#drawImage \u65b9\u6cd5\u66f4\u65b0\u4e3a\u6d88\u8017\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\u3002\u5bf9\u4e8e\u5728\u9488\u5bf9\u57fa\u4e8e\u50cf\u7d20\u7684 ART \u8fdb\u884c\u653e\u5927\u65f6\u4f1a\u50cf\u7d20\u5316\u7684\u50cf\u7d20 ART\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002\u5df2\u5c06 BitmapPainter + Image \u53ef\u7ec4\u5408\u9879\u66f4\u65b0\u4e3a\u8fd8\u53ef\u4ee5\u6d88\u8017\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\uff08 Ie4fb0 \u3001 b/180311607 \uff09 \u6dfb\u52a0\u4e86 GestureScope.advanceEventTime \u65b9\u6cd5\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u63a7\u5236\u624b\u52bf\u4e2d\u4e8b\u4ef6\u7684\u65f6\u95f4\u8bbe\u7f6e ( Ibf3e2 ) bug \u4fee\u590d \u4e3a\u4e86\u66f4\u597d\u5730\u652f\u6301\u94fe\u63a5\u7ed8\u5236\u4fee\u9970\u7b26\uff0c\u8bf7\u786e\u4fdd Modifier.paint \u5b9e\u73b0\u4f1a\u8c03\u7528 drawsContent\u3002\u4ee5\u524d\uff0cModifier.paint \u9700\u8981\u662f\u4fee\u9970\u7b26\u94fe\u7684\u53f6\u8282\u70b9\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4f1a\u59a8\u788d\u5728\u53ef\u7ec4\u5408\u5bb9\u5668\uff08\u5982\u65b9\u6846\uff09\u4e0a\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\uff0c\u6216\u5728\u5176\u4e0a\u6dfb\u52a0\u5176\u4ed6\u88c5\u9970\uff08\u5982 Modifier.paint().border() \uff09\u3002\u901a\u8fc7\u8ba9 Modifier.paint \u5728\u7ed8\u5236\u6307\u5b9a Painter \u7684\u5185\u5bb9\u540e\u8c03\u7528 drawContent\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5177\u6709\u4fee\u9970\u7b26\u683c\u5f0f\u7684\u884c\u4e3a\u4e2d\u5b9e\u73b0\u66f4\u597d\u7684\u884c\u4e3a\u4e00\u81f4\u6027\u3002\uff08 Ibb2a7 \u3001 b/178201337 \u3001 b/186213275 \uff09 \u5bf9\u8bdd\u6846\u73b0\u5728\u6839\u636e\u5e73\u53f0\u5927\u5c0f\u8c03\u6574\u884c\u4e3a\u8fdb\u884c\u8c03\u6574\u3002\u5c06 usePlatformDefaultWidth \u8bbe\u4e3a false \u53ef\u66ff\u6362\u6b64\u884c\u4e3a\u3002\uff08 Iffaed \u3001 b/192682388 \uff09 \u5c06 InfiniteAnimationPolicy \u79fb\u5230\u4e86 :compose:ui\uff08 I5eb09 \u3001 b/160602714 \uff09 \u73b0\u5728\uff0c\u901a\u8fc7\u5ef6\u8fdf\u5217\u8868\u548c\u5e38\u89c4\u6eda\u52a8\u7ec4\u4ef6\u7684\u8bed\u4e49\u64cd\u4f5c\u6267\u884c\u6eda\u52a8\u5df2\u5177\u6709\u52a8\u753b\u6548\u679c\uff08 Id9066 \u3001 b/190742024 \uff09 \u7248\u672c 1.0.1 \u53d1\u5e03\u65f6\u95f4\uff1a2021 \u5e74 8 \u6708 4 \u65e5 \u5185\u5bb9\uff1a \u53d1\u5e03\u4e86 androidx.compose.material:material-*:1.0.1 androidx.compose.ui:ui-*:1.0.1 androidx.compose.runtime:runtime-*:1.0.1 \u4f9d\u8d56\u6027\u66f4\u65b0\uff1a\u66f4\u65b0\u4e3a\u4f9d\u8d56\u4e8e Kotlin 1.5.21 \u7248\u672c 1.0.0 \u53d1\u5e03\u65f6\u95f4\uff1a2021 \u5e74 7 \u6708 28 \u65e5 \u5185\u5bb9\uff1a \u53d1\u5e03\u4e86 androidx.compose.animation:animation:1.0.0 , androidx.compose.animation:animation-core:1.0.0 androidx.compose.compiler:compiler:1.0.0 androidx.compose.foundation:foundation:1.0.0 , androidx.compose.foundation:foundation-layout:1.0.0 androidx.compose.runtime:runtime-*:1.0.0 androidx.compose.ui:ui-*:1.0.0 androidx.compose.material:material-*:1.0.0 \u8fd9\u662f Compose \u7684\u7b2c\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\uff0c\u5177\u4f53\u53c2\u9605 \u535a\u5ba2 \u5df2\u77e5\u95ee\u9898 \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Android Studio Bumblebee Canary 4 \u6216 AGP 7.1.0-alpha04/7.1.0-alpha05 \uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u4ee5\u4e0b\u5d29\u6e83\u95ee\u9898\uff1a java . lang . AbstractMethodError : abstract method \"void androidx.lifecycle.DefaultLifecycleObserver.onCreate(androidx.lifecycle.LifecycleOwner)\" \u5982\u9700\u4fee\u590d\u6b64\u5d29\u6e83\u95ee\u9898\uff0c\u8bf7\u6682\u65f6\u5c06 build.gradle \u6587\u4ef6\u4e2d\u7684 minSdkVersion \u63d0\u9ad8\u5230 24 \u53ca\u4ee5\u4e0a\u3002\u6216\u8005\u5347\u7ea7\u5230\u6700\u65b0\u7684 Android Studio\uff0c\u4ee5\u53ca\u4f7f\u7528 AGP 7.1.0-alpha06 \u53ca\u5176\u4ee5\u4e0a\u7248\u672c","title":"\u7248\u672c\u66f4\u65b0\u8fed\u4ee3\u5185\u5bb9\u4e0e\u4ecb\u7ecd"},{"location":"version/#104","text":"\u4e3b\u8981\u66f4\u65b0\uff1a\u4f9d\u8d56\u9879\u66f4\u65b0 Kotlin 1.5.31 \u53d1\u5e03\u65f6\u95f4 2021 \u5e74 10 \u6708 13 \u65e5 \u5185\u5bb9\uff1a","title":"\u7248\u672c 1.0.4"},{"location":"version/#androidxcomposeanimation","text":"\u53d1\u5e03\u4e86 androidx.compose.animation:animation:1.0.4 \u548c androidx.compose.animation:animation-core:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31","title":"androidx.compose.animation"},{"location":"version/#androidxcomposecompiler","text":"\u53d1\u5e03\u4e86 androidx.compose.compiler:compiler:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31","title":"androidx.compose.compiler"},{"location":"version/#androidxcomposefoundation","text":"\u53d1\u5e03\u4e86 androidx.compose.foundation:foundation:1.0.4 \u548c androidx.compose.foundation:foundation-layout:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31","title":"androidx.compose.foundation"},{"location":"version/#androidxcomposematerial","text":"\u53d1\u5e03\u4e86 androidx.compose.material:material-*:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31","title":"androidx.compose.material"},{"location":"version/#androidxcomposeruntime","text":"\u53d1\u5e03\u4e86 androidx.compose.runtime:runtime-*:1.0.4 \u63d0\u4ea4\u5185\u5bb9 \u4f9d\u8d56\u9879\u66f4\u65b0\uff1a\u66f4\u65b0 Kotlin \u7248\u672c\u5230 1.5.31","title":"androidx.compose.runtime"},{"location":"version/#androidxcomposeui","text":"\u53d1\u5e03\u4e86 androidx.compose.ui:ui-*:1.0.4 \u63d0\u4ea4\u5185\u5bb9","title":"androidx.compose.ui"},{"location":"version/#110-alpha01","text":"\u53d1\u5e03\u65f6\u95f4\uff1a2021 \u5e74 8 \u6708 4 \u65e5 \u5185\u5bb9\uff1a","title":"\u7248\u672c 1.1.0-alpha01"},{"location":"version/#androidxcomposematerial_1","text":"\u53d1\u5e03\u4e86 androidx.compose.material:material-*:1.1.0-alpha01 , \u63d0\u4ea4\u5185\u5bb9 API \u53d8\u66f4 \u66f4\u65b0\u4e86 DrawScope#drawImage \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u4f7f\u7528\u6765\u6e90\u548c\u76ee\u7684\u5730 rect \u6765\u4f7f\u7528\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\u3002\u5bf9\u4e8e\u60f3\u8981\u5728\u9488\u5bf9\u57fa\u4e8e\u50cf\u7d20\u7684\u827a\u672f\u4f5c\u54c1\u6269\u5927\u65f6\u5448\u73b0\u50cf\u7d20\u5316\u98ce\u683c\u7684\u50cf\u7d20\u827a\u672f\u4f5c\u54c1\u800c\u8a00\uff0c\u6b64\u53d8\u66f4\u975e\u5e38\u6709\u7528\u3002\u66f4\u65b0\u4e86 BitmapPainter + Image \u53ef\u7ec4\u5408\u9879\uff0c\u4f7f\u5176\u4e5f\u4f7f\u7528\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\uff08 Ie4fb0 \u3001 b/180311607 \uff09 \u5df2\u5c06 BadgeBox \u91cd\u547d\u540d\u4e3a BadgedBox\uff0c\u66f4\u6539\u4e86\u76f8\u5173\u53c2\u6570\u4ee5\u63a5\u53d7 Badge \u53ef\u7ec4\u5408\u9879\u3002\u6dfb\u52a0\u4e86 Badge \u7ec4\u4ef6\uff0c\u5b83\u662f BadgedBox \u7684\u5178\u578b\u6807\u8bb0\u5185\u5bb9\u3002( I639c6 ) \u6dfb\u52a0\u4e86 NavigationRail \u7ec4\u4ef6\uff1b\u8bf7\u67e5\u770b\u76f8\u5173\u6587\u6863\u548c\u793a\u4f8b\uff0c\u4e86\u89e3\u4f7f\u7528\u4fe1\u606f ( I8de77 ) bug \u4fee\u590d \u6dfb\u52a0\u4e86\u5e95\u90e8\u5bf9\u9f50\u7684 NavigationRail \u793a\u4f8b\u548c Catalog \u5e94\u7528\u6f14\u793a\u3002( I3cffc ) \u5bf9\u8bdd\u6846\u73b0\u5728\u6839\u636e\u5e73\u53f0\u5927\u5c0f\u8c03\u6574\u884c\u4e3a\u8fdb\u884c\u8c03\u6574\u3002\u5c06 usePlatformDefaultWidth \u8bbe\u4e3a false \u53ef\u66ff\u6362\u6b64\u884c\u4e3a\u3002\uff08 Iffaed \u3001 b/192682388 \uff09 \u5411\u76ee\u5f55\u5e94\u7528\u6dfb\u52a0\u4e86 navigation-rail \u6f14\u793a\u3002( I04960 ) \u5411\u76ee\u5f55\u5e94\u7528\u6dfb\u52a0\u4e86\u6807\u8bb0\u6f14\u793a\u3002( If285d )","title":"androidx.compose.material"},{"location":"version/#androidxcomposeruntime_1","text":"\u53d1\u5e03\u4e86 androidx.compose.runtime:runtime-*:1.1.0-alpha01 , \u63d0\u4ea4\u5185\u5bb9","title":"androidx.compose.runtime"},{"location":"version/#androidxcomposeui_1","text":"\u53d1\u5e03\u4e86 androidx.compose.ui:ui-*:1.1.0-alpha01 \u3002 \u63d0\u4ea4\u5185\u5bb9 \u3002 API \u53d8\u66f4 \u73b0\u5728\uff0c RelocationRequester.bringIntoView \u53ef\u4ee5\u63a5\u53d7\u77e9\u5f62\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u5c06\u53ef\u7ec4\u5408\u9879\u7684\u4e00\u90e8\u5206\u5448\u73b0\u5728\u89c6\u56fe\u4e2d\u3002\uff08 Ice2c5 \u3001 b/194330245 \uff09 AnimatedImageVector \u548c\u76f8\u5173 API \u73b0\u5728\u4f4d\u4e8e\u65b0\u7684 androidx.compose.animation:animation-graphics \u6a21\u5757\u4e2d\u3002( I60873 ) \u6dfb\u52a0\u4e86\u5b9e\u9a8c\u6027\u4fee\u9970\u7b26\u6765\u5904\u7406\u91cd\u5b9a\u4f4d\u8bf7\u6c42\u3002\uff08 I65a97 \u3001 b/178211874 \uff09 \u5f15\u5165\u4e86 BrushPainter API\uff0c\u4ee5\u4fbf\u652f\u6301\u5728 Painter \u4e2d\u7ed8\u5236\u4efb\u610f Brush\uff08\u7c7b\u4f3c\u4e8e ColorPainter\uff09\u3002 \u66f4\u65b0\u4e86 Brush API\uff0c\u4ee5\u4f7f\u5176\u5177\u6709\u4e00\u4e2a\u5728 BrushPainter \u4e2d\u67e5\u8be2\u7684\u56fa\u6709\u5c3a\u5bf8\u53c2\u6570\uff08 Ia2752 \u3001 b/189466433 \uff09 \u5df2\u5c06\u6d88\u8017\u6765\u6e90\u548c\u76ee\u6807 rect \u7684 DrawScope#drawImage \u65b9\u6cd5\u66f4\u65b0\u4e3a\u6d88\u8017\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\u3002\u5bf9\u4e8e\u5728\u9488\u5bf9\u57fa\u4e8e\u50cf\u7d20\u7684 ART \u8fdb\u884c\u653e\u5927\u65f6\u4f1a\u50cf\u7d20\u5316\u7684\u50cf\u7d20 ART\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002\u5df2\u5c06 BitmapPainter + Image \u53ef\u7ec4\u5408\u9879\u66f4\u65b0\u4e3a\u8fd8\u53ef\u4ee5\u6d88\u8017\u53ef\u9009\u7684 FilterQuality \u53c2\u6570\uff08 Ie4fb0 \u3001 b/180311607 \uff09 \u6dfb\u52a0\u4e86 GestureScope.advanceEventTime \u65b9\u6cd5\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u63a7\u5236\u624b\u52bf\u4e2d\u4e8b\u4ef6\u7684\u65f6\u95f4\u8bbe\u7f6e ( Ibf3e2 ) bug \u4fee\u590d \u4e3a\u4e86\u66f4\u597d\u5730\u652f\u6301\u94fe\u63a5\u7ed8\u5236\u4fee\u9970\u7b26\uff0c\u8bf7\u786e\u4fdd Modifier.paint \u5b9e\u73b0\u4f1a\u8c03\u7528 drawsContent\u3002\u4ee5\u524d\uff0cModifier.paint \u9700\u8981\u662f\u4fee\u9970\u7b26\u94fe\u7684\u53f6\u8282\u70b9\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4f1a\u59a8\u788d\u5728\u53ef\u7ec4\u5408\u5bb9\u5668\uff08\u5982\u65b9\u6846\uff09\u4e0a\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\uff0c\u6216\u5728\u5176\u4e0a\u6dfb\u52a0\u5176\u4ed6\u88c5\u9970\uff08\u5982 Modifier.paint().border() \uff09\u3002\u901a\u8fc7\u8ba9 Modifier.paint \u5728\u7ed8\u5236\u6307\u5b9a Painter \u7684\u5185\u5bb9\u540e\u8c03\u7528 drawContent\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5177\u6709\u4fee\u9970\u7b26\u683c\u5f0f\u7684\u884c\u4e3a\u4e2d\u5b9e\u73b0\u66f4\u597d\u7684\u884c\u4e3a\u4e00\u81f4\u6027\u3002\uff08 Ibb2a7 \u3001 b/178201337 \u3001 b/186213275 \uff09 \u5bf9\u8bdd\u6846\u73b0\u5728\u6839\u636e\u5e73\u53f0\u5927\u5c0f\u8c03\u6574\u884c\u4e3a\u8fdb\u884c\u8c03\u6574\u3002\u5c06 usePlatformDefaultWidth \u8bbe\u4e3a false \u53ef\u66ff\u6362\u6b64\u884c\u4e3a\u3002\uff08 Iffaed \u3001 b/192682388 \uff09 \u5c06 InfiniteAnimationPolicy \u79fb\u5230\u4e86 :compose:ui\uff08 I5eb09 \u3001 b/160602714 \uff09 \u73b0\u5728\uff0c\u901a\u8fc7\u5ef6\u8fdf\u5217\u8868\u548c\u5e38\u89c4\u6eda\u52a8\u7ec4\u4ef6\u7684\u8bed\u4e49\u64cd\u4f5c\u6267\u884c\u6eda\u52a8\u5df2\u5177\u6709\u52a8\u753b\u6548\u679c\uff08 Id9066 \u3001 b/190742024 \uff09","title":"androidx.compose.ui"},{"location":"version/#101","text":"\u53d1\u5e03\u65f6\u95f4\uff1a2021 \u5e74 8 \u6708 4 \u65e5 \u5185\u5bb9\uff1a \u53d1\u5e03\u4e86 androidx.compose.material:material-*:1.0.1 androidx.compose.ui:ui-*:1.0.1 androidx.compose.runtime:runtime-*:1.0.1 \u4f9d\u8d56\u6027\u66f4\u65b0\uff1a\u66f4\u65b0\u4e3a\u4f9d\u8d56\u4e8e Kotlin 1.5.21","title":"\u7248\u672c 1.0.1"},{"location":"version/#100","text":"\u53d1\u5e03\u65f6\u95f4\uff1a2021 \u5e74 7 \u6708 28 \u65e5 \u5185\u5bb9\uff1a \u53d1\u5e03\u4e86 androidx.compose.animation:animation:1.0.0 , androidx.compose.animation:animation-core:1.0.0 androidx.compose.compiler:compiler:1.0.0 androidx.compose.foundation:foundation:1.0.0 , androidx.compose.foundation:foundation-layout:1.0.0 androidx.compose.runtime:runtime-*:1.0.0 androidx.compose.ui:ui-*:1.0.0 androidx.compose.material:material-*:1.0.0 \u8fd9\u662f Compose \u7684\u7b2c\u4e00\u4e2a\u7a33\u5b9a\u7248\u672c\uff0c\u5177\u4f53\u53c2\u9605 \u535a\u5ba2 \u5df2\u77e5\u95ee\u9898 \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Android Studio Bumblebee Canary 4 \u6216 AGP 7.1.0-alpha04/7.1.0-alpha05 \uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u4ee5\u4e0b\u5d29\u6e83\u95ee\u9898\uff1a java . lang . AbstractMethodError : abstract method \"void androidx.lifecycle.DefaultLifecycleObserver.onCreate(androidx.lifecycle.LifecycleOwner)\" \u5982\u9700\u4fee\u590d\u6b64\u5d29\u6e83\u95ee\u9898\uff0c\u8bf7\u6682\u65f6\u5c06 build.gradle \u6587\u4ef6\u4e2d\u7684 minSdkVersion \u63d0\u9ad8\u5230 24 \u53ca\u4ee5\u4e0a\u3002\u6216\u8005\u5347\u7ea7\u5230\u6700\u65b0\u7684 Android Studio\uff0c\u4ee5\u53ca\u4f7f\u7528 AGP 7.1.0-alpha06 \u53ca\u5176\u4ee5\u4e0a\u7248\u672c","title":"\u7248\u672c 1.0.0"},{"location":"api/elements/button/","text":"1. Button @Composable fun Button ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = ButtonDefaults . elevation (), shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = null , colors : ButtonColors = ButtonDefaults . buttonColors (), contentPadding : PaddingValues = ButtonDefaults . ContentPadding , content : @Composable RowScope .() -> Unit ) \u53c2\u6570 onClick:() -> Unit \u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 elevation: ButtonElevation? = ButtonDefaults.elevation() \u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u9ad8\u5ea6\u3002\u8fd9\u63a7\u5236\u4e86\u6309\u94ae\u4e0b\u65b9\u9634\u5f71\u7684\u5927\u5c0f\u3002\u5728\u6b64\u5904\u4f20\u9012 null \u4ee5\u7981\u7528\u6b64\u6309\u94ae\u7684\u9ad8\u5ea6\u3002\u8bf7\u53c2\u9605 ButtonDefaults.elevation \u3002 shape: Shape = MaterialTheme.shapes.small \u5b9a\u4e49\u6309\u94ae\u7684\u5f62\u72b6\u53ca\u5176\u9634\u5f71 border: BorderStroke? = null \u5728\u6309\u94ae\u5468\u56f4\u7ed8\u5236\u8fb9\u6846 colors: ButtonColors = ButtonDefaults.buttonColors() \u989c\u8272 ButtonColors \u5c06\u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u80cc\u666f\u548c\u5185\u5bb9\u989c\u8272\u3002\u53c2\u89c1 ButtonDefaults.buttonColors contentPadding: PaddingValues = ButtonDefaults.ContentPadding \u5728\u5bb9\u5668\u548c\u5185\u5bb9\u4e4b\u95f4\u5185\u90e8\u5e94\u7528\u7684\u95f4\u8ddd\u503c content: @Composable RowScope.() -> Unit \u6309\u94ae\u7684\u5185\u5bb9\uff0c\u6309\u94ae\u53ef\u80fd\u5305\u542b\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u80fd\u5305\u542b\u56fe\u6807\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8ba9\u4f60\u7ec4\u5408\u4f60\u9700\u8981\u7684\u63a7\u4ef6\u7684\uff0c\u6ce8\u610f\u5b83\u662f\u6a2a\u5411\u7684\u3002 2. TextButton @Composable fun TextButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = null , shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = null , colors : ButtonColors = ButtonDefaults . textButtonColors (), contentPadding : PaddingValues = ButtonDefaults . TextButtonContentPadding , content : @Composable RowScope .() -> Unit ) \u53c2\u6570 onClick:() -> Unit \u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 elevation: ButtonElevation? = null ButtonElevation \u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u9ad8\u5ea6\u3002 TextButton \u901a\u5e38\u6ca1\u6709\u9ad8\u5ea6\uff0c\u6709\u5173\u5177\u6709\u9ad8\u7a0b\u7684\u6309\u94ae\uff0c\u8bf7\u53c2\u9605 Button \u3002 shape: Shape = MaterialTheme.shapes.small \u5b9a\u4e49\u6309\u94ae\u7684\u5f62\u72b6\u53ca\u5176\u9634\u5f71 border: BorderStroke? = null \u5728\u6309\u94ae\u5468\u56f4\u7ed8\u5236\u8fb9\u6846 colors: ButtonColors = ButtonDefaults.textButtonColors() \u989c\u8272 ButtonColors \u5c06\u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u80cc\u666f\u548c\u5185\u5bb9\u989c\u8272\u3002\u53c2\u89c1 ButtonDefaults.textButtonColors contentPadding: PaddingValues = ButtonDefaults.TextButtonContentPadding \u5728\u5bb9\u5668\u548c\u5185\u5bb9\u4e4b\u95f4\u5185\u90e8\u5e94\u7528\u7684\u95f4\u8ddd\u503c content: @Composable RowScope.() -> Unit \u6309\u94ae\u7684\u5185\u5bb9\uff0c\u6309\u94ae\u53ef\u80fd\u5305\u542b\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u80fd\u5305\u542b\u56fe\u6807\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8ba9\u4f60\u7ec4\u5408\u4f60\u9700\u8981\u7684\u63a7\u4ef6\u7684\uff0c\u6ce8\u610f\u5b83\u662f\u6a2a\u5411\u7684\u3002 3. OutlinedButton @Composable fun OutlinedButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = null , shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = ButtonDefaults . outlinedBorder , colors : ButtonColors = ButtonDefaults . outlinedButtonColors (), contentPadding : PaddingValues = ButtonDefaults . ContentPadding , content : @Composable RowScope .() -> Unit ) \u53c2\u6570 onClick:() -> Unit \u5f53\u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 elevation: ButtonElevation? = null ButtonElevation \u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u9ad8\u5ea6\u3002 TextButton \u901a\u5e38\u6ca1\u6709\u9ad8\u5ea6\uff0c\u6709\u5173\u5177\u6709\u9ad8\u7a0b\u7684\u6309\u94ae\uff0c\u8bf7\u53c2\u9605 Button \u3002 shape: Shape = MaterialTheme.shapes.small \u5b9a\u4e49\u6309\u94ae\u7684\u5f62\u72b6\u53ca\u5176\u9634\u5f71 border: BorderStroke? = ButtonDefaults.outlinedBorder \u5728\u6309\u94ae\u5468\u56f4\u7ed8\u5236\u8fb9\u6846 colors: ButtonColors = ButtonDefaults.outlinedButtonColors() \u989c\u8272 ButtonColors \u5c06\u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u80cc\u666f\u548c\u5185\u5bb9\u989c\u8272\u3002\u53c2\u89c1 ButtonDefaults.outlinedButtonColors contentPadding: PaddingValues = ButtonDefaults.ContentPadding \u5728\u5bb9\u5668\u548c\u5185\u5bb9\u4e4b\u95f4\u5185\u90e8\u5e94\u7528\u7684\u95f4\u8ddd\u503c content: @Composable RowScope.() -> Unit \u6309\u94ae\u7684\u5185\u5bb9\uff0c\u6309\u94ae\u53ef\u80fd\u5305\u542b\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u80fd\u5305\u542b\u56fe\u6807\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8ba9\u4f60\u7ec4\u5408\u4f60\u9700\u8981\u7684\u63a7\u4ef6\u7684\uff0c\u6ce8\u610f\u5b83\u662f\u6a2a\u5411\u7684\u3002 4. IconButton @Composable fun IconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) \u53c2\u6570 onClick:() -> Unit \u5f53\u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 content: @Composable () -> Unit content \u8981\u5728 IconButton \u5185\u7ed8\u5236\u7684\u5185\u5bb9\uff08\u56fe\u6807\uff09\u3002\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a Icon \u3002","title":"Button"},{"location":"api/elements/button/#1-button","text":"@Composable fun Button ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = ButtonDefaults . elevation (), shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = null , colors : ButtonColors = ButtonDefaults . buttonColors (), contentPadding : PaddingValues = ButtonDefaults . ContentPadding , content : @Composable RowScope .() -> Unit ) \u53c2\u6570 onClick:() -> Unit \u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 elevation: ButtonElevation? = ButtonDefaults.elevation() \u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u9ad8\u5ea6\u3002\u8fd9\u63a7\u5236\u4e86\u6309\u94ae\u4e0b\u65b9\u9634\u5f71\u7684\u5927\u5c0f\u3002\u5728\u6b64\u5904\u4f20\u9012 null \u4ee5\u7981\u7528\u6b64\u6309\u94ae\u7684\u9ad8\u5ea6\u3002\u8bf7\u53c2\u9605 ButtonDefaults.elevation \u3002 shape: Shape = MaterialTheme.shapes.small \u5b9a\u4e49\u6309\u94ae\u7684\u5f62\u72b6\u53ca\u5176\u9634\u5f71 border: BorderStroke? = null \u5728\u6309\u94ae\u5468\u56f4\u7ed8\u5236\u8fb9\u6846 colors: ButtonColors = ButtonDefaults.buttonColors() \u989c\u8272 ButtonColors \u5c06\u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u80cc\u666f\u548c\u5185\u5bb9\u989c\u8272\u3002\u53c2\u89c1 ButtonDefaults.buttonColors contentPadding: PaddingValues = ButtonDefaults.ContentPadding \u5728\u5bb9\u5668\u548c\u5185\u5bb9\u4e4b\u95f4\u5185\u90e8\u5e94\u7528\u7684\u95f4\u8ddd\u503c content: @Composable RowScope.() -> Unit \u6309\u94ae\u7684\u5185\u5bb9\uff0c\u6309\u94ae\u53ef\u80fd\u5305\u542b\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u80fd\u5305\u542b\u56fe\u6807\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8ba9\u4f60\u7ec4\u5408\u4f60\u9700\u8981\u7684\u63a7\u4ef6\u7684\uff0c\u6ce8\u610f\u5b83\u662f\u6a2a\u5411\u7684\u3002","title":"1. Button"},{"location":"api/elements/button/#2-textbutton","text":"@Composable fun TextButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = null , shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = null , colors : ButtonColors = ButtonDefaults . textButtonColors (), contentPadding : PaddingValues = ButtonDefaults . TextButtonContentPadding , content : @Composable RowScope .() -> Unit ) \u53c2\u6570 onClick:() -> Unit \u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 elevation: ButtonElevation? = null ButtonElevation \u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u9ad8\u5ea6\u3002 TextButton \u901a\u5e38\u6ca1\u6709\u9ad8\u5ea6\uff0c\u6709\u5173\u5177\u6709\u9ad8\u7a0b\u7684\u6309\u94ae\uff0c\u8bf7\u53c2\u9605 Button \u3002 shape: Shape = MaterialTheme.shapes.small \u5b9a\u4e49\u6309\u94ae\u7684\u5f62\u72b6\u53ca\u5176\u9634\u5f71 border: BorderStroke? = null \u5728\u6309\u94ae\u5468\u56f4\u7ed8\u5236\u8fb9\u6846 colors: ButtonColors = ButtonDefaults.textButtonColors() \u989c\u8272 ButtonColors \u5c06\u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u80cc\u666f\u548c\u5185\u5bb9\u989c\u8272\u3002\u53c2\u89c1 ButtonDefaults.textButtonColors contentPadding: PaddingValues = ButtonDefaults.TextButtonContentPadding \u5728\u5bb9\u5668\u548c\u5185\u5bb9\u4e4b\u95f4\u5185\u90e8\u5e94\u7528\u7684\u95f4\u8ddd\u503c content: @Composable RowScope.() -> Unit \u6309\u94ae\u7684\u5185\u5bb9\uff0c\u6309\u94ae\u53ef\u80fd\u5305\u542b\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u80fd\u5305\u542b\u56fe\u6807\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8ba9\u4f60\u7ec4\u5408\u4f60\u9700\u8981\u7684\u63a7\u4ef6\u7684\uff0c\u6ce8\u610f\u5b83\u662f\u6a2a\u5411\u7684\u3002","title":"2. TextButton"},{"location":"api/elements/button/#3-outlinedbutton","text":"@Composable fun OutlinedButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = null , shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = ButtonDefaults . outlinedBorder , colors : ButtonColors = ButtonDefaults . outlinedButtonColors (), contentPadding : PaddingValues = ButtonDefaults . ContentPadding , content : @Composable RowScope .() -> Unit ) \u53c2\u6570 onClick:() -> Unit \u5f53\u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 elevation: ButtonElevation? = null ButtonElevation \u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u9ad8\u5ea6\u3002 TextButton \u901a\u5e38\u6ca1\u6709\u9ad8\u5ea6\uff0c\u6709\u5173\u5177\u6709\u9ad8\u7a0b\u7684\u6309\u94ae\uff0c\u8bf7\u53c2\u9605 Button \u3002 shape: Shape = MaterialTheme.shapes.small \u5b9a\u4e49\u6309\u94ae\u7684\u5f62\u72b6\u53ca\u5176\u9634\u5f71 border: BorderStroke? = ButtonDefaults.outlinedBorder \u5728\u6309\u94ae\u5468\u56f4\u7ed8\u5236\u8fb9\u6846 colors: ButtonColors = ButtonDefaults.outlinedButtonColors() \u989c\u8272 ButtonColors \u5c06\u7528\u4e8e\u89e3\u6790\u6b64\u6309\u94ae\u5728\u4e0d\u540c\u72b6\u6001\u4e0b\u7684\u80cc\u666f\u548c\u5185\u5bb9\u989c\u8272\u3002\u53c2\u89c1 ButtonDefaults.outlinedButtonColors contentPadding: PaddingValues = ButtonDefaults.ContentPadding \u5728\u5bb9\u5668\u548c\u5185\u5bb9\u4e4b\u95f4\u5185\u90e8\u5e94\u7528\u7684\u95f4\u8ddd\u503c content: @Composable RowScope.() -> Unit \u6309\u94ae\u7684\u5185\u5bb9\uff0c\u6309\u94ae\u53ef\u80fd\u5305\u542b\u6587\u672c\u4fe1\u606f\uff0c\u4e5f\u53ef\u80fd\u5305\u542b\u56fe\u6807\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8ba9\u4f60\u7ec4\u5408\u4f60\u9700\u8981\u7684\u63a7\u4ef6\u7684\uff0c\u6ce8\u610f\u5b83\u662f\u6a2a\u5411\u7684\u3002","title":"3. OutlinedButton"},{"location":"api/elements/button/#4-iconbutton","text":"@Composable fun IconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) \u53c2\u6570 onClick:() -> Unit \u5f53\u7528\u6237\u70b9\u51fb\u6309\u94ae\u65f6\u5c06\u88ab\u8c03\u7528 modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier enabled: Boolean = true \u63a7\u5236\u6309\u94ae\u7684\u542f\u7528\u72b6\u6001\u3002\u5982\u679c\u4e3a false \uff0c\u5219\u8be5\u6309\u94ae\u5c06\u4e0d\u53ef\u5355\u51fb\uff1b interactionSource: MutableInteractionSource = remember { MutableInteractionSource() } \u8868\u793a\u4ea4\u4e92\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u4e4b\u524d\u7ed9\u6309\u94ae\u8bbe\u7f6e\u7684\u5404\u79cdselector\uff0c\u6765\u5b9e\u73b0\u666e\u901a\u3001\u70b9\u51fb\u6548\u679c\u7b49 content: @Composable () -> Unit content \u8981\u5728 IconButton \u5185\u7ed8\u5236\u7684\u5185\u5bb9\uff08\u56fe\u6807\uff09\u3002\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a Icon \u3002","title":"4. IconButton"},{"location":"api/elements/text/","text":"1. Text @Composable fun Text ( text : String , modifier : Modifier = Modifier , color : Color = Color . Unspecified , fontSize : TextUnit = TextUnit . Unspecified , fontStyle : FontStyle? = null , fontWeight : FontWeight? = null , fontFamily : FontFamily? = null , letterSpacing : TextUnit = TextUnit . Unspecified , textDecoration : TextDecoration? = null , textAlign : TextAlign? = null , lineHeight : TextUnit = TextUnit . Unspecified , overflow : TextOverflow = TextOverflow . Clip , softWrap : Boolean = true , maxLines : Int = Int . MAX_VALUE , onTextLayout : ( TextLayoutResult ) -> Unit = {}, style : TextStyle = LocalTextStyle . current ): @Composable Unit \u663e\u793a\u6587\u672c\u5e76\u63d0\u4f9b\u8bed\u4e49/\u53ef\u8bfb\u6027\u4fe1\u606f\u7684\u9ad8\u7ea7\u5143\u7d20\u3002 \u9ed8\u8ba4\u6837\u5f0f\u4f7f\u7528 MaterialTheme /\u7ec4\u4ef6\u63d0\u4f9b\u7684 LocalTextStyle \u3002\u5982\u679c\u4f60\u8981\u8bbe\u7f6e\u4f60\u81ea\u5df1\u7684\u6837\u5f0f\uff0c\u4f60\u53ef\u80fd\u8981\u8003\u8651\u9996\u5148\u68c0\u7d22 LocalTextStyle \uff0c\u5e76\u4f7f\u7528 TextStyle.copy \u6765\u4fdd\u7559\u4efb\u4f55\u4e3b\u9898\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u53ea\u4fee\u6539\u4f60\u8981\u8986\u76d6\u7684\u7279\u5b9a\u5c5e\u6027\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u4f7f\u7528\uff0c TextStyle \u7684\u5e38\u7528\u53c2\u6570\u4e5f\u5728\u8fd9\u91cc\u51fa\u73b0\uff0c\u4f18\u5148\u987a\u5e8f\u5982\u4e0b\uff1a \u5982\u679c\u4e00\u4e2a\u53c2\u6570\u88ab\u660e\u786e\u5730\u8bbe\u7f6e\u5728\u8fd9\u91cc\uff08\u5373\u5b83\u4e0d\u662f null \u6216 TextUnit.Unspecified \uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53c2\u6570\u5c06\u603b\u662f\u88ab\u4f7f\u7528\u3002 \u5982\u679c\u4e00\u4e2a\u53c2\u6570\u6ca1\u6709\u88ab\u8bbe\u7f6e\uff0c\uff08 null \u6216 TextUnit.Unspecified \uff09\uff0c\u90a3\u4e48 style \u4e2d\u7684\u76f8\u5e94\u503c\u5c06\u88ab\u66ff\u4ee3\u4f7f\u7528\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u989c\u8272\uff0c\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u989c\u8272\uff0c\u5e76\u4e14 style \u6ca1\u6709\u989c\u8272\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528 LocalContentColor \u548c LocalContentAlpha \u7684 alpha --\u8fd9\u5141\u8bb8\u8fd9\u4e2a\u6587\u672c\u6216\u5305\u542b\u8fd9\u4e2a\u6587\u672c\u7684\u5143\u7d20\u9002\u5e94\u4e0d\u540c\u7684\u80cc\u666f\u989c\u8272\uff0c\u4ecd\u7136\u4fdd\u6301\u5bf9\u6bd4\u5ea6\u548c\u548c\u53ef\u8bfb\u6027\u3002 \u53c2\u6570 text: AnnotatedString \u8981\u663e\u793a\u7684\u6587\u672c modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier color: Color = Color.Unspecified \u5e94\u7528\u4e8e\u6587\u672c\u7684\u989c\u8272\u3002\u5982\u679c\u662f Color.Unspecified \uff0c\u5e76\u4e14 style \u6ca1\u6709\u8bbe\u7f6e\u989c\u8272\uff0c\u90a3\u4e48\u5c31\u662f LocalContentColor fontSize: TextUnit = TextUnit.Unspecified \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u5f62\u5927\u5c0f\u3002\u53c2\u89c1 TextStyle.fontSize fontStyle: FontStyle? = null \u7ed8\u5236\u5b57\u6bcd\u65f6\u4f7f\u7528\u7684\u5b57\u4f53\u53d8\u4f53\uff08\u4f8b\u5982\uff0c\u659c\u4f53\uff09\u3002\u53c2\u89c1 TextStyle.fontStyle fontWeight: FontWeight? = null \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u4f53\u539a\u5ea6\uff08\u4f8b\u5982\uff0c FontWeight.Bold \uff09 fontFamily: FontFamily? = null \u6e32\u67d3\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684 font.family \u3002\u53c2\u89c1 TextStyle.fontFamily letterSpacing: TextUnit = TextUnit.Unspecified \u6bcf\u4e2a\u5b57\u6bcd\u4e4b\u95f4\u8981\u589e\u52a0\u7684\u7a7a\u95f4\u3002\u53c2\u89c1 TextStyle.letterSpacing textDecoration: TextDecoration? = null \u5728\u6587\u672c\u4e0a\u7684\u88c5\u9970\uff08\u4f8b\u5982\uff0c\u4e0b\u5212\u7ebf\uff09\u3002\u53c2\u89c1 TextStyle.textDecoration textAlign: TextAlign? = null \u6bb5\u843d\u5185\u5404\u884c\u6587\u5b57\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u53c2\u89c1 TextStyle.textAlign lineHeight: TextUnit = TextUnit.Unspecified \u6bb5\u843d\u7684\u884c\u9ad8\uff0c\u4ee5 TextUnit \u4e3a\u5355\u4f4d\uff0c\u4f8b\u5982 SP \u6216 EM \u3002\u53c2\u89c1 TxtStyle.lineHeight overflow: TextOverflow = TextOverflow.Clip \u5904\u7406\u89c6\u89c9\u6ea2\u51fa\u7684\u95ee\u9898 softWrap: Boolean = true \u6587\u672c\u662f\u5426\u5e94\u5728\u8f6f\u6362\u884c\u65f6\u65ad\u5f00\u3002\u5982\u679c\u662f false \uff0c\u6587\u672c\u4e2d\u7684\u5b57\u5f62\u5c06\u88ab\u5b9a\u4f4d\uff0c\u5c31\u50cf\u6709\u65e0\u9650\u7684\u6c34\u5e73\u7a7a\u95f4\u4e00\u6837\u3002\u5982\u679c softWrap \u4e3a false \uff0c overflow \u548c TextAlign \u53ef\u80fd\u4f1a\u4ea7\u751f\u610f\u5916\u7684\u6548\u679c maxLines: Int = Int.MAX_VALUE \u53ef\u9009\u7684\u6587\u672c\u8de8\u5ea6\u7684\u6700\u5927\u884c\u6570\uff0c\u5982\u679c\u6709\u5fc5\u8981\uff0c\u53ef\u4ee5\u8fdb\u884c\u5305\u88c5\u3002\u5982\u679c\u6587\u672c\u8d85\u8fc7\u4e86\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u5b83\u5c06\u6839\u636e overflow \u548c softWrap \u88ab\u622a\u65ad\u3002\u5982\u679c\u5b83\u4e0d\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u5927\u4e8e\u96f6 onTextLayout: (TextLayoutResult) -> Unit = {} \u5f53\u8ba1\u7b97\u4e00\u4e2a\u65b0\u7684\u6587\u672c\u5e03\u5c40\u65f6\u6267\u884c\u7684\u56de\u8c03 style: TextStyle = LocalTextStyle.current \u6587\u672c\u7684\u98ce\u683c\u914d\u7f6e\uff0c\u5982\u989c\u8272\u3001\u5b57\u4f53\u3001\u884c\u9ad8\u7b49 2. Text @Composable fun Text ( text : AnnotatedString , modifier : Modifier = Modifier , color : Color = Color . Unspecified , fontSize : TextUnit = TextUnit . Unspecified , fontStyle : FontStyle? = null , fontWeight : FontWeight? = null , fontFamily : FontFamily? = null , letterSpacing : TextUnit = TextUnit . Unspecified , textDecoration : TextDecoration? = null , textAlign : TextAlign? = null , lineHeight : TextUnit = TextUnit . Unspecified , overflow : TextOverflow = TextOverflow . Clip , softWrap : Boolean = true , maxLines : Int = Int . MAX_VALUE , inlineContent : Map < String , InlineTextContent > = mapOf (), onTextLayout : ( TextLayoutResult ) -> Unit = {}, style : TextStyle = LocalTextStyle . current ): @Composable Unit \u53c2\u6570 text: AnnotatedString \u8981\u663e\u793a\u7684\u6587\u672c modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier color: Color = Color.Unspecified \u5e94\u7528\u4e8e\u6587\u672c\u7684\u989c\u8272\u3002\u5982\u679c\u662f Color.Unspecified \uff0c\u5e76\u4e14 style \u6ca1\u6709\u8bbe\u7f6e\u989c\u8272\uff0c\u90a3\u4e48\u5c31\u662f LocalContentColor fontSize: TextUnit = TextUnit.Unspecified \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u5f62\u5927\u5c0f\u3002\u53c2\u89c1 TextStyle.fontSize fontStyle: FontStyle? = null \u7ed8\u5236\u5b57\u6bcd\u65f6\u4f7f\u7528\u7684\u5b57\u4f53\u53d8\u4f53\uff08\u4f8b\u5982\uff0c\u659c\u4f53\uff09\u3002\u53c2\u89c1 TextStyle.fontStyle fontWeight: FontWeight? = null \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u4f53\u539a\u5ea6\uff08\u4f8b\u5982\uff0c FontWeight.Bold \uff09 fontFamily: FontFamily? = null \u6e32\u67d3\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684 font.family \u3002\u53c2\u89c1 TextStyle.fontFamily letterSpacing: TextUnit = TextUnit.Unspecified \u6bcf\u4e2a\u5b57\u6bcd\u4e4b\u95f4\u8981\u589e\u52a0\u7684\u7a7a\u95f4\u3002\u53c2\u89c1 TextStyle.letterSpacing textDecoration: TextDecoration? = null \u5728\u6587\u672c\u4e0a\u7684\u88c5\u9970\uff08\u4f8b\u5982\uff0c\u4e0b\u5212\u7ebf\uff09\u3002\u53c2\u89c1 TextStyle.textDecoration textAlign: TextAlign? = null \u6bb5\u843d\u5185\u5404\u884c\u6587\u5b57\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u53c2\u89c1 TextStyle.textAlign lineHeight: TextUnit = TextUnit.Unspecified \u6bb5\u843d\u7684\u884c\u9ad8\uff0c\u4ee5 TextUnit \u4e3a\u5355\u4f4d\uff0c\u4f8b\u5982 SP \u6216 EM \u3002\u53c2\u89c1 TxtStyle.lineHeight overflow: TextOverflow = TextOverflow.Clip \u5904\u7406\u89c6\u89c9\u6ea2\u51fa\u7684\u95ee\u9898 softWrap: Boolean = true \u6587\u672c\u662f\u5426\u5e94\u5728\u8f6f\u6362\u884c\u65f6\u65ad\u5f00\u3002\u5982\u679c\u662f false \uff0c\u6587\u672c\u4e2d\u7684\u5b57\u5f62\u5c06\u88ab\u5b9a\u4f4d\uff0c\u5c31\u50cf\u6709\u65e0\u9650\u7684\u6c34\u5e73\u7a7a\u95f4\u4e00\u6837\u3002\u5982\u679c softWrap \u4e3a false \uff0c overflow \u548c TextAlign \u53ef\u80fd\u4f1a\u4ea7\u751f\u610f\u5916\u7684\u6548\u679c maxLines: Int = Int.MAX_VALUE \u53ef\u9009\u7684\u6587\u672c\u8de8\u5ea6\u7684\u6700\u5927\u884c\u6570\uff0c\u5982\u679c\u6709\u5fc5\u8981\uff0c\u53ef\u4ee5\u8fdb\u884c\u5305\u88c5\u3002\u5982\u679c\u6587\u672c\u8d85\u8fc7\u4e86\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u5b83\u5c06\u6839\u636e overflow \u548c softWrap \u88ab\u622a\u65ad\u3002\u5982\u679c\u5b83\u4e0d\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u5927\u4e8e\u96f6 inlineContent: Map < String , InlineTextContent > = mapOf() \u4e00\u4e2a Map \u5b58\u50a8 Composables\uff0c\u53d6\u4ee3\u4e86\u6587\u672c\u7684\u67d0\u4e9b\u8303\u56f4\u3002\u5b83\u7528\u4e8e\u5728\u6587\u672c\u5e03\u5c40\u4e2d\u63d2\u5165 Composables\u3002\u67e5\u770b InlineTextContent \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f onTextLayout: (TextLayoutResult) -> Unit = {} \u5f53\u8ba1\u7b97\u4e00\u4e2a\u65b0\u7684\u6587\u672c\u5e03\u5c40\u65f6\u6267\u884c\u7684\u56de\u8c03 style: TextStyle = LocalTextStyle.current \u6587\u672c\u7684\u98ce\u683c\u914d\u7f6e\uff0c\u5982\u989c\u8272\u3001\u5b57\u4f53\u3001\u884c\u9ad8\u7b49","title":"Text"},{"location":"api/elements/text/#1-text","text":"@Composable fun Text ( text : String , modifier : Modifier = Modifier , color : Color = Color . Unspecified , fontSize : TextUnit = TextUnit . Unspecified , fontStyle : FontStyle? = null , fontWeight : FontWeight? = null , fontFamily : FontFamily? = null , letterSpacing : TextUnit = TextUnit . Unspecified , textDecoration : TextDecoration? = null , textAlign : TextAlign? = null , lineHeight : TextUnit = TextUnit . Unspecified , overflow : TextOverflow = TextOverflow . Clip , softWrap : Boolean = true , maxLines : Int = Int . MAX_VALUE , onTextLayout : ( TextLayoutResult ) -> Unit = {}, style : TextStyle = LocalTextStyle . current ): @Composable Unit \u663e\u793a\u6587\u672c\u5e76\u63d0\u4f9b\u8bed\u4e49/\u53ef\u8bfb\u6027\u4fe1\u606f\u7684\u9ad8\u7ea7\u5143\u7d20\u3002 \u9ed8\u8ba4\u6837\u5f0f\u4f7f\u7528 MaterialTheme /\u7ec4\u4ef6\u63d0\u4f9b\u7684 LocalTextStyle \u3002\u5982\u679c\u4f60\u8981\u8bbe\u7f6e\u4f60\u81ea\u5df1\u7684\u6837\u5f0f\uff0c\u4f60\u53ef\u80fd\u8981\u8003\u8651\u9996\u5148\u68c0\u7d22 LocalTextStyle \uff0c\u5e76\u4f7f\u7528 TextStyle.copy \u6765\u4fdd\u7559\u4efb\u4f55\u4e3b\u9898\u5b9a\u4e49\u7684\u5c5e\u6027\uff0c\u53ea\u4fee\u6539\u4f60\u8981\u8986\u76d6\u7684\u7279\u5b9a\u5c5e\u6027\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u4f7f\u7528\uff0c TextStyle \u7684\u5e38\u7528\u53c2\u6570\u4e5f\u5728\u8fd9\u91cc\u51fa\u73b0\uff0c\u4f18\u5148\u987a\u5e8f\u5982\u4e0b\uff1a \u5982\u679c\u4e00\u4e2a\u53c2\u6570\u88ab\u660e\u786e\u5730\u8bbe\u7f6e\u5728\u8fd9\u91cc\uff08\u5373\u5b83\u4e0d\u662f null \u6216 TextUnit.Unspecified \uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53c2\u6570\u5c06\u603b\u662f\u88ab\u4f7f\u7528\u3002 \u5982\u679c\u4e00\u4e2a\u53c2\u6570\u6ca1\u6709\u88ab\u8bbe\u7f6e\uff0c\uff08 null \u6216 TextUnit.Unspecified \uff09\uff0c\u90a3\u4e48 style \u4e2d\u7684\u76f8\u5e94\u503c\u5c06\u88ab\u66ff\u4ee3\u4f7f\u7528\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u989c\u8272\uff0c\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u989c\u8272\uff0c\u5e76\u4e14 style \u6ca1\u6709\u989c\u8272\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528 LocalContentColor \u548c LocalContentAlpha \u7684 alpha --\u8fd9\u5141\u8bb8\u8fd9\u4e2a\u6587\u672c\u6216\u5305\u542b\u8fd9\u4e2a\u6587\u672c\u7684\u5143\u7d20\u9002\u5e94\u4e0d\u540c\u7684\u80cc\u666f\u989c\u8272\uff0c\u4ecd\u7136\u4fdd\u6301\u5bf9\u6bd4\u5ea6\u548c\u548c\u53ef\u8bfb\u6027\u3002 \u53c2\u6570 text: AnnotatedString \u8981\u663e\u793a\u7684\u6587\u672c modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier color: Color = Color.Unspecified \u5e94\u7528\u4e8e\u6587\u672c\u7684\u989c\u8272\u3002\u5982\u679c\u662f Color.Unspecified \uff0c\u5e76\u4e14 style \u6ca1\u6709\u8bbe\u7f6e\u989c\u8272\uff0c\u90a3\u4e48\u5c31\u662f LocalContentColor fontSize: TextUnit = TextUnit.Unspecified \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u5f62\u5927\u5c0f\u3002\u53c2\u89c1 TextStyle.fontSize fontStyle: FontStyle? = null \u7ed8\u5236\u5b57\u6bcd\u65f6\u4f7f\u7528\u7684\u5b57\u4f53\u53d8\u4f53\uff08\u4f8b\u5982\uff0c\u659c\u4f53\uff09\u3002\u53c2\u89c1 TextStyle.fontStyle fontWeight: FontWeight? = null \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u4f53\u539a\u5ea6\uff08\u4f8b\u5982\uff0c FontWeight.Bold \uff09 fontFamily: FontFamily? = null \u6e32\u67d3\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684 font.family \u3002\u53c2\u89c1 TextStyle.fontFamily letterSpacing: TextUnit = TextUnit.Unspecified \u6bcf\u4e2a\u5b57\u6bcd\u4e4b\u95f4\u8981\u589e\u52a0\u7684\u7a7a\u95f4\u3002\u53c2\u89c1 TextStyle.letterSpacing textDecoration: TextDecoration? = null \u5728\u6587\u672c\u4e0a\u7684\u88c5\u9970\uff08\u4f8b\u5982\uff0c\u4e0b\u5212\u7ebf\uff09\u3002\u53c2\u89c1 TextStyle.textDecoration textAlign: TextAlign? = null \u6bb5\u843d\u5185\u5404\u884c\u6587\u5b57\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u53c2\u89c1 TextStyle.textAlign lineHeight: TextUnit = TextUnit.Unspecified \u6bb5\u843d\u7684\u884c\u9ad8\uff0c\u4ee5 TextUnit \u4e3a\u5355\u4f4d\uff0c\u4f8b\u5982 SP \u6216 EM \u3002\u53c2\u89c1 TxtStyle.lineHeight overflow: TextOverflow = TextOverflow.Clip \u5904\u7406\u89c6\u89c9\u6ea2\u51fa\u7684\u95ee\u9898 softWrap: Boolean = true \u6587\u672c\u662f\u5426\u5e94\u5728\u8f6f\u6362\u884c\u65f6\u65ad\u5f00\u3002\u5982\u679c\u662f false \uff0c\u6587\u672c\u4e2d\u7684\u5b57\u5f62\u5c06\u88ab\u5b9a\u4f4d\uff0c\u5c31\u50cf\u6709\u65e0\u9650\u7684\u6c34\u5e73\u7a7a\u95f4\u4e00\u6837\u3002\u5982\u679c softWrap \u4e3a false \uff0c overflow \u548c TextAlign \u53ef\u80fd\u4f1a\u4ea7\u751f\u610f\u5916\u7684\u6548\u679c maxLines: Int = Int.MAX_VALUE \u53ef\u9009\u7684\u6587\u672c\u8de8\u5ea6\u7684\u6700\u5927\u884c\u6570\uff0c\u5982\u679c\u6709\u5fc5\u8981\uff0c\u53ef\u4ee5\u8fdb\u884c\u5305\u88c5\u3002\u5982\u679c\u6587\u672c\u8d85\u8fc7\u4e86\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u5b83\u5c06\u6839\u636e overflow \u548c softWrap \u88ab\u622a\u65ad\u3002\u5982\u679c\u5b83\u4e0d\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u5927\u4e8e\u96f6 onTextLayout: (TextLayoutResult) -> Unit = {} \u5f53\u8ba1\u7b97\u4e00\u4e2a\u65b0\u7684\u6587\u672c\u5e03\u5c40\u65f6\u6267\u884c\u7684\u56de\u8c03 style: TextStyle = LocalTextStyle.current \u6587\u672c\u7684\u98ce\u683c\u914d\u7f6e\uff0c\u5982\u989c\u8272\u3001\u5b57\u4f53\u3001\u884c\u9ad8\u7b49","title":"1. Text"},{"location":"api/elements/text/#2-text","text":"@Composable fun Text ( text : AnnotatedString , modifier : Modifier = Modifier , color : Color = Color . Unspecified , fontSize : TextUnit = TextUnit . Unspecified , fontStyle : FontStyle? = null , fontWeight : FontWeight? = null , fontFamily : FontFamily? = null , letterSpacing : TextUnit = TextUnit . Unspecified , textDecoration : TextDecoration? = null , textAlign : TextAlign? = null , lineHeight : TextUnit = TextUnit . Unspecified , overflow : TextOverflow = TextOverflow . Clip , softWrap : Boolean = true , maxLines : Int = Int . MAX_VALUE , inlineContent : Map < String , InlineTextContent > = mapOf (), onTextLayout : ( TextLayoutResult ) -> Unit = {}, style : TextStyle = LocalTextStyle . current ): @Composable Unit \u53c2\u6570 text: AnnotatedString \u8981\u663e\u793a\u7684\u6587\u672c modifier: Modifier = Modifier \u5e94\u7528\u4e8e\u8be5\u5e03\u5c40\u8282\u70b9\u7684 Modifier color: Color = Color.Unspecified \u5e94\u7528\u4e8e\u6587\u672c\u7684\u989c\u8272\u3002\u5982\u679c\u662f Color.Unspecified \uff0c\u5e76\u4e14 style \u6ca1\u6709\u8bbe\u7f6e\u989c\u8272\uff0c\u90a3\u4e48\u5c31\u662f LocalContentColor fontSize: TextUnit = TextUnit.Unspecified \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u5f62\u5927\u5c0f\u3002\u53c2\u89c1 TextStyle.fontSize fontStyle: FontStyle? = null \u7ed8\u5236\u5b57\u6bcd\u65f6\u4f7f\u7528\u7684\u5b57\u4f53\u53d8\u4f53\uff08\u4f8b\u5982\uff0c\u659c\u4f53\uff09\u3002\u53c2\u89c1 TextStyle.fontStyle fontWeight: FontWeight? = null \u7ed8\u5236\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684\u5b57\u4f53\u539a\u5ea6\uff08\u4f8b\u5982\uff0c FontWeight.Bold \uff09 fontFamily: FontFamily? = null \u6e32\u67d3\u6587\u672c\u65f6\u8981\u4f7f\u7528\u7684 font.family \u3002\u53c2\u89c1 TextStyle.fontFamily letterSpacing: TextUnit = TextUnit.Unspecified \u6bcf\u4e2a\u5b57\u6bcd\u4e4b\u95f4\u8981\u589e\u52a0\u7684\u7a7a\u95f4\u3002\u53c2\u89c1 TextStyle.letterSpacing textDecoration: TextDecoration? = null \u5728\u6587\u672c\u4e0a\u7684\u88c5\u9970\uff08\u4f8b\u5982\uff0c\u4e0b\u5212\u7ebf\uff09\u3002\u53c2\u89c1 TextStyle.textDecoration textAlign: TextAlign? = null \u6bb5\u843d\u5185\u5404\u884c\u6587\u5b57\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u53c2\u89c1 TextStyle.textAlign lineHeight: TextUnit = TextUnit.Unspecified \u6bb5\u843d\u7684\u884c\u9ad8\uff0c\u4ee5 TextUnit \u4e3a\u5355\u4f4d\uff0c\u4f8b\u5982 SP \u6216 EM \u3002\u53c2\u89c1 TxtStyle.lineHeight overflow: TextOverflow = TextOverflow.Clip \u5904\u7406\u89c6\u89c9\u6ea2\u51fa\u7684\u95ee\u9898 softWrap: Boolean = true \u6587\u672c\u662f\u5426\u5e94\u5728\u8f6f\u6362\u884c\u65f6\u65ad\u5f00\u3002\u5982\u679c\u662f false \uff0c\u6587\u672c\u4e2d\u7684\u5b57\u5f62\u5c06\u88ab\u5b9a\u4f4d\uff0c\u5c31\u50cf\u6709\u65e0\u9650\u7684\u6c34\u5e73\u7a7a\u95f4\u4e00\u6837\u3002\u5982\u679c softWrap \u4e3a false \uff0c overflow \u548c TextAlign \u53ef\u80fd\u4f1a\u4ea7\u751f\u610f\u5916\u7684\u6548\u679c maxLines: Int = Int.MAX_VALUE \u53ef\u9009\u7684\u6587\u672c\u8de8\u5ea6\u7684\u6700\u5927\u884c\u6570\uff0c\u5982\u679c\u6709\u5fc5\u8981\uff0c\u53ef\u4ee5\u8fdb\u884c\u5305\u88c5\u3002\u5982\u679c\u6587\u672c\u8d85\u8fc7\u4e86\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u5b83\u5c06\u6839\u636e overflow \u548c softWrap \u88ab\u622a\u65ad\u3002\u5982\u679c\u5b83\u4e0d\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u5927\u4e8e\u96f6 inlineContent: Map < String , InlineTextContent > = mapOf() \u4e00\u4e2a Map \u5b58\u50a8 Composables\uff0c\u53d6\u4ee3\u4e86\u6587\u672c\u7684\u67d0\u4e9b\u8303\u56f4\u3002\u5b83\u7528\u4e8e\u5728\u6587\u672c\u5e03\u5c40\u4e2d\u63d2\u5165 Composables\u3002\u67e5\u770b InlineTextContent \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f onTextLayout: (TextLayoutResult) -> Unit = {} \u5f53\u8ba1\u7b97\u4e00\u4e2a\u65b0\u7684\u6587\u672c\u5e03\u5c40\u65f6\u6267\u884c\u7684\u56de\u8c03 style: TextStyle = LocalTextStyle.current \u6587\u672c\u7684\u98ce\u683c\u914d\u7f6e\uff0c\u5982\u989c\u8272\u3001\u5b57\u4f53\u3001\u884c\u9ad8\u7b49","title":"2. Text"},{"location":"architecture/architecture_for_compose/","text":"\u672c\u6b21 I/O \u5927\u4f1a\u4e0a\u66dd\u51fa\u4e86 Compose 1.0 \u5373\u5c06\u53d1\u5e03\u7684\u6d88\u606f\uff0c\u867d\u7136 API \u5c42\u9762\u5df2\u8d8b\u4e8e\u7a33\u5b9a\uff0c\u4f46\u771f\u6b63\u8981\u5728\u9879\u76ee\u4e2d\u843d\u5730\u8fd8\u5c11\u4e0d\u4e86\u4e00\u5957\u5408\u7406\u7684\u5e94\u7528\u67b6\u6784\u3002\u4f20\u7edf Android \u5f00\u53d1\u4e2d\u7684 MVP\u3001MVVM \u7b49\u67b6\u6784\u5728\u58f0\u660e\u5f0fUI\u8fd9\u4e00\u65b0\u7269\u79cd\u4e2d\u662f\u5426\u8fd8\u4f9d\u65e7\u53ef\u7528\u5462\uff1f \u672c\u6587\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u4e1a\u52a1\u573a\u666f\u4e3a\u4f8b\uff0c\u8bd5\u56fe\u627e\u51fa\u4e00\u79cd\u4e0e Compose \u6700\u5951\u5408\u7684\u67b6\u6784\u6a21\u5f0f Sample : Wanandroid Search App\u57fa\u672c\u529f\u80fd\uff1a\u7528\u6237\u8f93\u5165\u5173\u952e\u5b57\uff0c\u5728 wanandroid \u7f51\u7ad9\u4e2d\u641c\u7d22\u51fa\u76f8\u5173\u5185\u5bb9\u5e76\u5c55\u793a \u529f\u80fd\u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u96c6\u5408\u4e86\u6570\u636e\u8bf7\u6c42\u3001UI\u5c55\u793a\u7b49\u5e38\u89c1\u4e1a\u52a1\u573a\u666f\uff0c\u53ef\u7528\u6765\u505aUI\u5c42\u4e0e\u903b\u8f91\u5c42\u7684\u89e3\u8026\u5b9e\u9a8c\u3002 \u524d\u671f\u51c6\u5907\uff1aModel\u5c42 \u5176\u5b9e\u65e0\u8bba MVX \u4e2d X \u5982\u4f55\u53d8\u5316\uff0c Model \u90fd\u53ef\u4ee5\u7528\u540c\u4e00\u5957\u5b9e\u73b0\u3002\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a DataRepository \uff0c\u7528\u4e8e\u4ece wanandroid \u83b7\u53d6\u641c\u7d22\u7ed3\u679c\u3002 \u540e\u6587Sample\u4e2d\u7684 Model \u5c42\u90fd\u57fa\u4e8e\u6b64 Repo \u5b9e\u73b0 @ViewModelScoped class DataRepository @Inject constructor (){ private val okhttpClient by lazy { OkHttpClient . Builder (). build () } private val apiService by lazy { Retrofit . Builder () . baseUrl ( \"https://www.wanandroid.com/\" ) . client ( okhttpClient ) . addConverterFactory ( GsonConverterFactory . create ()) . build (). create ( ApiService :: class . java ) } suspend fun getArticlesList ( key : String ) = apiService . getArticlesList ( key ) } Compose\u4e3a\u4ec0\u4e48\u9700\u8981\u67b6\u6784\uff1f \u9996\u5148\uff0c\u5148\u770b\u770b\u4e0d\u501f\u52a9\u4efb\u4f55\u67b6\u6784\u7684 Compose \u4ee3\u7801\u662f\u600e\u6837\u7684\uff1f \u4e0d\u4f7f\u7528\u67b6\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u903b\u8f91\u4ee3\u7801\u5c06\u4e0eUI\u4ee3\u7801\u5076\u5408\u5728\u4e00\u8d77\uff0c\u5728Compose\u4e2d\u8fd9\u79cd\u5f0a\u7aef\u663e\u5f97\u5c24\u4e3a\u660e\u663e\u3002\u5e38\u89c4 Android \u5f00\u53d1\u9ed8\u8ba4\u5f15\u5165\u4e86 MVC \u601d\u60f3\uff0cXML\u7684\u5e03\u5c40\u65b9\u5f0f\u4f7f\u5f97UI\u5c42\u4e0e\u903b\u8f91\u5c42\u6709\u4e86\u521d\u6b65\u7684\u89e3\u8026\u3002\u4f46\u662f Compose \u4e2d\uff0c\u5e03\u5c40\u548c\u903b\u8f91\u540c\u6837\u90fd\u4f7f\u7528Kotlin\u5b9e\u73b0\uff0c\u5f53\u5e03\u5c40\u4e2d\u5939\u4e86\u6742\u903b\u8f91\uff0c\u754c\u9650\u53d8\u5f97\u66f4\u52a0\u6a21\u7cca\u3002 \u6b64\u5916\uff0cCompose UI\u4e2d\u6df7\u5165\u903b\u8f91\u4ee3\u7801\u4f1a\u5e26\u6765\u66f4\u591a\u7684\u6f5c\u5728\u9690\u60a3\u3002\u7531\u4e8e Composable \u4f1a\u9891\u7e41\u91cd\u7ec4\uff0c\u903b\u8f91\u4ee3\u7801\u4e2d\u5982\u679c\u6d89\u53caI/O \u5c31\u5fc5\u987b\u5f53\u505a SideEffect{} \u5904\u7406\u3001\u4e00\u4e9b\u4e0d\u80fd\u968f\u91cd\u7ec4\u9891\u7e41\u521b\u5efa\u7684\u5bf9\u8c61\u4e5f\u5fc5\u987b\u4f7f\u7528 remember{} \u4fdd\u5b58\uff0c\u5f53\u8fd9\u4e9b\u903b\u8f91\u6563\u843d\u5728UI\u4e2d\u65f6\uff0c\u65e0\u5f62\u4e2d\u589e\u52a0\u4e86\u5f00\u53d1\u8005\u7684\u5fc3\u667a\u8d1f\u62c5\uff0c\u5f88\u5bb9\u6613\u53d1\u751f\u9057\u6f0f\u3002 Sample \u7684\u4e1a\u52a1\u573a\u666f\u7279\u522b\u7b80\u5355\uff0cUI\u4e2d\u51fa\u73b0\u5c11\u8bb8 remember{} \u3001 LaunchedEffect{} \u4f3c\u4e4e\u4e5f\u6ca1\u4ec0\u4e48\u4e0d\u59a5\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u76f8\u5bf9\u7b80\u5355\u7684\u4e1a\u52a1\u573a\u666f\u51fa\u73b0\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u6ca1\u6709\u95ee\u9898\uff1a @Composable fun NoArchitectureResultScreen ( answer : String ) { val isLoading = remember { mutableStateOf ( false ) } val dataRepository = remember { DataRepository () } var result : List < ArticleBean > by remember { mutableStateOf ( emptyList ()) } LaunchedEffect ( Unit ) { isLoading . value = true result = withContext ( Dispatchers . IO ) { dataRepository . getArticlesList ( answer ). data . datas } isLoading . value = false } SearchResultScreen ( result , isLoading . value , answer ) } \u4f46\u662f\uff0c\u5f53\u4e1a\u52a1\u8db3\u591f\u590d\u6742\u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u4ee3\u7801\u662f\u96be\u4ee5\u5fcd\u53d7\u7684\u3002\u8fd9\u6b63\u5982\u5728 React \u524d\u7aef\u5f00\u53d1\u4e2d\uff0c\u867d\u7136 Hooks \u63d0\u4f9b\u4e86\u5904\u7406\u903b\u8f91\u7684\u80fd\u529b\uff0c\u4f46\u5374\u4f9d\u7136\u65e0\u6cd5\u53d6\u4ee3 Redux\u3002 Android\u4e2d\u7684\u5e38\u89c1\u67b6\u6784\u6a21\u5f0f MVP \u3001 MVVM \u3001 MVI \u662f Android\u4e2d\u7684\u800c\u4e00\u4e9b\u5e38\u89c1\u67b6\u6784\u6a21\u5f0f\uff0c\u5b83\u4eec\u7684\u76ee\u7684\u90fd\u662f\u670d\u52a1\u4e8eUI\u5c42\u4e0e\u903b\u8f91\u5c42\u7684\u89e3\u8026\uff0c\u53ea\u662f\u5728\u89e3\u8026\u65b9\u5f0f\u4e0a\u6709\u6240\u4e0d\u540c\uff0c\u5982\u4f55\u9009\u62e9\u53d6\u51b3\u4e8e\u4f7f\u7528\u8005\u7684\u559c\u597d\u4ee5\u53ca\u9879\u76ee\u7684\u7279\u70b9 \u201c\u6ca1\u6709\u6700\u597d\u7684\u67b6\u6784\uff0c\u53ea\u6709\u6700\u5408\u9002\u7684\u67b6\u6784\u3002\u201d \u90a3\u4e48\u5728 Compose \u9879\u76ee\u4e2d\u4f55\u79cd\u67b6\u6784\u6700\u5408\u9002\u5462\uff1f 1. MVP MVP \u4e3b\u8981\u7279\u70b9\u662f Presenter \u4e0e View \u4e4b\u95f4\u901a\u8fc7\u63a5\u53e3\u901a\u4fe1\uff0c Presenter \u901a\u8fc7\u8c03\u7528 View \u7684\u65b9\u6cd5\u5b9e\u73b0UI\u7684\u66f4\u65b0\u3002 \u8fd9\u8981\u6c42 Presenter \u9700\u8981\u6301\u6709\u4e00\u4e2a View \u5c42\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f46\u662f Compose \u663e\u7136\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u5f15\u7528\uff0c\u56e0\u4e3a\u7528\u6765\u521b\u5efa UI \u7684 Composable \u5fc5\u987b\u8981\u6c42\u8fd4\u56de Unit\uff0c\u5982\u4e0b\uff1a @Composable fun HomeScreen () { Column { Text ( \"Hello World!\" ) } } \u5b98\u65b9\u6587\u6863\u4e2d\u5bf9\u65e0\u8fd4\u56de\u503c\u7684\u8981\u6c42\u4e5f\u8fdb\u884c\u4e86\u660e\u786e\u7ea6\u675f\uff1a The function doesn\u2019t return anything. Compose functions that emit UI do not need to return anything, because they describe the desired screen state instead of constructing UI widgets. https://developer.android.com/jetpack/compose/mental-model Compose UI \u65e2\u7136\u5b58\u5728\u4e8e Android \u4f53\u7cfb\u4e2d\uff0c\u5fc5\u5b9a\u9700\u8981\u6709\u4e00\u4e2a\u4e0e Android \u4e16\u754c\u8fde\u63a5\u7684\u8d77\u70b9\uff0c\u8d77\u70b9\u5904\u53ef\u80fd\u662f\u4e00\u4e2a Activity \u6216\u8005 Fragment \uff0c\u7528\u4ed6\u4eec\u505aUI\u5c42\u7684\u5f15\u7528\u53e5\u67c4\u4e0d\u53ef\u4ee5\u5417? \u7406\u8bba\u4e0a\u53ef\u4ee5\uff0c\u4f46\u662f\u5f53 Activity \u63a5\u6536 Presenter \u901a\u77e5\u540e\uff0c\u4ecd\u7136\u65e0\u6cd5\u5728\u5185\u90e8\u83b7\u53d6\u5c40\u90e8\u5f15\u7528\uff0c\u53ea\u80fd\u8bbe\u6cd5\u89e6\u53d1\u6574\u4f53Recomposition\uff0c\u8fd9\u5b8c\u5168\u4e27\u5931\u4e86 MVP \u7684\u4f18\u52bf\uff0c\u5373\u901a\u8fc7\u83b7\u53d6\u5c40\u90e8\u5f15\u7528\u8fdb\u884c\u7cbe\u51c6\u5237\u65b0\u3002 \u901a\u8fc7\u5206\u6790\u53ef\u4ee5\u5f97\u5230\u7ed3\u8bba\uff1a \u201cMVP \u8fd9\u79cd\u4f9d\u8d56\u63a5\u53e3\u901a\u4fe1\u7684\u89e3\u8026\u65b9\u5f0f\u65e0\u6cd5\u5728 Compose \u9879\u76ee\u4e2d\u4f7f\u7528\u201d 2. MVVM\uff08Without Jetpack\uff09 \u76f8\u5bf9\u4e8e MVP \u7684\u63a5\u53e3\u901a\u4fe1 \uff0cMVVM \u57fa\u4e8e\u89c2\u5bdf\u8005\u6a21\u5f0f\u8fdb\u884c\u901a\u4fe1\uff0c\u5f53 UI \u89c2\u5bdf\u5230\u6765\u81ea ViewModel \u7684\u6570\u636e\u53d8\u5316\u65f6\u81ea\u6211\u66f4\u65b0\u3002 UI\u5c42\u662f\u5426\u80fd\u8fd4\u56de\u5f15\u7528\u53e5\u67c4\u5df2\u4e0d\u518d\u91cd\u8981\uff0c\u8fd9\u4e0e Compose \u7684\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u5951\u5408\u3002 \u81ea\u4ece Android \u7528 ViewModel \u547d\u540d\u4e86\u67d0 Jetpack \u7ec4\u4ef6\u540e\uff0c\u5728\u5f88\u591a\u4eba\u5fc3\u91cc\uff0cJetpack \u4f3c\u4e4e\u5c31\u4e0e MVVM \u753b\u4e0a\u4e86\u7b49\u53f7\u3002\u8fd9\u786e\u5b9e\u5ba2\u89c2\u63a8\u52a8\u4e86 MVVM \u7684\u666e\u53ca\uff0c\u4f46\u662f Jetpack \u7684 ViewModel \u5e76\u975e\u53ea\u80fd\u7528\u5728 MVVM \u4e2d\uff08\u6bd4\u5982\u5982\u540e\u6587\u4ecb\u7ecd\u7684 MVI \u4e5f\u53ef\u4ee5\u4f7f\u7528 \uff09\uff1b \u53cd\u4e4b\uff0c\u6ca1\u6709 Jetpack \uff0c\u7167\u6837\u53ef\u4ee5\u5b9e\u73b0 MVVM\u3002 \u5148\u6765\u770b\u770b\u4e0d\u501f\u52a9 Jetpack \u7684\u60c5\u51b5\u4e0b\uff0cMVVM \u5982\u4f55\u5b9e\u73b0\uff1f Activity \u4e2d\u521b\u5efa ViewModel \u9996\u5148 View \u5c42\u521b\u5efa ViewModel \u7528\u4e8e\u8ba2\u9605 class MvvmActivity : AppCompatActivity () { private val mvvmViewModel = MvvmViewModel ( DataRepository ()) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { ComposePlaygroundTheme { MvvmApp ( mvvmViewModel ) //\u5c06vm\u4f20\u7ed9Composable } } } } Compose \u9879\u76ee\u4e00\u822c\u4f7f\u7528\u5355 Activity \u7ed3\u6784\uff0c Activity \u4f5c\u4e3a\u5168\u5c40\u5165\u53e3\u975e\u5e38\u9002\u5408\u521b\u5efa\u5168\u5c40 ViewModel\u3002 \u5b50 Compoable \u4e4b\u95f4\u9700\u8981\u57fa\u4e8e ViewModel \u901a\u4fe1\uff0c\u6240\u4ee5\u6784\u5efa Composable \u65f6\u5c06 ViewModel \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 Sample \u4e2d\u6211\u4eec\u5728 Activity \u4e2d\u521b\u5efa\u7684 ViewModel \u4ec5\u4ec5\u662f\u4e3a\u4e86\u4f20\u9012\u7ed9 MvvmApp \u4f7f\u7528\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 Lazy<MvvmViewModel> \uff0c\u5c06\u521b\u5efa\u5ef6\u8fdf\u5230\u771f\u6b63\u9700\u8981\u4f7f\u7528\u7684\u65f6\u5019\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002 \u5b9a\u4e49 NavGraph \u5f53\u6d89\u53ca\u5230 Compose \u9875\u9762\u5207\u6362\u65f6\uff0c navigation-compose \u662f\u4e00\u4e2a\u4e0d\u9519\u9009\u62e9\uff0cSample\u4e2d\u4e5f\u7279\u610f\u8bbe\u8ba1\u4e86 SearchBarScreen \u548c SearchResultScreen \u7684\u5207\u6362\u573a\u666f // build.gradle implementation \"androidx.navigation:navigation-compose:$latest_version\" @Composable fun MvvmApp ( mvvmViewModel : MvvmViewModel ) { val navController = rememberNavController () LaunchedEffect ( Unit ) { mvvmViewModel . navigateToResults . collect { navController . navigate ( \"result\" ) //\u8ba2\u9605VM\u8def\u7531\u4e8b\u4ef6\u901a\u77e5\uff0c\u5904\u7406\u8def\u7531\u8df3\u8f6c } } NavHost ( navController , startDestination = \"searchBar\" ) { composable ( \"searchBar\" ) { MvvmSearchBarScreen ( mvvmViewModel , ) } composable ( \"result\" ) { MvvmSearchResultScreen ( mvvmViewModel , ) } } } - \u5728 root-level \u7684 MvvmApp \u4e2d\u5b9a\u4e49 NavGraph \uff0c composable(\"$dest_id\"){} \u4e2d\u6784\u9020\u8def\u7531\u8282\u70b9\u7684\u5404\u4e2a\u5b50 Screen\uff0c\u6784\u9020\u65f6\u4f20\u5165 ViewModel \u7528\u4e8e Screen \u4e4b\u95f4\u7684\u901a\u4fe1 \u6bcf\u4e2a Composable \u90fd\u6709\u4e00\u4e2a CoroutineScope \u4e0e\u5176 Lifecycle \u7ed1\u5b9a\uff0c LaunchedEffect{} \u53ef\u4ee5\u5728\u8fd9\u4e2a Scope \u4e2d\u542f\u52a8\u534f\u7a0b\u5904\u7406\u526f\u4f5c\u7528\u3002 \u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u53ea\u6267\u884c\u4e00\u6b21\u7684 Effect \u8ba2\u9605 ViewModel \u7684\u8def\u7531\u4e8b\u4ef6\u901a\u77e5 \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u5c06 navConroller \u4e5f\u4f20\u7ed9 MvvmSearchBarScreen \uff0c\u5728\u5176\u5185\u90e8\u76f4\u63a5\u53d1\u8d77\u8def\u7531\u8df3\u8f6c\u3002\u4f46\u5728\u8f83\u590d\u6742\u7684\u9879\u76ee\u4e2d\uff0c\u8df3\u8f6c\u903b\u8f91\u4e0e\u9875\u9762\u5b9a\u4e49\u5e94\u8be5\u5c3d\u91cf\u4fdd\u6301\u89e3\u8026\uff0c\u8fd9\u66f4\u5229\u4e8e\u9875\u9762\u7684\u590d\u7528\u548c\u6d4b\u8bd5\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 Composeable \u4e2d\u76f4\u63a5 mutableStateOf() \u521b\u5efa state \u6765\u5904\u7406\u8def\u7531\u8df3\u8f6c\uff0c\u4f46\u662f\u65e2\u7136\u9009\u62e9\u4f7f\u7528 ViewModel \u4e86\uff0c\u90a3\u5c31\u5e94\u8be5\u5c3d\u53ef\u80fd\u5c06\u6240\u6709 state \u96c6\u4e2d\u5230 ViewModel \u7ba1\u7406\u3002 \u6ce8\u610f: \u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5904\u7406\u8def\u7531\u8df3\u8f6c\u7684 navigateToResults \u662f\u4e00\u4e2a\u201c\u4e8b\u4ef6\u201d\u800c\u975e\u201c\u72b6\u6001\u201d\uff0c\u5173\u4e8e\u8fd9\u90e8\u5206\u533a\u522b\uff0c\u5728\u540e\u6587\u5728\u8be6\u7ec6\u9610\u8ff0 \u5b9a\u4e49\u5b50 Screen \u63a5\u4e0b\u6765\u770b\u4e00\u4e0b\u4e24\u4e2a Screen \u7684\u5177\u4f53\u5b9e\u73b0 @Composable fun MvvmSearchBarScreen ( mvvmViewModel : MvvmViewModel , ) { SearchBarScreen { mvvmViewModel . searchKeyword ( it ) } } @Composable fun MvvmSearchResultScreen ( mvvmViewModel : MvvmViewModel ) { val result by mvvmViewModel . result . collectAsState () val isLoading by mvvmViewModel . isLoading . collectAsState () SearchResultScreen ( result , isLoading , mvvmViewModel . key . value ) } \u5927\u91cf\u903b\u8f91\u90fd\u62bd\u8c61\u5230 ViewModel \u4e2d\uff0c\u6240\u4ee5 Screen \u975e\u5e38\u7b80\u6d01 SearchBarScreen \u63a5\u53d7\u7528\u6237\u8f93\u5165\uff0c\u5c06\u641c\u7d22\u5173\u952e\u8bcd\u53d1\u9001\u7ed9 ViewModel MvvmSearchResultScreen \u4f5c\u4e3a\u7ed3\u679c\u9875\u663e\u793a ViewModel \u53d1\u9001\u7684\u6570\u636e\uff0c\u5305\u62ec Loading \u72b6\u6001\u548c\u641c\u7d22\u7ed3\u679c\u7b49\u3002 collectAsState \u7528\u6765\u5c06 Flow \u8f6c\u5316\u4e3a Compose \u7684 state\uff0c\u6bcf\u5f53 Flow \u63a5\u6536\u5230\u65b0\u6570\u636e\u65f6\u4f1a\u89e6\u53d1 Composable \u91cd\u7ec4\u3002 Compose \u540c\u65f6\u652f\u6301 LiveData\u3001RxJava \u7b49\u5176\u4ed6\u54cd\u5e94\u5f0f\u5e93\u7684 collectAsState UI\u5c42\u7684\u66f4\u591a\u5185\u5bb9\u53ef\u4ee5\u67e5\u9605 SearchBarScreen \u548c SearchResultScreen \u7684\u6e90\u7801\u3002\u7ecf\u8fc7\u903b\u8f91\u62bd\u79bb\u540e\uff0c\u8fd9\u4e24\u4e2a Composable \u53ea\u5269\u4f59\u5e03\u5c40\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u79cd MVX \u4e2d\u5b9e\u73b0\u590d\u7528\u3002 ViewModel \u5b9e\u73b0 \u6700\u540e\u770b\u4e00\u4e0b ViewModel \u7684\u5b9e\u73b0 class MvvmViewModel ( private val searchService : DataRepository , ) { private val coroutineScope = MainScope () private val _isLoading : MutableStateFlow < Boolean > = MutableStateFlow ( false ) val isLoading = _isLoading . asStateFlow () private val _result : MutableStateFlow < List < ArticleBean >> = MutableStateFlow ( emptyList ()) val result = _result . asStateFlow () private val _key = MutableStateFlow ( \"\" ) val key = _key . asStateFlow () //\u4f7f\u7528Channel\u5b9a\u4e49\u4e8b\u4ef6 private val _navigateToResults = Channel < Boolean > ( Channel . BUFFERED ) val navigateToResults = _navigateToResults . receiveAsFlow () fun searchKeyword ( input : String ) { coroutineScope . launch { _isLoading . value = true _navigateToResults . send ( true ) _key . value = input val result = withContext ( Dispatchers . IO ) { searchService . getArticlesList ( input ) } _result . emit ( result . data . datas ) _isLoading . value = false } } } - \u63a5\u6536\u5230\u7528\u6237\u8f93\u5165\u540e\uff0c\u901a\u8fc7 DataRepository \u53d1\u8d77\u641c\u7d22\u8bf7\u6c42 \u641c\u7d22\u8fc7\u7a0b\u4e2d\u4f9d\u6b21\u66f4\u65b0 loading \uff08loading\u663e\u793a\u72b6\u6001\uff09\u3001 navigateToResult (\u9875\u9762\u8df3\u8f6c\u4e8b\u4ef6)\u3001 key \uff08\u641c\u7d22\u5173\u952e\u8bcd\uff09\u3001 result \uff08\u641c\u7d22\u7ed3\u679c\uff09\u7b49\u5185\u5bb9\uff0c\u4e0d\u65ad\u9a71\u52a8UI\u5237\u65b0 \u6240\u6709\u72b6\u6001\u96c6\u4e2d\u5728 ViewModel \u7ba1\u7406\uff0c\u751a\u81f3\u9875\u9762\u8df3\u8f6c\u3001Toast\u5f39\u51fa\u7b49\u4e8b\u4ef6\u4e5f\u7531 ViewModel \u8d1f\u8d23\u901a\u77e5\uff0c\u8fd9\u5bf9\u5355\u5143\u6d4b\u8bd5\u975e\u5e38\u53cb\u597d\uff0c\u5728\u5355\u6d4b\u4e2d\u65e0\u9700\u518d mock \u5404\u79cdUI\u76f8\u5173\u7684\u4e0a\u4e0b\u6587\u3002 3. Jetpack MVVM Jeptack \u7684\u610f\u4e49\u5728\u4e8e\u964d\u4f4e MVVM \u5728 Android\u5e73\u53f0\u7684\u843d\u5730\u6210\u672c\u3002 \u5f15\u5165 Jetpack \u540e\u7684\u4ee3\u7801\u53d8\u5316\u4e0d\u5927\uff0c\u4e3b\u8981\u53d8\u52a8\u5728\u4e8e ViewModel \u7684\u521b\u5efa\u3002 Jetpack \u63d0\u4f9b\u4e86\u591a\u4e2a\u7ec4\u4ef6\uff0c\u964d\u4f4e\u4e86 ViewModel \u7684\u4f7f\u7528\u6210\u672c\uff1a - \u901a\u8fc7 hilt \u7684 DI \u964d\u4f4e ViewModel \u6784\u9020\u6210\u672c\uff0c\u65e0\u9700\u624b\u52a8\u4f20\u5165 DataRepository \u7b49\u4f9d\u8d56 - \u4efb\u610f Composable \u90fd\u53ef\u4ee5\u4ece\u6700\u8fd1\u7684 Scope \u4e2d\u83b7\u53d6 ViewModel\uff0c\u65e0\u9700\u5c42\u5c42\u4f20\u53c2\u3002 @HiltViewModel class JetpackMvvmViewModel @Inject constructor ( private val searchService : DataRepository // DataRepository \u4f9d\u9760DI\u6ce8\u5165 ) : ViewModel () { ... } @Composable fun JetpackMvvmApp () { val navController = rememberNavController () NavHost ( navController , startDestination = \"searchBar\" , route = \"root\" ) { composable ( \"searchBar\" ) { JetpackMvvmSearchBarScreen ( viewModel ( navController , \"root\" ) //viewModel \u53ef\u4ee5\u5728\u9700\u8981\u65f6\u518d\u83b7\u53d6, \u65e0\u9700\u5b9e\u73b0\u521b\u5efa\u597d\u5e76\u901a\u8fc7\u53c2\u6570\u4f20\u8fdb\u6765 ) } composable ( \"result\" ) { JetpackMvvmSearchResultScreen ( viewModel ( navController , \"root\" ) //\u53ef\u4ee5\u83b7\u53d6\u8ddf\u540c\u4e00\u4e2aViewModel\u5b9e\u4f8b ) } } } @Composable inline fun < reified VM : ViewModel > viewModel ( navController : NavController , graphId : String = \"\" ): VM = //\u5728 NavGraph \u5168\u5c40\u8303\u56f4\u4f7f\u7528 Hilt \u521b\u5efa ViewModel hiltNavGraphViewModel ( backStackEntry = navController . getBackStackEntry ( graphId ) ) Jetpack \u751a\u81f3\u63d0\u4f9b\u4e86 hilt-navigation-compose \u5e93\uff0c\u53ef\u4ee5\u5728 Composable \u4e2d\u83b7\u53d6 NavGraph Scope \u6216 Destination Scope \u7684 ViewModel\uff0c\u5e76\u81ea\u52a8\u4f9d\u8d56 Hilt \u6784\u5efa\u3002Destination Scope \u7684 ViewModel \u4f1a\u8ddf\u968f BackStack \u7684\u5f39\u51fa\u81ea\u52a8 Clear \uff0c\u907f\u514d\u6cc4\u9732\u3002 // build.gradle implementation androidx . hilt : hilt - navigation - compose: $latest_versioin \u201c\u672a\u6765 Jetpack \u5404\u7ec4\u4ef6\u4e4b\u95f4\u534f\u540c\u6548\u5e94\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5f3a\u3002\u201d \u53c2\u8003 https://developer.android.com/jetpack/compose/libraries#hilt MVI MVI \u4e0e MVVM \u5f88\u76f8\u4f3c\uff0c\u5176\u501f\u9274\u4e86\u524d\u7aef\u6846\u67b6\u7684\u601d\u60f3\uff0c\u66f4\u52a0\u5f3a\u8c03 \u6570\u636e\u7684\u5355\u5411\u6d41\u52a8 \u548c \u552f\u4e00\u6570\u636e\u6e90 \uff0c\u53ef\u4ee5\u770b\u505a\u662f MVVM + Redux \u7684\u7ed3\u5408\u3002 MVI \u7684 I \u6307 Intent\uff0c\u8fd9\u91cc\u4e0d\u662f\u542f\u52a8 Activity \u90a3\u4e2a Intent\uff0c\u800c\u662f\u4e00\u79cd\u5bf9\u7528\u6237\u64cd\u4f5c\u7684\u5c01\u88c5\u5f62\u5f0f\uff0c\u4e3a\u907f\u514d\u6df7\u6dc6\uff0c\u4e5f\u53ef\u5524\u505a Action \u7b49\u5176\u4ed6\u79f0\u547c\u3002 \u7528\u6237\u64cd\u4f5c\u4ee5 Action \u7684\u5f62\u5f0f\u9001\u7ed9 Model\u5c42 \u8fdb\u884c\u5904\u7406\u3002\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 Jetpack \u7684 ViewModel \u8d1f\u8d23 Intent \u7684\u63a5\u53d7\u548c\u5904\u7406\uff0c\u56e0\u4e3a ViewModel \u53ef\u4ee5\u5728 Composable \u4e2d\u65b9\u4fbf\u83b7\u53d6\u3002 \u5728 SearchBarScreen \u7528\u6237\u8f93\u5165\u5173\u952e\u8bcd\u540e\u901a\u8fc7 Action \u901a\u77e5 ViewModel \u8fdb\u884c\u641c\u7d22 @Composable fun MviSearchBarScreen ( mviViewModel : MviViewModel , onConfirm : () -> Unit ) { SearchBarScreen { mviViewModel . onAction ( MviViewModel . UiAction . SearchInput ( it )) } } \u901a\u8fc7 Action \u901a\u4fe1\uff0c\u6709\u5229\u4e8e View \u4e0e ViewModel \u4e4b\u95f4\u7684\u8fdb\u4e00\u6b65\u89e3\u8026\uff0c\u540c\u65f6\u6240\u6709\u8c03\u7528\u4ee5 Action \u7684\u5f62\u5f0f\u6c47\u603b\u5230\u4e00\u5904\uff0c\u4e5f\u6709\u5229\u4e8e\u5bf9\u884c\u4e3a\u7684\u96c6\u4e2d\u5206\u6790\u548c\u76d1\u63a7 @Composable fun MviSearchResultScreen ( mviViewModel : MviViewModel ) { val viewState by mviViewModel . viewState . collectAsState () SearchResultScreen ( viewState . result , viewState . isLoading , viewState . key ) } MVVM \u7684 ViewModel \u4e2d\u5206\u6563\u5b9a\u4e49\u4e86\u591a\u4e2a State \uff0cMVI \u4f7f\u7528 ViewState \u5bf9 State \u96c6\u4e2d\u7ba1\u7406\uff0c\u53ea\u9700\u8981\u8ba2\u9605\u4e00\u4e2a ViewState \u4fbf\u53ef\u83b7\u53d6\u9875\u9762\u7684\u6240\u6709\u72b6\u6001\uff0c\u76f8\u5bf9 MVVM \u51cf\u5c11\u4e86\u4e0d\u5c11\u6a21\u677f\u4ee3\u7801\u3002 \u76f8\u5bf9\u4e8e MVVM\uff0cViewModel \u4e5f\u6709\u4e00\u4e9b\u53d8\u5316 class MviViewModel ( private val searchService : DataRepository , ) { private val coroutineScope = MainScope () private val _viewState : MutableStateFlow < ViewState > = MutableStateFlow ( ViewState ()) val viewState = _viewState . asStateFlow () private val _navigateToResults = Channel < OneShotEvent > ( Channel . BUFFERED ) val navigateToResults = _navigateToResults . receiveAsFlow () fun onAction ( uiAction : UiAction ) { when ( uiAction ) { is UiAction . SearchInput -> { coroutineScope . launch { _viewState . value = _viewState . value . copy ( isLoading = true ) val result = withContext ( Dispatchers . IO ) { searchService . getArticlesList ( uiAction . input ) } _viewState . value = _viewState . value . copy ( result = result . data . datas , key = uiAction . input ) _navigateToResults . send ( OneShotEvent . NavigateToResults ) _viewState . value = _viewState . value . copy ( isLoading = false ) } } } } data class ViewState ( val isLoading : Boolean = false , val result : List < ArticleBean > = emptyList (), val key : String = \"\" ) sealed class OneShotEvent { object NavigateToResults : OneShotEvent () } sealed class UiAction { class SearchInput ( val input : String ) : UiAction () } } \u9875\u9762\u6240\u6709\u7684\u72b6\u6001\u90fd\u5b9a\u4e49\u5728 ViewState \u8fd9\u4e2a data class \u4e2d\uff0c\u72b6\u6001\u7684\u4fee\u6539\u53ea\u80fd\u5728 onAction \u4e2d\u8fdb\u884c, \u5176\u4f59\u573a\u6240\u90fd\u662f immutable \u7684\uff0c \u4fdd\u8bc1\u4e86\u6570\u636e\u6d41\u53ea\u80fd\u5355\u5411\u4fee\u6539\u3002 \u53cd\u89c2 MVVM \uff0c MutableStateFlow \u5bf9\u5916\u66b4\u9732\u65f6\u8f6c\u6210 immutable \u624d\u80fd\u4fdd\u8bc1\u8fd9\u79cd\u5b89\u5168\u6027\uff0c\u9700\u8981\u589e\u52a0\u4e0d\u5c11\u6a21\u677f\u4ee3\u7801\u4e14\u4ecd\u7136\u5bb9\u6613\u9057\u6f0f\u3002 \u4e8b\u4ef6\u5219\u7edf\u4e00\u5b9a\u4e49\u5728 OneShotEvent \u4e2d\u3002 Event \u4e0d\u540c\u4e8e State\uff0c\u540c\u4e00\u7c7b\u578b\u7684\u4e8b\u4ef6\u5141\u8bb8\u54cd\u5e94\u591a\u6b21\uff0c\u56e0\u6b64\u5b9a\u4e49\u4e8b\u4ef6\u4f7f\u7528 Channel \u800c\u4e0d\u662f StateFlow \u3002 Compose \u9f13\u52b1\u591a\u4f7f\u7528 State \u5c11\u4f7f\u7528 Event\uff0c Event \u53ea\u9002\u5408\u7528\u5728\u5f39 Toast \u7b49\u5c11\u6570\u573a\u666f\u4e2d \u901a\u8fc7\u6d4f\u89c8 ViewModel \u7684 ViewState \u548c Aciton \u5b9a\u4e49\u5c31\u53ef\u4ee5\u7406\u6e05 ViewModel \u7684\u804c\u8d23\uff0c\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u4f5c\u4e3a\u63a5\u53e3\u6587\u6863\u4f7f\u7528\u3002 \u9875\u9762\u8def\u7531 Sample \u4e2d\u4e4b\u6240\u4ee5\u4f7f\u7528\u4e8b\u4ef6\u800c\u975e\u72b6\u6001\u6765\u5904\u7406\u8def\u7531\u8df3\u8f6c\uff0c\u4e00\u4e2a\u4e3b\u8981\u539f\u56e0\u662f\u7531\u4e8e\u4f7f\u7528\u4e86 Navigation \u3002Navigation \u6709\u81ea\u5df1\u7684 backstack \u7ba1\u7406\uff0c\u5f53\u70b9\u51fb back \u952e\u65f6\u4f1a\u81ea\u52a8\u5e2e\u52a9\u6211\u4eec\u8fd4\u56de\u524d\u4e00\u9875\u9762\u3002\u5018\u82e5\u6211\u4eec\u4f7f\u7528\u72b6\u6001\u6765\u63cf\u8ff0\u5f53\u524d\u9875\u9762\uff0c\u5f53\u70b9\u51fb back\u65f6\uff0c\u6ca1\u6709\u673a\u4f1a\u66f4\u65b0\u72b6\u6001\uff0c\u8fd9\u5c06\u9020\u6210 ViewState \u4e0e UI \u7684\u4e0d\u4e00\u81f4\u3002 \u5173\u4e8e\u8def\u7531\u65b9\u6848\u7684\u5efa\u8bae\uff1a\u7b80\u5355\u9879\u76ee\u4f7f\u7528 \u4e8b\u4ef6 \u63a7\u5236\u9875\u9762\u8df3\u8f6c\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u590d\u6742\u9879\u76ee\uff0c\u63a8\u8350\u4f7f\u7528 \u72b6\u6001 \u8fdb\u884c\u9875\u9762\u7ba1\u7406\uff0c\u6709\u5229\u4e8e\u903b\u8f91\u5c42\u65f6\u523b\u611f\u77e5\u5230\u5f53\u524d\u7684UI\u72b6\u6001\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06 NavController \u7684 backstack \u72b6\u6001 \u4e0e ViewModel \u7684\u72b6\u6001\u5efa\u7acb\u540c\u6b65\uff1a class MvvmViewModel ( private val searchService : DataRepository , ) { ... //\u4f7f\u7528 StateFlow \u63cf\u8ff0\u9875\u9762 private val _destination = MutableStateFlow ( DestSearchBar ) val destination = _destination . asStateFlow () fun searchKeyword ( input : String ) { coroutineScope . launch { ... _destination . value = DestSearchResult ... } } fun bindNavStack ( navController : NavController ) { //navigation \u7684\u72b6\u6001\u65f6\u523b\u540c\u6b65\u5230 viewModel navController . addOnDestinationChangedListener { _ , _ , arguments -> run { _destination . value = requireNotNull ( arguments ?. getString ( KEY_ROUTE )) } } } } \u5982\u4e0a\uff0c\u5f53 navigation \u72b6\u6001\u53d8\u5316\u65f6\uff0c\u4f1a\u53ca\u65f6\u540c\u6b65\u5230 ViewModel \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528 StateFlow \u800c\u975e Channel \u6765\u63cf\u8ff0\u9875\u9762\u72b6\u6001\u4e86\u3002 @Composable fun MvvmApp ( mvvmViewModel : MvvmViewModel ) { val navController = rememberNavController () LaunchedEffect ( Unit ) { with ( mvvmViewModel ) { bindNavStack ( navController ) //\u5efa\u7acb\u540c\u6b65 destination . collect { navController . navigate ( it ) } } } } \u5728\u5165\u53e3\u5904\uff0c\u4e3a NavController \u548c ViewModel \u5efa\u7acb\u540c\u6b65\u7ed1\u5b9a\u5373\u53ef\u3002 Clean Architecture \u66f4\u5927\u578b\u7684\u9879\u76ee\u4e2d\uff0c\u4f1a\u5f15\u5165 Clean Architecture \uff0c\u901a\u8fc7 Use Case \u5c06 ViewModel \u5185\u7684\u903b\u8f91\u8fdb\u4e00\u6b65\u5206\u89e3\u3002 Compose \u53ea\u662f\u4e2a UI \u6846\u67b6\uff0c\u5bf9\u4e8e ViewModel \u4ee5\u4e0b\u7684\u903b\u8f91\u5c42\u7684\u6cbb\u7406\u65b9\u5f0f\u4e0e\u4f20\u7edf\u7684 Andorid \u5f00\u53d1\u6ca1\u6709\u533a\u522b\u3002\u6240\u4ee5 Clean Architecture \u8fd9\u6837\u7684\u590d\u6742\u67b6\u6784\u4ecd\u7136\u53ef\u4ee5\u5728 Compose \u9879\u76ee\u4e2d\u4f7f\u7528 \u603b\u7ed3 \u6bd4\u8f83\u4e86\u8fd9\u4e48\u591a\u79cd\u67b6\u6784\uff0c\u90a3\u79cd\u4e0e Compose \u6700\u5951\u5408\u5462\uff1f Compose \u7684\u58f0\u660e\u5f0fUI\u601d\u60f3\u6765\u81ea React\uff0c\u6240\u4ee5\u540c\u6837\u6765\u81ea Redux \u601d\u60f3\u7684 MVI \u5e94\u8be5\u662f Compose \u7684\u6700\u4f73\u4f34\u4fa3\u3002\u5f53\u7136 MVI \u53ea\u662f\u5728 MVVM \u7684\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u4e9b\u6539\u826f\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a MVVM \u7684\u9879\u76ee\uff0c\u53ea\u662f\u60f3\u5c06 UI \u90e8\u5206\u6539\u9020\u6210 Compose \uff0c\u90a3\u4e48\u6ca1\u5fc5\u8981\u4e3a\u4e86\u6539\u9020\u6210 MVI \u800c\u8fdb\u884c\u91cd\u6784\uff0cMVVM \u4e5f\u53ef\u4ee5\u5f88\u597d\u5730\u914d\u5408 Compose \u4f7f\u7528\u7684\u3002 \u4f46\u662f\u5982\u679c\u4f60\u60f3\u5c06\u4e00\u4e2a MVP \u9879\u76ee\u6539\u9020\u6210 Compose \u53ef\u80fd\u6210\u672c\u5c31\u6709\u70b9\u5927\u4e86\u3002 \u5173\u4e8e Jetpack\uff0c\u5982\u679c\u4f60\u7684\u9879\u76ee\u53ea\u7528\u4e8e Android\uff0c\u90a3\u4e48 Jetpack \u65e0\u7591\u662f\u4e00\u4e2a\u597d\u5de5\u5177\u3002\u4f46\u662f Compose \u672a\u6765\u7684\u5e94\u7528\u573a\u666f\u5c06\u4f1a\u5f88\u5e7f\u6cdb\uff0c\u5982\u679c\u4f60\u6709\u9884\u671f\u672a\u6765\u4f1a\u914d\u5408 KMP \u5f00\u53d1\u8de8\u5e73\u53f0\u5e94\u7528\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5b66\u4f1a\u4e0d\u4f9d\u8d56 Jetpack \u7684\u5f00\u53d1\u65b9\u5f0f\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u4e3a\u4ec0\u4e48\u8981\u4ecb\u7ecd\u975e Jetpack \u4e0b\u7684 MVVM \u7684\u4e00\u4e2a\u521d\u8877\u3002 Sample \u4ee3\u7801\uff1a \u70b9\u51fb\u8fd9\u91cc","title":"Compose\u67b6\u6784\u5982\u4f55\u9009\uff1fMVP,MVVM,MVI"},{"location":"architecture/architecture_for_compose/#sample-wanandroid-search","text":"App\u57fa\u672c\u529f\u80fd\uff1a\u7528\u6237\u8f93\u5165\u5173\u952e\u5b57\uff0c\u5728 wanandroid \u7f51\u7ad9\u4e2d\u641c\u7d22\u51fa\u76f8\u5173\u5185\u5bb9\u5e76\u5c55\u793a \u529f\u80fd\u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u96c6\u5408\u4e86\u6570\u636e\u8bf7\u6c42\u3001UI\u5c55\u793a\u7b49\u5e38\u89c1\u4e1a\u52a1\u573a\u666f\uff0c\u53ef\u7528\u6765\u505aUI\u5c42\u4e0e\u903b\u8f91\u5c42\u7684\u89e3\u8026\u5b9e\u9a8c\u3002","title":"Sample :  Wanandroid Search"},{"location":"architecture/architecture_for_compose/#model","text":"\u5176\u5b9e\u65e0\u8bba MVX \u4e2d X \u5982\u4f55\u53d8\u5316\uff0c Model \u90fd\u53ef\u4ee5\u7528\u540c\u4e00\u5957\u5b9e\u73b0\u3002\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a DataRepository \uff0c\u7528\u4e8e\u4ece wanandroid \u83b7\u53d6\u641c\u7d22\u7ed3\u679c\u3002 \u540e\u6587Sample\u4e2d\u7684 Model \u5c42\u90fd\u57fa\u4e8e\u6b64 Repo \u5b9e\u73b0 @ViewModelScoped class DataRepository @Inject constructor (){ private val okhttpClient by lazy { OkHttpClient . Builder (). build () } private val apiService by lazy { Retrofit . Builder () . baseUrl ( \"https://www.wanandroid.com/\" ) . client ( okhttpClient ) . addConverterFactory ( GsonConverterFactory . create ()) . build (). create ( ApiService :: class . java ) } suspend fun getArticlesList ( key : String ) = apiService . getArticlesList ( key ) }","title":"\u524d\u671f\u51c6\u5907\uff1aModel\u5c42"},{"location":"architecture/architecture_for_compose/#compose","text":"\u9996\u5148\uff0c\u5148\u770b\u770b\u4e0d\u501f\u52a9\u4efb\u4f55\u67b6\u6784\u7684 Compose \u4ee3\u7801\u662f\u600e\u6837\u7684\uff1f \u4e0d\u4f7f\u7528\u67b6\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u903b\u8f91\u4ee3\u7801\u5c06\u4e0eUI\u4ee3\u7801\u5076\u5408\u5728\u4e00\u8d77\uff0c\u5728Compose\u4e2d\u8fd9\u79cd\u5f0a\u7aef\u663e\u5f97\u5c24\u4e3a\u660e\u663e\u3002\u5e38\u89c4 Android \u5f00\u53d1\u9ed8\u8ba4\u5f15\u5165\u4e86 MVC \u601d\u60f3\uff0cXML\u7684\u5e03\u5c40\u65b9\u5f0f\u4f7f\u5f97UI\u5c42\u4e0e\u903b\u8f91\u5c42\u6709\u4e86\u521d\u6b65\u7684\u89e3\u8026\u3002\u4f46\u662f Compose \u4e2d\uff0c\u5e03\u5c40\u548c\u903b\u8f91\u540c\u6837\u90fd\u4f7f\u7528Kotlin\u5b9e\u73b0\uff0c\u5f53\u5e03\u5c40\u4e2d\u5939\u4e86\u6742\u903b\u8f91\uff0c\u754c\u9650\u53d8\u5f97\u66f4\u52a0\u6a21\u7cca\u3002 \u6b64\u5916\uff0cCompose UI\u4e2d\u6df7\u5165\u903b\u8f91\u4ee3\u7801\u4f1a\u5e26\u6765\u66f4\u591a\u7684\u6f5c\u5728\u9690\u60a3\u3002\u7531\u4e8e Composable \u4f1a\u9891\u7e41\u91cd\u7ec4\uff0c\u903b\u8f91\u4ee3\u7801\u4e2d\u5982\u679c\u6d89\u53caI/O \u5c31\u5fc5\u987b\u5f53\u505a SideEffect{} \u5904\u7406\u3001\u4e00\u4e9b\u4e0d\u80fd\u968f\u91cd\u7ec4\u9891\u7e41\u521b\u5efa\u7684\u5bf9\u8c61\u4e5f\u5fc5\u987b\u4f7f\u7528 remember{} \u4fdd\u5b58\uff0c\u5f53\u8fd9\u4e9b\u903b\u8f91\u6563\u843d\u5728UI\u4e2d\u65f6\uff0c\u65e0\u5f62\u4e2d\u589e\u52a0\u4e86\u5f00\u53d1\u8005\u7684\u5fc3\u667a\u8d1f\u62c5\uff0c\u5f88\u5bb9\u6613\u53d1\u751f\u9057\u6f0f\u3002 Sample \u7684\u4e1a\u52a1\u573a\u666f\u7279\u522b\u7b80\u5355\uff0cUI\u4e2d\u51fa\u73b0\u5c11\u8bb8 remember{} \u3001 LaunchedEffect{} \u4f3c\u4e4e\u4e5f\u6ca1\u4ec0\u4e48\u4e0d\u59a5\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u76f8\u5bf9\u7b80\u5355\u7684\u4e1a\u52a1\u573a\u666f\u51fa\u73b0\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u6ca1\u6709\u95ee\u9898\uff1a @Composable fun NoArchitectureResultScreen ( answer : String ) { val isLoading = remember { mutableStateOf ( false ) } val dataRepository = remember { DataRepository () } var result : List < ArticleBean > by remember { mutableStateOf ( emptyList ()) } LaunchedEffect ( Unit ) { isLoading . value = true result = withContext ( Dispatchers . IO ) { dataRepository . getArticlesList ( answer ). data . datas } isLoading . value = false } SearchResultScreen ( result , isLoading . value , answer ) } \u4f46\u662f\uff0c\u5f53\u4e1a\u52a1\u8db3\u591f\u590d\u6742\u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u4ee3\u7801\u662f\u96be\u4ee5\u5fcd\u53d7\u7684\u3002\u8fd9\u6b63\u5982\u5728 React \u524d\u7aef\u5f00\u53d1\u4e2d\uff0c\u867d\u7136 Hooks \u63d0\u4f9b\u4e86\u5904\u7406\u903b\u8f91\u7684\u80fd\u529b\uff0c\u4f46\u5374\u4f9d\u7136\u65e0\u6cd5\u53d6\u4ee3 Redux\u3002","title":"Compose\u4e3a\u4ec0\u4e48\u9700\u8981\u67b6\u6784\uff1f"},{"location":"architecture/architecture_for_compose/#android","text":"MVP \u3001 MVVM \u3001 MVI \u662f Android\u4e2d\u7684\u800c\u4e00\u4e9b\u5e38\u89c1\u67b6\u6784\u6a21\u5f0f\uff0c\u5b83\u4eec\u7684\u76ee\u7684\u90fd\u662f\u670d\u52a1\u4e8eUI\u5c42\u4e0e\u903b\u8f91\u5c42\u7684\u89e3\u8026\uff0c\u53ea\u662f\u5728\u89e3\u8026\u65b9\u5f0f\u4e0a\u6709\u6240\u4e0d\u540c\uff0c\u5982\u4f55\u9009\u62e9\u53d6\u51b3\u4e8e\u4f7f\u7528\u8005\u7684\u559c\u597d\u4ee5\u53ca\u9879\u76ee\u7684\u7279\u70b9 \u201c\u6ca1\u6709\u6700\u597d\u7684\u67b6\u6784\uff0c\u53ea\u6709\u6700\u5408\u9002\u7684\u67b6\u6784\u3002\u201d \u90a3\u4e48\u5728 Compose \u9879\u76ee\u4e2d\u4f55\u79cd\u67b6\u6784\u6700\u5408\u9002\u5462\uff1f","title":"Android\u4e2d\u7684\u5e38\u89c1\u67b6\u6784\u6a21\u5f0f"},{"location":"architecture/architecture_for_compose/#1-mvp","text":"MVP \u4e3b\u8981\u7279\u70b9\u662f Presenter \u4e0e View \u4e4b\u95f4\u901a\u8fc7\u63a5\u53e3\u901a\u4fe1\uff0c Presenter \u901a\u8fc7\u8c03\u7528 View \u7684\u65b9\u6cd5\u5b9e\u73b0UI\u7684\u66f4\u65b0\u3002 \u8fd9\u8981\u6c42 Presenter \u9700\u8981\u6301\u6709\u4e00\u4e2a View \u5c42\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f46\u662f Compose \u663e\u7136\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u5f15\u7528\uff0c\u56e0\u4e3a\u7528\u6765\u521b\u5efa UI \u7684 Composable \u5fc5\u987b\u8981\u6c42\u8fd4\u56de Unit\uff0c\u5982\u4e0b\uff1a @Composable fun HomeScreen () { Column { Text ( \"Hello World!\" ) } } \u5b98\u65b9\u6587\u6863\u4e2d\u5bf9\u65e0\u8fd4\u56de\u503c\u7684\u8981\u6c42\u4e5f\u8fdb\u884c\u4e86\u660e\u786e\u7ea6\u675f\uff1a The function doesn\u2019t return anything. Compose functions that emit UI do not need to return anything, because they describe the desired screen state instead of constructing UI widgets. https://developer.android.com/jetpack/compose/mental-model Compose UI \u65e2\u7136\u5b58\u5728\u4e8e Android \u4f53\u7cfb\u4e2d\uff0c\u5fc5\u5b9a\u9700\u8981\u6709\u4e00\u4e2a\u4e0e Android \u4e16\u754c\u8fde\u63a5\u7684\u8d77\u70b9\uff0c\u8d77\u70b9\u5904\u53ef\u80fd\u662f\u4e00\u4e2a Activity \u6216\u8005 Fragment \uff0c\u7528\u4ed6\u4eec\u505aUI\u5c42\u7684\u5f15\u7528\u53e5\u67c4\u4e0d\u53ef\u4ee5\u5417? \u7406\u8bba\u4e0a\u53ef\u4ee5\uff0c\u4f46\u662f\u5f53 Activity \u63a5\u6536 Presenter \u901a\u77e5\u540e\uff0c\u4ecd\u7136\u65e0\u6cd5\u5728\u5185\u90e8\u83b7\u53d6\u5c40\u90e8\u5f15\u7528\uff0c\u53ea\u80fd\u8bbe\u6cd5\u89e6\u53d1\u6574\u4f53Recomposition\uff0c\u8fd9\u5b8c\u5168\u4e27\u5931\u4e86 MVP \u7684\u4f18\u52bf\uff0c\u5373\u901a\u8fc7\u83b7\u53d6\u5c40\u90e8\u5f15\u7528\u8fdb\u884c\u7cbe\u51c6\u5237\u65b0\u3002 \u901a\u8fc7\u5206\u6790\u53ef\u4ee5\u5f97\u5230\u7ed3\u8bba\uff1a \u201cMVP \u8fd9\u79cd\u4f9d\u8d56\u63a5\u53e3\u901a\u4fe1\u7684\u89e3\u8026\u65b9\u5f0f\u65e0\u6cd5\u5728 Compose \u9879\u76ee\u4e2d\u4f7f\u7528\u201d","title":"1. MVP"},{"location":"architecture/architecture_for_compose/#2-mvvmwithout-jetpack","text":"\u76f8\u5bf9\u4e8e MVP \u7684\u63a5\u53e3\u901a\u4fe1 \uff0cMVVM \u57fa\u4e8e\u89c2\u5bdf\u8005\u6a21\u5f0f\u8fdb\u884c\u901a\u4fe1\uff0c\u5f53 UI \u89c2\u5bdf\u5230\u6765\u81ea ViewModel \u7684\u6570\u636e\u53d8\u5316\u65f6\u81ea\u6211\u66f4\u65b0\u3002 UI\u5c42\u662f\u5426\u80fd\u8fd4\u56de\u5f15\u7528\u53e5\u67c4\u5df2\u4e0d\u518d\u91cd\u8981\uff0c\u8fd9\u4e0e Compose \u7684\u5de5\u4f5c\u65b9\u5f0f\u975e\u5e38\u5951\u5408\u3002 \u81ea\u4ece Android \u7528 ViewModel \u547d\u540d\u4e86\u67d0 Jetpack \u7ec4\u4ef6\u540e\uff0c\u5728\u5f88\u591a\u4eba\u5fc3\u91cc\uff0cJetpack \u4f3c\u4e4e\u5c31\u4e0e MVVM \u753b\u4e0a\u4e86\u7b49\u53f7\u3002\u8fd9\u786e\u5b9e\u5ba2\u89c2\u63a8\u52a8\u4e86 MVVM \u7684\u666e\u53ca\uff0c\u4f46\u662f Jetpack \u7684 ViewModel \u5e76\u975e\u53ea\u80fd\u7528\u5728 MVVM \u4e2d\uff08\u6bd4\u5982\u5982\u540e\u6587\u4ecb\u7ecd\u7684 MVI \u4e5f\u53ef\u4ee5\u4f7f\u7528 \uff09\uff1b \u53cd\u4e4b\uff0c\u6ca1\u6709 Jetpack \uff0c\u7167\u6837\u53ef\u4ee5\u5b9e\u73b0 MVVM\u3002 \u5148\u6765\u770b\u770b\u4e0d\u501f\u52a9 Jetpack \u7684\u60c5\u51b5\u4e0b\uff0cMVVM \u5982\u4f55\u5b9e\u73b0\uff1f","title":"2. MVVM\uff08Without Jetpack\uff09"},{"location":"architecture/architecture_for_compose/#activity-viewmodel","text":"\u9996\u5148 View \u5c42\u521b\u5efa ViewModel \u7528\u4e8e\u8ba2\u9605 class MvvmActivity : AppCompatActivity () { private val mvvmViewModel = MvvmViewModel ( DataRepository ()) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { ComposePlaygroundTheme { MvvmApp ( mvvmViewModel ) //\u5c06vm\u4f20\u7ed9Composable } } } } Compose \u9879\u76ee\u4e00\u822c\u4f7f\u7528\u5355 Activity \u7ed3\u6784\uff0c Activity \u4f5c\u4e3a\u5168\u5c40\u5165\u53e3\u975e\u5e38\u9002\u5408\u521b\u5efa\u5168\u5c40 ViewModel\u3002 \u5b50 Compoable \u4e4b\u95f4\u9700\u8981\u57fa\u4e8e ViewModel \u901a\u4fe1\uff0c\u6240\u4ee5\u6784\u5efa Composable \u65f6\u5c06 ViewModel \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 Sample \u4e2d\u6211\u4eec\u5728 Activity \u4e2d\u521b\u5efa\u7684 ViewModel \u4ec5\u4ec5\u662f\u4e3a\u4e86\u4f20\u9012\u7ed9 MvvmApp \u4f7f\u7528\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 Lazy<MvvmViewModel> \uff0c\u5c06\u521b\u5efa\u5ef6\u8fdf\u5230\u771f\u6b63\u9700\u8981\u4f7f\u7528\u7684\u65f6\u5019\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002","title":"Activity \u4e2d\u521b\u5efa ViewModel"},{"location":"architecture/architecture_for_compose/#navgraph","text":"\u5f53\u6d89\u53ca\u5230 Compose \u9875\u9762\u5207\u6362\u65f6\uff0c navigation-compose \u662f\u4e00\u4e2a\u4e0d\u9519\u9009\u62e9\uff0cSample\u4e2d\u4e5f\u7279\u610f\u8bbe\u8ba1\u4e86 SearchBarScreen \u548c SearchResultScreen \u7684\u5207\u6362\u573a\u666f // build.gradle implementation \"androidx.navigation:navigation-compose:$latest_version\" @Composable fun MvvmApp ( mvvmViewModel : MvvmViewModel ) { val navController = rememberNavController () LaunchedEffect ( Unit ) { mvvmViewModel . navigateToResults . collect { navController . navigate ( \"result\" ) //\u8ba2\u9605VM\u8def\u7531\u4e8b\u4ef6\u901a\u77e5\uff0c\u5904\u7406\u8def\u7531\u8df3\u8f6c } } NavHost ( navController , startDestination = \"searchBar\" ) { composable ( \"searchBar\" ) { MvvmSearchBarScreen ( mvvmViewModel , ) } composable ( \"result\" ) { MvvmSearchResultScreen ( mvvmViewModel , ) } } } - \u5728 root-level \u7684 MvvmApp \u4e2d\u5b9a\u4e49 NavGraph \uff0c composable(\"$dest_id\"){} \u4e2d\u6784\u9020\u8def\u7531\u8282\u70b9\u7684\u5404\u4e2a\u5b50 Screen\uff0c\u6784\u9020\u65f6\u4f20\u5165 ViewModel \u7528\u4e8e Screen \u4e4b\u95f4\u7684\u901a\u4fe1 \u6bcf\u4e2a Composable \u90fd\u6709\u4e00\u4e2a CoroutineScope \u4e0e\u5176 Lifecycle \u7ed1\u5b9a\uff0c LaunchedEffect{} \u53ef\u4ee5\u5728\u8fd9\u4e2a Scope \u4e2d\u542f\u52a8\u534f\u7a0b\u5904\u7406\u526f\u4f5c\u7528\u3002 \u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u53ea\u6267\u884c\u4e00\u6b21\u7684 Effect \u8ba2\u9605 ViewModel \u7684\u8def\u7531\u4e8b\u4ef6\u901a\u77e5 \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u5c06 navConroller \u4e5f\u4f20\u7ed9 MvvmSearchBarScreen \uff0c\u5728\u5176\u5185\u90e8\u76f4\u63a5\u53d1\u8d77\u8def\u7531\u8df3\u8f6c\u3002\u4f46\u5728\u8f83\u590d\u6742\u7684\u9879\u76ee\u4e2d\uff0c\u8df3\u8f6c\u903b\u8f91\u4e0e\u9875\u9762\u5b9a\u4e49\u5e94\u8be5\u5c3d\u91cf\u4fdd\u6301\u89e3\u8026\uff0c\u8fd9\u66f4\u5229\u4e8e\u9875\u9762\u7684\u590d\u7528\u548c\u6d4b\u8bd5\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728 Composeable \u4e2d\u76f4\u63a5 mutableStateOf() \u521b\u5efa state \u6765\u5904\u7406\u8def\u7531\u8df3\u8f6c\uff0c\u4f46\u662f\u65e2\u7136\u9009\u62e9\u4f7f\u7528 ViewModel \u4e86\uff0c\u90a3\u5c31\u5e94\u8be5\u5c3d\u53ef\u80fd\u5c06\u6240\u6709 state \u96c6\u4e2d\u5230 ViewModel \u7ba1\u7406\u3002 \u6ce8\u610f: \u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5904\u7406\u8def\u7531\u8df3\u8f6c\u7684 navigateToResults \u662f\u4e00\u4e2a\u201c\u4e8b\u4ef6\u201d\u800c\u975e\u201c\u72b6\u6001\u201d\uff0c\u5173\u4e8e\u8fd9\u90e8\u5206\u533a\u522b\uff0c\u5728\u540e\u6587\u5728\u8be6\u7ec6\u9610\u8ff0","title":"\u5b9a\u4e49 NavGraph"},{"location":"architecture/architecture_for_compose/#screen","text":"\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b\u4e24\u4e2a Screen \u7684\u5177\u4f53\u5b9e\u73b0 @Composable fun MvvmSearchBarScreen ( mvvmViewModel : MvvmViewModel , ) { SearchBarScreen { mvvmViewModel . searchKeyword ( it ) } } @Composable fun MvvmSearchResultScreen ( mvvmViewModel : MvvmViewModel ) { val result by mvvmViewModel . result . collectAsState () val isLoading by mvvmViewModel . isLoading . collectAsState () SearchResultScreen ( result , isLoading , mvvmViewModel . key . value ) } \u5927\u91cf\u903b\u8f91\u90fd\u62bd\u8c61\u5230 ViewModel \u4e2d\uff0c\u6240\u4ee5 Screen \u975e\u5e38\u7b80\u6d01 SearchBarScreen \u63a5\u53d7\u7528\u6237\u8f93\u5165\uff0c\u5c06\u641c\u7d22\u5173\u952e\u8bcd\u53d1\u9001\u7ed9 ViewModel MvvmSearchResultScreen \u4f5c\u4e3a\u7ed3\u679c\u9875\u663e\u793a ViewModel \u53d1\u9001\u7684\u6570\u636e\uff0c\u5305\u62ec Loading \u72b6\u6001\u548c\u641c\u7d22\u7ed3\u679c\u7b49\u3002 collectAsState \u7528\u6765\u5c06 Flow \u8f6c\u5316\u4e3a Compose \u7684 state\uff0c\u6bcf\u5f53 Flow \u63a5\u6536\u5230\u65b0\u6570\u636e\u65f6\u4f1a\u89e6\u53d1 Composable \u91cd\u7ec4\u3002 Compose \u540c\u65f6\u652f\u6301 LiveData\u3001RxJava \u7b49\u5176\u4ed6\u54cd\u5e94\u5f0f\u5e93\u7684 collectAsState UI\u5c42\u7684\u66f4\u591a\u5185\u5bb9\u53ef\u4ee5\u67e5\u9605 SearchBarScreen \u548c SearchResultScreen \u7684\u6e90\u7801\u3002\u7ecf\u8fc7\u903b\u8f91\u62bd\u79bb\u540e\uff0c\u8fd9\u4e24\u4e2a Composable \u53ea\u5269\u4f59\u5e03\u5c40\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u79cd MVX \u4e2d\u5b9e\u73b0\u590d\u7528\u3002","title":"\u5b9a\u4e49\u5b50 Screen"},{"location":"architecture/architecture_for_compose/#viewmodel","text":"\u6700\u540e\u770b\u4e00\u4e0b ViewModel \u7684\u5b9e\u73b0 class MvvmViewModel ( private val searchService : DataRepository , ) { private val coroutineScope = MainScope () private val _isLoading : MutableStateFlow < Boolean > = MutableStateFlow ( false ) val isLoading = _isLoading . asStateFlow () private val _result : MutableStateFlow < List < ArticleBean >> = MutableStateFlow ( emptyList ()) val result = _result . asStateFlow () private val _key = MutableStateFlow ( \"\" ) val key = _key . asStateFlow () //\u4f7f\u7528Channel\u5b9a\u4e49\u4e8b\u4ef6 private val _navigateToResults = Channel < Boolean > ( Channel . BUFFERED ) val navigateToResults = _navigateToResults . receiveAsFlow () fun searchKeyword ( input : String ) { coroutineScope . launch { _isLoading . value = true _navigateToResults . send ( true ) _key . value = input val result = withContext ( Dispatchers . IO ) { searchService . getArticlesList ( input ) } _result . emit ( result . data . datas ) _isLoading . value = false } } } - \u63a5\u6536\u5230\u7528\u6237\u8f93\u5165\u540e\uff0c\u901a\u8fc7 DataRepository \u53d1\u8d77\u641c\u7d22\u8bf7\u6c42 \u641c\u7d22\u8fc7\u7a0b\u4e2d\u4f9d\u6b21\u66f4\u65b0 loading \uff08loading\u663e\u793a\u72b6\u6001\uff09\u3001 navigateToResult (\u9875\u9762\u8df3\u8f6c\u4e8b\u4ef6)\u3001 key \uff08\u641c\u7d22\u5173\u952e\u8bcd\uff09\u3001 result \uff08\u641c\u7d22\u7ed3\u679c\uff09\u7b49\u5185\u5bb9\uff0c\u4e0d\u65ad\u9a71\u52a8UI\u5237\u65b0 \u6240\u6709\u72b6\u6001\u96c6\u4e2d\u5728 ViewModel \u7ba1\u7406\uff0c\u751a\u81f3\u9875\u9762\u8df3\u8f6c\u3001Toast\u5f39\u51fa\u7b49\u4e8b\u4ef6\u4e5f\u7531 ViewModel \u8d1f\u8d23\u901a\u77e5\uff0c\u8fd9\u5bf9\u5355\u5143\u6d4b\u8bd5\u975e\u5e38\u53cb\u597d\uff0c\u5728\u5355\u6d4b\u4e2d\u65e0\u9700\u518d mock \u5404\u79cdUI\u76f8\u5173\u7684\u4e0a\u4e0b\u6587\u3002","title":"ViewModel \u5b9e\u73b0"},{"location":"architecture/architecture_for_compose/#3-jetpack-mvvm","text":"Jeptack \u7684\u610f\u4e49\u5728\u4e8e\u964d\u4f4e MVVM \u5728 Android\u5e73\u53f0\u7684\u843d\u5730\u6210\u672c\u3002 \u5f15\u5165 Jetpack \u540e\u7684\u4ee3\u7801\u53d8\u5316\u4e0d\u5927\uff0c\u4e3b\u8981\u53d8\u52a8\u5728\u4e8e ViewModel \u7684\u521b\u5efa\u3002 Jetpack \u63d0\u4f9b\u4e86\u591a\u4e2a\u7ec4\u4ef6\uff0c\u964d\u4f4e\u4e86 ViewModel \u7684\u4f7f\u7528\u6210\u672c\uff1a - \u901a\u8fc7 hilt \u7684 DI \u964d\u4f4e ViewModel \u6784\u9020\u6210\u672c\uff0c\u65e0\u9700\u624b\u52a8\u4f20\u5165 DataRepository \u7b49\u4f9d\u8d56 - \u4efb\u610f Composable \u90fd\u53ef\u4ee5\u4ece\u6700\u8fd1\u7684 Scope \u4e2d\u83b7\u53d6 ViewModel\uff0c\u65e0\u9700\u5c42\u5c42\u4f20\u53c2\u3002 @HiltViewModel class JetpackMvvmViewModel @Inject constructor ( private val searchService : DataRepository // DataRepository \u4f9d\u9760DI\u6ce8\u5165 ) : ViewModel () { ... } @Composable fun JetpackMvvmApp () { val navController = rememberNavController () NavHost ( navController , startDestination = \"searchBar\" , route = \"root\" ) { composable ( \"searchBar\" ) { JetpackMvvmSearchBarScreen ( viewModel ( navController , \"root\" ) //viewModel \u53ef\u4ee5\u5728\u9700\u8981\u65f6\u518d\u83b7\u53d6, \u65e0\u9700\u5b9e\u73b0\u521b\u5efa\u597d\u5e76\u901a\u8fc7\u53c2\u6570\u4f20\u8fdb\u6765 ) } composable ( \"result\" ) { JetpackMvvmSearchResultScreen ( viewModel ( navController , \"root\" ) //\u53ef\u4ee5\u83b7\u53d6\u8ddf\u540c\u4e00\u4e2aViewModel\u5b9e\u4f8b ) } } } @Composable inline fun < reified VM : ViewModel > viewModel ( navController : NavController , graphId : String = \"\" ): VM = //\u5728 NavGraph \u5168\u5c40\u8303\u56f4\u4f7f\u7528 Hilt \u521b\u5efa ViewModel hiltNavGraphViewModel ( backStackEntry = navController . getBackStackEntry ( graphId ) ) Jetpack \u751a\u81f3\u63d0\u4f9b\u4e86 hilt-navigation-compose \u5e93\uff0c\u53ef\u4ee5\u5728 Composable \u4e2d\u83b7\u53d6 NavGraph Scope \u6216 Destination Scope \u7684 ViewModel\uff0c\u5e76\u81ea\u52a8\u4f9d\u8d56 Hilt \u6784\u5efa\u3002Destination Scope \u7684 ViewModel \u4f1a\u8ddf\u968f BackStack \u7684\u5f39\u51fa\u81ea\u52a8 Clear \uff0c\u907f\u514d\u6cc4\u9732\u3002 // build.gradle implementation androidx . hilt : hilt - navigation - compose: $latest_versioin \u201c\u672a\u6765 Jetpack \u5404\u7ec4\u4ef6\u4e4b\u95f4\u534f\u540c\u6548\u5e94\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5f3a\u3002\u201d \u53c2\u8003 https://developer.android.com/jetpack/compose/libraries#hilt","title":"3. Jetpack MVVM"},{"location":"architecture/architecture_for_compose/#mvi","text":"MVI \u4e0e MVVM \u5f88\u76f8\u4f3c\uff0c\u5176\u501f\u9274\u4e86\u524d\u7aef\u6846\u67b6\u7684\u601d\u60f3\uff0c\u66f4\u52a0\u5f3a\u8c03 \u6570\u636e\u7684\u5355\u5411\u6d41\u52a8 \u548c \u552f\u4e00\u6570\u636e\u6e90 \uff0c\u53ef\u4ee5\u770b\u505a\u662f MVVM + Redux \u7684\u7ed3\u5408\u3002 MVI \u7684 I \u6307 Intent\uff0c\u8fd9\u91cc\u4e0d\u662f\u542f\u52a8 Activity \u90a3\u4e2a Intent\uff0c\u800c\u662f\u4e00\u79cd\u5bf9\u7528\u6237\u64cd\u4f5c\u7684\u5c01\u88c5\u5f62\u5f0f\uff0c\u4e3a\u907f\u514d\u6df7\u6dc6\uff0c\u4e5f\u53ef\u5524\u505a Action \u7b49\u5176\u4ed6\u79f0\u547c\u3002 \u7528\u6237\u64cd\u4f5c\u4ee5 Action \u7684\u5f62\u5f0f\u9001\u7ed9 Model\u5c42 \u8fdb\u884c\u5904\u7406\u3002\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 Jetpack \u7684 ViewModel \u8d1f\u8d23 Intent \u7684\u63a5\u53d7\u548c\u5904\u7406\uff0c\u56e0\u4e3a ViewModel \u53ef\u4ee5\u5728 Composable \u4e2d\u65b9\u4fbf\u83b7\u53d6\u3002 \u5728 SearchBarScreen \u7528\u6237\u8f93\u5165\u5173\u952e\u8bcd\u540e\u901a\u8fc7 Action \u901a\u77e5 ViewModel \u8fdb\u884c\u641c\u7d22 @Composable fun MviSearchBarScreen ( mviViewModel : MviViewModel , onConfirm : () -> Unit ) { SearchBarScreen { mviViewModel . onAction ( MviViewModel . UiAction . SearchInput ( it )) } } \u901a\u8fc7 Action \u901a\u4fe1\uff0c\u6709\u5229\u4e8e View \u4e0e ViewModel \u4e4b\u95f4\u7684\u8fdb\u4e00\u6b65\u89e3\u8026\uff0c\u540c\u65f6\u6240\u6709\u8c03\u7528\u4ee5 Action \u7684\u5f62\u5f0f\u6c47\u603b\u5230\u4e00\u5904\uff0c\u4e5f\u6709\u5229\u4e8e\u5bf9\u884c\u4e3a\u7684\u96c6\u4e2d\u5206\u6790\u548c\u76d1\u63a7 @Composable fun MviSearchResultScreen ( mviViewModel : MviViewModel ) { val viewState by mviViewModel . viewState . collectAsState () SearchResultScreen ( viewState . result , viewState . isLoading , viewState . key ) } MVVM \u7684 ViewModel \u4e2d\u5206\u6563\u5b9a\u4e49\u4e86\u591a\u4e2a State \uff0cMVI \u4f7f\u7528 ViewState \u5bf9 State \u96c6\u4e2d\u7ba1\u7406\uff0c\u53ea\u9700\u8981\u8ba2\u9605\u4e00\u4e2a ViewState \u4fbf\u53ef\u83b7\u53d6\u9875\u9762\u7684\u6240\u6709\u72b6\u6001\uff0c\u76f8\u5bf9 MVVM \u51cf\u5c11\u4e86\u4e0d\u5c11\u6a21\u677f\u4ee3\u7801\u3002 \u76f8\u5bf9\u4e8e MVVM\uff0cViewModel \u4e5f\u6709\u4e00\u4e9b\u53d8\u5316 class MviViewModel ( private val searchService : DataRepository , ) { private val coroutineScope = MainScope () private val _viewState : MutableStateFlow < ViewState > = MutableStateFlow ( ViewState ()) val viewState = _viewState . asStateFlow () private val _navigateToResults = Channel < OneShotEvent > ( Channel . BUFFERED ) val navigateToResults = _navigateToResults . receiveAsFlow () fun onAction ( uiAction : UiAction ) { when ( uiAction ) { is UiAction . SearchInput -> { coroutineScope . launch { _viewState . value = _viewState . value . copy ( isLoading = true ) val result = withContext ( Dispatchers . IO ) { searchService . getArticlesList ( uiAction . input ) } _viewState . value = _viewState . value . copy ( result = result . data . datas , key = uiAction . input ) _navigateToResults . send ( OneShotEvent . NavigateToResults ) _viewState . value = _viewState . value . copy ( isLoading = false ) } } } } data class ViewState ( val isLoading : Boolean = false , val result : List < ArticleBean > = emptyList (), val key : String = \"\" ) sealed class OneShotEvent { object NavigateToResults : OneShotEvent () } sealed class UiAction { class SearchInput ( val input : String ) : UiAction () } } \u9875\u9762\u6240\u6709\u7684\u72b6\u6001\u90fd\u5b9a\u4e49\u5728 ViewState \u8fd9\u4e2a data class \u4e2d\uff0c\u72b6\u6001\u7684\u4fee\u6539\u53ea\u80fd\u5728 onAction \u4e2d\u8fdb\u884c, \u5176\u4f59\u573a\u6240\u90fd\u662f immutable \u7684\uff0c \u4fdd\u8bc1\u4e86\u6570\u636e\u6d41\u53ea\u80fd\u5355\u5411\u4fee\u6539\u3002 \u53cd\u89c2 MVVM \uff0c MutableStateFlow \u5bf9\u5916\u66b4\u9732\u65f6\u8f6c\u6210 immutable \u624d\u80fd\u4fdd\u8bc1\u8fd9\u79cd\u5b89\u5168\u6027\uff0c\u9700\u8981\u589e\u52a0\u4e0d\u5c11\u6a21\u677f\u4ee3\u7801\u4e14\u4ecd\u7136\u5bb9\u6613\u9057\u6f0f\u3002 \u4e8b\u4ef6\u5219\u7edf\u4e00\u5b9a\u4e49\u5728 OneShotEvent \u4e2d\u3002 Event \u4e0d\u540c\u4e8e State\uff0c\u540c\u4e00\u7c7b\u578b\u7684\u4e8b\u4ef6\u5141\u8bb8\u54cd\u5e94\u591a\u6b21\uff0c\u56e0\u6b64\u5b9a\u4e49\u4e8b\u4ef6\u4f7f\u7528 Channel \u800c\u4e0d\u662f StateFlow \u3002 Compose \u9f13\u52b1\u591a\u4f7f\u7528 State \u5c11\u4f7f\u7528 Event\uff0c Event \u53ea\u9002\u5408\u7528\u5728\u5f39 Toast \u7b49\u5c11\u6570\u573a\u666f\u4e2d \u901a\u8fc7\u6d4f\u89c8 ViewModel \u7684 ViewState \u548c Aciton \u5b9a\u4e49\u5c31\u53ef\u4ee5\u7406\u6e05 ViewModel \u7684\u804c\u8d23\uff0c\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u4f5c\u4e3a\u63a5\u53e3\u6587\u6863\u4f7f\u7528\u3002","title":"MVI"},{"location":"architecture/architecture_for_compose/#_1","text":"Sample \u4e2d\u4e4b\u6240\u4ee5\u4f7f\u7528\u4e8b\u4ef6\u800c\u975e\u72b6\u6001\u6765\u5904\u7406\u8def\u7531\u8df3\u8f6c\uff0c\u4e00\u4e2a\u4e3b\u8981\u539f\u56e0\u662f\u7531\u4e8e\u4f7f\u7528\u4e86 Navigation \u3002Navigation \u6709\u81ea\u5df1\u7684 backstack \u7ba1\u7406\uff0c\u5f53\u70b9\u51fb back \u952e\u65f6\u4f1a\u81ea\u52a8\u5e2e\u52a9\u6211\u4eec\u8fd4\u56de\u524d\u4e00\u9875\u9762\u3002\u5018\u82e5\u6211\u4eec\u4f7f\u7528\u72b6\u6001\u6765\u63cf\u8ff0\u5f53\u524d\u9875\u9762\uff0c\u5f53\u70b9\u51fb back\u65f6\uff0c\u6ca1\u6709\u673a\u4f1a\u66f4\u65b0\u72b6\u6001\uff0c\u8fd9\u5c06\u9020\u6210 ViewState \u4e0e UI \u7684\u4e0d\u4e00\u81f4\u3002 \u5173\u4e8e\u8def\u7531\u65b9\u6848\u7684\u5efa\u8bae\uff1a\u7b80\u5355\u9879\u76ee\u4f7f\u7528 \u4e8b\u4ef6 \u63a7\u5236\u9875\u9762\u8df3\u8f6c\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u590d\u6742\u9879\u76ee\uff0c\u63a8\u8350\u4f7f\u7528 \u72b6\u6001 \u8fdb\u884c\u9875\u9762\u7ba1\u7406\uff0c\u6709\u5229\u4e8e\u903b\u8f91\u5c42\u65f6\u523b\u611f\u77e5\u5230\u5f53\u524d\u7684UI\u72b6\u6001\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06 NavController \u7684 backstack \u72b6\u6001 \u4e0e ViewModel \u7684\u72b6\u6001\u5efa\u7acb\u540c\u6b65\uff1a class MvvmViewModel ( private val searchService : DataRepository , ) { ... //\u4f7f\u7528 StateFlow \u63cf\u8ff0\u9875\u9762 private val _destination = MutableStateFlow ( DestSearchBar ) val destination = _destination . asStateFlow () fun searchKeyword ( input : String ) { coroutineScope . launch { ... _destination . value = DestSearchResult ... } } fun bindNavStack ( navController : NavController ) { //navigation \u7684\u72b6\u6001\u65f6\u523b\u540c\u6b65\u5230 viewModel navController . addOnDestinationChangedListener { _ , _ , arguments -> run { _destination . value = requireNotNull ( arguments ?. getString ( KEY_ROUTE )) } } } } \u5982\u4e0a\uff0c\u5f53 navigation \u72b6\u6001\u53d8\u5316\u65f6\uff0c\u4f1a\u53ca\u65f6\u540c\u6b65\u5230 ViewModel \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528 StateFlow \u800c\u975e Channel \u6765\u63cf\u8ff0\u9875\u9762\u72b6\u6001\u4e86\u3002 @Composable fun MvvmApp ( mvvmViewModel : MvvmViewModel ) { val navController = rememberNavController () LaunchedEffect ( Unit ) { with ( mvvmViewModel ) { bindNavStack ( navController ) //\u5efa\u7acb\u540c\u6b65 destination . collect { navController . navigate ( it ) } } } } \u5728\u5165\u53e3\u5904\uff0c\u4e3a NavController \u548c ViewModel \u5efa\u7acb\u540c\u6b65\u7ed1\u5b9a\u5373\u53ef\u3002","title":"\u9875\u9762\u8def\u7531"},{"location":"architecture/architecture_for_compose/#clean-architecture","text":"\u66f4\u5927\u578b\u7684\u9879\u76ee\u4e2d\uff0c\u4f1a\u5f15\u5165 Clean Architecture \uff0c\u901a\u8fc7 Use Case \u5c06 ViewModel \u5185\u7684\u903b\u8f91\u8fdb\u4e00\u6b65\u5206\u89e3\u3002 Compose \u53ea\u662f\u4e2a UI \u6846\u67b6\uff0c\u5bf9\u4e8e ViewModel \u4ee5\u4e0b\u7684\u903b\u8f91\u5c42\u7684\u6cbb\u7406\u65b9\u5f0f\u4e0e\u4f20\u7edf\u7684 Andorid \u5f00\u53d1\u6ca1\u6709\u533a\u522b\u3002\u6240\u4ee5 Clean Architecture \u8fd9\u6837\u7684\u590d\u6742\u67b6\u6784\u4ecd\u7136\u53ef\u4ee5\u5728 Compose \u9879\u76ee\u4e2d\u4f7f\u7528","title":"Clean Architecture"},{"location":"architecture/architecture_for_compose/#_2","text":"\u6bd4\u8f83\u4e86\u8fd9\u4e48\u591a\u79cd\u67b6\u6784\uff0c\u90a3\u79cd\u4e0e Compose \u6700\u5951\u5408\u5462\uff1f Compose \u7684\u58f0\u660e\u5f0fUI\u601d\u60f3\u6765\u81ea React\uff0c\u6240\u4ee5\u540c\u6837\u6765\u81ea Redux \u601d\u60f3\u7684 MVI \u5e94\u8be5\u662f Compose \u7684\u6700\u4f73\u4f34\u4fa3\u3002\u5f53\u7136 MVI \u53ea\u662f\u5728 MVVM \u7684\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u4e9b\u6539\u826f\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a MVVM \u7684\u9879\u76ee\uff0c\u53ea\u662f\u60f3\u5c06 UI \u90e8\u5206\u6539\u9020\u6210 Compose \uff0c\u90a3\u4e48\u6ca1\u5fc5\u8981\u4e3a\u4e86\u6539\u9020\u6210 MVI \u800c\u8fdb\u884c\u91cd\u6784\uff0cMVVM \u4e5f\u53ef\u4ee5\u5f88\u597d\u5730\u914d\u5408 Compose \u4f7f\u7528\u7684\u3002 \u4f46\u662f\u5982\u679c\u4f60\u60f3\u5c06\u4e00\u4e2a MVP \u9879\u76ee\u6539\u9020\u6210 Compose \u53ef\u80fd\u6210\u672c\u5c31\u6709\u70b9\u5927\u4e86\u3002 \u5173\u4e8e Jetpack\uff0c\u5982\u679c\u4f60\u7684\u9879\u76ee\u53ea\u7528\u4e8e Android\uff0c\u90a3\u4e48 Jetpack \u65e0\u7591\u662f\u4e00\u4e2a\u597d\u5de5\u5177\u3002\u4f46\u662f Compose \u672a\u6765\u7684\u5e94\u7528\u573a\u666f\u5c06\u4f1a\u5f88\u5e7f\u6cdb\uff0c\u5982\u679c\u4f60\u6709\u9884\u671f\u672a\u6765\u4f1a\u914d\u5408 KMP \u5f00\u53d1\u8de8\u5e73\u53f0\u5e94\u7528\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5b66\u4f1a\u4e0d\u4f9d\u8d56 Jetpack \u7684\u5f00\u53d1\u65b9\u5f0f\uff0c\u8fd9\u4e5f\u662f\u672c\u6587\u4e3a\u4ec0\u4e48\u8981\u4ecb\u7ecd\u975e Jetpack \u4e0b\u7684 MVVM \u7684\u4e00\u4e2a\u521d\u8877\u3002","title":"\u603b\u7ed3"},{"location":"architecture/architecture_for_compose/#sample","text":"\u70b9\u51fb\u8fd9\u91cc","title":"Sample \u4ee3\u7801\uff1a"},{"location":"architecture/use_jetpack_in_compose/","text":"Jeptack Compose \u4e3b\u8981\u7528\u6765\u63d0\u9ad8 UI \u5c42\u7684\u5f00\u53d1\u6548\u7387\uff0c\u4f46\u4e00\u4e2a\u5b8c\u6574\u9879\u76ee\u8fd8\u5c11\u4e0d\u4e86\u903b\u8f91\u5c42\u3001\u6570\u636e\u5c42\u7684\u914d\u5408\u3002\u5e78\u597d Jetpack \u4e2d\u4e0d\u5c11\u7ec4\u4ef6\u5e93\u5df2\u7ecf\u4e0e Compose \u8fdb\u884c\u4e86\u9002\u914d\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u7ec4\u4ef6\u5e93\u5b8c\u6210 UI \u4ee5\u5916\u7684\u529f\u80fd\u3002 Bloom \u662f\u4e00\u4e2a Compose \u6700\u4f73\u5b9e\u8df5\u7684 Demo App\uff0c\u4e3b\u8981\u7528\u6765\u5c55\u793a\u5404\u79cd\u690d\u7269\u5217\u8868\u4ee5\u53ca\u8be6\u7ec6\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\u4ee5 Bloom \u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0b\u5982\u4f55\u5728 Compose \u4e2d\u4f7f\u7528 Jetpack \u8fdb\u884c\u5f00\u53d1 1. \u6574\u4f53\u67b6\u6784\uff1aApp Architecture \u5728\u67b6\u6784\u4e0a\uff0cBloom \u5b8c\u5168\u57fa\u4e8e Jetpack + Compose \u642d\u5efa \u4ece\u4e0b\u5f80\u4e0a\u4f9d\u6b21\u7528\u5230\u7684 Jetpack \u7ec4\u4ef6\u5982\u4e0b\uff1a Room \uff1a \u4f5c\u4e3a\u6570\u636e\u6e90\u63d0\u4f9b\u6570\u636e\u6301\u4e45\u5316\u80fd\u529b Paging \uff1a \u5206\u9875\u52a0\u8f7d\u80fd\u529b\u3002\u5206\u9875\u8bf7\u6c42 Room \u7684\u6570\u636e\u5e76\u8fdb\u884c\u663e\u793a Corouinte Flow \uff1a\u54cd\u5e94\u5f0f\u80fd\u529b\u3002 UI \u5c42\u901a\u8fc7 Flow \u8ba2\u9605 Paging \u7684\u6570\u636e\u53d8\u5316 ViewModel \uff1a\u6570\u636e\u7ba1\u7406\u80fd\u529b\u3002 ViewModel \u7ba1\u7406 Flow \u7c7b\u578b\u7684\u6570\u636e\u4f9b UI \u5c42\u8ba2\u9605 Compose \uff1aUI \u5c42\u5b8c\u5168\u4f7f\u7528 Compose \u5b9e\u73b0 Hilt \uff1a\u4f9d\u8d56\u6ce8\u5165\u80fd\u529b\u3002 ViewModel \u7b49\u4f9d\u8d56 Hilt \u6765\u6784\u5efa Jetpack MVVM \u6307\u5bfc\u6211\u4eec\u5c06 UI \u5c42\u3001\u903b\u8f91\u5c42\u3001\u6570\u636e\u5c42\u8fdb\u884c\u4e86\u5f88\u597d\u5730\u89e3\u8026\u3002\u4e0a\u56fe\u9664\u4e86 UI \u5c42\u7684 Compose \u4ee5\u5916\uff0c\u4e0e\u4e00\u4e2a\u5e38\u89c4\u7684 Jetpack MVVM \u9879\u76ee\u5e76\u65e0\u4e0d\u540c\u3002 \u63a5\u4e0b\u6765\u901a\u8fc7\u4ee3\u7801\uff0c\u770b\u770b Compose \u5982\u4f55\u914d\u5408\u5404 Jetpack \u5b8c\u6210 HomeScreen \u548c PlantDetailScreen \u7684\u5b9e\u73b0\u3002 2. \u5217\u8868\u9875\uff1aHomeScreen HomeScreen \u5728\u5e03\u5c40\u4e0a\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u6700\u4e0a\u9762\u7684\u641c\u7d22\u6846\uff0c\u4e2d\u95f4\u7684\u8f6e\u64ad\u56fe\uff0c\u4ee5\u53ca\u4e0b\u8fb9\u7684\u7684\u5217\u8868 ViewModel + Compose \u6211\u4eec\u5e0c\u671b Composable \u53ea\u8d1f\u8d23 UI \uff0c\u72b6\u6001\u7ba1\u7406\u653e\u5230 ViewModel \u4e2d\u3002 HomeScreen \u4f5c\u4e3a\u5165\u53e3\u7684 Composable \u4e00\u822c\u5728 Activity \u6216\u8005 Fragment \u4e2d\u8c03\u7528\u3002 viewmodel-compose \u53ef\u4ee5\u65b9\u4fbf\u5730\u4ece\u5f53\u524d ViewModelStore \u4e2d\u83b7\u53d6 ViewModel\uff1a \"androidx.lifecycle:lifecycle-viewmodel-compose:$version\" @Composable fun HomeScreen () { val homeViewModel = viewModel < HomeViewModel > () //... } Stateless Composable \u6301\u6709 ViewModel \u7684 Composalbe \u76f8\u5f53\u4e8e\u4e00\u4e2a \u201cStatful Composalbe\u201d \uff0c\u8fd9\u6837\u7684 ViewModel \u5f88\u96be\u590d\u7528\u548c\u5355\u6d4b\uff0c\u800c\u4e14\u643a\u5e26 ViewModel \u7684 Composable \u4e5f\u65e0\u6cd5\u5728 IDE \u4e2d\u9884\u89c8\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u66f4\u6b22\u8fce Composable \u662f\u4e00\u4e2a \"Stateless Composable\" \u3002 \u521b\u5efa StatelessComposable \u7684\u5e38\u89c1\u505a\u6cd5\u662f\u5c06 ViewModel \u4e0a\u63d0\uff0c ViewModel \u7684\u521b\u5efa\u59d4\u6258\u7ed9\u7236\u7ea7\uff0c\u4ec5\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97 Composalbe \u4e13\u6ce8 UI @Composable fun HomeScreen ( homeViewModel = viewModel < HomeViewModel > () ) { //... } \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 State \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6446\u8131\u5bf9 ViewMode l \u5177\u4f53\u7c7b\u578b\u7684\u4f9d\u8d56\u3002 \u63a5\u4e0b\u6765\u770b\u4e00\u4e0b HomeViewModel \u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca\u5176\u5185\u90e8 State \u7684\u5b9a\u4e49 3. HomeViewModel HomeViewModel \u662f\u4e00\u4e2a\u6807\u51c6\u7684 Jetpack ViewModel \u5b50\u7c7b, \u53ef\u4ee5\u5728ConfigurationChanged\u65f6\u4fdd\u6301\u6570\u636e\u3002 @HiltViewModel class HomeViewModel @Inject constructor ( private val plantsRepository : PlantsRepository ) : ViewModel () { private val _uiState = MutableStateFlow ( HomeUiState ( loading = true )) val uiState : StateFlow < HomeUiState > = _uiState val pagedPlants : Flow < PagingData < Plant >> = plantsRepository . plants init { viewModelScope . launch { val collections = plantsRepository . getCollections () _uiState . value = HomeUiState ( plantCollections = collections ) } } } \u6dfb\u52a0\u4e86 @AndroidEntryPoint \u7684 Activity \u6216\u8005 Fragment \uff0c\u53ef\u4ee5\u4f7f\u7528 Hilt \u4e3a Composalbe \u521b\u5efa ViewModel\u3002 Hilt \u53ef\u4ee5\u5e2e\u52a9 ViewModel \u6ce8\u5165 @Inject \u58f0\u660e\u7684\u4f9d\u8d56\u3002\u4f8b\u5982\u672c\u4f8b\u4e2d\u4f7f\u7528\u7684 PlantsRepository pagedPlants \u901a\u8fc7 Paging \u5411 Composable \u63d0\u4f9b\u5206\u9875\u52a0\u8f7d\u7684\u5217\u8868\u6570\u636e\uff0c\u6570\u636e\u6e90\u6765\u81ea Room \u3002 \u5206\u9875\u5217\u8868\u4ee5\u5916\u7684\u6570\u636e\u5728 HomeUiState \u4e2d\u96c6\u4e2d\u7ba1\u7406\uff0c\u5305\u62ec\u8f6e\u64ad\u56fe\u4e2d\u6240\u9700\u7684\u690d\u7269\u96c6\u5408\u4ee5\u53ca\u9875\u9762\u52a0\u8f7d\u72b6\u6001\u7b49\u4fe1\u606f\uff1a data class HomeUiState ( val plantCollections : List < Collection < Plant >> = emptyList (), val loading : Boolean = false , val refreshError : Boolean = false , val carouselState : CollectionsCarouselState = CollectionsCarouselState ( emptyList ()) //\u8f6e\u64ad\u56fe\u72b6\u6001\uff0c\u540e\u6587\u4ecb\u7ecd ) HomeScreen \u4e2d\u901a\u8fc7 collectAsState() \u5c06 Flow \u8f6c\u6362\u4e3a Composalbe \u53ef\u8ba2\u9605\u7684 State\uff1a @Composable fun HomeScreen ( homeViewModel = viewModel < HomeViewModel > () ) { val uiState by homeViewModel . uiState . collectAsState () if ( uiState . loading ) { //... } else { //... } } LiveData + Compose \u6b64\u5904\u7684 Flow \u4e5f\u53ef\u4ee5\u66ff\u6362\u6210 LiveData livedata-compose \u5c06 LiveData \u8f6c\u6362\u4e3a Composable \u53ef\u8ba2\u9605\u7684 state : \"androidx.compose.runtime:runtime-livedata:$compose_version\" @Composable fun HomeScreen ( homeViewModel = viewModel < HomeViewModel > () ) { val uiState by homeViewModel . uiState . observeAsState () //uiState is a LiveData //... } \u6b64\u5916\uff0c\u8fd8\u6709 rxjava-compose \u53ef\u4f9b\u4f7f\u7528\uff0c\u529f\u80fd\u7c7b\u4f3c\u3002 4. \u5206\u9875\u5217\u8868\uff1aPlantList PlantList \u5206\u9875\u52a0\u8f7d\u5e76\u663e\u793a\u690d\u7269\u5217\u8868\u3002 @Composable fun PlantList ( plants : Flow < PagingData < Plant >> ) { val pagedPlantItems = plants . collectAsLazyPagingItems () LazyColumn { if ( pagedPlantItems . loadState . refresh == LoadState . Loading ) { item { LoadingIndicator () } } itemsIndexed ( pagedPlantItems ) { index , plant -> if ( plant != null ) { PlantItem ( plant ) } else { PlantPlaceholder () } } if ( pagedPlantItems . loadState . append == LoadState . Loading ) { item { LoadingIndicator () } } } } Paging + Compose paging-compose \u63d0\u4f9b\u4e86 pagging \u7684\u5206\u9875\u6570\u636e LazyPagingItems\uff1a \"androidx.paging:paging-compose:$version\" \u6ce8\u610f\u6b64\u5904\u7684 itemsIndexed \u6765\u81eapaging-compoee\uff0c\u5982\u679c\u7528\u9519\u4e86\uff0c\u53ef\u80fd\u65e0\u6cd5loadMore public fun < T : Any > LazyListScope . itemsIndexed ( lazyPagingItems : LazyPagingItems < T > , itemContent : @Composable LazyItemScope .( index : Int , value : T?) -> Unit ) { items ( lazyPagingItems . itemCount ) { index -> itemContent ( index , lazyPagingItems . getAsState ( index ). value ) } } itemsIndexed \u63a5\u53d7 LazyPagingItems \u53c2\u6570\uff0c LazyPagingItems#getAsState \u4e2d\u4ece PagingDataDiffer \u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5f53 index \u5904\u4e8e\u5217\u8868\u5c3e\u90e8\u65f6\uff0c\u89e6\u53d1 loadMore \u8bf7\u6c42\uff0c\u5b9e\u73b0\u5206\u9875\u52a0\u8f7d\u3002 5. \u8f6e\u64ad\u56fe\uff1aCollectionsCarousel CollectionsCarousel \u662f\u663e\u793a\u8f6e\u64ad\u56fe\u7684 Composable\u3002 \u5728\u4e0b\u9762\u9875\u9762\u4e2d\u90fd\u6709\u5bf9\u8f6e\u64ad\u56fe\u7684\u4f7f\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u6c42 CollectionsCarousel \u5177\u6709\u53ef\u590d\u7528\u6027\u3002 Reusable Composable \u5bf9\u4e8e\u6709\u590d\u7528\u6027\u8981\u6c42\u7684 Composable\uff0c\u6211\u4eec\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a \u53ef\u590d\u7528\u7ec4\u4ef6\u4e0d\u5e94\u8be5\u901a\u8fc7 ViewModel \u7ba1\u7406 State \u3002 \u56e0\u4e3a ViewModel \u5728 Scope \u5185\u662f\u5171\u4eab\u7684\uff0c\u4f46\u662f\u5728\u540c\u4e00 Scope \u5185\u590d\u7528\u7684 Composable \u9700\u8981\u72ec\u4eab\u5176 State \u5b9e\u4f8b\u3002 \u56e0\u6b64 CollectionsCarousel \u4e0d\u80fd\u4f7f\u7528 ViewModel \u7ba1\u7406 State\uff0c\u5fc5\u987b\u901a\u8fc7\u53c2\u6570\u4f20\u5165\u72b6\u6001\u4ee5\u53ca\u4e8b\u4ef6\u56de\u8c03\u3002 @Composable fun CollectionsCarousel ( // State in, // Events out ) { // ... } \u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\u4f7f\u5f97 CollectionsCarousel \u5c06\u81ea\u5df1\u7684\u72b6\u6001\u59d4\u6258\u7ed9\u4e86\u7236\u7ea7 Composable\u3002 CollectionsCarouselState \u65e2\u7136\u59d4\u6258\u5230\u4e86\u7236\u7ea7, \u4e3a\u4e86\u65b9\u4fbf\u7236\u7ea7\u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u5bf9 State \u8fdb\u884c\u4e00\u5b9a\u5c01\u88c5\uff0c\u88ab\u5c01\u88c5\u540e\u7684 State \u4e0e Composable \u914d\u5957\u4f7f\u7528\u3002\u8fd9\u5728 Compose \u4e2d\u4e5f\u662f\u5e38\u89c1\u7684\u505a\u6cd5\uff0c\u6bd4\u5982 LazyColumn \u7684 LazyListState \uff0c\u6216\u8005 Scallfold \u7684 ScaffoldState \u7b49 \u5bf9\u4e8e CollectionsCarousel \u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u9700\u6c42\uff1a\u70b9\u51fb\u67d0\u4e00 Item \u65f6\uff0c\u8f6e\u64ad\u56fe\u7684\u5e03\u5c40\u4f1a\u5c55\u5f00 \u7531\u4e8e\u4e0d\u80fd\u4f7f\u7528 ViewModel\uff0c \u6240\u4ee5\u4f7f\u7528\u5e38\u89c4 Class \u5b9a\u4e49 CollectionsCarouselState \u5e76\u5b9e\u73b0 onCollectionClick \u7b49\u76f8\u5173\u903b\u8f91 data class PlantCollection ( val name : String , @IdRes val asset : Int , val plants : List < Plant > ) class CollectionsCarouselState ( private val collections : List < PlantCollection > ) { private var selectedIndex : Int? by mutableStateOf ( null ) val isExpended : Boolean get () = selectedIndex != null privat var plants by mutableStateOf ( emptyList < Plant > ()) val selectPlant by mutableStateOf ( null ) private set //... fun onCollectionClick ( index : Int ) { if ( index >= collections . size || index < 0 ) return if ( index == selectedIndex ) { selectedIndex = null } else { plants = collections [ index ] . plants selectedIndex = index } } } \u7136\u540e\u5c06\u5176\u5b9a\u4e49\u4e3a CollectionsCarousel \u7684\u53c2\u6570 @Composable fun CollectionsCarousel ( carouselState : CollectionsCarouselState , onPlantClick : ( Plant ) -> Unit ) { // ... } \u4e3a\u4e86\u8fdb\u4e00\u6b65\u65b9\u4fbf\u7236\u7ea7\u8c03\u7528\uff0c\u53ef\u4ee5\u63d0\u4f9b rememberCollectionsCarouselState() \u65b9\u6cd5\uff0c \u6548\u679c\u76f8\u5f53\u4e8e remember { CollectionsCarouselState() } \u6700\u540e\uff0c\u7236Composalbe \u8bbf\u95ee CollectionsCarouselState \u65f6\uff0c\u53ef\u4ee5\u5c06\u5b83\u653e\u7f6e\u7236\u7ea7\u7684 ViewModel \u4e2d\u4fdd\u5b58\uff0c\u4ee5\u652f\u6301 ConfigurationChanged \u3002\u4f8b\u5982\u672c\u4f8b\u4e2d\u4f1a\u653e\u5230 HomeUiState \u4e2d\u7ba1\u7406\u3002 6. \u8be6\u60c5\u9875\uff1aPlantDetailScreen & PlantViewModel PlantDetailScreen \u4e2d\u9664\u4e86\u590d\u7528 CollectionsCarousel \u4ee5\u5916\uff0c\u5927\u90e8\u5206\u90fd\u662f\u5e38\u89c4\u5e03\u5c40\uff0c\u6bd4\u8f83\u7b80\u5355\u3002 \u91cd\u70b9\u8bf4\u660e\u4e00\u4e0b PlantViewModel \uff0c \u901a\u8fc7 id \u4ece PlantsRepository \u4e2d\u83b7\u53d6\u8be6\u60c5\u4fe1\u606f\u3002 class PlantViewModel @Inject constructor ( plantsRepository : PlantsRepository , id : String ) : ViewModel () { val plantDetails : Flow < Plant > = plantsRepository . getPlantDetails ( id ) } \u6b64\u5904\u7684 id \u8be5\u5982\u4f55\u4f20\u5165\u5462\uff1f \u4e00\u4e2a\u505a\u6cd5\u662f\u501f\u52a9 ViewModelProvider.Factory \u6784\u9020 ViewModel \u5e76\u4f20\u5165 id @Composable fun PlantDetailScreen ( id : String ) { val plantViewModel : PlantViewModel = viewModel ( id , remember { object : ViewModelProvider . Factory { override fun < T : ViewModel > create ( modelClass : Class < T > ): T { return PlantViewModel ( PlantRepository , id ) } } }) } \u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\u6210\u672c\u8f83\u9ad8\uff0c\u800c\u4e14\u6309\u7167\u524d\u6587\u4ecb\u7ecd\u7684\uff0c\u5982\u679c\u60f3\u4fdd\u8bc1 PlantDetailScreen \u7684\u53ef\u590d\u7528\u6027\u548c\u53ef\u6d4b\u8bd5\u6027\uff0c\u6700\u597d\u5c06 ViewModel \u7684\u521b\u5efa\u59d4\u6258\u5230\u7236\u7ea7\u3002 \u9664\u4e86\u59d4\u6258\u5230\u7236\u7ea7\u521b\u5efa\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u914d\u5408 Navigation \u548c Hilt \u66f4\u5408\u7406\u7684\u521b\u5efa PlantViewModel \uff0c\u8fd9\u5c06\u5728\u540e\u6587\u4e2d\u4ecb\u7ecd\u3002 7. \u9875\u9762\u8df3\u8f6c\uff1aNavigation \u5728 HomeScreen \u5217\u8868\u4e2d\u70b9\u51fb\u67d0 Plant \u540e\u8df3\u8f6c PlantDetailScreen \u3002 \u5b9e\u73b0\u591a\u4e2a\u9875\u9762\u4e4b\u95f4\u8df3\u8f6c\uff0c\u5176\u4e2d\u4e00\u4e2a\u5e38\u89c1\u601d\u8def\u662f\u4e3a Screen \u5305\u88c5\u4e00\u4e2a Framgent\uff0c\u7136\u540e\u501f\u52a9 Navigation \u5b9e\u73b0\u5bf9 Fragment \u7684\u8df3\u8f6c @AndroidEntryPoint class HomeFragment : Fragment () { override fun onCreateView ( inflater : LayoutInflater , container \uff1a ViewGroup?, savedInstanceState : Bundle? ) = ComposeView ( requireContext ()). apply { setContent { HomeScreen (...) } } } Navigation \u5c06\u56de\u9000\u6808\u4e2d\u7684\u8282\u70b9\u62bd\u8c61\u6210\u4e00\u4e2a Destination , \u6240\u4ee5\u8fd9\u4e2a Destination \u4e0d\u4e00\u5b9a\u975e\u8981\u7528 Fragment \u5b9e\u73b0\uff0c \u6ca1\u6709 Fragment \u4e5f\u53ef\u4ee5\u5b9e\u73b0 Composable \u7ea7\u522b\u7684\u9875\u9762\u8df3\u8f6c\u3002 Navigation + Compose navigation-compose \u53ef\u4ee5\u5c06 Composalbe \u4f5c\u4e3a Destination \u5728 Navigation \u4e2d\u4f7f\u7528 \"androidx.navigation:navigation-compose:$version\" \u56e0\u6b64\uff0c\u6211\u4eec\u6446\u8131 Framgent \u5b9e\u73b0\u9875\u9762\u8df3\u8f6c\uff1a @AndroidEntryPoint class BloomAcivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?, persistentState : PersistableBundle?) { setContent { val navController = rememberNavController () Scaffold ( bottomBar = { /*...*/ } ) { NavHost ( navController = navController , startDestination = \"home\" ) { composable ( route = \"home\" ) { HomeScreen (...) { plant -> navController . navigate ( \"plant/ ${ plant . id } \" ) } } composable ( route = \"plant/{id}\" , arguments = listOf ( navArgument ( \"id\" ) { type = NavType . IntType }) ) { PlantDetailScreen (...) } } } } } } Navigaion \u7684\u4f7f\u7528\u4f9d\u9760\u4e24\u4e2a\u4e1c\u897f\uff1a NavController \u548c NavHost \uff1a NavController \u4fdd\u5b58\u4e86\u5f53\u524d Navigation \u7684 BackStack \u4fe1\u606f\uff0c\u56e0\u6b64\u662f\u4e00\u4e2a\u643a\u5e26\u72b6\u6001\u7684\u5bf9\u8c61\uff0c\u9700\u8981\u50cf CollectionsCarouselState \u90a3\u6837\uff0c\u8de8\u8d8a NavHost \u7684 Scope \u4e4b\u5916\u521b\u5efa\u3002 NavHost \u662f NavGraph \u7684\u5bb9\u5668\uff0c \u5c06 NavController \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 NavGraph \u4e2d\u7684Destinations\uff08\u5404Composable\uff09\u5c06 NavController \u4f5c\u4e3a SSOT\uff08Single Source Of Truth\uff09 \u76d1\u542c\u5176\u53d8\u5316\u3002 NavGraph \u4e0d\u540c\u4e8e\u4f20\u7edf\u7684 XML \u65b9\u5f0f\uff0c navigation-compose \u5219\u4f7f\u7528 Kotlin DSL \u5b9a\u4e49 NavGraph: comosable ( route = \u201c$ id \u201d ) { //... } route \u8bbe\u7f6e Destination \u7684\u7d22\u5f15 id\u3002 HomeScreen \u4f7f\u7528 \u201chome\u201d \u4f5c\u4e3a\u552f\u4e00id; \u800c PlantDetailScreen \u4f7f\u7528 \u201cplant/{id}\u201d \u4f5c\u4e3aid\u3002 \u5176\u4e2d {id} \u4e2d\u7684 id \u6765\u81ea\u524d\u4e00\u9875\u9762\u8df3\u8f6c\u65f6\u643a\u5e26\u7684 URI \u4e2d\u7684\u53c2\u6570 key\u3002 \u672c\u4f8b\u4e2d\u5c31\u662f plant.id : HomeScreen (...) { plant -> navController . navigate ( \"plant/ ${ plant . id } \" ) } composable ( route = \"plant/{id}\" , arguments = listOf ( navArgument ( \"id\" ) { type = NavType . IntType }) ) { //it: NavBackStackEntry val id = it . arguments ?. getString ( \"id\" ) ?: \"\" ... } navArgument \u53ef\u4ee5\u5c06 URI \u4e2d\u7684\u53c2\u6570\u8f6c\u5316\u4e3a Destination \u7684 arguments , \u5e76\u901a\u8fc7 NavBackStackEntry \u83b7\u53d6 \u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 Navigation \u8fdb\u884c Screen \u4e4b\u95f4\u7684\u8df3\u8f6c\u5e76\u643a\u5e26\u4e00\u4e9b\u57fa\u672c\u53c2\u6570\u3002\u6b64\u5916\uff0c Navigation \u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u56de\u9000\u6808\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u5f00\u53d1\u6210\u672c\u3002 Hilt + Compose \u524d\u6587\u4e2d\u4ecb\u7ecd\u8fc7\uff0c\u4e3a\u4e86\u4fdd\u8bc1 Screen \u7684\u72ec\u7acb\u590d\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 ViewModel \u521b\u5efa\u59d4\u6258\u5230\u7236\u7ea7 Composable\u3002 \u90a3\u4e48\u5728 Navigation \u7684 NavHost \u4e2d\u6211\u4eec\u8be5\u5982\u4f55\u521b\u5efa ViewModel \u5462\uff1f hilt-navigation-compose \u5141\u8bb8\u6211\u4eec\u5728 Navigation \u4e2d\u4f7f\u7528 Hilt \u6784\u5efa ViewModel\uff1a \"androidx.hilt:hilt-navigation-compose:$version\" NavHost ( navController = navController , startDestination = \"home\" , route = \"root\" // \u6b64\u5904\u4e3a NavGraph \u8bbe\u7f6e id\u3002 ) { composable ( route = \"home\" ) { val homeViewModel : HomeViewModel = hiltNavGraphViewModel () val uiState by homeViewModel . uiState . collectAsState () val plantList = homeViewModel . pagedPlants HomeScreen ( uiState = uiState ) { plant -> navController . navigate ( \"plant/ ${ plant . id } \" ) } } composable ( route = \"plant/{id}\" , arguments = listOf ( navArgument ( \"id\" ) { type = NavType . IntType }) ) { val plantViewModel : PlantViewModel = hiltNavGraphViewModel () val plant : Plant by plantViewModel . plantDetails . collectAsState ( Plant ( 0 )) PlantDetailScreen ( plant = plant ) } } Navigation \u4e2d\uff0c\u6bcf\u4e2a Destination \u90fd\u662f\u4e00\u4e2a ViewModelStore, \u56e0\u6b64 ViewModel \u7684 Scope \u53ef\u4ee5\u9650\u5236\u5728 Destination \u5185\u90e8\u800c\u4e0d\u7528\u653e\u5927\u5230\u6574\u4e2a Activity\uff0c\u66f4\u52a0\u5408\u7406\u3002\u800c\u4e14\uff0c\u5f53 Destination \u4ece BackStack \u5f39\u51fa\u65f6\uff0c \u5bf9\u5e94\u7684 Screen \u4ece\u89c6\u56fe\u6811\u4e0a\u5378\u8f7d\uff0c\u540c\u65f6 Scope \u5185\u7684 ViewModel \u88ab\u6e05\u7a7a\uff0c\u907f\u514d\u6cc4\u9732\u3002 hiltNavGraphViewModel() : \u53ef\u4ee5\u83b7\u53d6 Destination Scope \u7684 ViewModel\uff0c\u5e76\u4f7f\u7528 Hilt \u6784\u5efa\u3002 hiltNavGraphViewModel(\"root\") : \u6307\u5b9a NavHost \u7684 routeId\uff0c\u5219\u53ef\u4ee5\u5728 NavGraph Scope \u5185\u5171\u4eabViewModel Screen \u7684 ViewModel \u88ab\u4ee3\u7406\u5230 NavHost \u4e2d\u8fdb\u884c\uff0c \u4e0d\u6301\u6709 ViewModel \u7684 Screen \u5177\u6709\u826f\u597d\u7684\u53ef\u6d4b\u8bd5\u6027\u3002 \u518d\u770b\u4e00\u770b PlantViewModel @HiltViewModel class PlantViewModel @Inject constructor ( plantsRepository : PlantsRepository , savedStateHandle : SavedStateHandle ) : ViewModel () { val plantDetails : Flow < Plant > = plantsRepository . getPlantDetails ( savedStateHandle . get < Int > ( \"id\" ) !! ) } SavedStateHandle \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\u7684 map\u3002 \u5f53\u4f7f\u7528 Hilt \u5728\u6784\u5efa ViewModel \u65f6\uff0c\u6b64 map \u4f1a\u88ab\u81ea\u52a8\u586b\u5145 NavBackStackEntry \u4e2d\u7684 arguments\uff0c\u4e4b\u540e\u88ab\u53c2\u6570\u6ce8\u5165 ViewModel\u3002 \u6b64\u540e\u5728 ViewModel \u5185\u90e8\u53ef\u4ee5\u901a\u8fc7 get(xxx) \u83b7\u53d6\u952e\u503c\u3002 \u81f3\u6b64\uff0c PlantViewModel \u901a\u8fc7 Hilt \u5b8c\u6210\u4e86\u521b\u5efa\uff0c\u76f8\u6bd4\u4e0e\u4e4b\u524d\u7684 ViewModelProvider.Factory \u7b80\u5355\u5f97\u591a\u3002 Recap \u4e00\u53e5\u8bdd\u603b\u7ed3\u5404 Jetpack \u5e93\u4e3a Compose \u5e26\u6765\u7684\u80fd\u529b\uff1a viewmodel-compose \u53ef\u4ee5\u4ece\u5f53\u524d ViewModelStore \u4e2d\u83b7\u53d6 ViewModel livedate-compose \u5c06 LiveData \u8f6c\u6362\u4e3a Composable \u53ef\u8ba2\u9605\u7684 state \u3002 paging-compose \u63d0\u4f9b\u4e86 pagging \u7684\u5206\u9875\u6570\u636e LazyPagingItems navigation-compose \u53ef\u4ee5\u5c06 Composalbe \u4f5c\u4e3a Destination \u5728 Navigation \u4e2d\u4f7f\u7528 hilt-navigation-compose \u5141\u8bb8\u6211\u4eec\u5728 Navigation \u4e2d\u4f7f\u7528 Hilt \u6784\u5efa ViewModel \u6b64\u5916\uff0c\u8fd8\u6709\u51e0\u70b9\u8bbe\u8ba1\u89c4\u8303\u9700\u8981\u9075\u5b88\uff1a \u5c06 Composable \u7684 ViewModel \u4e0a\u63d0\uff0c\u6709\u5229\u4e8e\u4fdd\u6301\u5176\u53ef\u590d\u7528\u6027\u548c\u53ef\u6d4b\u8bd5\u6027 \u5f53 Composable \u5728\u540c\u4e00 Scope \u5185\u590d\u7528\u65f6\uff0c\u907f\u514d\u4f7f\u7528 ViewModel \u7ba1\u7406 State \u53c2\u8003 \uff1a https://www.youtube.com/watch?v=0z_dwBGQQWQ","title":"\u5728 Compose \u4e2d\u4f7f\u7528 Jetpack \u7ec4\u4ef6\u5e93"},{"location":"architecture/use_jetpack_in_compose/#1-app-architecture","text":"\u5728\u67b6\u6784\u4e0a\uff0cBloom \u5b8c\u5168\u57fa\u4e8e Jetpack + Compose \u642d\u5efa \u4ece\u4e0b\u5f80\u4e0a\u4f9d\u6b21\u7528\u5230\u7684 Jetpack \u7ec4\u4ef6\u5982\u4e0b\uff1a Room \uff1a \u4f5c\u4e3a\u6570\u636e\u6e90\u63d0\u4f9b\u6570\u636e\u6301\u4e45\u5316\u80fd\u529b Paging \uff1a \u5206\u9875\u52a0\u8f7d\u80fd\u529b\u3002\u5206\u9875\u8bf7\u6c42 Room \u7684\u6570\u636e\u5e76\u8fdb\u884c\u663e\u793a Corouinte Flow \uff1a\u54cd\u5e94\u5f0f\u80fd\u529b\u3002 UI \u5c42\u901a\u8fc7 Flow \u8ba2\u9605 Paging \u7684\u6570\u636e\u53d8\u5316 ViewModel \uff1a\u6570\u636e\u7ba1\u7406\u80fd\u529b\u3002 ViewModel \u7ba1\u7406 Flow \u7c7b\u578b\u7684\u6570\u636e\u4f9b UI \u5c42\u8ba2\u9605 Compose \uff1aUI \u5c42\u5b8c\u5168\u4f7f\u7528 Compose \u5b9e\u73b0 Hilt \uff1a\u4f9d\u8d56\u6ce8\u5165\u80fd\u529b\u3002 ViewModel \u7b49\u4f9d\u8d56 Hilt \u6765\u6784\u5efa Jetpack MVVM \u6307\u5bfc\u6211\u4eec\u5c06 UI \u5c42\u3001\u903b\u8f91\u5c42\u3001\u6570\u636e\u5c42\u8fdb\u884c\u4e86\u5f88\u597d\u5730\u89e3\u8026\u3002\u4e0a\u56fe\u9664\u4e86 UI \u5c42\u7684 Compose \u4ee5\u5916\uff0c\u4e0e\u4e00\u4e2a\u5e38\u89c4\u7684 Jetpack MVVM \u9879\u76ee\u5e76\u65e0\u4e0d\u540c\u3002 \u63a5\u4e0b\u6765\u901a\u8fc7\u4ee3\u7801\uff0c\u770b\u770b Compose \u5982\u4f55\u914d\u5408\u5404 Jetpack \u5b8c\u6210 HomeScreen \u548c PlantDetailScreen \u7684\u5b9e\u73b0\u3002","title":"1. \u6574\u4f53\u67b6\u6784\uff1aApp Architecture"},{"location":"architecture/use_jetpack_in_compose/#2-homescreen","text":"HomeScreen \u5728\u5e03\u5c40\u4e0a\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u6700\u4e0a\u9762\u7684\u641c\u7d22\u6846\uff0c\u4e2d\u95f4\u7684\u8f6e\u64ad\u56fe\uff0c\u4ee5\u53ca\u4e0b\u8fb9\u7684\u7684\u5217\u8868","title":"2. \u5217\u8868\u9875\uff1aHomeScreen"},{"location":"architecture/use_jetpack_in_compose/#viewmodel-compose","text":"\u6211\u4eec\u5e0c\u671b Composable \u53ea\u8d1f\u8d23 UI \uff0c\u72b6\u6001\u7ba1\u7406\u653e\u5230 ViewModel \u4e2d\u3002 HomeScreen \u4f5c\u4e3a\u5165\u53e3\u7684 Composable \u4e00\u822c\u5728 Activity \u6216\u8005 Fragment \u4e2d\u8c03\u7528\u3002 viewmodel-compose \u53ef\u4ee5\u65b9\u4fbf\u5730\u4ece\u5f53\u524d ViewModelStore \u4e2d\u83b7\u53d6 ViewModel\uff1a \"androidx.lifecycle:lifecycle-viewmodel-compose:$version\" @Composable fun HomeScreen () { val homeViewModel = viewModel < HomeViewModel > () //... }","title":"ViewModel + Compose"},{"location":"architecture/use_jetpack_in_compose/#stateless-composable","text":"\u6301\u6709 ViewModel \u7684 Composalbe \u76f8\u5f53\u4e8e\u4e00\u4e2a \u201cStatful Composalbe\u201d \uff0c\u8fd9\u6837\u7684 ViewModel \u5f88\u96be\u590d\u7528\u548c\u5355\u6d4b\uff0c\u800c\u4e14\u643a\u5e26 ViewModel \u7684 Composable \u4e5f\u65e0\u6cd5\u5728 IDE \u4e2d\u9884\u89c8\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u66f4\u6b22\u8fce Composable \u662f\u4e00\u4e2a \"Stateless Composable\" \u3002 \u521b\u5efa StatelessComposable \u7684\u5e38\u89c1\u505a\u6cd5\u662f\u5c06 ViewModel \u4e0a\u63d0\uff0c ViewModel \u7684\u521b\u5efa\u59d4\u6258\u7ed9\u7236\u7ea7\uff0c\u4ec5\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97 Composalbe \u4e13\u6ce8 UI @Composable fun HomeScreen ( homeViewModel = viewModel < HomeViewModel > () ) { //... } \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06 State \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6446\u8131\u5bf9 ViewMode l \u5177\u4f53\u7c7b\u578b\u7684\u4f9d\u8d56\u3002 \u63a5\u4e0b\u6765\u770b\u4e00\u4e0b HomeViewModel \u7684\u5b9e\u73b0\uff0c\u4ee5\u53ca\u5176\u5185\u90e8 State \u7684\u5b9a\u4e49","title":"Stateless Composable"},{"location":"architecture/use_jetpack_in_compose/#3-homeviewmodel","text":"HomeViewModel \u662f\u4e00\u4e2a\u6807\u51c6\u7684 Jetpack ViewModel \u5b50\u7c7b, \u53ef\u4ee5\u5728ConfigurationChanged\u65f6\u4fdd\u6301\u6570\u636e\u3002 @HiltViewModel class HomeViewModel @Inject constructor ( private val plantsRepository : PlantsRepository ) : ViewModel () { private val _uiState = MutableStateFlow ( HomeUiState ( loading = true )) val uiState : StateFlow < HomeUiState > = _uiState val pagedPlants : Flow < PagingData < Plant >> = plantsRepository . plants init { viewModelScope . launch { val collections = plantsRepository . getCollections () _uiState . value = HomeUiState ( plantCollections = collections ) } } } \u6dfb\u52a0\u4e86 @AndroidEntryPoint \u7684 Activity \u6216\u8005 Fragment \uff0c\u53ef\u4ee5\u4f7f\u7528 Hilt \u4e3a Composalbe \u521b\u5efa ViewModel\u3002 Hilt \u53ef\u4ee5\u5e2e\u52a9 ViewModel \u6ce8\u5165 @Inject \u58f0\u660e\u7684\u4f9d\u8d56\u3002\u4f8b\u5982\u672c\u4f8b\u4e2d\u4f7f\u7528\u7684 PlantsRepository pagedPlants \u901a\u8fc7 Paging \u5411 Composable \u63d0\u4f9b\u5206\u9875\u52a0\u8f7d\u7684\u5217\u8868\u6570\u636e\uff0c\u6570\u636e\u6e90\u6765\u81ea Room \u3002 \u5206\u9875\u5217\u8868\u4ee5\u5916\u7684\u6570\u636e\u5728 HomeUiState \u4e2d\u96c6\u4e2d\u7ba1\u7406\uff0c\u5305\u62ec\u8f6e\u64ad\u56fe\u4e2d\u6240\u9700\u7684\u690d\u7269\u96c6\u5408\u4ee5\u53ca\u9875\u9762\u52a0\u8f7d\u72b6\u6001\u7b49\u4fe1\u606f\uff1a data class HomeUiState ( val plantCollections : List < Collection < Plant >> = emptyList (), val loading : Boolean = false , val refreshError : Boolean = false , val carouselState : CollectionsCarouselState = CollectionsCarouselState ( emptyList ()) //\u8f6e\u64ad\u56fe\u72b6\u6001\uff0c\u540e\u6587\u4ecb\u7ecd ) HomeScreen \u4e2d\u901a\u8fc7 collectAsState() \u5c06 Flow \u8f6c\u6362\u4e3a Composalbe \u53ef\u8ba2\u9605\u7684 State\uff1a @Composable fun HomeScreen ( homeViewModel = viewModel < HomeViewModel > () ) { val uiState by homeViewModel . uiState . collectAsState () if ( uiState . loading ) { //... } else { //... } }","title":"3. HomeViewModel"},{"location":"architecture/use_jetpack_in_compose/#livedata-compose","text":"\u6b64\u5904\u7684 Flow \u4e5f\u53ef\u4ee5\u66ff\u6362\u6210 LiveData livedata-compose \u5c06 LiveData \u8f6c\u6362\u4e3a Composable \u53ef\u8ba2\u9605\u7684 state : \"androidx.compose.runtime:runtime-livedata:$compose_version\" @Composable fun HomeScreen ( homeViewModel = viewModel < HomeViewModel > () ) { val uiState by homeViewModel . uiState . observeAsState () //uiState is a LiveData //... } \u6b64\u5916\uff0c\u8fd8\u6709 rxjava-compose \u53ef\u4f9b\u4f7f\u7528\uff0c\u529f\u80fd\u7c7b\u4f3c\u3002","title":"LiveData + Compose"},{"location":"architecture/use_jetpack_in_compose/#4-plantlist","text":"PlantList \u5206\u9875\u52a0\u8f7d\u5e76\u663e\u793a\u690d\u7269\u5217\u8868\u3002 @Composable fun PlantList ( plants : Flow < PagingData < Plant >> ) { val pagedPlantItems = plants . collectAsLazyPagingItems () LazyColumn { if ( pagedPlantItems . loadState . refresh == LoadState . Loading ) { item { LoadingIndicator () } } itemsIndexed ( pagedPlantItems ) { index , plant -> if ( plant != null ) { PlantItem ( plant ) } else { PlantPlaceholder () } } if ( pagedPlantItems . loadState . append == LoadState . Loading ) { item { LoadingIndicator () } } } }","title":"4. \u5206\u9875\u5217\u8868\uff1aPlantList"},{"location":"architecture/use_jetpack_in_compose/#paging-compose","text":"paging-compose \u63d0\u4f9b\u4e86 pagging \u7684\u5206\u9875\u6570\u636e LazyPagingItems\uff1a \"androidx.paging:paging-compose:$version\" \u6ce8\u610f\u6b64\u5904\u7684 itemsIndexed \u6765\u81eapaging-compoee\uff0c\u5982\u679c\u7528\u9519\u4e86\uff0c\u53ef\u80fd\u65e0\u6cd5loadMore public fun < T : Any > LazyListScope . itemsIndexed ( lazyPagingItems : LazyPagingItems < T > , itemContent : @Composable LazyItemScope .( index : Int , value : T?) -> Unit ) { items ( lazyPagingItems . itemCount ) { index -> itemContent ( index , lazyPagingItems . getAsState ( index ). value ) } } itemsIndexed \u63a5\u53d7 LazyPagingItems \u53c2\u6570\uff0c LazyPagingItems#getAsState \u4e2d\u4ece PagingDataDiffer \u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5f53 index \u5904\u4e8e\u5217\u8868\u5c3e\u90e8\u65f6\uff0c\u89e6\u53d1 loadMore \u8bf7\u6c42\uff0c\u5b9e\u73b0\u5206\u9875\u52a0\u8f7d\u3002","title":"Paging + Compose"},{"location":"architecture/use_jetpack_in_compose/#5-collectionscarousel","text":"CollectionsCarousel \u662f\u663e\u793a\u8f6e\u64ad\u56fe\u7684 Composable\u3002 \u5728\u4e0b\u9762\u9875\u9762\u4e2d\u90fd\u6709\u5bf9\u8f6e\u64ad\u56fe\u7684\u4f7f\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u6c42 CollectionsCarousel \u5177\u6709\u53ef\u590d\u7528\u6027\u3002","title":"5. \u8f6e\u64ad\u56fe\uff1aCollectionsCarousel"},{"location":"architecture/use_jetpack_in_compose/#reusable-composable","text":"\u5bf9\u4e8e\u6709\u590d\u7528\u6027\u8981\u6c42\u7684 Composable\uff0c\u6211\u4eec\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a \u53ef\u590d\u7528\u7ec4\u4ef6\u4e0d\u5e94\u8be5\u901a\u8fc7 ViewModel \u7ba1\u7406 State \u3002 \u56e0\u4e3a ViewModel \u5728 Scope \u5185\u662f\u5171\u4eab\u7684\uff0c\u4f46\u662f\u5728\u540c\u4e00 Scope \u5185\u590d\u7528\u7684 Composable \u9700\u8981\u72ec\u4eab\u5176 State \u5b9e\u4f8b\u3002 \u56e0\u6b64 CollectionsCarousel \u4e0d\u80fd\u4f7f\u7528 ViewModel \u7ba1\u7406 State\uff0c\u5fc5\u987b\u901a\u8fc7\u53c2\u6570\u4f20\u5165\u72b6\u6001\u4ee5\u53ca\u4e8b\u4ef6\u56de\u8c03\u3002 @Composable fun CollectionsCarousel ( // State in, // Events out ) { // ... } \u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\u4f7f\u5f97 CollectionsCarousel \u5c06\u81ea\u5df1\u7684\u72b6\u6001\u59d4\u6258\u7ed9\u4e86\u7236\u7ea7 Composable\u3002","title":"Reusable Composable"},{"location":"architecture/use_jetpack_in_compose/#collectionscarouselstate","text":"\u65e2\u7136\u59d4\u6258\u5230\u4e86\u7236\u7ea7, \u4e3a\u4e86\u65b9\u4fbf\u7236\u7ea7\u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u5bf9 State \u8fdb\u884c\u4e00\u5b9a\u5c01\u88c5\uff0c\u88ab\u5c01\u88c5\u540e\u7684 State \u4e0e Composable \u914d\u5957\u4f7f\u7528\u3002\u8fd9\u5728 Compose \u4e2d\u4e5f\u662f\u5e38\u89c1\u7684\u505a\u6cd5\uff0c\u6bd4\u5982 LazyColumn \u7684 LazyListState \uff0c\u6216\u8005 Scallfold \u7684 ScaffoldState \u7b49 \u5bf9\u4e8e CollectionsCarousel \u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u9700\u6c42\uff1a\u70b9\u51fb\u67d0\u4e00 Item \u65f6\uff0c\u8f6e\u64ad\u56fe\u7684\u5e03\u5c40\u4f1a\u5c55\u5f00 \u7531\u4e8e\u4e0d\u80fd\u4f7f\u7528 ViewModel\uff0c \u6240\u4ee5\u4f7f\u7528\u5e38\u89c4 Class \u5b9a\u4e49 CollectionsCarouselState \u5e76\u5b9e\u73b0 onCollectionClick \u7b49\u76f8\u5173\u903b\u8f91 data class PlantCollection ( val name : String , @IdRes val asset : Int , val plants : List < Plant > ) class CollectionsCarouselState ( private val collections : List < PlantCollection > ) { private var selectedIndex : Int? by mutableStateOf ( null ) val isExpended : Boolean get () = selectedIndex != null privat var plants by mutableStateOf ( emptyList < Plant > ()) val selectPlant by mutableStateOf ( null ) private set //... fun onCollectionClick ( index : Int ) { if ( index >= collections . size || index < 0 ) return if ( index == selectedIndex ) { selectedIndex = null } else { plants = collections [ index ] . plants selectedIndex = index } } } \u7136\u540e\u5c06\u5176\u5b9a\u4e49\u4e3a CollectionsCarousel \u7684\u53c2\u6570 @Composable fun CollectionsCarousel ( carouselState : CollectionsCarouselState , onPlantClick : ( Plant ) -> Unit ) { // ... } \u4e3a\u4e86\u8fdb\u4e00\u6b65\u65b9\u4fbf\u7236\u7ea7\u8c03\u7528\uff0c\u53ef\u4ee5\u63d0\u4f9b rememberCollectionsCarouselState() \u65b9\u6cd5\uff0c \u6548\u679c\u76f8\u5f53\u4e8e remember { CollectionsCarouselState() } \u6700\u540e\uff0c\u7236Composalbe \u8bbf\u95ee CollectionsCarouselState \u65f6\uff0c\u53ef\u4ee5\u5c06\u5b83\u653e\u7f6e\u7236\u7ea7\u7684 ViewModel \u4e2d\u4fdd\u5b58\uff0c\u4ee5\u652f\u6301 ConfigurationChanged \u3002\u4f8b\u5982\u672c\u4f8b\u4e2d\u4f1a\u653e\u5230 HomeUiState \u4e2d\u7ba1\u7406\u3002","title":"CollectionsCarouselState"},{"location":"architecture/use_jetpack_in_compose/#6-plantdetailscreen-plantviewmodel","text":"PlantDetailScreen \u4e2d\u9664\u4e86\u590d\u7528 CollectionsCarousel \u4ee5\u5916\uff0c\u5927\u90e8\u5206\u90fd\u662f\u5e38\u89c4\u5e03\u5c40\uff0c\u6bd4\u8f83\u7b80\u5355\u3002 \u91cd\u70b9\u8bf4\u660e\u4e00\u4e0b PlantViewModel \uff0c \u901a\u8fc7 id \u4ece PlantsRepository \u4e2d\u83b7\u53d6\u8be6\u60c5\u4fe1\u606f\u3002 class PlantViewModel @Inject constructor ( plantsRepository : PlantsRepository , id : String ) : ViewModel () { val plantDetails : Flow < Plant > = plantsRepository . getPlantDetails ( id ) } \u6b64\u5904\u7684 id \u8be5\u5982\u4f55\u4f20\u5165\u5462\uff1f \u4e00\u4e2a\u505a\u6cd5\u662f\u501f\u52a9 ViewModelProvider.Factory \u6784\u9020 ViewModel \u5e76\u4f20\u5165 id @Composable fun PlantDetailScreen ( id : String ) { val plantViewModel : PlantViewModel = viewModel ( id , remember { object : ViewModelProvider . Factory { override fun < T : ViewModel > create ( modelClass : Class < T > ): T { return PlantViewModel ( PlantRepository , id ) } } }) } \u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\u6210\u672c\u8f83\u9ad8\uff0c\u800c\u4e14\u6309\u7167\u524d\u6587\u4ecb\u7ecd\u7684\uff0c\u5982\u679c\u60f3\u4fdd\u8bc1 PlantDetailScreen \u7684\u53ef\u590d\u7528\u6027\u548c\u53ef\u6d4b\u8bd5\u6027\uff0c\u6700\u597d\u5c06 ViewModel \u7684\u521b\u5efa\u59d4\u6258\u5230\u7236\u7ea7\u3002 \u9664\u4e86\u59d4\u6258\u5230\u7236\u7ea7\u521b\u5efa\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u914d\u5408 Navigation \u548c Hilt \u66f4\u5408\u7406\u7684\u521b\u5efa PlantViewModel \uff0c\u8fd9\u5c06\u5728\u540e\u6587\u4e2d\u4ecb\u7ecd\u3002","title":"6. \u8be6\u60c5\u9875\uff1aPlantDetailScreen &amp; PlantViewModel"},{"location":"architecture/use_jetpack_in_compose/#7-navigation","text":"\u5728 HomeScreen \u5217\u8868\u4e2d\u70b9\u51fb\u67d0 Plant \u540e\u8df3\u8f6c PlantDetailScreen \u3002 \u5b9e\u73b0\u591a\u4e2a\u9875\u9762\u4e4b\u95f4\u8df3\u8f6c\uff0c\u5176\u4e2d\u4e00\u4e2a\u5e38\u89c1\u601d\u8def\u662f\u4e3a Screen \u5305\u88c5\u4e00\u4e2a Framgent\uff0c\u7136\u540e\u501f\u52a9 Navigation \u5b9e\u73b0\u5bf9 Fragment \u7684\u8df3\u8f6c @AndroidEntryPoint class HomeFragment : Fragment () { override fun onCreateView ( inflater : LayoutInflater , container \uff1a ViewGroup?, savedInstanceState : Bundle? ) = ComposeView ( requireContext ()). apply { setContent { HomeScreen (...) } } } Navigation \u5c06\u56de\u9000\u6808\u4e2d\u7684\u8282\u70b9\u62bd\u8c61\u6210\u4e00\u4e2a Destination , \u6240\u4ee5\u8fd9\u4e2a Destination \u4e0d\u4e00\u5b9a\u975e\u8981\u7528 Fragment \u5b9e\u73b0\uff0c \u6ca1\u6709 Fragment \u4e5f\u53ef\u4ee5\u5b9e\u73b0 Composable \u7ea7\u522b\u7684\u9875\u9762\u8df3\u8f6c\u3002","title":"7. \u9875\u9762\u8df3\u8f6c\uff1aNavigation"},{"location":"architecture/use_jetpack_in_compose/#navigation-compose","text":"navigation-compose \u53ef\u4ee5\u5c06 Composalbe \u4f5c\u4e3a Destination \u5728 Navigation \u4e2d\u4f7f\u7528 \"androidx.navigation:navigation-compose:$version\" \u56e0\u6b64\uff0c\u6211\u4eec\u6446\u8131 Framgent \u5b9e\u73b0\u9875\u9762\u8df3\u8f6c\uff1a @AndroidEntryPoint class BloomAcivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?, persistentState : PersistableBundle?) { setContent { val navController = rememberNavController () Scaffold ( bottomBar = { /*...*/ } ) { NavHost ( navController = navController , startDestination = \"home\" ) { composable ( route = \"home\" ) { HomeScreen (...) { plant -> navController . navigate ( \"plant/ ${ plant . id } \" ) } } composable ( route = \"plant/{id}\" , arguments = listOf ( navArgument ( \"id\" ) { type = NavType . IntType }) ) { PlantDetailScreen (...) } } } } } } Navigaion \u7684\u4f7f\u7528\u4f9d\u9760\u4e24\u4e2a\u4e1c\u897f\uff1a NavController \u548c NavHost \uff1a NavController \u4fdd\u5b58\u4e86\u5f53\u524d Navigation \u7684 BackStack \u4fe1\u606f\uff0c\u56e0\u6b64\u662f\u4e00\u4e2a\u643a\u5e26\u72b6\u6001\u7684\u5bf9\u8c61\uff0c\u9700\u8981\u50cf CollectionsCarouselState \u90a3\u6837\uff0c\u8de8\u8d8a NavHost \u7684 Scope \u4e4b\u5916\u521b\u5efa\u3002 NavHost \u662f NavGraph \u7684\u5bb9\u5668\uff0c \u5c06 NavController \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 NavGraph \u4e2d\u7684Destinations\uff08\u5404Composable\uff09\u5c06 NavController \u4f5c\u4e3a SSOT\uff08Single Source Of Truth\uff09 \u76d1\u542c\u5176\u53d8\u5316\u3002","title":"Navigation + Compose"},{"location":"architecture/use_jetpack_in_compose/#navgraph","text":"\u4e0d\u540c\u4e8e\u4f20\u7edf\u7684 XML \u65b9\u5f0f\uff0c navigation-compose \u5219\u4f7f\u7528 Kotlin DSL \u5b9a\u4e49 NavGraph: comosable ( route = \u201c$ id \u201d ) { //... } route \u8bbe\u7f6e Destination \u7684\u7d22\u5f15 id\u3002 HomeScreen \u4f7f\u7528 \u201chome\u201d \u4f5c\u4e3a\u552f\u4e00id; \u800c PlantDetailScreen \u4f7f\u7528 \u201cplant/{id}\u201d \u4f5c\u4e3aid\u3002 \u5176\u4e2d {id} \u4e2d\u7684 id \u6765\u81ea\u524d\u4e00\u9875\u9762\u8df3\u8f6c\u65f6\u643a\u5e26\u7684 URI \u4e2d\u7684\u53c2\u6570 key\u3002 \u672c\u4f8b\u4e2d\u5c31\u662f plant.id : HomeScreen (...) { plant -> navController . navigate ( \"plant/ ${ plant . id } \" ) } composable ( route = \"plant/{id}\" , arguments = listOf ( navArgument ( \"id\" ) { type = NavType . IntType }) ) { //it: NavBackStackEntry val id = it . arguments ?. getString ( \"id\" ) ?: \"\" ... } navArgument \u53ef\u4ee5\u5c06 URI \u4e2d\u7684\u53c2\u6570\u8f6c\u5316\u4e3a Destination \u7684 arguments , \u5e76\u901a\u8fc7 NavBackStackEntry \u83b7\u53d6 \u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 Navigation \u8fdb\u884c Screen \u4e4b\u95f4\u7684\u8df3\u8f6c\u5e76\u643a\u5e26\u4e00\u4e9b\u57fa\u672c\u53c2\u6570\u3002\u6b64\u5916\uff0c Navigation \u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u56de\u9000\u6808\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u5f00\u53d1\u6210\u672c\u3002","title":"NavGraph"},{"location":"architecture/use_jetpack_in_compose/#hilt-compose","text":"\u524d\u6587\u4e2d\u4ecb\u7ecd\u8fc7\uff0c\u4e3a\u4e86\u4fdd\u8bc1 Screen \u7684\u72ec\u7acb\u590d\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 ViewModel \u521b\u5efa\u59d4\u6258\u5230\u7236\u7ea7 Composable\u3002 \u90a3\u4e48\u5728 Navigation \u7684 NavHost \u4e2d\u6211\u4eec\u8be5\u5982\u4f55\u521b\u5efa ViewModel \u5462\uff1f hilt-navigation-compose \u5141\u8bb8\u6211\u4eec\u5728 Navigation \u4e2d\u4f7f\u7528 Hilt \u6784\u5efa ViewModel\uff1a \"androidx.hilt:hilt-navigation-compose:$version\" NavHost ( navController = navController , startDestination = \"home\" , route = \"root\" // \u6b64\u5904\u4e3a NavGraph \u8bbe\u7f6e id\u3002 ) { composable ( route = \"home\" ) { val homeViewModel : HomeViewModel = hiltNavGraphViewModel () val uiState by homeViewModel . uiState . collectAsState () val plantList = homeViewModel . pagedPlants HomeScreen ( uiState = uiState ) { plant -> navController . navigate ( \"plant/ ${ plant . id } \" ) } } composable ( route = \"plant/{id}\" , arguments = listOf ( navArgument ( \"id\" ) { type = NavType . IntType }) ) { val plantViewModel : PlantViewModel = hiltNavGraphViewModel () val plant : Plant by plantViewModel . plantDetails . collectAsState ( Plant ( 0 )) PlantDetailScreen ( plant = plant ) } } Navigation \u4e2d\uff0c\u6bcf\u4e2a Destination \u90fd\u662f\u4e00\u4e2a ViewModelStore, \u56e0\u6b64 ViewModel \u7684 Scope \u53ef\u4ee5\u9650\u5236\u5728 Destination \u5185\u90e8\u800c\u4e0d\u7528\u653e\u5927\u5230\u6574\u4e2a Activity\uff0c\u66f4\u52a0\u5408\u7406\u3002\u800c\u4e14\uff0c\u5f53 Destination \u4ece BackStack \u5f39\u51fa\u65f6\uff0c \u5bf9\u5e94\u7684 Screen \u4ece\u89c6\u56fe\u6811\u4e0a\u5378\u8f7d\uff0c\u540c\u65f6 Scope \u5185\u7684 ViewModel \u88ab\u6e05\u7a7a\uff0c\u907f\u514d\u6cc4\u9732\u3002 hiltNavGraphViewModel() : \u53ef\u4ee5\u83b7\u53d6 Destination Scope \u7684 ViewModel\uff0c\u5e76\u4f7f\u7528 Hilt \u6784\u5efa\u3002 hiltNavGraphViewModel(\"root\") : \u6307\u5b9a NavHost \u7684 routeId\uff0c\u5219\u53ef\u4ee5\u5728 NavGraph Scope \u5185\u5171\u4eabViewModel Screen \u7684 ViewModel \u88ab\u4ee3\u7406\u5230 NavHost \u4e2d\u8fdb\u884c\uff0c \u4e0d\u6301\u6709 ViewModel \u7684 Screen \u5177\u6709\u826f\u597d\u7684\u53ef\u6d4b\u8bd5\u6027\u3002","title":"Hilt + Compose"},{"location":"architecture/use_jetpack_in_compose/#plantviewmodel","text":"@HiltViewModel class PlantViewModel @Inject constructor ( plantsRepository : PlantsRepository , savedStateHandle : SavedStateHandle ) : ViewModel () { val plantDetails : Flow < Plant > = plantsRepository . getPlantDetails ( savedStateHandle . get < Int > ( \"id\" ) !! ) } SavedStateHandle \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\u7684 map\u3002 \u5f53\u4f7f\u7528 Hilt \u5728\u6784\u5efa ViewModel \u65f6\uff0c\u6b64 map \u4f1a\u88ab\u81ea\u52a8\u586b\u5145 NavBackStackEntry \u4e2d\u7684 arguments\uff0c\u4e4b\u540e\u88ab\u53c2\u6570\u6ce8\u5165 ViewModel\u3002 \u6b64\u540e\u5728 ViewModel \u5185\u90e8\u53ef\u4ee5\u901a\u8fc7 get(xxx) \u83b7\u53d6\u952e\u503c\u3002 \u81f3\u6b64\uff0c PlantViewModel \u901a\u8fc7 Hilt \u5b8c\u6210\u4e86\u521b\u5efa\uff0c\u76f8\u6bd4\u4e0e\u4e4b\u524d\u7684 ViewModelProvider.Factory \u7b80\u5355\u5f97\u591a\u3002","title":"\u518d\u770b\u4e00\u770b PlantViewModel"},{"location":"architecture/use_jetpack_in_compose/#recap","text":"\u4e00\u53e5\u8bdd\u603b\u7ed3\u5404 Jetpack \u5e93\u4e3a Compose \u5e26\u6765\u7684\u80fd\u529b\uff1a viewmodel-compose \u53ef\u4ee5\u4ece\u5f53\u524d ViewModelStore \u4e2d\u83b7\u53d6 ViewModel livedate-compose \u5c06 LiveData \u8f6c\u6362\u4e3a Composable \u53ef\u8ba2\u9605\u7684 state \u3002 paging-compose \u63d0\u4f9b\u4e86 pagging \u7684\u5206\u9875\u6570\u636e LazyPagingItems navigation-compose \u53ef\u4ee5\u5c06 Composalbe \u4f5c\u4e3a Destination \u5728 Navigation \u4e2d\u4f7f\u7528 hilt-navigation-compose \u5141\u8bb8\u6211\u4eec\u5728 Navigation \u4e2d\u4f7f\u7528 Hilt \u6784\u5efa ViewModel \u6b64\u5916\uff0c\u8fd8\u6709\u51e0\u70b9\u8bbe\u8ba1\u89c4\u8303\u9700\u8981\u9075\u5b88\uff1a \u5c06 Composable \u7684 ViewModel \u4e0a\u63d0\uff0c\u6709\u5229\u4e8e\u4fdd\u6301\u5176\u53ef\u590d\u7528\u6027\u548c\u53ef\u6d4b\u8bd5\u6027 \u5f53 Composable \u5728\u540c\u4e00 Scope \u5185\u590d\u7528\u65f6\uff0c\u907f\u514d\u4f7f\u7528 ViewModel \u7ba1\u7406 State \u53c2\u8003 \uff1a https://www.youtube.com/watch?v=0z_dwBGQQWQ","title":"Recap"},{"location":"code/design/overview/stickyHeader/","text":"@Composable fun Contributors (){ Column { MemberList ( R . drawable . m1 , \"\u9999\u8fa3\u9e21\u817f\u5821\" ) MemberList ( R . drawable . m2 , text = \"Ruger\" ) MemberList ( R . drawable . m3 , \"\u51db\" ) MemberList ( R . drawable . m4 , text = \"RE\" ) MemberList ( R . drawable . m5 , \"fundroid\" ) } } @Composable fun TouchFish (){ for ( index in 0. . 20 ) MemberList ( R . drawable . m2 , text = \"Ruger\" ) } @Composable fun MemberList ( imageID : Int , text : String ){ Row ( modifier = Modifier . fillMaxWidth () . padding ( horizontal = 10. dp , vertical = 5. dp ), verticalAlignment = Alignment . CenterVertically ){ Surface ( shape = CircleShape , modifier = Modifier . size ( 40. dp )){ Image ( painter = painterResource ( imageID ), contentDescription = null ) } Spacer ( modifier = Modifier . padding ( horizontal = 8. dp )) Text ( text = text , style = MaterialTheme . typography . body1 , fontWeight = FontWeight . W500 ) Box ( modifier = Modifier . fillMaxWidth (), contentAlignment = Alignment . CenterEnd ){ IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . Email , null ) } } } } @ExperimentalFoundationApi @Composable fun ListWithHeader () { val sections = listOf ( \"\u8d21\u732e\u8005\" , \"\u7720\u7720\u7684\u7c89\u4e1d\" ) Column { TopAppBar ( title = { Text ( text = \"Compose Museum \u8d21\u732e\u8005\" , ) }, actions = { IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . Search , null ) } }, backgroundColor = Color . White ) LazyColumn { sections . forEachIndexed { index , section -> stickyHeader { Text ( text = section , modifier = Modifier . fillMaxWidth () . background ( Color ( 0 xFFF2F4FB )) . padding ( horizontal = 10. dp , vertical = 5. dp ), fontWeight = FontWeight . W700 , color = Color ( 0 xFF0079D3 ) ) } when ( index ){ 0 -> item { Contributors ()} 1 -> item { TouchFish ()} } } } } }","title":"stickyHeader"},{"location":"code/elements/text/%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE/","text":"< resources > < string name = \"content\" > \u5982\u679c\u4f60\u770b\u5230\u4e86\u8fd9\u4e2a\u754c\u9762\uff0c\u5c31\u9ed8\u8ba4\u4ee3\u8868\u4f60\u540c\u610f\u6211\u4eec\u7684\u6240\u6709\u7528\u6237\u534f\u8bae\uff08 bushi \uff09 </ string > </ resources > var content by remember { mutableStateOf ( \"\" )} val openDialog = remember { mutableStateOf ( false ) } val annotatedText = buildAnnotatedString { append ( \"\u52fe\u9009\u5373\u4ee3\u8868\u540c\u610f\" ) pushStringAnnotation ( tag = \"tag\" , annotation = stringResource ( id = R . string . content ) ) withStyle ( style = SpanStyle ( color = Color ( 0 xFF0E9FF2 ), fontWeight = FontWeight . Bold ) ) { append ( \"\u7528\u6237\u534f\u8bae\" ) } pop () } Box ( modifier = Modifier . fillMaxSize () . padding ( bottom = 15. dp ), contentAlignment = Alignment . BottomCenter ){ ClickableText ( text = annotatedText , onClick = { offset -> annotatedText . getStringAnnotations ( tag = \"tag\" , start = offset , end = offset ). firstOrNull () ?. let { annotation -> openDialog . value = true content = annotation . item } } ) } if ( openDialog . value ){ AlertDialog ( onDismissRequest = { openDialog . value = false }, title = { Box ( Modifier . fillMaxWidth (), contentAlignment = Alignment . Center ){ Text ( text = \"\u7528\u6237\u534f\u8bae\" , style = MaterialTheme . typography . h6 , ) } }, text = { Text ( content ) }, confirmButton = { Button ( onClick = { openDialog . value = false } ) { Text ( \"\u786e\u8ba4\" ) } }, dismissButton = { Button ( onClick = { openDialog . value = false } ) { Text ( \"\u53d6\u6d88\" ) } } ) }","title":"\u7528\u6237\u534f\u8bae"},{"location":"code/elements/textfield/BasicTextField/","text":"var text by remember { mutableStateOf ( \"\" ) } Box ( modifier = Modifier . fillMaxSize () . background ( Color ( 0 xFFD3D3D3 )), contentAlignment = Alignment . Center ) { BasicTextField ( value = text , onValueChange = { text = it }, modifier = Modifier . background ( Color . White ) . fillMaxWidth (), decorationBox = { innerTextField -> Column ( modifier = Modifier . padding ( vertical = 10. dp ) ) { Row ( verticalAlignment = Alignment . CenterVertically , ) { IconButton ( onClick = {}) { Icon ( painterResource ( id = R . drawable . mood ), contentDescription = null ) } IconButton ( onClick = {}) { Icon ( painterResource ( id = R . drawable . gif ), contentDescription = null ) } IconButton ( onClick = {}) { Icon ( painterResource ( id = R . drawable . shortcut ), contentDescription = null ) } IconButton ( onClick = {}) { Icon ( painterResource ( id = R . drawable . more ), contentDescription = null ) } } Box ( modifier = Modifier . padding ( horizontal = 10. dp ) ) { innerTextField () } Row ( modifier = Modifier . fillMaxWidth (), verticalAlignment = Alignment . CenterVertically , horizontalArrangement = Arrangement . End ) { TextButton ( onClick = { /*TODO*/ }) { Text ( \"\u53d1\u9001\" ) } Spacer ( Modifier . padding ( horizontal = 10. dp )) TextButton ( onClick = { /*TODO*/ }) { Text ( \"\u5173\u95ed\" ) } } } } ) }","title":"BasicTextField"},{"location":"code/layout/bottomNavigation/bottomNavigation/","text":"import androidx.compose.animation.AnimatedVisibility import androidx.compose.animation.ExperimentalAnimationApi import androidx.compose.foundation.clickable import androidx.compose.foundation.interaction.MutableInteractionSource import androidx.compose.foundation.layout.* import androidx.compose.foundation.shape.CircleShape import androidx.compose.material.* import androidx.compose.material.icons.Icons import androidx.compose.material.icons.filled.Home import androidx.compose.material.icons.filled.Settings import androidx.compose.runtime.Composable import androidx.compose.runtime.CompositionLocalProvider import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.res.painterResource import androidx.compose.ui.unit.dp @ExperimentalAnimationApi @Composable fun MyBottomNavigation () { var selectedItem by remember { mutableStateOf ( 0 ) } BottomNavigation ( backgroundColor = Color . White ) { for ( index in 0. . 2 ) { Column ( modifier = Modifier . fillMaxHeight () . weight ( 1f ) . clickable ( onClick = { selectedItem = index }, indication = null , interactionSource = MutableInteractionSource () ), verticalArrangement = Arrangement . Center , horizontalAlignment = Alignment . CenterHorizontally ) { NavigationIcon ( index , selectedItem ) Spacer ( Modifier . padding ( top = 2. dp )) AnimatedVisibility ( visible = index == selectedItem ) { Surface ( shape = CircleShape , modifier = Modifier . size ( 5. dp ), color = Color ( 0 xFF252527 )) { } } } } } } @Composable fun NavigationIcon ( index : Int , selectedItem : Int ){ val alpha = if ( selectedItem != index ) 0.5f else 1f CompositionLocalProvider ( LocalContentAlpha provides alpha ) { when ( index ){ 0 -> Icon ( Icons . Filled . Home , contentDescription = null ) 1 -> Icon ( painterResource ( R . drawable . musicnote ), contentDescription = null ) else -> Icon ( Icons . Filled . Settings , contentDescription = null ) } } }","title":"bottomNavigation"},{"location":"design/animation/animatable/","text":"Animatable \u662f\u4e00\u4e2a\u80fd\u591f\u63d0\u4f9b\u521d\u59cb\u503c\u7684\u57fa\u7840 API \uff0c animate*AsState \u7cfb\u5217 API \u5176\u5185\u90e8\u5747\u4f7f\u7528 Animatable \u5b9a\u5236\u5b8c\u6210\u7684\u3002\u5f53\u4f60\u5e0c\u671b\u5bf9\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u52a8\u753b\u8ba1\u7b97\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 Animatable \u6765\u5b8c\u6210 1. \u7b80\u5355\u4f7f\u7528 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u4ecb\u7ecd animate*AsState \u65f6\u6240\u4f7f\u7528\u7684\u5c0f\u7ea2\u5fc3\u4f5c\u4e3a\u793a\u4f8b\u3002\u4e0e\u4e4b\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u6b21\u6211\u4eec\u4f7f\u7528\u5176\u5185\u90e8\u6240\u5305\u542b\u7684 Animatable \u6765\u76f4\u63a5\u5b8c\u6210\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u6211\u4eec\u5728 Composable \u4f7f\u7528 Animatable \u65f6\uff0c\u5176\u5fc5\u987b\u5305\u88f9\u5728 rememebr \u4e2d\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u8fd9\u4e48\u505a\uff0c\u7f16\u8bd1\u5668\u4f1a\u8d34\u5fc3\u7684\u63d0\u793a\u4f60\u6dfb\u52a0 rememeber \u3002 Creating an Animatable during composition without using remember \u89c2\u5bdf Animatable \u53c2\u6570\u5217\u8868\uff0c\u53ef\u4ee5\u53d1\u73b0\u4f20\u5165\u4e86\u540d\u4e3a Dp.Companion.VectorConverter \u7684\u53c2\u6570\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7c7b\u578b\u8f6c\u5316\u5668 TwoWayConverter \u3002\u5bf9\u4e8e Animatable \u800c\u8a00\u53ea\u8ba4\u8bc6 Float \u7c7b\u578b\uff0c\u5f53\u4f60\u4f7f\u7528\u50cf Dp \u8fd9\u79cd\u5e38\u7528\u7c7b\u578b\u65f6\uff0cGoogle \u5df2\u7ecf\u5728\u5bf9\u5e94\u7c7b\u578b\u7684\u4f34\u751f\u5bf9\u8c61\u4e2d\u901a\u8fc7\u62d3\u5c55\u5c5e\u6027\u65b9\u5f0f\u8fdb\u884c\u4e86\u63d0\u4f9b\u3002\u5f53\u4f60\u5982\u679c\u50cf\u4e3a\u81ea\u5b9a\u4e49\u7c7b\u578b\u9002\u914d Animatable \u65f6\u5c31\u9700\u8981\u81ea\u5b9a\u4e49 TwoWayConverter \u4e86\u3002 \u8fd8\u6709\u4e00\u70b9\u503c\u5f97\u6ce8\u610f\uff0c\u5bf9\u4e8e Animatable \u800c\u8a00\uff0c\u52a8\u753b\u6570\u503c\u66f4\u65b0\u9700\u8981\u5728\u534f\u7a0b\u4e2d\u5b8c\u6210\uff0c\u4e5f\u5c31\u662f\u8c03\u7528 animateTo \u65b9\u6cd5\u3002\u6b64\u65f6\u6211\u4eec\u9700\u8981\u786e\u4fdd Animatable \u7684\u521d\u59cb\u72b6\u6001\u4e0e LaunchedEffect \u4ee3\u7801\u5757\u9996\u6b21\u6267\u884c\u65f6\u72b6\u6001\u4fdd\u6301\u4e00\u81f4\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Animatable(24.dp, Dp.Companion.VectorConverter) \u58f0\u660e Animatable \u7684\u521d\u59cb\u72b6\u6001\u4e3a 24.dp \uff0c\u7531\u4e8e LaunchedEffect \u4ee3\u7801\u5757\u4f1a\u8ddf\u968f Composable \u9996\u5148\u6267\u884c\u4e00\u6b21\uff0c\u6240\u4ee5\u6b64\u65f6 change \u6240\u5bf9\u5e94\u7684\u72b6\u6001\u4e0e\u521d\u59cb\u72b6\u6001\u4e3a 24.dp \uff0c\u5426\u5219\u9875\u9762\u88ab\u6e32\u67d3\u540e\u6ca1\u6709\u4eba\u4e3a\u70b9\u51fb\u4f1a\u81ea\u52a8\u8fdb\u884c buttonSize 24.dp -> 32.dp \u7684\u52a8\u753b\u6548\u679c\u3002 @Preview @Composable fun Demo () { var change by remember { mutableStateOf ( false ) } var flag by remember { mutableStateOf ( false ) } val buttonSizeVariable = remember { Animatable ( 24. dp , Dp . Companion . VectorConverter ) } LaunchedEffect ( change ) { buttonSizeVariable . animateTo ( if ( change ) 32. dp else 24. dp ) } if ( buttonSizeVariable . value == 32. dp ) { change = false } IconButton ( onClick = { change = true flag = ! flag } ) { Icon ( Icons . Rounded . Favorite , contentDescription = null , modifier = Modifier . size ( buttonSizeVariable . value ), tint = if ( flag ) Color . Red else Color . Gray ) } } \u8d81\u70ed\u6253\u94c1\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5982\u4f55\u4f7f\u7528 Animatable \u6765\u5b8c\u6210\u3002 @Preview @Composable fun Demo () { var text by remember { mutableStateOf ( \"\" ) } var focusState by remember { mutableStateOf ( false )} var sizeVariable = remember { Animatable ( 0f ) } LaunchedEffect ( focusState ) { sizeVariable . animateTo ( if ( focusState ) 1f else 0.5f ) } Column ( modifier = Modifier . fillMaxWidth () ) { TextField ( value = text , onValueChange = { text = it }, modifier = Modifier . align ( Alignment . CenterHorizontally ) . onFocusChanged { focusState = it . isFocused } . fillMaxWidth ( sizeVariable . value ) ) } } \u4e0e animate*AsState \u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a AnimationSpec \u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\uff0c\u8bbe\u7f6e animateTo \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373\u53ef\u3002\u8bf7\u53c2\u9605 AnimationSpec \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 suspend fun animateTo ( targetValue : T , animationSpec : AnimationSpec < T > = defaultSpringSpec , initialVelocity : T = velocity , block : ( Animatable < T , V > .() -> Unit ) ? = null )","title":"Animatable"},{"location":"design/animation/animatable/#1","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u4ecb\u7ecd animate*AsState \u65f6\u6240\u4f7f\u7528\u7684\u5c0f\u7ea2\u5fc3\u4f5c\u4e3a\u793a\u4f8b\u3002\u4e0e\u4e4b\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u6b21\u6211\u4eec\u4f7f\u7528\u5176\u5185\u90e8\u6240\u5305\u542b\u7684 Animatable \u6765\u76f4\u63a5\u5b8c\u6210\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u6211\u4eec\u5728 Composable \u4f7f\u7528 Animatable \u65f6\uff0c\u5176\u5fc5\u987b\u5305\u88f9\u5728 rememebr \u4e2d\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u8fd9\u4e48\u505a\uff0c\u7f16\u8bd1\u5668\u4f1a\u8d34\u5fc3\u7684\u63d0\u793a\u4f60\u6dfb\u52a0 rememeber \u3002 Creating an Animatable during composition without using remember \u89c2\u5bdf Animatable \u53c2\u6570\u5217\u8868\uff0c\u53ef\u4ee5\u53d1\u73b0\u4f20\u5165\u4e86\u540d\u4e3a Dp.Companion.VectorConverter \u7684\u53c2\u6570\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7c7b\u578b\u8f6c\u5316\u5668 TwoWayConverter \u3002\u5bf9\u4e8e Animatable \u800c\u8a00\u53ea\u8ba4\u8bc6 Float \u7c7b\u578b\uff0c\u5f53\u4f60\u4f7f\u7528\u50cf Dp \u8fd9\u79cd\u5e38\u7528\u7c7b\u578b\u65f6\uff0cGoogle \u5df2\u7ecf\u5728\u5bf9\u5e94\u7c7b\u578b\u7684\u4f34\u751f\u5bf9\u8c61\u4e2d\u901a\u8fc7\u62d3\u5c55\u5c5e\u6027\u65b9\u5f0f\u8fdb\u884c\u4e86\u63d0\u4f9b\u3002\u5f53\u4f60\u5982\u679c\u50cf\u4e3a\u81ea\u5b9a\u4e49\u7c7b\u578b\u9002\u914d Animatable \u65f6\u5c31\u9700\u8981\u81ea\u5b9a\u4e49 TwoWayConverter \u4e86\u3002 \u8fd8\u6709\u4e00\u70b9\u503c\u5f97\u6ce8\u610f\uff0c\u5bf9\u4e8e Animatable \u800c\u8a00\uff0c\u52a8\u753b\u6570\u503c\u66f4\u65b0\u9700\u8981\u5728\u534f\u7a0b\u4e2d\u5b8c\u6210\uff0c\u4e5f\u5c31\u662f\u8c03\u7528 animateTo \u65b9\u6cd5\u3002\u6b64\u65f6\u6211\u4eec\u9700\u8981\u786e\u4fdd Animatable \u7684\u521d\u59cb\u72b6\u6001\u4e0e LaunchedEffect \u4ee3\u7801\u5757\u9996\u6b21\u6267\u884c\u65f6\u72b6\u6001\u4fdd\u6301\u4e00\u81f4\u3002\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Animatable(24.dp, Dp.Companion.VectorConverter) \u58f0\u660e Animatable \u7684\u521d\u59cb\u72b6\u6001\u4e3a 24.dp \uff0c\u7531\u4e8e LaunchedEffect \u4ee3\u7801\u5757\u4f1a\u8ddf\u968f Composable \u9996\u5148\u6267\u884c\u4e00\u6b21\uff0c\u6240\u4ee5\u6b64\u65f6 change \u6240\u5bf9\u5e94\u7684\u72b6\u6001\u4e0e\u521d\u59cb\u72b6\u6001\u4e3a 24.dp \uff0c\u5426\u5219\u9875\u9762\u88ab\u6e32\u67d3\u540e\u6ca1\u6709\u4eba\u4e3a\u70b9\u51fb\u4f1a\u81ea\u52a8\u8fdb\u884c buttonSize 24.dp -> 32.dp \u7684\u52a8\u753b\u6548\u679c\u3002 @Preview @Composable fun Demo () { var change by remember { mutableStateOf ( false ) } var flag by remember { mutableStateOf ( false ) } val buttonSizeVariable = remember { Animatable ( 24. dp , Dp . Companion . VectorConverter ) } LaunchedEffect ( change ) { buttonSizeVariable . animateTo ( if ( change ) 32. dp else 24. dp ) } if ( buttonSizeVariable . value == 32. dp ) { change = false } IconButton ( onClick = { change = true flag = ! flag } ) { Icon ( Icons . Rounded . Favorite , contentDescription = null , modifier = Modifier . size ( buttonSizeVariable . value ), tint = if ( flag ) Color . Red else Color . Gray ) } } \u8d81\u70ed\u6253\u94c1\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5982\u4f55\u4f7f\u7528 Animatable \u6765\u5b8c\u6210\u3002 @Preview @Composable fun Demo () { var text by remember { mutableStateOf ( \"\" ) } var focusState by remember { mutableStateOf ( false )} var sizeVariable = remember { Animatable ( 0f ) } LaunchedEffect ( focusState ) { sizeVariable . animateTo ( if ( focusState ) 1f else 0.5f ) } Column ( modifier = Modifier . fillMaxWidth () ) { TextField ( value = text , onValueChange = { text = it }, modifier = Modifier . align ( Alignment . CenterHorizontally ) . onFocusChanged { focusState = it . isFocused } . fillMaxWidth ( sizeVariable . value ) ) } } \u4e0e animate*AsState \u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a AnimationSpec \u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\uff0c\u8bbe\u7f6e animateTo \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373\u53ef\u3002\u8bf7\u53c2\u9605 AnimationSpec \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 suspend fun animateTo ( targetValue : T , animationSpec : AnimationSpec < T > = defaultSpringSpec , initialVelocity : T = velocity , block : ( Animatable < T , V > .() -> Unit ) ? = null )","title":"1. \u7b80\u5355\u4f7f\u7528"},{"location":"design/animation/animatestate/","text":"animate*AsState \u51fd\u6570\u662f Compose \u4e2d\u6700\u7b80\u5355\u7684\u52a8\u753b API \uff0c\u7528\u4e8e\u4e3a\u5355\u4e2a\u503c\u5236\u4f5c\u52a8\u753b\u3002\u4f60\u53ea\u9700\u63d0\u4f9b\u7ed3\u675f\u503c\uff08\u6216\u76ee\u6807\u503c\uff09\uff0cAPI \u5c31\u4f1a\u4ece\u5f53\u524d\u503c\u5230\u6307\u5b9a\u503c\u5f00\u59cb\u52a8\u753b\u3002 1. \u7b80\u5355\u4f7f\u7528 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a API \u5236\u4f5c\u6309\u94ae\u5927\u5c0f\u52a8\u753b\u7684\u4f8b\u5b50\u3002 @Composable fun Demo (){ var change by remember { mutableStateOf ( false ) } var flag by remember { mutableStateOf ( false ) } val buttonSize by animateDpAsState ( targetValue = if ( change ) 32. dp else 24. dp ) if ( buttonSize == 32. dp ) { change = false } IconButton ( onClick = { change = true flag = ! flag } ) { Icon ( Icons . Rounded . Favorite , contentDescription = null , modifier = Modifier . size ( buttonSize ), tint = if ( flag ) Color . Red else Color . Gray ) } } \u518d\u6765\u770b\u770b\u53e6\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u5427 var text by remember { mutableStateOf ( \"\" ) } var focusState by remember { mutableStateOf ( false )} val size by animateFloatAsState ( targetValue = if ( focusState ) 1f else 0.5f ) Column ( modifier = Modifier . fillMaxWidth () ) { SearchTextField ( value = text , onValueChange = { text = it }, closeOnclick = { text = \"\" }, modifier = Modifier . align ( Alignment . CenterHorizontally ) . onFocusChanged { focusState = it . isFocused } . fillMaxWidth ( size ) ) } \u6ce8\u610f\uff0c\u4f60\u4e0d\u9700\u8981\u521b\u5efa\u4efb\u4f55\u52a8\u753b\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u4e0d\u9700\u8981\u5904\u7406\u4e2d\u65ad\u3002\u5728\u80cc\u540e\uff0c\u4e00\u4e2a\u52a8\u753b\u5bf9\u8c61\uff08\u5373\u4e00\u4e2a Animatable \u5b9e\u4f8b\uff09\u5c06\u88ab\u521b\u5efa\uff0c\u5e76\u88ab\u8bb0\u4f4f\u5728\u8c03\u7528\u5730\u70b9\uff0c\u4ee5\u7b2c\u4e00\u4e2a\u76ee\u6807\u503c\u4f5c\u4e3a\u5176\u521d\u59cb\u503c\u3002\u4ece\u90a3\u4ee5\u540e\uff0c\u4efb\u4f55\u65f6\u5019\u4f60\u7ed9\u8fd9\u4e2a Composable \u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u540c\u7684\u76ee\u6807\u503c\uff0c\u4e00\u4e2a\u52a8\u753b\u5c31\u4f1a\u81ea\u52a8\u5f00\u59cb\u5411\u90a3\u4e2a\u503c\u53d1\u5c55\u3002\u5982\u679c\u5df2\u7ecf\u6709\u4e00\u4e2a\u52a8\u753b\u5728\u8fd0\u884c\uff0c\u8fd9\u4e2a\u52a8\u753b\u5c31\u4f1a\u4ece\u5b83\u7684\u5f53\u524d\u503c\uff08\u548c\u901f\u5ea6\uff09\u5f00\u59cb\uff0c\u7136\u540e\u5411\u76ee\u6807\u503c\u52a8\u753b\u3002\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a Composable \u4e1c\u897f\u88ab\u91cd\u65b0\u7ec4\u5408\uff0c\u6bcf\u4e00\u5e27\u90fd\u8fd4\u56de\u4e00\u4e2a\u66f4\u65b0\u7684\u52a8\u753b\u503c\u3002 \u5f00\u7bb1\u5373\u7528\uff0c Compose \u4e3a Float \u3001 Color \u3001 Dp \u3001 Size \u3001 Bounds \u3001 Offset \u3001 Rect \u3001 Int \u3001 IntOffset \u548c IntSize \u63d0\u4f9b animate*AsState \u51fd\u6570\u3002\u901a\u8fc7\u4e3a\u5e26\u6709\u901a\u7528\u7c7b\u578b\u7684 animateValueAsState \u63d0\u4f9b TwoWayConverter \uff0c\u53ef\u4ee5\u8f7b\u677e\u6dfb\u52a0\u5bf9\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u652f\u6301\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a AnimationSpec \u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\u3002\u8bf7\u53c2\u9605 AnimationSpec \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f","title":"Animate*State"},{"location":"design/animation/animatestate/#1","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a API \u5236\u4f5c\u6309\u94ae\u5927\u5c0f\u52a8\u753b\u7684\u4f8b\u5b50\u3002 @Composable fun Demo (){ var change by remember { mutableStateOf ( false ) } var flag by remember { mutableStateOf ( false ) } val buttonSize by animateDpAsState ( targetValue = if ( change ) 32. dp else 24. dp ) if ( buttonSize == 32. dp ) { change = false } IconButton ( onClick = { change = true flag = ! flag } ) { Icon ( Icons . Rounded . Favorite , contentDescription = null , modifier = Modifier . size ( buttonSize ), tint = if ( flag ) Color . Red else Color . Gray ) } } \u518d\u6765\u770b\u770b\u53e6\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u5427 var text by remember { mutableStateOf ( \"\" ) } var focusState by remember { mutableStateOf ( false )} val size by animateFloatAsState ( targetValue = if ( focusState ) 1f else 0.5f ) Column ( modifier = Modifier . fillMaxWidth () ) { SearchTextField ( value = text , onValueChange = { text = it }, closeOnclick = { text = \"\" }, modifier = Modifier . align ( Alignment . CenterHorizontally ) . onFocusChanged { focusState = it . isFocused } . fillMaxWidth ( size ) ) } \u6ce8\u610f\uff0c\u4f60\u4e0d\u9700\u8981\u521b\u5efa\u4efb\u4f55\u52a8\u753b\u7c7b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u4e0d\u9700\u8981\u5904\u7406\u4e2d\u65ad\u3002\u5728\u80cc\u540e\uff0c\u4e00\u4e2a\u52a8\u753b\u5bf9\u8c61\uff08\u5373\u4e00\u4e2a Animatable \u5b9e\u4f8b\uff09\u5c06\u88ab\u521b\u5efa\uff0c\u5e76\u88ab\u8bb0\u4f4f\u5728\u8c03\u7528\u5730\u70b9\uff0c\u4ee5\u7b2c\u4e00\u4e2a\u76ee\u6807\u503c\u4f5c\u4e3a\u5176\u521d\u59cb\u503c\u3002\u4ece\u90a3\u4ee5\u540e\uff0c\u4efb\u4f55\u65f6\u5019\u4f60\u7ed9\u8fd9\u4e2a Composable \u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u540c\u7684\u76ee\u6807\u503c\uff0c\u4e00\u4e2a\u52a8\u753b\u5c31\u4f1a\u81ea\u52a8\u5f00\u59cb\u5411\u90a3\u4e2a\u503c\u53d1\u5c55\u3002\u5982\u679c\u5df2\u7ecf\u6709\u4e00\u4e2a\u52a8\u753b\u5728\u8fd0\u884c\uff0c\u8fd9\u4e2a\u52a8\u753b\u5c31\u4f1a\u4ece\u5b83\u7684\u5f53\u524d\u503c\uff08\u548c\u901f\u5ea6\uff09\u5f00\u59cb\uff0c\u7136\u540e\u5411\u76ee\u6807\u503c\u52a8\u753b\u3002\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a Composable \u4e1c\u897f\u88ab\u91cd\u65b0\u7ec4\u5408\uff0c\u6bcf\u4e00\u5e27\u90fd\u8fd4\u56de\u4e00\u4e2a\u66f4\u65b0\u7684\u52a8\u753b\u503c\u3002 \u5f00\u7bb1\u5373\u7528\uff0c Compose \u4e3a Float \u3001 Color \u3001 Dp \u3001 Size \u3001 Bounds \u3001 Offset \u3001 Rect \u3001 Int \u3001 IntOffset \u548c IntSize \u63d0\u4f9b animate*AsState \u51fd\u6570\u3002\u901a\u8fc7\u4e3a\u5e26\u6709\u901a\u7528\u7c7b\u578b\u7684 animateValueAsState \u63d0\u4f9b TwoWayConverter \uff0c\u53ef\u4ee5\u8f7b\u677e\u6dfb\u52a0\u5bf9\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u652f\u6301\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a AnimationSpec \u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\u3002\u8bf7\u53c2\u9605 AnimationSpec \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f","title":"1. \u7b80\u5355\u4f7f\u7528"},{"location":"design/animation/animationvisibility/","text":"1. \u57fa\u7840\u7528\u6cd5 var state by remember { mutableStateOf ( true )} Column ( modifier = Modifier . fillMaxSize (), horizontalAlignment = Alignment . CenterHorizontally , verticalArrangement = Arrangement . Center ){ AnimatedVisibility ( visible = state ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } Spacer ( Modifier . padding ( vertical = 50. dp )) Button ( onClick = { state = ! state }) { Text ( if ( state ) \"\u9690\u85cf\" else \"\u663e\u793a\" ) } } 2. \u8fdb\u573a\u52a8\u753b \u8ba9\u6211\u4eec\u6765\u8bd5\u8bd5 AnimatedVisibility \u4e2d\u7684 Enter \u53c2\u6570\u7684\u7b80\u5355\u4f7f\u7528\u5427\uff01 var state by remember { mutableStateOf ( true )} AnimatedVisibility ( visible = state , enter = slideInVertically ( initialOffsetY = { - 1000 }, animationSpec = tween ( durationMillis = 1200 ) ) ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } enter : EnterTransition = fadeIn () + expandVertically () sealed class EnterTransition EnterTransition \u5b9a\u4e49\u4e86\u5f53\u4e00\u4e2a AnimatedVisibility Composable \u53d8\u5f97\u53ef\u89c1\u65f6\uff0c\u5b83\u662f\u5982\u4f55\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u7684 \u73b0\u53ef\u7528\u7684 3 \u79cd EnterTransition \u7684\u7c7b\u522b\u5206\u522b\u662f\uff1a fade fadeIn slide\uff1a slideIn , slideInHorizontally , slideInVertically expand\uff1a expandIn , expandHorizontally , expandVertically \u5e76\u4e14\uff0c\u5b83\u4eec\u4e4b\u95f4\u80fd\u591f\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u4f8b\u5982\uff1a var state by remember { mutableStateOf ( true )} AnimatedVisibility ( visible = state , enter = slideInVertically ( initialOffsetY = { - 1000 }, animationSpec = tween ( durationMillis = 1200 ) ) + fadeIn ( animationSpec = tween ( durationMillis = 1200 ) ) ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } \u6ce8\u610f fadeIn \u548c slideIn \u4e0d\u5f71\u54cd AnimatedVisibility Composable \u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c expandIn \u5c06\u6269\u5927\u526a\u8f91\u8303\u56f4\u4ee5\u663e\u793a\u6574\u4e2a\u5185\u5bb9\u3002\u8fd9\u5c06\u81ea\u52a8\u5730\u5c06\u5176\u4ed6\u7684\u5e03\u5c40\u52a8\u753b\u5316\uff0c\u975e\u5e38\u50cf Modifier.animateContentSize 3. \u66f4\u591a AnimatedVisibility \u53c2\u6570\u8be6\u60c5","title":"AnimationVisibility"},{"location":"design/animation/animationvisibility/#1","text":"var state by remember { mutableStateOf ( true )} Column ( modifier = Modifier . fillMaxSize (), horizontalAlignment = Alignment . CenterHorizontally , verticalArrangement = Arrangement . Center ){ AnimatedVisibility ( visible = state ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } Spacer ( Modifier . padding ( vertical = 50. dp )) Button ( onClick = { state = ! state }) { Text ( if ( state ) \"\u9690\u85cf\" else \"\u663e\u793a\" ) } }","title":"1. \u57fa\u7840\u7528\u6cd5"},{"location":"design/animation/animationvisibility/#2","text":"\u8ba9\u6211\u4eec\u6765\u8bd5\u8bd5 AnimatedVisibility \u4e2d\u7684 Enter \u53c2\u6570\u7684\u7b80\u5355\u4f7f\u7528\u5427\uff01 var state by remember { mutableStateOf ( true )} AnimatedVisibility ( visible = state , enter = slideInVertically ( initialOffsetY = { - 1000 }, animationSpec = tween ( durationMillis = 1200 ) ) ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } enter : EnterTransition = fadeIn () + expandVertically () sealed class EnterTransition EnterTransition \u5b9a\u4e49\u4e86\u5f53\u4e00\u4e2a AnimatedVisibility Composable \u53d8\u5f97\u53ef\u89c1\u65f6\uff0c\u5b83\u662f\u5982\u4f55\u51fa\u73b0\u5728\u5c4f\u5e55\u4e0a\u7684 \u73b0\u53ef\u7528\u7684 3 \u79cd EnterTransition \u7684\u7c7b\u522b\u5206\u522b\u662f\uff1a fade fadeIn slide\uff1a slideIn , slideInHorizontally , slideInVertically expand\uff1a expandIn , expandHorizontally , expandVertically \u5e76\u4e14\uff0c\u5b83\u4eec\u4e4b\u95f4\u80fd\u591f\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u4f8b\u5982\uff1a var state by remember { mutableStateOf ( true )} AnimatedVisibility ( visible = state , enter = slideInVertically ( initialOffsetY = { - 1000 }, animationSpec = tween ( durationMillis = 1200 ) ) + fadeIn ( animationSpec = tween ( durationMillis = 1200 ) ) ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } \u6ce8\u610f fadeIn \u548c slideIn \u4e0d\u5f71\u54cd AnimatedVisibility Composable \u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c expandIn \u5c06\u6269\u5927\u526a\u8f91\u8303\u56f4\u4ee5\u663e\u793a\u6574\u4e2a\u5185\u5bb9\u3002\u8fd9\u5c06\u81ea\u52a8\u5730\u5c06\u5176\u4ed6\u7684\u5e03\u5c40\u52a8\u753b\u5316\uff0c\u975e\u5e38\u50cf Modifier.animateContentSize","title":"2. \u8fdb\u573a\u52a8\u753b"},{"location":"design/animation/animationvisibility/#3","text":"AnimatedVisibility \u53c2\u6570\u8be6\u60c5","title":"3. \u66f4\u591a"},{"location":"design/animation/overview/","text":"Jetpack Compose \u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u3001\u53ef\u6269\u5c55\u7684 API\uff0c\u4f7f\u5f97\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7528\u6237\u754c\u9762\u4e0a\u5b9e\u73b0\u5404\u79cd\u52a8\u753b\u53d8\u5f97\u5bb9\u6613\u3002\u672c\u6587\u63cf\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b API\uff0c\u4ee5\u53ca\u6839\u636e\u4f60\u7684\u52a8\u753b\u573a\u666f\u4f7f\u7528\u54ea\u4e2a API\u3002 1. \u6982\u8ff0 \u52a8\u753b\u5728\u73b0\u4ee3\u79fb\u52a8\u5e94\u7528\u4e2d\u81f3\u5173\u91cd\u8981\uff0c\u5176\u76ee\u7684\u662f\u5b9e\u73b0\u81ea\u7136\u6d41\u7545\u3001\u6613\u4e8e\u7406\u89e3\u7684\u7528\u6237\u4f53\u9a8c\u3002\u8bb8\u591a Jetpack Compose \u52a8\u753b API \u53ef\u4ee5\u63d0\u4f9b\u53ef\u7ec4\u5408\u51fd\u6570\uff0c\u5c31\u50cf\u5e03\u5c40\u548c\u5176\u4ed6\u754c\u9762\u5143\u7d20\u4e00\u6837\uff1b\u5b83\u4eec\u7531\u4f7f\u7528 Kotlin \u534f\u7a0b\u6302\u8d77\u51fd\u6570\u6784\u5efa\u7684\u8f83\u4f4e\u7ea7\u522b API \u63d0\u4f9b\u652f\u6301\u3002\u672c\u6307\u5357\u5c06\u9996\u5148\u4ecb\u7ecd\u53ef\u7528\u4e8e\u8bb8\u591a\u5b9e\u9645\u573a\u666f\u7684\u9ad8\u7ea7\u522b API\uff0c\u63a5\u7740\u4ecb\u7ecd\u53ef\u4e3a\u60a8\u63d0\u4f9b\u8fdb\u4e00\u6b65\u63a7\u5236\u548c\u81ea\u5b9a\u4e49\u529f\u80fd\u7684\u4f4e\u7ea7\u522b API\u3002 \u4e0b\u9762\u7684\u56fe\u8868\u53ef\u4ee5\u5e2e\u52a9\u60a8\u786e\u5b9a\u8981\u4f7f\u7528\u54ea\u79cd API \u6765\u5b9e\u73b0\u60a8\u7684\u52a8\u753b\u6548\u679c\u3002 \u5982\u679c\u60a8\u8981\u4e3a\u5e03\u5c40\u4e2d\u7684\u5185\u5bb9\u53d8\u5316\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u5982\u679c\u60a8\u8981\u4e3a\u8fdb\u5165/\u9000\u51fa\u8fc7\u6e21\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u4f7f\u7528 AnimationVisibility \u3002 \u5982\u679c\u60a8\u8981\u4e3a\u5185\u5bb9\u5927\u5c0f\u53d8\u5316\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u4f7f\u7528 Modifier.animateContentSize \u3002 \u5426\u5219\u4f7f\u7528 Crossfade \u3002 \u5982\u679c\u52a8\u753b\u6548\u679c\u57fa\u4e8e\u72b6\u6001\uff1a \u5982\u679c\u5728\u7ec4\u5408\u671f\u95f4\u5448\u73b0\u52a8\u753b\u6548\u679c\uff1a \u5982\u679c\u52a8\u753b\u6548\u679c\u65e0\u9650\u5faa\u73af\uff1a \u4f7f\u7528 rememberInfiniteTransition \u3002 \u5982\u679c\u60a8\u8981\u540c\u65f6\u4e3a\u591a\u4e2a\u503c\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u4f7f\u7528 updateTransition \u3002 \u5426\u5219\u4f7f\u7528 animate*AsState \u3002 \u5982\u679c\u60a8\u8981\u5bf9\u52a8\u753b\u64ad\u653e\u65f6\u95f4\u8fdb\u884c\u7cbe\u7ec6\u63a7\u5236\uff1a \u4f7f\u7528 Animation \u3002 \u5982\u679c\u52a8\u753b\u662f\u552f\u4e00\u53ef\u4fe1\u6765\u6e90\uff1a \u4f7f\u7528 Animatable \u3002 \u5426\u5219\uff0c\u8bf7\u4f7f\u7528 AnimationState \u6216 animate \u3002 API \u529f\u80fd AnimationVisibility \u8fdb\u5165/\u9000\u51fa\u7684\u8fc7\u6e21\u52a8\u753b Modifier.contentSize \u5185\u5bb9\u5927\u5c0f\u7684\u53d8\u5316\u8fc7\u6e21\u52a8\u753b Crossfade rememberInfiniteTransition updateTransition \u5b9e\u73b0\u8fc7\u6e21\u52a8\u753b\u7684\u5173\u952e API animate*AsState \u6307\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u53d8\u5316\u52a8\u753b 2. \u9ad8\u7ea7\u52a8\u753b API Compose \u4e3a\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u51e0\u79cd\u5e38\u89c1\u52a8\u753b\u6a21\u5f0f\u63d0\u4f9b\u4e86\u9ad8\u7ea7\u52a8\u753b API \u3002 \u8fd9\u4e9b API \u662f\u4e3a\u9002\u5e94 Material Design Motion \u800c\u91cf\u8eab\u5b9a\u5236\u7684\u3002 AnimatedVisibiliy (\u5b9e\u9a8c\u6027) \u6ce8\u610f \u5b9e\u9a8c\u6027API\u5c06\u6765\u53ef\u80fd\u4f1a\u66f4\u6539\uff0c\u6216\u8005\u53ef\u80fd\u4f1a\u5b8c\u5168\u5220\u9664\u3002 // \u5982\u679c\u4f60\u5728\u8fd9\u91cc\u6709 getValue \u7684\u62a5\u9519\uff0c\u6216\u8005\u65e0\u6cd5\u81ea\u52a8\u5bfc\u5165\uff0c\u8fd9\u662f\u4e00\u4e9b\u65e7\u7248 Android Studio \u8fd8\u6ca1\u6709\u5b8c\u5168\u9002\u914d Compose \u7684 bug\u3002 // \u4f60\u9700\u8981\u624b\u52a8\u5bfc\u5165\uff0c\u6216\u8005\u66f4\u65b0\u5230\u6700\u65b0\u7684 AS // import androidx.compose.runtime.getValue var state by remember { mutableStateOf ( true ) } Column ( modifier = Modifier . fillMaxSize (), horizontalAlignment = Alignment . CenterHorizontally , verticalArrangement = Arrangement . Center ){ AnimatedVisibility ( visible = state ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } Spacer ( Modifier . padding ( vertical = 50. dp )) Button ( onClick = { state = ! state }) { Text ( if ( state ) \"\u9690\u85cf\" else \"\u663e\u793a\" ) } } \u9ed8\u8ba4\u60c5\u51b5\u4e0b \u5185\u5bb9\u901a\u8fc7 fadeIn() \u548c expandVertically() \u51fa\u73b0 \u901a\u8fc7 fadeOut() \u548c shrinkVertically() \u6d88\u5931\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a EnterTransition \u548c ExitTransition \u6765\u81ea\u5b9a\u4e49\u8fc7\u6e21\u6548\u679c\u3002 var state by remember { mutableStateOf ( true ) } Column ( modifier = Modifier . fillMaxSize (), horizontalAlignment = Alignment . CenterHorizontally , verticalArrangement = Arrangement . Center ){ AnimatedVisibility ( visible = state , enter = slideInVertically ( initialOffsetY = { - 40 } ) + expandVertically ( expandFrom = Alignment . Top ) + fadeIn ( initialAlpha = 0.3f ), exit = shrinkHorizontally () + fadeOut () ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } Spacer ( Modifier . padding ( vertical = 50. dp )) Button ( onClick = { state = ! state }) { Text ( if ( state ) \"\u9690\u85cf\" else \"\u663e\u793a\" ) } } \u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u4f60\u53ef\u4ee5\u5c06\u591a\u4e2a EnterTransition \u6216 ExitTransition \u5bf9\u8c61\u4e0e\u4e00\u4e2a + \u8fd0\u7b97\u7b26\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u63a5\u53d7\u53ef\u9009\u53c2\u6570\u4ee5\u81ea\u5b9a\u4e49\u5176\u884c\u4e3a\u3002 EnterTransition \u7684\u4e00\u4e9b\u65b9\u6cd5 fadeIn slideIn expandIn expandHorizontally expandVertically slideInHorizontally slideInVertically ExitTransition \u7684\u4e00\u4e9b\u65b9\u6cd5 fadeOut slideOut shrinkOut shrinkHorizontally shrinkVertically slideOutHorizontally slideOutVertically animateContentSize animateContentSize \u53ef\u4ee5\u5bf9\u5c3a\u5bf8\u66f4\u6539\u8fdb\u884c\u52a8\u753b\u5904\u7406 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a var text by remember { mutableStateOf ( \"animateContentSize \u52a8\u753b\" ) } Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ){ Text ( text , modifier = Modifier . clickable { text += text } . animateContentSize () ) } \u518d\u6765\u770b\u770b\u6ca1\u6709\u52a0 animateContentSize() \u7684\u6548\u679c\u5427 Crossfade Crossfade \u5728\u4e24\u4e2a\u5e03\u5c40\u4e4b\u95f4\u7528\u4ea4\u53c9\u6de1\u5165\u6de1\u51fa\u7684\u52a8\u753b\u3002\u901a\u8fc7\u5207\u6362\u4f20\u9012\u7ed9\u5f53\u524d\u53c2\u6570\u7684\u503c\uff0c\u5185\u5bb9\u4ee5\u4ea4\u53c9\u6e10\u53d8\u52a8\u753b\u7684\u65b9\u5f0f\u5207\u6362 @Composable fun < T > Crossfade ( targetState : T , modifier : Modifier = Modifier , animationSpec : FiniteAnimationSpec < Float > = tween (), content : @Composable ( T ) -> Unit ) \u6765\u770b\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528 var flag by remember { mutableStateOf ( false ) } Column { Crossfade ( targetState = flag , animationSpec = tween ( 1000 ) ) { when ( it ){ false -> Screen1 () true -> Screen2 () } } Button ( onClick = { flag = ! flag } ) { Text ( \"\u5207\u6362\" ) } } @Composable fun Screen1 () { Box ( modifier = Modifier . background ( Color . Red ) . size ( 200. dp ), contentAlignment = Alignment . Center ) { } } @Composable fun Screen2 () { Box ( modifier = Modifier . background ( Color . Blue ) . size ( 200. dp ), contentAlignment = Alignment . Center ) { } } 3. \u4f4e\u7ea7\u52a8\u753b API \u4e0a\u4e00\u8282\u63d0\u5230\u7684\u6240\u6709\u9ad8\u7ea7\u52a8\u753b API \u90fd\u662f\u5efa\u7acb\u5728\u4f4e\u7ea7\u52a8\u753b API \u7684\u57fa\u7840\u4e4b\u4e0a\u7684\u3002 animate*AsState \u51fd\u6570\u662f\u6700\u7b80\u5355\u7684 API \uff0c\u5b83\u5c06\u4e00\u4e2a\u5373\u65f6\u7684\u503c\u53d8\u5316\u6e32\u67d3\u6210\u4e00\u4e2a\u52a8\u753b\u503c\u3002\u5b83\u7531 Animatable \u652f\u6301\uff0c Animatable \u662f\u4e00\u4e2a\u57fa\u4e8e\u534f\u7a0b\u7684 API \uff0c\u7528\u4e8e\u7ed9\u5355\u4e2a\u503c\u5236\u4f5c\u52a8\u753b\u3002 updateTransition \u521b\u5efa\u4e86\u4e00\u4e2a\u8fc7\u6e21\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7ba1\u7406\u591a\u4e2a\u52a8\u753b\u503c\uff0c\u5e76\u6839\u636e\u72b6\u6001\u53d8\u5316\u8fd0\u884c\u5b83\u4eec\u3002 rememberInfiniteTransition \u7c7b\u4f3c\uff0c\u4f46\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u7684\u8fc7\u6e21\uff0c\u53ef\u4ee5\u7ba1\u7406\u591a\u4e2a\u52a8\u753b\uff0c\u65e0\u9650\u5730\u6301\u7eed\u8fd0\u884c\u3002\u9664\u4e86 Animatable \u4e4b\u5916\uff0c\u6240\u6709\u8fd9\u4e9b API \u90fd\u662f\u53ef\u7ec4\u5408\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u5728\u5408\u6210\u4e4b\u5916\u521b\u5efa\u8fd9\u4e9b\u52a8\u753b\u3002 \u6240\u6709\u8fd9\u4e9b API \u90fd\u662f\u57fa\u4e8e\u66f4\u57fa\u672c\u7684 Animation API \u3002\u5c3d\u7ba1\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u76f4\u63a5\u4e0e Animation \u4ea4\u4e92\uff0c\u4f46 Animation \u7684\u4e00\u4e9b\u5b9a\u5236\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7\u66f4\u9ad8\u7ea7\u522b\u7684 API \u83b7\u5f97\u3002\u5173\u4e8e AnimationVector \u548c AnimationSpec \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u81ea\u5b9a\u4e49\u52a8\u753b \u3002 animate*AsState animate*AsState \u51fd\u6570\u662f Compose \u4e2d\u6700\u7b80\u5355\u7684\u52a8\u753b API \uff0c\u7528\u4e8e\u4e3a\u5355\u4e2a\u503c\u5236\u4f5c\u52a8\u753b\u3002\u4f60\u53ea\u9700\u63d0\u4f9b\u7ed3\u675f\u503c\uff08\u6216\u76ee\u6807\u503c\uff09\uff0c API \u5c31\u4f1a\u4ece\u5f53\u524d\u503c\u5230\u6307\u5b9a\u503c\u5f00\u59cb\u52a8\u753b\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a API \u5236\u4f5c alpha \u52a8\u753b\u7684\u4f8b\u5b50\u3002\u901a\u8fc7\u7b80\u5355\u5730\u5c06\u76ee\u6807\u503c\u5305\u88f9\u5728 animateFloatAsState \u4e2d\uff0c alpha \u503c\u73b0\u5728\u662f\u4e00\u4e2a\u4ecb\u4e8e\u6240\u63d0\u4f9b\u7684\u503c\uff08\u672c\u4f8b\u4e2d\u662f 1f \u6216 0.5f \uff09\u4e4b\u95f4\u7684\u52a8\u753b\u503c\u3002 val alpha : Float by animateFloatAsState ( if ( enabled ) 1f else 0.5f ) Box ( Modifier . fillMaxSize () . graphicsLayer ( alpha = alpha ) . background ( Color . Red ) ) \u5728\u8fd9\u91cc\u67e5\u770b\u5173\u4e8e animate*AsState \u7684\u66f4\u591a\u4ecb\u7ecd Animatable Animatable \u4f1a\u5728\u5185\u90e8\u50a8\u5b58\u4e00\u4e2a\u503c\uff0c\u5f53\u503c\u901a\u8fc7 animateTo \u88ab\u6539\u53d8\u65f6\uff0c\u5b83\u53ef\u4ee5\u4ea7\u751f\u52a8\u753b\u3002\u8fd9\u5c31\u662f\u652f\u6301 animate*AsState \u5b9e\u73b0\u7684 API \u3002\u5b83\u786e\u4fdd\u4e86\u4e00\u81f4\u7684\u5ef6\u7eed\u6027\u548c\u4e92\u65a5\u6027\uff0c\u8fd9\u610f\u5473\u7740\u503c\u7684\u53d8\u5316\u603b\u662f\u8fde\u7eed\u7684\uff0c\u4efb\u4f55\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\u90fd\u4f1a\u88ab\u53d6\u6d88\u3002 Animatable \u7684\u8bb8\u591a\u529f\u80fd\uff0c\u5305\u62ec animateTo \uff0c\u90fd\u662f\u4f5c\u4e3a suspend \u51fd\u6570\u63d0\u4f9b\u7684\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u9700\u8981\u88ab\u5305\u88f9\u5728\u4e00\u4e2a\u9002\u5f53\u7684\u534f\u7a0b\u4f5c\u7528\u57df\u5185\u5185\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 LaunchedEffect \u8fd9\u4e2a Composable \u6765\u521b\u5efa\u4e00\u4e2a\u53ea\u9488\u5bf9\u6307\u5b9a\u952e\u503c\u7684\u6301\u7eed\u65f6\u95f4\u7684\u4f5c\u7528\u57df\u3002 var flag by remember { mutableStateOf ( false ) } val color = remember { Animatable ( Color . Gray ) } Column { Box ( Modifier . size ( 300. dp ). background ( color . value )) Button ( onClick = { flag = ! flag } ) { Text ( \"\u5207\u6362\" ) } } LaunchedEffect ( flag ) { color . animateTo ( targetValue = if ( flag ){ Color . Green } else { Color . Red }, animationSpec = tween ( 1000 ) ) } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u5e76\u8bb0\u4f4f\u4e86\u4e00\u4e2a Animatable \u7684\u5b9e\u4f8b\uff0c\u5176\u521d\u59cb\u503c\u4e3a Color.Gray \u3002\u6839\u636e flag \u7684\u503c\uff0c\u989c\u8272\u4f1a\u52a8\u753b\u5730\u53d8\u6210 Color.Green \u6216 Color.Red \u3002\u4efb\u4f55\u5bf9 flag \u7684\u540e\u7eed\u6539\u53d8\u90fd\u4f1a\u542f\u52a8\u52a8\u753b\u5230\u53e6\u4e00\u79cd\u989c\u8272\u3002\u5982\u679c\u5728\u6539\u53d8\u503c\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u52a8\u753b\u4f1a\u88ab\u53d6\u6d88\uff0c\u65b0\u7684\u52a8\u753b\u4f1a\u4ece\u5f53\u524d\u7684\u5feb\u7167\u503c\u548c\u5f53\u524d\u7684\u901f\u5ea6\u5f00\u59cb\u3002 \u8fd9\u662f\u652f\u6301\u4e0a\u4e00\u8282\u4e2d\u63d0\u5230\u7684 animate*AsState API \u7684\u52a8\u753b\u5b9e\u73b0\u3002\u4e0e animate*AsState \u76f8\u6bd4\uff0c\u76f4\u63a5\u4f7f\u7528 Animatable \u5728\u51e0\u4e2a\u65b9\u9762\u7ed9\u4e86\u6211\u4eec\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236\u3002\u9996\u5148\uff0c Animatable \u53ef\u4ee5\u6709\u4e00\u4e2a\u4e0d\u540c\u4e8e\u5176\u7b2c\u4e00\u4e2a\u76ee\u6807\u503c\u7684\u521d\u59cb\u503c\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4f8b\u5b50\u4e00\u5f00\u59cb\u663e\u793a\u7684\u662f\u4e00\u4e2a\u7070\u8272\u7684\u76d2\u5b50\uff0c\u5f53\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u7acb\u5373\u5f00\u59cb\u52a8\u753b\u5730\u53d8\u6210\u4e3a\u7eff\u8272\u6216\u7ea2\u8272\u3002\u7b2c\u4e8c\uff0c Animatable \u5bf9\u5185\u5bb9\u503c\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u64cd\u4f5c\uff0c\u5373 snapTo \u548c animateDecay \u3002 snapTo \u5c06\u5f53\u524d\u503c\u7acb\u5373\u8bbe\u7f6e\u4e3a\u76ee\u6807\u503c\u3002\u5f53\u52a8\u753b\u672c\u8eab\u4e0d\u662f\u552f\u4e00\u7684\u6570\u636e\u6e90\uff0c\u5e76\u4e14\u5fc5\u987b\u4e0e\u5176\u4ed6\u72b6\u6001\u540c\u6b65\u65f6\uff0c\u4f8b\u5982\u89e6\u6478\u4e8b\u4ef6\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 animateDecay \u542f\u52a8\u4e00\u4e2a\u4ece\u7ed9\u5b9a\u901f\u5ea6\u5f00\u59cb\u653e\u7f13\u7684\u52a8\u753b\u3002\u8fd9\u5bf9\u4e8e\u5b9e\u73b0\u7529\u52a8\u884c\u4e3a\u5f88\u6709\u7528\u3002\u66f4\u591a\u4fe1\u606f\u89c1\u624b\u52bf\u548c\u52a8\u753b\u3002 Animatable \u652f\u6301 Float \u548c Color \uff0c\u4f46\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a TwoWayConverter \u6765\u4f7f\u7528\u3002\u53c2\u89c1 AnimationVector \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a AnimationSpec \u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\u3002\u53c2\u89c1 AnimationSpec \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002 updateTransition Transition \u7ba1\u7406\u4e00\u4e2a\u6216\u591a\u4e2a\u52a8\u753b\u4f5c\u4e3a\u5b83\u7684\u5b50\u9879\uff0c\u5e76\u5728\u591a\u4e2a\u72b6\u6001\u4e4b\u95f4\u540c\u65f6\u8fd0\u884c\u5b83\u4eec\u3002 \u8fd9\u4e9b\u72b6\u6001\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u679a\u4e3e\u7c7b\u578b\u6765\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\uff0c\u5c31\u50cf\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e00\u6837\u3002 private enum class BoxState { Collapsed , Expanded } updateTransition \u53ef\u4ee5\u521b\u5efa\u5e76\u8bb0\u4f4f\u4e00\u4e2a Transition \u7684\u5b9e\u4f8b\u5e76\u66f4\u65b0\u5176\u72b6\u6001 var currentState by remember { mutableStateOf ( BoxState . Collapsed ) } val transition = updateTransition ( currentState ) \u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528 animate* \u6269\u5c55\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u5728\u8fd9\u4e2a\u8fc7\u6e21\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u5b50\u52a8\u753b\u3002\u6307\u5b9a\u6bcf\u4e2a\u72b6\u6001\u7684\u76ee\u6807\u503c\u3002\u8fd9\u4e9b animate* \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u52a8\u753b\u503c\uff0c\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u7528 updateTransition \u66f4\u65b0\u8fc7\u6e21\u72b6\u6001\u65f6\uff0c\u6bcf\u4e00\u5e27\u90fd\u4f1a\u66f4\u65b0\u3002 var currentState by remember { mutableStateOf ( BoxState . Collapsed ) } val transition = updateTransition ( currentState ) val rect by transition . animateDp { state -> when ( state ) { BoxState . Collapsed -> 0. dp BoxState . Expanded -> 150. dp } } Box ( modifier = Modifier . size ( rect ) . background ( Color ( 0 xFF0079D3 )), ) { } \u4f60\u53ef\u4ee5\u9009\u62e9\u4f20\u9012\u4e00\u4e2a transitionSpec \u53c2\u6570\uff0c\u4e3a\u6bcf\u4e2a\u8fc7\u6e21\u72b6\u6001\u53d8\u5316\u7684\u7ec4\u5408\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684 AnimationSpec \u3002\u53c2\u89c1 AnimationSpec \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 val rect by transition . animateDp ( transitionSpec = { when { BoxState . Expanded isTransitioningTo BoxState . Collapsed -> spring ( stiffness = 50f ) else -> tween ( durationMillis = 500 ) // \u52a8\u753b\u65f6\u95f4 } } ){ state -> when ( state ) { BoxState . Collapsed -> 0. dp BoxState . Expanded -> 150. dp } } \u4e00\u65e6\u4e00\u4e2a transition \u5230\u8fbe\u76ee\u6807\u72b6\u6001\uff0c Transition.currentState \u5c06\u4e0e Transition.targetState \u76f8\u540c\u3002\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u8fc7\u6e21\u662f\u5426\u5b8c\u6210\u7684\u4e00\u4e2a\u4fe1\u53f7\u3002 \u6211\u4eec\u6709\u65f6\u5e0c\u671b\u6709\u4e00\u4e2a\u4e0e\u7b2c\u4e00\u4e2a\u76ee\u6807\u72b6\u6001\u4e0d\u540c\u7684\u521d\u59cb\u72b6\u6001\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 updateTransition \u4e0e MutableTransitionState \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u5728\u4ee3\u7801\u8fdb\u5165\u5408\u6210\u65f6\u7acb\u5373\u5f00\u59cb\u52a8\u753b\u3002 var currentState = remember { MutableTransitionState ( BoxState . Collapsed ) } // \u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u5c06 currentState \u7684\u503c\u53d8\u4e3a BoxState.Expanded\uff0c\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u5c06\u4f1a\u76f4\u63a5\u8fd0\u884c\u52a8\u753b currentState . targetState = BoxState . Expanded val transition = updateTransition ( currentState ) \u5c01\u88c5\u4e00\u4e2a Transition \u5e76\u8ba9\u5b83\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528 \u5bf9\u4e8e\u7b80\u5355\u7684\u7528\u4f8b\uff0c\u5728\u4e0e\u4f60\u7684\u7528\u6237\u754c\u9762\u76f8\u540c\u7684 composable \u4e2d\u5b9a\u4e49\u8fc7\u6e21\u52a8\u753b\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u9009\u62e9\u3002\u7136\u800c\uff0c\u5f53\u4f60\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u6709\u8bb8\u591a\u52a8\u753b\u503c\u7684\u590d\u6742\u7ec4\u4ef6\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u628a\u52a8\u753b\u5b9e\u73b0\u4e0e\u53ef\u7ec4\u5408\u7684\u7528\u6237\u754c\u9762\u5206\u5f00\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u6301\u6709\u6240\u6709\u52a8\u753b\u503c\u7684\u7c7b\u548c\u4e00\u4e2a\u8fd4\u56de\u8be5\u7c7b\u5b9e\u4f8b\u7684 \"\u66f4\u65b0 \"\u51fd\u6570\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fc7\u6e21\u7684\u5b9e\u73b0\u53ef\u4ee5\u88ab\u63d0\u53d6\u5230\u65b0\u7684\u72ec\u7acb\u51fd\u6570\u4e2d\u3002\u5f53\u9700\u8981\u96c6\u4e2d\u52a8\u753b\u903b\u8f91\u6216\u4f7f\u590d\u6742\u7684\u52a8\u753b\u53ef\u91cd\u590d\u4f7f\u7528\u65f6\uff0c\u8fd9\u79cd\u6a21\u5f0f\u5f88\u6709\u7528\u3002 enum class BoxState { Collapsed , Expanded } @Composable fun AnimatingBox ( boxState : BoxState ) { val transitionData = updateTransitionData ( boxState ) // UI \u6811 Box ( modifier = Modifier . background ( transitionData . color ) . size ( transitionData . size ) ) } // \u4fdd\u5b58\u52a8\u753b\u6570\u503c private class TransitionData ( color : State < Color > , size : State < Dp > ) { val color by color val size by size } // \u521b\u5efa\u4e00\u4e2a Transition \u5e76\u8fd4\u56de\u5176\u52a8\u753b\u503c\u3002 @Composable private fun updateTransitionData ( boxState : BoxState ): TransitionData { val transition = updateTransition ( boxState ) val color = transition . animateColor { state -> when ( state ) { BoxState . Collapsed -> Color . Gray BoxState . Expanded -> Color . Red } } val size = transition . animateDp { state -> when ( state ) { BoxState . Collapsed -> 64. dp BoxState . Expanded -> 128. dp } } return remember ( transition ) { TransitionData ( color , size ) } } rememberInfiniteTransition InfiniteTransition \u50cf Transition \u4e00\u6837\u6301\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u52a8\u753b\uff0c\u4f46\u8fd9\u4e9b\u52a8\u753b\u4e00\u8fdb\u5165\u6784\u56fe\u5c31\u5f00\u59cb\u8fd0\u884c\uff0c\u9664\u975e\u5b83\u4eec\u88ab\u79fb\u9664\uff0c\u5426\u5219\u4e0d\u4f1a\u505c\u6b62\u3002\u4f60\u53ef\u4ee5\u7528 rememberInfiniteTransition \u521b\u5efa\u4e00\u4e2a InfiniteTransition \u7684\u5b9e\u4f8b\u3002\u5b50\u52a8\u753b\u53ef\u4ee5\u7528 animateColor \u3001 animatedFloat \u6216 animatedValue \u6dfb\u52a0\u3002\u4f60\u8fd8\u9700\u8981\u6307\u5b9a\u4e00\u4e2a infiniteRepeatable \u6765\u6307\u5b9a\u52a8\u753b\u5f62\u5f0f\u3002 val infiniteTransition = rememberInfiniteTransition () val color by infiniteTransition . animateColor ( initialValue = Color . Red , // \u521d\u59cb\u503c targetValue = Color . Green , // \u6700\u7ec8\u503c animationSpec = infiniteRepeatable ( animation = tween ( 1000 , easing = LinearEasing ), // \u4e00\u4e2a\u52a8\u753b\u503c\u7684\u8f6c\u6362\u6301\u7eed 1 \u79d2\uff0c\u7f13\u548c\u65b9\u5f0f\u4e3a LinearEasing repeatMode = RepeatMode . Reverse // \u6307\u5b9a\u52a8\u753b\u91cd\u590d\u8fd0\u884c\u7684\u65b9\u5f0f\uff0c // Reverse \u4e3a init -> target, target -> init, init -> target // Repeat \u4e3a init -> target, init -> target, init -> target ) ) Box ( Modifier . fillMaxSize (). background ( color )) TargetBasedAnimation TargetBasedAnimation \u662f\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u6700\u4f4e\u7ea7\u522b\u7684\u52a8\u753b API \u3002\u5176\u4ed6 API \u6db5\u76d6\u4e86\u5927\u591a\u6570\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u4f46\u76f4\u63a5\u4f7f\u7528 TargetBasedAnimation \u53ef\u4ee5\u8ba9\u4f60\u81ea\u5df1\u63a7\u5236\u52a8\u753b\u7684\u64ad\u653e\u65f6\u95f4\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c TargetAnimation \u7684\u64ad\u653e\u65f6\u95f4\u662f\u6839\u636e withFrameMillis \u63d0\u4f9b\u7684\u5e27\u65f6\u95f4\u624b\u52a8\u63a7\u5236\u7684\u3002 val anim = remember { TargetBasedAnimation ( animationSpec = tween ( 200 ), typeConverter = Float . VectorConverter , initialValue = 200f , targetValue = 1000f ) } var playTime by remember { mutableStateOf ( 0L ) } LaunchedEffect ( anim ) { val startTime = withFrameNanos { it } do { playTime = withFrameNanos { it } - startTime val animationValue = anim . getValueFromNanos ( playTime ) } while ( someCustomCondition ()) } 4. \u81ea\u5b9a\u4e49\u52a8\u753b \u8bb8\u591a\u52a8\u753b API \u901a\u5e38\u63a5\u53d7\u53c2\u6570\u6765\u5b9a\u5236\u5b83\u7684\u884c\u4e3a\u3002 AnimationSpec \u5927\u591a\u6570\u52a8\u753b API \u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7\u4e00\u4e2a\u53ef\u9009\u7684 AnimationSpec \u53c2\u6570\u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\u3002 val alpha : Float by animateFloatAsState ( targetValue = if ( enabled ) 1f else 0.5f , // \u914d\u7f6e\u52a8\u753b\u7684\u6301\u7eed\u65f6\u95f4\u548c\u7f13\u548c\u5ea6 animationSpec = tween ( durationMillis = 300 , easing = FastOutSlowInEasing ) ) \u6709\u4e0d\u540c\u79cd\u7c7b\u7684 AnimationSpec \u7528\u4e8e\u521b\u5efa\u4e0d\u540c\u7c7b\u578b\u7684\u52a8\u753b\u3002 spring spring \u5728\u8d77\u59cb\u503c\u548c\u7ed3\u675f\u503c\u4e4b\u95f4\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u7269\u7406\u5b66\u7684\u52a8\u753b\u3002\u5b83\u9700\u8981 2 \u4e2a\u53c2\u6570\uff1a\u963b\u5c3c\u7387\u548c\u521a\u5ea6\u3002 dampingRatio \u5b9a\u4e49\u4e86\u5f39\u7c27\u7684\u53cd\u5f39\u7a0b\u5ea6\u3002\u9ed8\u8ba4\u503c\u662f Spring.DampingRatioNoBouncy \u3002 stiffness \u5b9a\u4e49\u4e86\u5f39\u7c27\u5411\u6700\u7ec8\u503c\u79fb\u52a8\u7684\u901f\u5ea6\u3002\u9ed8\u8ba4\u503c\u662f Spring.StiffnessMedium \u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = spring ( dampingRatio = Spring . DampingRatioHighBouncy , stiffness = Spring . StiffnessMedium ) ) spring \u53ef\u4ee5\u6bd4\u57fa\u4e8e\u6301\u7eed\u65f6\u95f4\u7684 AnimationSpec \u7c7b\u578b\u66f4\u987a\u5229\u5730\u5904\u7406\u4e2d\u65ad\uff0c\u56e0\u4e3a\u5b83\u4fdd\u8bc1\u4e86\u76ee\u6807\u503c\u5728\u52a8\u753b\u4e2d\u53d8\u5316\u65f6\u901f\u5ea6\u7684\u8fde\u7eed\u6027\u3002 spring \u88ab\u8bb8\u591a\u52a8\u753b API \u7528\u4f5c\u9ed8\u8ba4\u7684 AnimationSpec \uff0c\u5982 animate*AsState \u548c updateTransition \u3002 tween tween \u5728\u6307\u5b9a\u7684 durationMillis \u4e0a\u4f7f\u7528\u7f13\u548c\u66f2\u7ebf\u5728\u5f00\u59cb\u548c\u7ed3\u675f\u503c\u4e4b\u95f4\u8fdb\u884c\u52a8\u753b\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u770b Easing \u3002\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a delayMillis \u6765\u63a8\u8fdf\u52a8\u753b\u7684\u5f00\u59cb\u65f6\u95f4\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = tween ( durationMillis = 300 , delayMillis = 50 , easing = LinearOutSlowInEasing ) ) keyframes keyframes \u7684\u52a8\u753b\u57fa\u4e8e\u52a8\u753b\u6301\u7eed\u65f6\u95f4\u4e2d\u4e0d\u540c\u65f6\u95f4\u6233\u6307\u5b9a\u7684\u5feb\u7167\u503c\u3002\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u52a8\u753b\u503c\u5c06\u5728\u4e24\u4e2a keyframes \u503c\u4e4b\u95f4\u63d2\u503c\u3002\u5bf9\u4e8e\u8fd9\u4e9b keyframes \u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u53ef\u4ee5\u6307\u5b9a Easing \u6765\u51b3\u5b9a\u63d2\u503c\u66f2\u7ebf\u3002 \u6307\u5b9a 0 \u6beb\u79d2\u5904\u548c\u6301\u7eed\u65f6\u95f4\u5904\u7684\u6570\u503c\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u4f60\u4e0d\u6307\u5b9a\u8fd9\u4e9b\u503c\uff0c\u5b83\u4eec\u5c06\u5206\u522b\u9ed8\u8ba4\u4e3a\u52a8\u753b\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u503c\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = keyframes { durationMillis = 375 0.0f at 0 with LinearOutSlowInEasing 0.2f at 15 with FastOutLinearInEasing 0.4f at 75 0.4f at 225 } ) repeatable repeatable \u91cd\u590d\u8fd0\u884c\u4e00\u4e2a\u57fa\u4e8e\u6301\u7eed\u65f6\u95f4\u7684\u52a8\u753b\uff08\u6bd4\u5982 Tween \u6216\u5173\u952e\u5e27\uff09\uff0c\u76f4\u5230\u5b83\u8fbe\u5230\u6307\u5b9a\u7684\u8fed\u4ee3\u6b21\u6570\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 repeatMode \u53c2\u6570\u6765\u6307\u5b9a\u52a8\u753b\u662f\u5426\u5e94\u8be5\u4ece\u5f00\u59cb RepeatMode.Restart \u6216\u4ece\u7ed3\u675f RepeatMode.Reverse \u5f00\u59cb\u91cd\u590d\u3002 infiniteRepeatable infiniteRepeatable \u548c repeatable \u4e00\u6837\uff0c\u4f46\u5b83\u4f1a\u91cd\u590d\u65e0\u9650\u6b21\u7684\u8fed\u4ee3\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = infiniteRepeatable ( animation = tween ( durationMillis = 300 ), repeatMode = RepeatMode . Reverse ) ) \u5728\u4f7f\u7528 ComposeTestRule \u7684\u6d4b\u8bd5\u4e2d\uff0c\u4f7f\u7528 infiniteRepeatable \u7684\u52a8\u753b\u4e0d\u4f1a\u88ab\u8fd0\u884c\u3002\u8be5\u7ec4\u4ef6\u5c06\u4f7f\u7528\u6bcf\u4e2a\u52a8\u753b\u503c\u7684\u521d\u59cb\u503c\u8fdb\u884c\u6e32\u67d3\u3002 snap snap \u662f\u4e00\u4e2a\u7279\u6b8a\u7684 AnimationSpec \uff0c\u53ef\u4ee5\u7acb\u5373\u5c06\u503c\u5207\u6362\u5230\u7ed3\u675f\u503c\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a delayMillis \uff0c\u4ee5\u4fbf\u5ef6\u8fdf\u52a8\u753b\u7684\u5f00\u59cb\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = snap ( delayMillis = 50 ) ) \u6ce8\u610f \u5728 View UI \u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 ObjectAnimator \u7b49\u6765\u5b9e\u73b0\u57fa\u4e8e\u65f6\u95f4\u7684\u52a8\u753b\uff0c\u800c SpringAnimation \u5219\u662f\u57fa\u4e8e\u7269\u7406\u7684\u52a8\u753b\u3002\u8981\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u4e2a\u4e0d\u540c\u7684\u52a8\u753b API \u5e76\u4e0d\u5bb9\u6613\u3002 Compose \u4e2d\u7684 AnimationSpec \u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u7edf\u4e00\u7684\u65b9\u5f0f\u6765\u5904\u7406\u8fd9\u4e9b\u3002 Easing \u57fa\u4e8e\u6301\u7eed\u65f6\u95f4\u7684 AnimationSpec \u64cd\u4f5c\uff08\u5982 tween \u6216 keyframes \uff09\u4f7f\u7528 Easing \u6765\u8c03\u6574\u52a8\u753b\u7684\u5206\u6570\u3002\u8fd9\u5141\u8bb8\u52a8\u753b\u503c\u52a0\u901f\u548c\u51cf\u901f\uff0c\u800c\u4e0d\u662f\u4ee5\u4e00\u4e2a\u6052\u5b9a\u7684\u901f\u5ea6\u79fb\u52a8\u3002\u5206\u6570\u662f\u4e00\u4e2a\u4ecb\u4e8e 0 \uff08\u5f00\u59cb\uff09\u548c 1.0 \uff08\u7ed3\u675f\uff09\u4e4b\u95f4\u7684\u6570\u503c\uff0c\u8868\u793a\u52a8\u753b\u7684\u5f53\u524d\u70b9\u3002 Easing \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u4ecb\u4e8e 0 \u548c 1.0 \u4e4b\u95f4\u7684\u5206\u6570\u503c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6d6e\u70b9\u6570\u3002\u8fd4\u56de\u7684\u503c\u53ef\u4ee5\u5728\u8fb9\u754c\u4e4b\u5916\uff0c\u4ee5\u8868\u793a\u8fc7\u51b2\u6216\u4e0b\u51b2\u7684\u60c5\u51b5\u3002\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Easing \u53ef\u4ee5\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\u4e00\u6837\u88ab\u521b\u5efa\u3002 val CustomEasing = Easing { fraction -> fraction * fraction } @Composable fun EasingUsage () { val value by animateFloatAsState ( targetValue = 1f , animationSpec = tween ( durationMillis = 300 , easing = CustomEasing ) ) // \u2026 \u2026 } Compose \u63d0\u4f9b\u4e86\u51e0\u4e2a\u5185\u7f6e\u7684 Easing \u529f\u80fd\uff0c\u6db5\u76d6\u4e86\u5927\u591a\u6570\u4f7f\u7528\u60c5\u51b5\u3002\u8bf7\u53c2\u9605 Speed Material Design \uff0c\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6839\u636e\u4f60\u7684\u60c5\u51b5\u4f7f\u7528\u4f55\u79cd Easing \u7684\u4fe1\u606f\u3002 FastOutSlowInEasing LinearOutSlowInEasing FastOutLinearEasing LinearEasing CubicBezierEasing \u6ce8\u610f Easing \u5bf9\u8c61\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u5e73\u53f0\u4e2d Interpolator \u7c7b\u7684\u5b9e\u4f8b\u76f8\u540c\u3002\u5b83\u6ca1\u6709 getInterpolation() \u65b9\u6cd5\uff0c\u800c\u662f\u6709 transform() \u65b9\u6cd5\u3002 AnimationVector \u5927\u591a\u6570 Compose \u7684\u52a8\u753b API \u90fd\u652f\u6301 Float \u3001 Color \u3001 Dp \u548c\u5176\u4ed6\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u5f00\u7bb1\u5373\u7528\u7684\u52a8\u753b\u503c\uff0c\u4f46\u4f60\u6709\u65f6\u9700\u8981\u5bf9\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u52a8\u753b\u5904\u7406\uff0c\u5305\u62ec\u4f60\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u3002\u5728\u52a8\u753b\u5236\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u52a8\u753b\u503c\u90fd\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a AnimationVector \u3002\u8be5\u503c\u901a\u8fc7\u76f8\u5e94\u7684 TwoWayConverter \u8f6c\u6362\u4e3a AnimationVector \uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u8fd9\u6837\u6838\u5fc3\u52a8\u753b\u7cfb\u7edf\u5c31\u53ef\u4ee5\u7edf\u4e00\u5904\u7406\u5b83\u4eec\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a Int \u88ab\u8868\u793a\u4e3a\u4e00\u4e2a AnimationVector1D \uff0c\u5b83\u6301\u6709\u4e00\u4e2a\u6d6e\u70b9\u503c\u3002 Int \u7684 TwoWayConverter \u770b\u8d77\u6765\u50cf\u8fd9\u6837\u3002 val IntToVector : TwoWayConverter < Int , AnimationVector1D > = TwoWayConverter ({ AnimationVector1D ( it . toFloat ()) }, { it . value . toInt () }) \u989c\u8272\u672c\u8d28\u4e0a\u662f\u4e00\u7ec4 4 \u4e2a\u503c\uff0c\u7ea2\u3001\u7eff\u3001\u84dd\u548c\u900f\u660e\u5ea6\uff0c\u6240\u4ee5\u989c\u8272\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a AnimationVector4D \uff0c\u6301\u6709 4 \u4e2a\u6d6e\u70b9\u503c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u52a8\u753b\u4e2d\u4f7f\u7528\u7684\u6bcf\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u88ab\u8f6c\u6362\u4e3a AnimationVector1D \u3001 AnimationVector2D \u3001 AnimationVector3D \u6216 AnimationVector4D \uff0c\u53d6\u51b3\u4e8e\u5176\u7ef4\u5ea6\u3002\u8fd9\u4f7f\u5f97\u5bf9\u8c61\u7684\u4e0d\u540c\u7ec4\u4ef6\u53ef\u4ee5\u72ec\u7acb\u5730\u88ab\u52a8\u753b\u5316\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u6709\u81ea\u5df1\u7684\u901f\u5ea6\u8ddf\u8e2a\u3002\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5185\u7f6e\u8f6c\u6362\u5668\u53ef\u4ee5\u4f7f\u7528 Color.VectorConverter \u3001 Dp \u3001 VectorConverter \u7b49\u8bbf\u95ee\u3002 \u5f53\u4f60\u60f3\u6dfb\u52a0\u5bf9\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u52a8\u753b\u503c\u7684\u652f\u6301\u65f6\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4f60\u81ea\u5df1\u7684 TwoWayConverter \u5e76\u5c06\u5176\u63d0\u4f9b\u7ed9 API \u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 animateValueAsState \u6765\u4f7f\u4f60\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u4ea7\u751f\u52a8\u753b\uff0c\u50cf\u8fd9\u6837\u3002 data class MySize ( val width : Dp , val height : Dp ) @Composable fun MyAnimation ( targetSize : MySize ) { val animSize : MySize by animateValueAsState < MySize , AnimationVector2D > ( targetSize , TwoWayConverter ( convertToVector = { size : MySize -> // \u4ece\u6bcf\u4e2a Dp \u5b57\u6bb5\u4e2d\u63d0\u53d6\u4e00\u4e2a\u6d6e\u52a8\u503c\u3002 AnimationVector2D ( size . width . value , size . height . value ) }, convertFromVector = { vector : AnimationVector2D -> MySize ( vector . v1 . dp , vector . v2 . dp ) } ) ) } 5. \u624b\u52bf\u4e0e\u52a8\u753b\uff08\u9ad8\u7ea7\uff09 \u4e0e\u5355\u72ec\u5904\u7406\u52a8\u753b\u76f8\u6bd4\uff0c\u5f53\u6211\u4eec\u5904\u7406\u89e6\u6478\u4e8b\u4ef6\u548c\u52a8\u753b\u65f6\uff0c\u6709\u51e0\u4ef6\u4e8b\u6211\u4eec\u5fc5\u987b\u8003\u8651\u5230\u3002\u9996\u5148\uff0c\u5f53\u89e6\u6478\u4e8b\u4ef6\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e2d\u65ad\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff0c\u56e0\u4e3a\u7528\u6237\u4e92\u52a8\u5e94\u8be5\u6709\u6700\u9ad8\u7684\u4f18\u5148\u6743\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e00\u4e2a Animatable \u6765\u8868\u793a\u4e00\u4e2a\u5706\u5f62\u7ec4\u4ef6\u7684\u504f\u79fb\u4f4d\u7f6e\u3002\u89e6\u6478\u4e8b\u4ef6\u662f\u7528 pointerInput \u4fee\u6539\u5668\u6765\u5904\u7406\u7684\u3002\u5f53\u6211\u4eec\u68c0\u6d4b\u5230\u4e00\u4e2a\u65b0\u7684\u8f7b\u6572\u4e8b\u4ef6\u65f6\uff0c\u6211\u4eec\u8c03\u7528 animateTo \u6765\u5c06\u504f\u79fb\u503c\u52a8\u753b\u5316\u5230\u8f7b\u6572\u4f4d\u7f6e\u3002\u6572\u51fb\u4e8b\u4ef6\u4e5f\u53ef\u4ee5\u5728\u52a8\u753b\u4e2d\u53d1\u751f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c animateTo \u4e2d\u65ad\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff0c\u5e76\u5f00\u59cb\u52a8\u753b\u5230\u65b0\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u540c\u65f6\u4fdd\u6301\u4e2d\u65ad\u7684\u52a8\u753b\u7684\u901f\u5ea6\u3002 @Composable fun Gesture () { val offset = remember { Animatable ( Offset ( 0f , 0f ), Offset . VectorConverter ) } Box ( modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { coroutineScope { while ( true ) { // \u68c0\u6d4b\u4e00\u4e2a\u70b9\u51fb\u5934\u4e8b\u4ef6\u5e76\u83b7\u5f97\u5176\u4f4d\u7f6e\u3002 val position = awaitPointerEventScope { awaitFirstDown (). position } launch { // \u5e94\u7528\u5230\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002 offset . animateTo ( position ) } } } } ) { Circle ( modifier = Modifier . offset { offset . value . toIntOffset () }) } } private fun Offset . toIntOffset () = IntOffset ( x . roundToInt (), y . roundToInt ()) \u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u6a21\u5f0f\u662f\u6211\u4eec\u9700\u8981\u5c06\u52a8\u753b\u503c\u4e0e\u6765\u81ea\u89e6\u6478\u4e8b\u4ef6\u7684\u503c\u540c\u6b65\uff0c\u4f8b\u5982\u62d6\u52a8\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u770b\u5230 \"\u8f7b\u626b\u89e3\u6563\" \u4f5c\u4e3a\u4e00\u4e2a\u4fee\u6539\u5668\u6765\u5b9e\u73b0\uff08\u800c\u4e0d\u662f\u4f7f\u7528 SwipeToDismiss \u7684\u7ec4\u5408\uff09\u3002\u8be5\u5143\u7d20\u7684\u6c34\u5e73\u504f\u79fb\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a Animatable \u3002\u8fd9\u4e2a API \u6709\u4e00\u4e2a\u5728\u624b\u52bf\u52a8\u753b\u4e2d\u6709\u7528\u7684\u7279\u6027\u3002\u5b83\u7684\u503c\u53ef\u4ee5\u88ab\u89e6\u6478\u4e8b\u4ef6\u4ee5\u53ca\u52a8\u753b\u6240\u6539\u53d8\u3002\u5f53\u6211\u4eec\u6536\u5230\u4e00\u4e2a\u89e6\u6478\u4e8b\u4ef6\u65f6\uff0c\u6211\u4eec\u901a\u8fc7 stop \u65b9\u6cd5\u505c\u6b62 Animatable \uff0c\u8fd9\u6837\u4efb\u4f55\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\u5c31\u88ab\u62e6\u622a\u4e86\u3002 \u5728\u4e00\u4e2a\u62d6\u52a8\u4e8b\u4ef6\u4e2d\uff0c\u6211\u4eec\u7528 snapTo \u6765\u66f4\u65b0 Animatable \u7684\u503c\uff0c\u5373\u4ece\u89e6\u6478\u4e8b\u4ef6\u4e2d\u8ba1\u7b97\u51fa\u6765\u7684\u503c\u3002\u5bf9\u4e8e\u62d6\u52a8\uff0c compose \u63d0\u4f9b\u4e86 VelocityTracker \u6765\u8bb0\u5f55\u62d6\u52a8\u4e8b\u4ef6\u5e76\u8ba1\u7b97\u51fa\u901f\u5ea6\u3002\u901f\u5ea6\u53ef\u4ee5\u76f4\u63a5\u53cd\u9988\u7ed9 animateDecay \uff0c\u7528\u4e8e\u5236\u4f5c\u7ffb\u8f6c\u52a8\u753b\u3002\u5f53\u6211\u4eec\u60f3\u628a\u504f\u79fb\u503c\u6ed1\u56de\u5230\u539f\u59cb\u4f4d\u7f6e\u65f6\uff0c\u6211\u4eec\u7528 animateTo \u65b9\u6cd5\u6307\u5b9a\u76ee\u6807\u504f\u79fb\u503c\u4e3a 0f \u3002 fun Modifier . swipeToDismiss ( onDismissed : () -> Unit ): Modifier = composed { val offsetX = remember { Animatable ( 0f ) } pointerInput ( Unit ) { val decay = splineBasedDecay < Float > ( this ) coroutineScope { while ( true ) { // \u68c0\u6d4b\u4e00\u4e2a\u89e6\u6478\u4e8b\u4ef6\u3002 val pointerId = awaitPointerEventScope { awaitFirstDown (). id } val velocityTracker = VelocityTracker () // \u62e6\u622a\u4e00\u4e2a\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff08\u5982\u679c\u6709\u7684\u8bdd offsetX . stop () awaitPointerEventScope { horizontalDrag ( pointerId ) { change -> // \u7528\u89e6\u6478\u4e8b\u4ef6\u66f4\u65b0\u52a8\u753b\u503c\u3002 launch { offsetX . snapTo ( offsetX . value + change . positionChange (). x ) } velocityTracker . addPosition ( change . uptimeMillis , change . position ) } } val velocity = velocityTracker . calculateVelocity (). x val targetOffsetX = decay . calculateTargetValue ( offsetX . value , velocity ) // \u5f53\u5b83\u5230\u8fbe\u8fb9\u754c\u65f6\uff0c\u52a8\u753b\u505c\u6b62\u3002 offsetX . updateBounds ( lowerBound = - size . width . toFloat (), upperBound = size . width . toFloat () ) launch { if ( targetOffsetX . absoluteValue <= size . width ) { // \u901f\u5ea6\u4e0d\u591f\uff1b\u5411\u540e\u6ed1\u52a8\u3002 offsetX . animateTo ( targetValue = 0f , initialVelocity = velocity ) } else { // \u8be5\u5143\u7d20\u88ab\u5237\u6389\u4e86\u3002 offsetX . animateDecay ( velocity , decay ) onDismissed () } } } } } . offset { IntOffset ( offsetX . value . roundToInt (), 0 ) } } 6. \u6d4b\u8bd5 Compose \u63d0\u4f9b\u4e86 ComposeTestRule \uff0c\u5141\u8bb8\u4f60\u4ee5\u786e\u5b9a\u7684\u65b9\u5f0f\u4e3a\u52a8\u753b\u7f16\u5199\u6d4b\u8bd5\uff0c\u5e76\u5bf9\u6d4b\u8bd5\u65f6\u949f\u8fdb\u884c\u5b8c\u5168\u63a7\u5236\u3002\u8fd9\u4f7f\u4f60\u53ef\u4ee5\u9a8c\u8bc1\u4e2d\u95f4\u7684\u52a8\u753b\u503c\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u6d4b\u8bd5\u53ef\u4ee5\u6bd4\u52a8\u753b\u7684\u5b9e\u9645\u6301\u7eed\u65f6\u95f4\u66f4\u5feb\u8fd0\u884c\u3002 ComposeTestRule \u5c06\u5176\u6d4b\u8bd5\u65f6\u949f\u516c\u5f00\u4e3a mainClock \u3002\u4f60\u53ef\u4ee5\u5c06 autoAdvance \u5c5e\u6027\u8bbe\u7f6e\u4e3a false \u6765\u63a7\u5236\u4f60\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684\u65f6\u949f\u3002\u5728\u542f\u52a8\u4f60\u8981\u6d4b\u8bd5\u7684\u52a8\u753b\u540e\uff0c\u65f6\u949f\u53ef\u4ee5\u7528 advanceTimeBy \u5411\u524d\u79fb\u52a8\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c advanceTimeBy \u5e76\u4e0d\u5b8c\u5168\u6309\u7167\u6307\u5b9a\u7684\u6301\u7eed\u65f6\u95f4\u6765\u79fb\u52a8\u65f6\u949f\u3002\u76f8\u53cd\uff0c\u5b83\u5c06\u5176\u56db\u820d\u4e94\u5165\u5230\u6700\u8fd1\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5373\u5e27\u6301\u7eed\u65f6\u95f4\u7684\u4e58\u6570\u3002 @get : Rule val rule = createComposeRule () @Test fun testAnimationWithClock () { // \u6682\u505c\u52a8\u753b rule . mainClock . autoAdvance = false var enabled by mutableStateOf ( false ) rule . setContent { val color by animateColorAsState ( targetValue = if ( enabled ) Color . Red else Color . Green , animationSpec = tween ( durationMillis = 250 ) ) Box ( Modifier . size ( 64. dp ). background ( color )) } // \u542f\u52a8\u52a8\u753b enabled = true // \u8ba9\u52a8\u753b\u7ee7\u7eed\u8fdb\u884c\u3002 rule . mainClock . advanceTimeBy ( 50L ) // \u5c06\u7ed3\u679c\u4e0e\u663e\u793a\u9884\u671f\u7ed3\u679c\u7684\u56fe\u50cf\u8fdb\u884c\u6bd4\u8f83\u3002 rule . onRoot (). captureToImage (). assertAgainstGolden () }","title":"\u6982\u8ff0"},{"location":"design/animation/overview/#1","text":"\u52a8\u753b\u5728\u73b0\u4ee3\u79fb\u52a8\u5e94\u7528\u4e2d\u81f3\u5173\u91cd\u8981\uff0c\u5176\u76ee\u7684\u662f\u5b9e\u73b0\u81ea\u7136\u6d41\u7545\u3001\u6613\u4e8e\u7406\u89e3\u7684\u7528\u6237\u4f53\u9a8c\u3002\u8bb8\u591a Jetpack Compose \u52a8\u753b API \u53ef\u4ee5\u63d0\u4f9b\u53ef\u7ec4\u5408\u51fd\u6570\uff0c\u5c31\u50cf\u5e03\u5c40\u548c\u5176\u4ed6\u754c\u9762\u5143\u7d20\u4e00\u6837\uff1b\u5b83\u4eec\u7531\u4f7f\u7528 Kotlin \u534f\u7a0b\u6302\u8d77\u51fd\u6570\u6784\u5efa\u7684\u8f83\u4f4e\u7ea7\u522b API \u63d0\u4f9b\u652f\u6301\u3002\u672c\u6307\u5357\u5c06\u9996\u5148\u4ecb\u7ecd\u53ef\u7528\u4e8e\u8bb8\u591a\u5b9e\u9645\u573a\u666f\u7684\u9ad8\u7ea7\u522b API\uff0c\u63a5\u7740\u4ecb\u7ecd\u53ef\u4e3a\u60a8\u63d0\u4f9b\u8fdb\u4e00\u6b65\u63a7\u5236\u548c\u81ea\u5b9a\u4e49\u529f\u80fd\u7684\u4f4e\u7ea7\u522b API\u3002 \u4e0b\u9762\u7684\u56fe\u8868\u53ef\u4ee5\u5e2e\u52a9\u60a8\u786e\u5b9a\u8981\u4f7f\u7528\u54ea\u79cd API \u6765\u5b9e\u73b0\u60a8\u7684\u52a8\u753b\u6548\u679c\u3002 \u5982\u679c\u60a8\u8981\u4e3a\u5e03\u5c40\u4e2d\u7684\u5185\u5bb9\u53d8\u5316\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u5982\u679c\u60a8\u8981\u4e3a\u8fdb\u5165/\u9000\u51fa\u8fc7\u6e21\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u4f7f\u7528 AnimationVisibility \u3002 \u5982\u679c\u60a8\u8981\u4e3a\u5185\u5bb9\u5927\u5c0f\u53d8\u5316\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u4f7f\u7528 Modifier.animateContentSize \u3002 \u5426\u5219\u4f7f\u7528 Crossfade \u3002 \u5982\u679c\u52a8\u753b\u6548\u679c\u57fa\u4e8e\u72b6\u6001\uff1a \u5982\u679c\u5728\u7ec4\u5408\u671f\u95f4\u5448\u73b0\u52a8\u753b\u6548\u679c\uff1a \u5982\u679c\u52a8\u753b\u6548\u679c\u65e0\u9650\u5faa\u73af\uff1a \u4f7f\u7528 rememberInfiniteTransition \u3002 \u5982\u679c\u60a8\u8981\u540c\u65f6\u4e3a\u591a\u4e2a\u503c\u6dfb\u52a0\u52a8\u753b\u6548\u679c\uff1a \u4f7f\u7528 updateTransition \u3002 \u5426\u5219\u4f7f\u7528 animate*AsState \u3002 \u5982\u679c\u60a8\u8981\u5bf9\u52a8\u753b\u64ad\u653e\u65f6\u95f4\u8fdb\u884c\u7cbe\u7ec6\u63a7\u5236\uff1a \u4f7f\u7528 Animation \u3002 \u5982\u679c\u52a8\u753b\u662f\u552f\u4e00\u53ef\u4fe1\u6765\u6e90\uff1a \u4f7f\u7528 Animatable \u3002 \u5426\u5219\uff0c\u8bf7\u4f7f\u7528 AnimationState \u6216 animate \u3002 API \u529f\u80fd AnimationVisibility \u8fdb\u5165/\u9000\u51fa\u7684\u8fc7\u6e21\u52a8\u753b Modifier.contentSize \u5185\u5bb9\u5927\u5c0f\u7684\u53d8\u5316\u8fc7\u6e21\u52a8\u753b Crossfade rememberInfiniteTransition updateTransition \u5b9e\u73b0\u8fc7\u6e21\u52a8\u753b\u7684\u5173\u952e API animate*AsState \u6307\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u53d8\u5316\u52a8\u753b","title":"1. \u6982\u8ff0"},{"location":"design/animation/overview/#2-api","text":"Compose \u4e3a\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u51e0\u79cd\u5e38\u89c1\u52a8\u753b\u6a21\u5f0f\u63d0\u4f9b\u4e86\u9ad8\u7ea7\u52a8\u753b API \u3002 \u8fd9\u4e9b API \u662f\u4e3a\u9002\u5e94 Material Design Motion \u800c\u91cf\u8eab\u5b9a\u5236\u7684\u3002","title":"2. \u9ad8\u7ea7\u52a8\u753b API"},{"location":"design/animation/overview/#animatedvisibiliy","text":"\u6ce8\u610f \u5b9e\u9a8c\u6027API\u5c06\u6765\u53ef\u80fd\u4f1a\u66f4\u6539\uff0c\u6216\u8005\u53ef\u80fd\u4f1a\u5b8c\u5168\u5220\u9664\u3002 // \u5982\u679c\u4f60\u5728\u8fd9\u91cc\u6709 getValue \u7684\u62a5\u9519\uff0c\u6216\u8005\u65e0\u6cd5\u81ea\u52a8\u5bfc\u5165\uff0c\u8fd9\u662f\u4e00\u4e9b\u65e7\u7248 Android Studio \u8fd8\u6ca1\u6709\u5b8c\u5168\u9002\u914d Compose \u7684 bug\u3002 // \u4f60\u9700\u8981\u624b\u52a8\u5bfc\u5165\uff0c\u6216\u8005\u66f4\u65b0\u5230\u6700\u65b0\u7684 AS // import androidx.compose.runtime.getValue var state by remember { mutableStateOf ( true ) } Column ( modifier = Modifier . fillMaxSize (), horizontalAlignment = Alignment . CenterHorizontally , verticalArrangement = Arrangement . Center ){ AnimatedVisibility ( visible = state ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } Spacer ( Modifier . padding ( vertical = 50. dp )) Button ( onClick = { state = ! state }) { Text ( if ( state ) \"\u9690\u85cf\" else \"\u663e\u793a\" ) } } \u9ed8\u8ba4\u60c5\u51b5\u4e0b \u5185\u5bb9\u901a\u8fc7 fadeIn() \u548c expandVertically() \u51fa\u73b0 \u901a\u8fc7 fadeOut() \u548c shrinkVertically() \u6d88\u5931\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a EnterTransition \u548c ExitTransition \u6765\u81ea\u5b9a\u4e49\u8fc7\u6e21\u6548\u679c\u3002 var state by remember { mutableStateOf ( true ) } Column ( modifier = Modifier . fillMaxSize (), horizontalAlignment = Alignment . CenterHorizontally , verticalArrangement = Arrangement . Center ){ AnimatedVisibility ( visible = state , enter = slideInVertically ( initialOffsetY = { - 40 } ) + expandVertically ( expandFrom = Alignment . Top ) + fadeIn ( initialAlpha = 0.3f ), exit = shrinkHorizontally () + fadeOut () ) { Text ( text = \"\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u6b63\u6587\" , fontWeight = FontWeight . W900 , style = MaterialTheme . typography . h5 ) } Spacer ( Modifier . padding ( vertical = 50. dp )) Button ( onClick = { state = ! state }) { Text ( if ( state ) \"\u9690\u85cf\" else \"\u663e\u793a\" ) } } \u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u4f60\u53ef\u4ee5\u5c06\u591a\u4e2a EnterTransition \u6216 ExitTransition \u5bf9\u8c61\u4e0e\u4e00\u4e2a + \u8fd0\u7b97\u7b26\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u63a5\u53d7\u53ef\u9009\u53c2\u6570\u4ee5\u81ea\u5b9a\u4e49\u5176\u884c\u4e3a\u3002 EnterTransition \u7684\u4e00\u4e9b\u65b9\u6cd5 fadeIn slideIn expandIn expandHorizontally expandVertically slideInHorizontally slideInVertically ExitTransition \u7684\u4e00\u4e9b\u65b9\u6cd5 fadeOut slideOut shrinkOut shrinkHorizontally shrinkVertically slideOutHorizontally slideOutVertically","title":"AnimatedVisibiliy (\u5b9e\u9a8c\u6027)"},{"location":"design/animation/overview/#animatecontentsize","text":"animateContentSize \u53ef\u4ee5\u5bf9\u5c3a\u5bf8\u66f4\u6539\u8fdb\u884c\u52a8\u753b\u5904\u7406 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a var text by remember { mutableStateOf ( \"animateContentSize \u52a8\u753b\" ) } Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ){ Text ( text , modifier = Modifier . clickable { text += text } . animateContentSize () ) } \u518d\u6765\u770b\u770b\u6ca1\u6709\u52a0 animateContentSize() \u7684\u6548\u679c\u5427","title":"animateContentSize"},{"location":"design/animation/overview/#crossfade","text":"Crossfade \u5728\u4e24\u4e2a\u5e03\u5c40\u4e4b\u95f4\u7528\u4ea4\u53c9\u6de1\u5165\u6de1\u51fa\u7684\u52a8\u753b\u3002\u901a\u8fc7\u5207\u6362\u4f20\u9012\u7ed9\u5f53\u524d\u53c2\u6570\u7684\u503c\uff0c\u5185\u5bb9\u4ee5\u4ea4\u53c9\u6e10\u53d8\u52a8\u753b\u7684\u65b9\u5f0f\u5207\u6362 @Composable fun < T > Crossfade ( targetState : T , modifier : Modifier = Modifier , animationSpec : FiniteAnimationSpec < Float > = tween (), content : @Composable ( T ) -> Unit ) \u6765\u770b\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528 var flag by remember { mutableStateOf ( false ) } Column { Crossfade ( targetState = flag , animationSpec = tween ( 1000 ) ) { when ( it ){ false -> Screen1 () true -> Screen2 () } } Button ( onClick = { flag = ! flag } ) { Text ( \"\u5207\u6362\" ) } } @Composable fun Screen1 () { Box ( modifier = Modifier . background ( Color . Red ) . size ( 200. dp ), contentAlignment = Alignment . Center ) { } } @Composable fun Screen2 () { Box ( modifier = Modifier . background ( Color . Blue ) . size ( 200. dp ), contentAlignment = Alignment . Center ) { } }","title":"Crossfade"},{"location":"design/animation/overview/#3-api","text":"\u4e0a\u4e00\u8282\u63d0\u5230\u7684\u6240\u6709\u9ad8\u7ea7\u52a8\u753b API \u90fd\u662f\u5efa\u7acb\u5728\u4f4e\u7ea7\u52a8\u753b API \u7684\u57fa\u7840\u4e4b\u4e0a\u7684\u3002 animate*AsState \u51fd\u6570\u662f\u6700\u7b80\u5355\u7684 API \uff0c\u5b83\u5c06\u4e00\u4e2a\u5373\u65f6\u7684\u503c\u53d8\u5316\u6e32\u67d3\u6210\u4e00\u4e2a\u52a8\u753b\u503c\u3002\u5b83\u7531 Animatable \u652f\u6301\uff0c Animatable \u662f\u4e00\u4e2a\u57fa\u4e8e\u534f\u7a0b\u7684 API \uff0c\u7528\u4e8e\u7ed9\u5355\u4e2a\u503c\u5236\u4f5c\u52a8\u753b\u3002 updateTransition \u521b\u5efa\u4e86\u4e00\u4e2a\u8fc7\u6e21\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7ba1\u7406\u591a\u4e2a\u52a8\u753b\u503c\uff0c\u5e76\u6839\u636e\u72b6\u6001\u53d8\u5316\u8fd0\u884c\u5b83\u4eec\u3002 rememberInfiniteTransition \u7c7b\u4f3c\uff0c\u4f46\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u7684\u8fc7\u6e21\uff0c\u53ef\u4ee5\u7ba1\u7406\u591a\u4e2a\u52a8\u753b\uff0c\u65e0\u9650\u5730\u6301\u7eed\u8fd0\u884c\u3002\u9664\u4e86 Animatable \u4e4b\u5916\uff0c\u6240\u6709\u8fd9\u4e9b API \u90fd\u662f\u53ef\u7ec4\u5408\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u5728\u5408\u6210\u4e4b\u5916\u521b\u5efa\u8fd9\u4e9b\u52a8\u753b\u3002 \u6240\u6709\u8fd9\u4e9b API \u90fd\u662f\u57fa\u4e8e\u66f4\u57fa\u672c\u7684 Animation API \u3002\u5c3d\u7ba1\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u76f4\u63a5\u4e0e Animation \u4ea4\u4e92\uff0c\u4f46 Animation \u7684\u4e00\u4e9b\u5b9a\u5236\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7\u66f4\u9ad8\u7ea7\u522b\u7684 API \u83b7\u5f97\u3002\u5173\u4e8e AnimationVector \u548c AnimationSpec \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u81ea\u5b9a\u4e49\u52a8\u753b \u3002","title":"3. \u4f4e\u7ea7\u52a8\u753b API"},{"location":"design/animation/overview/#animateasstate","text":"animate*AsState \u51fd\u6570\u662f Compose \u4e2d\u6700\u7b80\u5355\u7684\u52a8\u753b API \uff0c\u7528\u4e8e\u4e3a\u5355\u4e2a\u503c\u5236\u4f5c\u52a8\u753b\u3002\u4f60\u53ea\u9700\u63d0\u4f9b\u7ed3\u675f\u503c\uff08\u6216\u76ee\u6807\u503c\uff09\uff0c API \u5c31\u4f1a\u4ece\u5f53\u524d\u503c\u5230\u6307\u5b9a\u503c\u5f00\u59cb\u52a8\u753b\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a API \u5236\u4f5c alpha \u52a8\u753b\u7684\u4f8b\u5b50\u3002\u901a\u8fc7\u7b80\u5355\u5730\u5c06\u76ee\u6807\u503c\u5305\u88f9\u5728 animateFloatAsState \u4e2d\uff0c alpha \u503c\u73b0\u5728\u662f\u4e00\u4e2a\u4ecb\u4e8e\u6240\u63d0\u4f9b\u7684\u503c\uff08\u672c\u4f8b\u4e2d\u662f 1f \u6216 0.5f \uff09\u4e4b\u95f4\u7684\u52a8\u753b\u503c\u3002 val alpha : Float by animateFloatAsState ( if ( enabled ) 1f else 0.5f ) Box ( Modifier . fillMaxSize () . graphicsLayer ( alpha = alpha ) . background ( Color . Red ) ) \u5728\u8fd9\u91cc\u67e5\u770b\u5173\u4e8e animate*AsState \u7684\u66f4\u591a\u4ecb\u7ecd","title":"animate*AsState"},{"location":"design/animation/overview/#animatable","text":"Animatable \u4f1a\u5728\u5185\u90e8\u50a8\u5b58\u4e00\u4e2a\u503c\uff0c\u5f53\u503c\u901a\u8fc7 animateTo \u88ab\u6539\u53d8\u65f6\uff0c\u5b83\u53ef\u4ee5\u4ea7\u751f\u52a8\u753b\u3002\u8fd9\u5c31\u662f\u652f\u6301 animate*AsState \u5b9e\u73b0\u7684 API \u3002\u5b83\u786e\u4fdd\u4e86\u4e00\u81f4\u7684\u5ef6\u7eed\u6027\u548c\u4e92\u65a5\u6027\uff0c\u8fd9\u610f\u5473\u7740\u503c\u7684\u53d8\u5316\u603b\u662f\u8fde\u7eed\u7684\uff0c\u4efb\u4f55\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\u90fd\u4f1a\u88ab\u53d6\u6d88\u3002 Animatable \u7684\u8bb8\u591a\u529f\u80fd\uff0c\u5305\u62ec animateTo \uff0c\u90fd\u662f\u4f5c\u4e3a suspend \u51fd\u6570\u63d0\u4f9b\u7684\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u9700\u8981\u88ab\u5305\u88f9\u5728\u4e00\u4e2a\u9002\u5f53\u7684\u534f\u7a0b\u4f5c\u7528\u57df\u5185\u5185\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 LaunchedEffect \u8fd9\u4e2a Composable \u6765\u521b\u5efa\u4e00\u4e2a\u53ea\u9488\u5bf9\u6307\u5b9a\u952e\u503c\u7684\u6301\u7eed\u65f6\u95f4\u7684\u4f5c\u7528\u57df\u3002 var flag by remember { mutableStateOf ( false ) } val color = remember { Animatable ( Color . Gray ) } Column { Box ( Modifier . size ( 300. dp ). background ( color . value )) Button ( onClick = { flag = ! flag } ) { Text ( \"\u5207\u6362\" ) } } LaunchedEffect ( flag ) { color . animateTo ( targetValue = if ( flag ){ Color . Green } else { Color . Red }, animationSpec = tween ( 1000 ) ) } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u5e76\u8bb0\u4f4f\u4e86\u4e00\u4e2a Animatable \u7684\u5b9e\u4f8b\uff0c\u5176\u521d\u59cb\u503c\u4e3a Color.Gray \u3002\u6839\u636e flag \u7684\u503c\uff0c\u989c\u8272\u4f1a\u52a8\u753b\u5730\u53d8\u6210 Color.Green \u6216 Color.Red \u3002\u4efb\u4f55\u5bf9 flag \u7684\u540e\u7eed\u6539\u53d8\u90fd\u4f1a\u542f\u52a8\u52a8\u753b\u5230\u53e6\u4e00\u79cd\u989c\u8272\u3002\u5982\u679c\u5728\u6539\u53d8\u503c\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u52a8\u753b\u4f1a\u88ab\u53d6\u6d88\uff0c\u65b0\u7684\u52a8\u753b\u4f1a\u4ece\u5f53\u524d\u7684\u5feb\u7167\u503c\u548c\u5f53\u524d\u7684\u901f\u5ea6\u5f00\u59cb\u3002 \u8fd9\u662f\u652f\u6301\u4e0a\u4e00\u8282\u4e2d\u63d0\u5230\u7684 animate*AsState API \u7684\u52a8\u753b\u5b9e\u73b0\u3002\u4e0e animate*AsState \u76f8\u6bd4\uff0c\u76f4\u63a5\u4f7f\u7528 Animatable \u5728\u51e0\u4e2a\u65b9\u9762\u7ed9\u4e86\u6211\u4eec\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236\u3002\u9996\u5148\uff0c Animatable \u53ef\u4ee5\u6709\u4e00\u4e2a\u4e0d\u540c\u4e8e\u5176\u7b2c\u4e00\u4e2a\u76ee\u6807\u503c\u7684\u521d\u59cb\u503c\u3002\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4f8b\u5b50\u4e00\u5f00\u59cb\u663e\u793a\u7684\u662f\u4e00\u4e2a\u7070\u8272\u7684\u76d2\u5b50\uff0c\u5f53\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u7acb\u5373\u5f00\u59cb\u52a8\u753b\u5730\u53d8\u6210\u4e3a\u7eff\u8272\u6216\u7ea2\u8272\u3002\u7b2c\u4e8c\uff0c Animatable \u5bf9\u5185\u5bb9\u503c\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u64cd\u4f5c\uff0c\u5373 snapTo \u548c animateDecay \u3002 snapTo \u5c06\u5f53\u524d\u503c\u7acb\u5373\u8bbe\u7f6e\u4e3a\u76ee\u6807\u503c\u3002\u5f53\u52a8\u753b\u672c\u8eab\u4e0d\u662f\u552f\u4e00\u7684\u6570\u636e\u6e90\uff0c\u5e76\u4e14\u5fc5\u987b\u4e0e\u5176\u4ed6\u72b6\u6001\u540c\u6b65\u65f6\uff0c\u4f8b\u5982\u89e6\u6478\u4e8b\u4ef6\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 animateDecay \u542f\u52a8\u4e00\u4e2a\u4ece\u7ed9\u5b9a\u901f\u5ea6\u5f00\u59cb\u653e\u7f13\u7684\u52a8\u753b\u3002\u8fd9\u5bf9\u4e8e\u5b9e\u73b0\u7529\u52a8\u884c\u4e3a\u5f88\u6709\u7528\u3002\u66f4\u591a\u4fe1\u606f\u89c1\u624b\u52bf\u548c\u52a8\u753b\u3002 Animatable \u652f\u6301 Float \u548c Color \uff0c\u4f46\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a TwoWayConverter \u6765\u4f7f\u7528\u3002\u53c2\u89c1 AnimationVector \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a AnimationSpec \u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\u3002\u53c2\u89c1 AnimationSpec \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002","title":"Animatable"},{"location":"design/animation/overview/#updatetransition","text":"Transition \u7ba1\u7406\u4e00\u4e2a\u6216\u591a\u4e2a\u52a8\u753b\u4f5c\u4e3a\u5b83\u7684\u5b50\u9879\uff0c\u5e76\u5728\u591a\u4e2a\u72b6\u6001\u4e4b\u95f4\u540c\u65f6\u8fd0\u884c\u5b83\u4eec\u3002 \u8fd9\u4e9b\u72b6\u6001\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u679a\u4e3e\u7c7b\u578b\u6765\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\uff0c\u5c31\u50cf\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e00\u6837\u3002 private enum class BoxState { Collapsed , Expanded } updateTransition \u53ef\u4ee5\u521b\u5efa\u5e76\u8bb0\u4f4f\u4e00\u4e2a Transition \u7684\u5b9e\u4f8b\u5e76\u66f4\u65b0\u5176\u72b6\u6001 var currentState by remember { mutableStateOf ( BoxState . Collapsed ) } val transition = updateTransition ( currentState ) \u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528 animate* \u6269\u5c55\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u5728\u8fd9\u4e2a\u8fc7\u6e21\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u5b50\u52a8\u753b\u3002\u6307\u5b9a\u6bcf\u4e2a\u72b6\u6001\u7684\u76ee\u6807\u503c\u3002\u8fd9\u4e9b animate* \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u52a8\u753b\u503c\uff0c\u5728\u52a8\u753b\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u7528 updateTransition \u66f4\u65b0\u8fc7\u6e21\u72b6\u6001\u65f6\uff0c\u6bcf\u4e00\u5e27\u90fd\u4f1a\u66f4\u65b0\u3002 var currentState by remember { mutableStateOf ( BoxState . Collapsed ) } val transition = updateTransition ( currentState ) val rect by transition . animateDp { state -> when ( state ) { BoxState . Collapsed -> 0. dp BoxState . Expanded -> 150. dp } } Box ( modifier = Modifier . size ( rect ) . background ( Color ( 0 xFF0079D3 )), ) { } \u4f60\u53ef\u4ee5\u9009\u62e9\u4f20\u9012\u4e00\u4e2a transitionSpec \u53c2\u6570\uff0c\u4e3a\u6bcf\u4e2a\u8fc7\u6e21\u72b6\u6001\u53d8\u5316\u7684\u7ec4\u5408\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684 AnimationSpec \u3002\u53c2\u89c1 AnimationSpec \u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 val rect by transition . animateDp ( transitionSpec = { when { BoxState . Expanded isTransitioningTo BoxState . Collapsed -> spring ( stiffness = 50f ) else -> tween ( durationMillis = 500 ) // \u52a8\u753b\u65f6\u95f4 } } ){ state -> when ( state ) { BoxState . Collapsed -> 0. dp BoxState . Expanded -> 150. dp } } \u4e00\u65e6\u4e00\u4e2a transition \u5230\u8fbe\u76ee\u6807\u72b6\u6001\uff0c Transition.currentState \u5c06\u4e0e Transition.targetState \u76f8\u540c\u3002\u8fd9\u53ef\u4ee5\u4f5c\u4e3a\u8fc7\u6e21\u662f\u5426\u5b8c\u6210\u7684\u4e00\u4e2a\u4fe1\u53f7\u3002 \u6211\u4eec\u6709\u65f6\u5e0c\u671b\u6709\u4e00\u4e2a\u4e0e\u7b2c\u4e00\u4e2a\u76ee\u6807\u72b6\u6001\u4e0d\u540c\u7684\u521d\u59cb\u72b6\u6001\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 updateTransition \u4e0e MutableTransitionState \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u5728\u4ee3\u7801\u8fdb\u5165\u5408\u6210\u65f6\u7acb\u5373\u5f00\u59cb\u52a8\u753b\u3002 var currentState = remember { MutableTransitionState ( BoxState . Collapsed ) } // \u5728\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u5c06 currentState \u7684\u503c\u53d8\u4e3a BoxState.Expanded\uff0c\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u5c06\u4f1a\u76f4\u63a5\u8fd0\u884c\u52a8\u753b currentState . targetState = BoxState . Expanded val transition = updateTransition ( currentState ) \u5c01\u88c5\u4e00\u4e2a Transition \u5e76\u8ba9\u5b83\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528 \u5bf9\u4e8e\u7b80\u5355\u7684\u7528\u4f8b\uff0c\u5728\u4e0e\u4f60\u7684\u7528\u6237\u754c\u9762\u76f8\u540c\u7684 composable \u4e2d\u5b9a\u4e49\u8fc7\u6e21\u52a8\u753b\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u9009\u62e9\u3002\u7136\u800c\uff0c\u5f53\u4f60\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u6709\u8bb8\u591a\u52a8\u753b\u503c\u7684\u590d\u6742\u7ec4\u4ef6\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u628a\u52a8\u753b\u5b9e\u73b0\u4e0e\u53ef\u7ec4\u5408\u7684\u7528\u6237\u754c\u9762\u5206\u5f00\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u6301\u6709\u6240\u6709\u52a8\u753b\u503c\u7684\u7c7b\u548c\u4e00\u4e2a\u8fd4\u56de\u8be5\u7c7b\u5b9e\u4f8b\u7684 \"\u66f4\u65b0 \"\u51fd\u6570\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fc7\u6e21\u7684\u5b9e\u73b0\u53ef\u4ee5\u88ab\u63d0\u53d6\u5230\u65b0\u7684\u72ec\u7acb\u51fd\u6570\u4e2d\u3002\u5f53\u9700\u8981\u96c6\u4e2d\u52a8\u753b\u903b\u8f91\u6216\u4f7f\u590d\u6742\u7684\u52a8\u753b\u53ef\u91cd\u590d\u4f7f\u7528\u65f6\uff0c\u8fd9\u79cd\u6a21\u5f0f\u5f88\u6709\u7528\u3002 enum class BoxState { Collapsed , Expanded } @Composable fun AnimatingBox ( boxState : BoxState ) { val transitionData = updateTransitionData ( boxState ) // UI \u6811 Box ( modifier = Modifier . background ( transitionData . color ) . size ( transitionData . size ) ) } // \u4fdd\u5b58\u52a8\u753b\u6570\u503c private class TransitionData ( color : State < Color > , size : State < Dp > ) { val color by color val size by size } // \u521b\u5efa\u4e00\u4e2a Transition \u5e76\u8fd4\u56de\u5176\u52a8\u753b\u503c\u3002 @Composable private fun updateTransitionData ( boxState : BoxState ): TransitionData { val transition = updateTransition ( boxState ) val color = transition . animateColor { state -> when ( state ) { BoxState . Collapsed -> Color . Gray BoxState . Expanded -> Color . Red } } val size = transition . animateDp { state -> when ( state ) { BoxState . Collapsed -> 64. dp BoxState . Expanded -> 128. dp } } return remember ( transition ) { TransitionData ( color , size ) } }","title":"updateTransition"},{"location":"design/animation/overview/#rememberinfinitetransition","text":"InfiniteTransition \u50cf Transition \u4e00\u6837\u6301\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u52a8\u753b\uff0c\u4f46\u8fd9\u4e9b\u52a8\u753b\u4e00\u8fdb\u5165\u6784\u56fe\u5c31\u5f00\u59cb\u8fd0\u884c\uff0c\u9664\u975e\u5b83\u4eec\u88ab\u79fb\u9664\uff0c\u5426\u5219\u4e0d\u4f1a\u505c\u6b62\u3002\u4f60\u53ef\u4ee5\u7528 rememberInfiniteTransition \u521b\u5efa\u4e00\u4e2a InfiniteTransition \u7684\u5b9e\u4f8b\u3002\u5b50\u52a8\u753b\u53ef\u4ee5\u7528 animateColor \u3001 animatedFloat \u6216 animatedValue \u6dfb\u52a0\u3002\u4f60\u8fd8\u9700\u8981\u6307\u5b9a\u4e00\u4e2a infiniteRepeatable \u6765\u6307\u5b9a\u52a8\u753b\u5f62\u5f0f\u3002 val infiniteTransition = rememberInfiniteTransition () val color by infiniteTransition . animateColor ( initialValue = Color . Red , // \u521d\u59cb\u503c targetValue = Color . Green , // \u6700\u7ec8\u503c animationSpec = infiniteRepeatable ( animation = tween ( 1000 , easing = LinearEasing ), // \u4e00\u4e2a\u52a8\u753b\u503c\u7684\u8f6c\u6362\u6301\u7eed 1 \u79d2\uff0c\u7f13\u548c\u65b9\u5f0f\u4e3a LinearEasing repeatMode = RepeatMode . Reverse // \u6307\u5b9a\u52a8\u753b\u91cd\u590d\u8fd0\u884c\u7684\u65b9\u5f0f\uff0c // Reverse \u4e3a init -> target, target -> init, init -> target // Repeat \u4e3a init -> target, init -> target, init -> target ) ) Box ( Modifier . fillMaxSize (). background ( color ))","title":"rememberInfiniteTransition"},{"location":"design/animation/overview/#targetbasedanimation","text":"TargetBasedAnimation \u662f\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u6700\u4f4e\u7ea7\u522b\u7684\u52a8\u753b API \u3002\u5176\u4ed6 API \u6db5\u76d6\u4e86\u5927\u591a\u6570\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u4f46\u76f4\u63a5\u4f7f\u7528 TargetBasedAnimation \u53ef\u4ee5\u8ba9\u4f60\u81ea\u5df1\u63a7\u5236\u52a8\u753b\u7684\u64ad\u653e\u65f6\u95f4\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c TargetAnimation \u7684\u64ad\u653e\u65f6\u95f4\u662f\u6839\u636e withFrameMillis \u63d0\u4f9b\u7684\u5e27\u65f6\u95f4\u624b\u52a8\u63a7\u5236\u7684\u3002 val anim = remember { TargetBasedAnimation ( animationSpec = tween ( 200 ), typeConverter = Float . VectorConverter , initialValue = 200f , targetValue = 1000f ) } var playTime by remember { mutableStateOf ( 0L ) } LaunchedEffect ( anim ) { val startTime = withFrameNanos { it } do { playTime = withFrameNanos { it } - startTime val animationValue = anim . getValueFromNanos ( playTime ) } while ( someCustomCondition ()) }","title":"TargetBasedAnimation"},{"location":"design/animation/overview/#4","text":"\u8bb8\u591a\u52a8\u753b API \u901a\u5e38\u63a5\u53d7\u53c2\u6570\u6765\u5b9a\u5236\u5b83\u7684\u884c\u4e3a\u3002","title":"4. \u81ea\u5b9a\u4e49\u52a8\u753b"},{"location":"design/animation/overview/#animationspec","text":"\u5927\u591a\u6570\u52a8\u753b API \u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7\u4e00\u4e2a\u53ef\u9009\u7684 AnimationSpec \u53c2\u6570\u6765\u5b9a\u5236\u52a8\u753b\u89c4\u683c\u3002 val alpha : Float by animateFloatAsState ( targetValue = if ( enabled ) 1f else 0.5f , // \u914d\u7f6e\u52a8\u753b\u7684\u6301\u7eed\u65f6\u95f4\u548c\u7f13\u548c\u5ea6 animationSpec = tween ( durationMillis = 300 , easing = FastOutSlowInEasing ) ) \u6709\u4e0d\u540c\u79cd\u7c7b\u7684 AnimationSpec \u7528\u4e8e\u521b\u5efa\u4e0d\u540c\u7c7b\u578b\u7684\u52a8\u753b\u3002 spring spring \u5728\u8d77\u59cb\u503c\u548c\u7ed3\u675f\u503c\u4e4b\u95f4\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u7269\u7406\u5b66\u7684\u52a8\u753b\u3002\u5b83\u9700\u8981 2 \u4e2a\u53c2\u6570\uff1a\u963b\u5c3c\u7387\u548c\u521a\u5ea6\u3002 dampingRatio \u5b9a\u4e49\u4e86\u5f39\u7c27\u7684\u53cd\u5f39\u7a0b\u5ea6\u3002\u9ed8\u8ba4\u503c\u662f Spring.DampingRatioNoBouncy \u3002 stiffness \u5b9a\u4e49\u4e86\u5f39\u7c27\u5411\u6700\u7ec8\u503c\u79fb\u52a8\u7684\u901f\u5ea6\u3002\u9ed8\u8ba4\u503c\u662f Spring.StiffnessMedium \u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = spring ( dampingRatio = Spring . DampingRatioHighBouncy , stiffness = Spring . StiffnessMedium ) ) spring \u53ef\u4ee5\u6bd4\u57fa\u4e8e\u6301\u7eed\u65f6\u95f4\u7684 AnimationSpec \u7c7b\u578b\u66f4\u987a\u5229\u5730\u5904\u7406\u4e2d\u65ad\uff0c\u56e0\u4e3a\u5b83\u4fdd\u8bc1\u4e86\u76ee\u6807\u503c\u5728\u52a8\u753b\u4e2d\u53d8\u5316\u65f6\u901f\u5ea6\u7684\u8fde\u7eed\u6027\u3002 spring \u88ab\u8bb8\u591a\u52a8\u753b API \u7528\u4f5c\u9ed8\u8ba4\u7684 AnimationSpec \uff0c\u5982 animate*AsState \u548c updateTransition \u3002 tween tween \u5728\u6307\u5b9a\u7684 durationMillis \u4e0a\u4f7f\u7528\u7f13\u548c\u66f2\u7ebf\u5728\u5f00\u59cb\u548c\u7ed3\u675f\u503c\u4e4b\u95f4\u8fdb\u884c\u52a8\u753b\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u770b Easing \u3002\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a delayMillis \u6765\u63a8\u8fdf\u52a8\u753b\u7684\u5f00\u59cb\u65f6\u95f4\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = tween ( durationMillis = 300 , delayMillis = 50 , easing = LinearOutSlowInEasing ) ) keyframes keyframes \u7684\u52a8\u753b\u57fa\u4e8e\u52a8\u753b\u6301\u7eed\u65f6\u95f4\u4e2d\u4e0d\u540c\u65f6\u95f4\u6233\u6307\u5b9a\u7684\u5feb\u7167\u503c\u3002\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u52a8\u753b\u503c\u5c06\u5728\u4e24\u4e2a keyframes \u503c\u4e4b\u95f4\u63d2\u503c\u3002\u5bf9\u4e8e\u8fd9\u4e9b keyframes \u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u53ef\u4ee5\u6307\u5b9a Easing \u6765\u51b3\u5b9a\u63d2\u503c\u66f2\u7ebf\u3002 \u6307\u5b9a 0 \u6beb\u79d2\u5904\u548c\u6301\u7eed\u65f6\u95f4\u5904\u7684\u6570\u503c\u662f\u53ef\u9009\u7684\u3002\u5982\u679c\u4f60\u4e0d\u6307\u5b9a\u8fd9\u4e9b\u503c\uff0c\u5b83\u4eec\u5c06\u5206\u522b\u9ed8\u8ba4\u4e3a\u52a8\u753b\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u503c\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = keyframes { durationMillis = 375 0.0f at 0 with LinearOutSlowInEasing 0.2f at 15 with FastOutLinearInEasing 0.4f at 75 0.4f at 225 } ) repeatable repeatable \u91cd\u590d\u8fd0\u884c\u4e00\u4e2a\u57fa\u4e8e\u6301\u7eed\u65f6\u95f4\u7684\u52a8\u753b\uff08\u6bd4\u5982 Tween \u6216\u5173\u952e\u5e27\uff09\uff0c\u76f4\u5230\u5b83\u8fbe\u5230\u6307\u5b9a\u7684\u8fed\u4ee3\u6b21\u6570\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 repeatMode \u53c2\u6570\u6765\u6307\u5b9a\u52a8\u753b\u662f\u5426\u5e94\u8be5\u4ece\u5f00\u59cb RepeatMode.Restart \u6216\u4ece\u7ed3\u675f RepeatMode.Reverse \u5f00\u59cb\u91cd\u590d\u3002 infiniteRepeatable infiniteRepeatable \u548c repeatable \u4e00\u6837\uff0c\u4f46\u5b83\u4f1a\u91cd\u590d\u65e0\u9650\u6b21\u7684\u8fed\u4ee3\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = infiniteRepeatable ( animation = tween ( durationMillis = 300 ), repeatMode = RepeatMode . Reverse ) ) \u5728\u4f7f\u7528 ComposeTestRule \u7684\u6d4b\u8bd5\u4e2d\uff0c\u4f7f\u7528 infiniteRepeatable \u7684\u52a8\u753b\u4e0d\u4f1a\u88ab\u8fd0\u884c\u3002\u8be5\u7ec4\u4ef6\u5c06\u4f7f\u7528\u6bcf\u4e2a\u52a8\u753b\u503c\u7684\u521d\u59cb\u503c\u8fdb\u884c\u6e32\u67d3\u3002 snap snap \u662f\u4e00\u4e2a\u7279\u6b8a\u7684 AnimationSpec \uff0c\u53ef\u4ee5\u7acb\u5373\u5c06\u503c\u5207\u6362\u5230\u7ed3\u675f\u503c\u3002\u4f60\u53ef\u4ee5\u6307\u5b9a delayMillis \uff0c\u4ee5\u4fbf\u5ef6\u8fdf\u52a8\u753b\u7684\u5f00\u59cb\u3002 val value by animateFloatAsState ( targetValue = 1f , animationSpec = snap ( delayMillis = 50 ) ) \u6ce8\u610f \u5728 View UI \u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 ObjectAnimator \u7b49\u6765\u5b9e\u73b0\u57fa\u4e8e\u65f6\u95f4\u7684\u52a8\u753b\uff0c\u800c SpringAnimation \u5219\u662f\u57fa\u4e8e\u7269\u7406\u7684\u52a8\u753b\u3002\u8981\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u4e2a\u4e0d\u540c\u7684\u52a8\u753b API \u5e76\u4e0d\u5bb9\u6613\u3002 Compose \u4e2d\u7684 AnimationSpec \u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u7edf\u4e00\u7684\u65b9\u5f0f\u6765\u5904\u7406\u8fd9\u4e9b\u3002","title":"AnimationSpec"},{"location":"design/animation/overview/#easing","text":"\u57fa\u4e8e\u6301\u7eed\u65f6\u95f4\u7684 AnimationSpec \u64cd\u4f5c\uff08\u5982 tween \u6216 keyframes \uff09\u4f7f\u7528 Easing \u6765\u8c03\u6574\u52a8\u753b\u7684\u5206\u6570\u3002\u8fd9\u5141\u8bb8\u52a8\u753b\u503c\u52a0\u901f\u548c\u51cf\u901f\uff0c\u800c\u4e0d\u662f\u4ee5\u4e00\u4e2a\u6052\u5b9a\u7684\u901f\u5ea6\u79fb\u52a8\u3002\u5206\u6570\u662f\u4e00\u4e2a\u4ecb\u4e8e 0 \uff08\u5f00\u59cb\uff09\u548c 1.0 \uff08\u7ed3\u675f\uff09\u4e4b\u95f4\u7684\u6570\u503c\uff0c\u8868\u793a\u52a8\u753b\u7684\u5f53\u524d\u70b9\u3002 Easing \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u4ecb\u4e8e 0 \u548c 1.0 \u4e4b\u95f4\u7684\u5206\u6570\u503c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6d6e\u70b9\u6570\u3002\u8fd4\u56de\u7684\u503c\u53ef\u4ee5\u5728\u8fb9\u754c\u4e4b\u5916\uff0c\u4ee5\u8868\u793a\u8fc7\u51b2\u6216\u4e0b\u51b2\u7684\u60c5\u51b5\u3002\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Easing \u53ef\u4ee5\u50cf\u4e0b\u9762\u7684\u4ee3\u7801\u4e00\u6837\u88ab\u521b\u5efa\u3002 val CustomEasing = Easing { fraction -> fraction * fraction } @Composable fun EasingUsage () { val value by animateFloatAsState ( targetValue = 1f , animationSpec = tween ( durationMillis = 300 , easing = CustomEasing ) ) // \u2026 \u2026 } Compose \u63d0\u4f9b\u4e86\u51e0\u4e2a\u5185\u7f6e\u7684 Easing \u529f\u80fd\uff0c\u6db5\u76d6\u4e86\u5927\u591a\u6570\u4f7f\u7528\u60c5\u51b5\u3002\u8bf7\u53c2\u9605 Speed Material Design \uff0c\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6839\u636e\u4f60\u7684\u60c5\u51b5\u4f7f\u7528\u4f55\u79cd Easing \u7684\u4fe1\u606f\u3002 FastOutSlowInEasing LinearOutSlowInEasing FastOutLinearEasing LinearEasing CubicBezierEasing \u6ce8\u610f Easing \u5bf9\u8c61\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e\u5e73\u53f0\u4e2d Interpolator \u7c7b\u7684\u5b9e\u4f8b\u76f8\u540c\u3002\u5b83\u6ca1\u6709 getInterpolation() \u65b9\u6cd5\uff0c\u800c\u662f\u6709 transform() \u65b9\u6cd5\u3002","title":"Easing"},{"location":"design/animation/overview/#animationvector","text":"\u5927\u591a\u6570 Compose \u7684\u52a8\u753b API \u90fd\u652f\u6301 Float \u3001 Color \u3001 Dp \u548c\u5176\u4ed6\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u5f00\u7bb1\u5373\u7528\u7684\u52a8\u753b\u503c\uff0c\u4f46\u4f60\u6709\u65f6\u9700\u8981\u5bf9\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u52a8\u753b\u5904\u7406\uff0c\u5305\u62ec\u4f60\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u3002\u5728\u52a8\u753b\u5236\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u52a8\u753b\u503c\u90fd\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a AnimationVector \u3002\u8be5\u503c\u901a\u8fc7\u76f8\u5e94\u7684 TwoWayConverter \u8f6c\u6362\u4e3a AnimationVector \uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u8fd9\u6837\u6838\u5fc3\u52a8\u753b\u7cfb\u7edf\u5c31\u53ef\u4ee5\u7edf\u4e00\u5904\u7406\u5b83\u4eec\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a Int \u88ab\u8868\u793a\u4e3a\u4e00\u4e2a AnimationVector1D \uff0c\u5b83\u6301\u6709\u4e00\u4e2a\u6d6e\u70b9\u503c\u3002 Int \u7684 TwoWayConverter \u770b\u8d77\u6765\u50cf\u8fd9\u6837\u3002 val IntToVector : TwoWayConverter < Int , AnimationVector1D > = TwoWayConverter ({ AnimationVector1D ( it . toFloat ()) }, { it . value . toInt () }) \u989c\u8272\u672c\u8d28\u4e0a\u662f\u4e00\u7ec4 4 \u4e2a\u503c\uff0c\u7ea2\u3001\u7eff\u3001\u84dd\u548c\u900f\u660e\u5ea6\uff0c\u6240\u4ee5\u989c\u8272\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a AnimationVector4D \uff0c\u6301\u6709 4 \u4e2a\u6d6e\u70b9\u503c\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u52a8\u753b\u4e2d\u4f7f\u7528\u7684\u6bcf\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u88ab\u8f6c\u6362\u4e3a AnimationVector1D \u3001 AnimationVector2D \u3001 AnimationVector3D \u6216 AnimationVector4D \uff0c\u53d6\u51b3\u4e8e\u5176\u7ef4\u5ea6\u3002\u8fd9\u4f7f\u5f97\u5bf9\u8c61\u7684\u4e0d\u540c\u7ec4\u4ef6\u53ef\u4ee5\u72ec\u7acb\u5730\u88ab\u52a8\u753b\u5316\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u6709\u81ea\u5df1\u7684\u901f\u5ea6\u8ddf\u8e2a\u3002\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5185\u7f6e\u8f6c\u6362\u5668\u53ef\u4ee5\u4f7f\u7528 Color.VectorConverter \u3001 Dp \u3001 VectorConverter \u7b49\u8bbf\u95ee\u3002 \u5f53\u4f60\u60f3\u6dfb\u52a0\u5bf9\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u52a8\u753b\u503c\u7684\u652f\u6301\u65f6\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4f60\u81ea\u5df1\u7684 TwoWayConverter \u5e76\u5c06\u5176\u63d0\u4f9b\u7ed9 API \u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 animateValueAsState \u6765\u4f7f\u4f60\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u4ea7\u751f\u52a8\u753b\uff0c\u50cf\u8fd9\u6837\u3002 data class MySize ( val width : Dp , val height : Dp ) @Composable fun MyAnimation ( targetSize : MySize ) { val animSize : MySize by animateValueAsState < MySize , AnimationVector2D > ( targetSize , TwoWayConverter ( convertToVector = { size : MySize -> // \u4ece\u6bcf\u4e2a Dp \u5b57\u6bb5\u4e2d\u63d0\u53d6\u4e00\u4e2a\u6d6e\u52a8\u503c\u3002 AnimationVector2D ( size . width . value , size . height . value ) }, convertFromVector = { vector : AnimationVector2D -> MySize ( vector . v1 . dp , vector . v2 . dp ) } ) ) }","title":"AnimationVector"},{"location":"design/animation/overview/#5","text":"\u4e0e\u5355\u72ec\u5904\u7406\u52a8\u753b\u76f8\u6bd4\uff0c\u5f53\u6211\u4eec\u5904\u7406\u89e6\u6478\u4e8b\u4ef6\u548c\u52a8\u753b\u65f6\uff0c\u6709\u51e0\u4ef6\u4e8b\u6211\u4eec\u5fc5\u987b\u8003\u8651\u5230\u3002\u9996\u5148\uff0c\u5f53\u89e6\u6478\u4e8b\u4ef6\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e2d\u65ad\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff0c\u56e0\u4e3a\u7528\u6237\u4e92\u52a8\u5e94\u8be5\u6709\u6700\u9ad8\u7684\u4f18\u5148\u6743\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e00\u4e2a Animatable \u6765\u8868\u793a\u4e00\u4e2a\u5706\u5f62\u7ec4\u4ef6\u7684\u504f\u79fb\u4f4d\u7f6e\u3002\u89e6\u6478\u4e8b\u4ef6\u662f\u7528 pointerInput \u4fee\u6539\u5668\u6765\u5904\u7406\u7684\u3002\u5f53\u6211\u4eec\u68c0\u6d4b\u5230\u4e00\u4e2a\u65b0\u7684\u8f7b\u6572\u4e8b\u4ef6\u65f6\uff0c\u6211\u4eec\u8c03\u7528 animateTo \u6765\u5c06\u504f\u79fb\u503c\u52a8\u753b\u5316\u5230\u8f7b\u6572\u4f4d\u7f6e\u3002\u6572\u51fb\u4e8b\u4ef6\u4e5f\u53ef\u4ee5\u5728\u52a8\u753b\u4e2d\u53d1\u751f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c animateTo \u4e2d\u65ad\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff0c\u5e76\u5f00\u59cb\u52a8\u753b\u5230\u65b0\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u540c\u65f6\u4fdd\u6301\u4e2d\u65ad\u7684\u52a8\u753b\u7684\u901f\u5ea6\u3002 @Composable fun Gesture () { val offset = remember { Animatable ( Offset ( 0f , 0f ), Offset . VectorConverter ) } Box ( modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { coroutineScope { while ( true ) { // \u68c0\u6d4b\u4e00\u4e2a\u70b9\u51fb\u5934\u4e8b\u4ef6\u5e76\u83b7\u5f97\u5176\u4f4d\u7f6e\u3002 val position = awaitPointerEventScope { awaitFirstDown (). position } launch { // \u5e94\u7528\u5230\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002 offset . animateTo ( position ) } } } } ) { Circle ( modifier = Modifier . offset { offset . value . toIntOffset () }) } } private fun Offset . toIntOffset () = IntOffset ( x . roundToInt (), y . roundToInt ()) \u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u6a21\u5f0f\u662f\u6211\u4eec\u9700\u8981\u5c06\u52a8\u753b\u503c\u4e0e\u6765\u81ea\u89e6\u6478\u4e8b\u4ef6\u7684\u503c\u540c\u6b65\uff0c\u4f8b\u5982\u62d6\u52a8\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u770b\u5230 \"\u8f7b\u626b\u89e3\u6563\" \u4f5c\u4e3a\u4e00\u4e2a\u4fee\u6539\u5668\u6765\u5b9e\u73b0\uff08\u800c\u4e0d\u662f\u4f7f\u7528 SwipeToDismiss \u7684\u7ec4\u5408\uff09\u3002\u8be5\u5143\u7d20\u7684\u6c34\u5e73\u504f\u79fb\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a Animatable \u3002\u8fd9\u4e2a API \u6709\u4e00\u4e2a\u5728\u624b\u52bf\u52a8\u753b\u4e2d\u6709\u7528\u7684\u7279\u6027\u3002\u5b83\u7684\u503c\u53ef\u4ee5\u88ab\u89e6\u6478\u4e8b\u4ef6\u4ee5\u53ca\u52a8\u753b\u6240\u6539\u53d8\u3002\u5f53\u6211\u4eec\u6536\u5230\u4e00\u4e2a\u89e6\u6478\u4e8b\u4ef6\u65f6\uff0c\u6211\u4eec\u901a\u8fc7 stop \u65b9\u6cd5\u505c\u6b62 Animatable \uff0c\u8fd9\u6837\u4efb\u4f55\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\u5c31\u88ab\u62e6\u622a\u4e86\u3002 \u5728\u4e00\u4e2a\u62d6\u52a8\u4e8b\u4ef6\u4e2d\uff0c\u6211\u4eec\u7528 snapTo \u6765\u66f4\u65b0 Animatable \u7684\u503c\uff0c\u5373\u4ece\u89e6\u6478\u4e8b\u4ef6\u4e2d\u8ba1\u7b97\u51fa\u6765\u7684\u503c\u3002\u5bf9\u4e8e\u62d6\u52a8\uff0c compose \u63d0\u4f9b\u4e86 VelocityTracker \u6765\u8bb0\u5f55\u62d6\u52a8\u4e8b\u4ef6\u5e76\u8ba1\u7b97\u51fa\u901f\u5ea6\u3002\u901f\u5ea6\u53ef\u4ee5\u76f4\u63a5\u53cd\u9988\u7ed9 animateDecay \uff0c\u7528\u4e8e\u5236\u4f5c\u7ffb\u8f6c\u52a8\u753b\u3002\u5f53\u6211\u4eec\u60f3\u628a\u504f\u79fb\u503c\u6ed1\u56de\u5230\u539f\u59cb\u4f4d\u7f6e\u65f6\uff0c\u6211\u4eec\u7528 animateTo \u65b9\u6cd5\u6307\u5b9a\u76ee\u6807\u504f\u79fb\u503c\u4e3a 0f \u3002 fun Modifier . swipeToDismiss ( onDismissed : () -> Unit ): Modifier = composed { val offsetX = remember { Animatable ( 0f ) } pointerInput ( Unit ) { val decay = splineBasedDecay < Float > ( this ) coroutineScope { while ( true ) { // \u68c0\u6d4b\u4e00\u4e2a\u89e6\u6478\u4e8b\u4ef6\u3002 val pointerId = awaitPointerEventScope { awaitFirstDown (). id } val velocityTracker = VelocityTracker () // \u62e6\u622a\u4e00\u4e2a\u6b63\u5728\u8fdb\u884c\u7684\u52a8\u753b\uff08\u5982\u679c\u6709\u7684\u8bdd offsetX . stop () awaitPointerEventScope { horizontalDrag ( pointerId ) { change -> // \u7528\u89e6\u6478\u4e8b\u4ef6\u66f4\u65b0\u52a8\u753b\u503c\u3002 launch { offsetX . snapTo ( offsetX . value + change . positionChange (). x ) } velocityTracker . addPosition ( change . uptimeMillis , change . position ) } } val velocity = velocityTracker . calculateVelocity (). x val targetOffsetX = decay . calculateTargetValue ( offsetX . value , velocity ) // \u5f53\u5b83\u5230\u8fbe\u8fb9\u754c\u65f6\uff0c\u52a8\u753b\u505c\u6b62\u3002 offsetX . updateBounds ( lowerBound = - size . width . toFloat (), upperBound = size . width . toFloat () ) launch { if ( targetOffsetX . absoluteValue <= size . width ) { // \u901f\u5ea6\u4e0d\u591f\uff1b\u5411\u540e\u6ed1\u52a8\u3002 offsetX . animateTo ( targetValue = 0f , initialVelocity = velocity ) } else { // \u8be5\u5143\u7d20\u88ab\u5237\u6389\u4e86\u3002 offsetX . animateDecay ( velocity , decay ) onDismissed () } } } } } . offset { IntOffset ( offsetX . value . roundToInt (), 0 ) } }","title":"5. \u624b\u52bf\u4e0e\u52a8\u753b\uff08\u9ad8\u7ea7\uff09"},{"location":"design/animation/overview/#6","text":"Compose \u63d0\u4f9b\u4e86 ComposeTestRule \uff0c\u5141\u8bb8\u4f60\u4ee5\u786e\u5b9a\u7684\u65b9\u5f0f\u4e3a\u52a8\u753b\u7f16\u5199\u6d4b\u8bd5\uff0c\u5e76\u5bf9\u6d4b\u8bd5\u65f6\u949f\u8fdb\u884c\u5b8c\u5168\u63a7\u5236\u3002\u8fd9\u4f7f\u4f60\u53ef\u4ee5\u9a8c\u8bc1\u4e2d\u95f4\u7684\u52a8\u753b\u503c\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u6d4b\u8bd5\u53ef\u4ee5\u6bd4\u52a8\u753b\u7684\u5b9e\u9645\u6301\u7eed\u65f6\u95f4\u66f4\u5feb\u8fd0\u884c\u3002 ComposeTestRule \u5c06\u5176\u6d4b\u8bd5\u65f6\u949f\u516c\u5f00\u4e3a mainClock \u3002\u4f60\u53ef\u4ee5\u5c06 autoAdvance \u5c5e\u6027\u8bbe\u7f6e\u4e3a false \u6765\u63a7\u5236\u4f60\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684\u65f6\u949f\u3002\u5728\u542f\u52a8\u4f60\u8981\u6d4b\u8bd5\u7684\u52a8\u753b\u540e\uff0c\u65f6\u949f\u53ef\u4ee5\u7528 advanceTimeBy \u5411\u524d\u79fb\u52a8\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c advanceTimeBy \u5e76\u4e0d\u5b8c\u5168\u6309\u7167\u6307\u5b9a\u7684\u6301\u7eed\u65f6\u95f4\u6765\u79fb\u52a8\u65f6\u949f\u3002\u76f8\u53cd\uff0c\u5b83\u5c06\u5176\u56db\u820d\u4e94\u5165\u5230\u6700\u8fd1\u7684\u6301\u7eed\u65f6\u95f4\uff0c\u5373\u5e27\u6301\u7eed\u65f6\u95f4\u7684\u4e58\u6570\u3002 @get : Rule val rule = createComposeRule () @Test fun testAnimationWithClock () { // \u6682\u505c\u52a8\u753b rule . mainClock . autoAdvance = false var enabled by mutableStateOf ( false ) rule . setContent { val color by animateColorAsState ( targetValue = if ( enabled ) Color . Red else Color . Green , animationSpec = tween ( durationMillis = 250 ) ) Box ( Modifier . size ( 64. dp ). background ( color )) } // \u542f\u52a8\u52a8\u753b enabled = true // \u8ba9\u52a8\u753b\u7ee7\u7eed\u8fdb\u884c\u3002 rule . mainClock . advanceTimeBy ( 50L ) // \u5c06\u7ed3\u679c\u4e0e\u663e\u793a\u9884\u671f\u7ed3\u679c\u7684\u56fe\u50cf\u8fdb\u884c\u6bd4\u8f83\u3002 rule . onRoot (). captureToImage (). assertAgainstGolden () }","title":"6. \u6d4b\u8bd5"},{"location":"design/animation/update_transition/","text":"updateTransiton \u662f Jetpack Compose \u4e2d\u5b9e\u73b0\u8fc7\u6e21\u52a8\u753b\u7684\u5173\u952e API \u3002\u6240\u8c13\u8fc7\u6e21\u52a8\u753b\uff0c\u5373\u5f53\u4f9d\u8d56\u7684\u67d0\u4e2a\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u8fde\u9501\u53d1\u751f\u7684\u4e00\u7cfb\u5217\u52a8\u753b\u6548\u679c\u3002\u524d\u9762\u6211\u4eec\u6240\u63d0\u5230\u7684 AnimateState \u4e0e Animatable \u90fd\u662f\u9488\u5bf9\u4e00\u4e2a\u5c5e\u6027\u8fdb\u884c\u53d8\u6362\u7684\uff0c\u800c updateTransition \u5141\u8bb8\u5f00\u53d1\u8005\u5c06\u591a\u4e2a\u5c5e\u6027\u6570\u503c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u72b6\u6001\uff0c\u5f53\u8fd9\u4e2a\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u591a\u4e2a\u5c5e\u6027\u540c\u65f6\u8fdb\u884c\u53d8\u6362\u3002 1. \u7b80\u5355\u4f7f\u7528 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd\u8fc7\u6e21\u52a8\u753b\u5982\u679c\u5728\u5b9e\u9645\u5e94\u7528\u573a\u666f\u4e2d\u5982\u4f55\u8fdb\u884c\u4f7f\u7528\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6700\u7b80\u5355\u7684\u5f00\u5173\u6309\u94ae\u793a\u4f8b\u5c55\u793a\u3002 \u9996\u5148\uff0c\u8fc7\u6e21\u52a8\u753b\u662f\u4f9d\u8d56\u72b6\u6001\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u521b\u5efa\u72b6\u6001\u7c7b\u3002 sealed class SwitchState { object OPEN : SwitchState () object CLOSE : SwitchState () } \u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a MutableState \u8868\u793a\u5f53\u524d\u5f00\u5173\u7684\u72b6\u6001\u3002 var selectedState : SwitchState by remember { mutableStateOf ( SwitchState . CLOSE ) } \u4e0a\u8ff0\u6b65\u9aa4\u90fd\u5f88\u7b80\u5355\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u9700\u8981\u5f00\u59cb\u7740\u5b9e\u51c6\u5907\u6211\u4eec\u7684\u52a8\u753b\u4e86\u3002\u4e3a\u6f14\u793a\u65b9\u4fbf\uff0c\u8fd9\u91cc\u6211\u4eec\u7684\u8bbe\u8ba1\u65b9\u6848\u662f\u5f53\u5f00\u5173\u88ab\u6253\u5f00\u65f6\uff0c\u6587\u6848\u9010\u6e10\u6d88\u5931\uff0c\u4e8e\u6b64\u540c\u65f6\u5e95\u90e8\u9010\u6e10\u4e0a\u5347\u9009\u4e2d\u7684\u6807\u7b7e\uff0c\u5c31\u50cf\u8fd9\u6837\u3002 \u4e0b\u9762\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230 updateTransition \u4e86\uff0c\u901a\u8fc7 API \u58f0\u660e\u53ef\u77e5\uff0c\u6b64\u65f6\u9700\u8981\u4f20\u5165 targetState (\u5fc5\u987b) \u548c label (\u53ef\u9009)\u3002\u6b64 API \u4f1a\u8fd4\u56de\u4e00\u4e2a Transition \u5b9e\u4f8b\uff0c\u5373\u8be5\u8fc7\u6e21\u52a8\u753b\u7684\u53e5\u67c4\u3002 @Composable fun < T > updateTransition ( targetState : T , label : String? = null ): Transition < T > targetState\uff1a\u8fc7\u6e21\u52a8\u753b\u6240\u4f9d\u8d56\u7684\u72b6\u6001\u3002 label\uff1a\u8fc7\u6e21\u52a8\u753b\u7684\u6807\u7b7e\u3002 \u7531\u4e8e\u6211\u4eec\u7684\u8fc7\u6e21\u52a8\u753b\u4f9d\u8d56\u5f00\u5173\u7684\u9009\u4e2d\u72b6\u6001\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f9d\u8d56\u4e4b\u524d\u6240\u521b\u5efa\u7684 MutableState \u5373\u53ef val transition = updateTransition ( selectedState , label = \"switch_transition\" ) \u83b7\u53d6\u5230 Transition \u5b9e\u4f8b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u521b\u5efa\u8fc7\u6e21\u52a8\u753b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u72b6\u6001\u4e86\u3002\u524d\u9762\u8bf4\u8fc7\u5f53\u5f00\u5173\u88ab\u6253\u5f00\u65f6\uff0c\u6587\u6848\u9010\u6e10\u6d88\u5931\uff0c\u4e8e\u6b64\u540c\u65f6\u5e95\u90e8\u9010\u6e10\u4e0a\u5347\u9009\u4e2d\u7684\u6807\u7b7e\u3002\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4e24\u4e2a\u5c5e\u6027\u72b6\u6001\uff0c selectBarPadding \u4e0e textAlpha \u3002 \u6211\u4eec\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u72b6\u6001\u58f0\u660e\u4e86\u5176\u5728\u4e0d\u540c\u72b6\u6001\u65f6\u6240\u5bf9\u5e94\u7684\u503c\uff0c\u5f53\u8fc7\u5ea6\u52a8\u753b\u6240\u4f9d\u8d56\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5c5e\u6027\u72b6\u6001\u90fd\u4f1a\u5f97\u5230\u76f8\u5e94\u7684\u66f4\u65b0\u3002 val selectBarPadding by transition . animateDp ( transitionSpec = { tween ( 1000 ) }, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 40. dp SwitchState . OPEN -> 0. dp } } val textAlpha by transition . animateFloat ( transitionSpec = { tween ( 1000 )}, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 1f SwitchState . OPEN -> 0f } } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ec5\u9700\u5c06\u521b\u5efa\u7684\u5c5e\u6027\u72b6\u6001\u5e94\u7528\u5230\u6211\u4eec\u7684\u7ec4\u4ef6\u4e2d\u5373\u53ef\u3002 Text ( modifier = Modifier . alpha ( textAlpha ) ... ) Box ( modifier = Modifier . padding ( top = selectBarPadding ) ... ) 2. \u5b8c\u6574\u793a\u4f8b\u4ee3\u7801 sealed class SwitchState { object OPEN : SwitchState () object CLOSE : SwitchState () } @Composable fun SwitchBlock (){ var selectedState : SwitchState by remember { mutableStateOf ( SwitchState . CLOSE ) } val transition = updateTransition ( selectedState , label = \"switch_transition\" ) val selectBarPadding by transition . animateDp ( transitionSpec = { tween ( 1000 ) }, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 40. dp SwitchState . OPEN -> 0. dp } } val textAlpha by transition . animateFloat ( transitionSpec = { tween ( 1000 ) }, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 1f SwitchState . OPEN -> 0f } } Box ( modifier = Modifier . size ( 150. dp ) . padding ( 8. dp ) . clip ( RoundedCornerShape ( 10. dp )) . clickable { selectedState = if ( selectedState == SwitchState . OPEN ) SwitchState . CLOSE else SwitchState . OPEN } ) { Image ( painter = painterResource ( id = R . drawable . flower ), contentDescription = \"node_background\" , contentScale = ContentScale . FillBounds ) Text ( text = \"\u70b9\u6211\" , fontSize = 30. sp , fontWeight = FontWeight . W900 , color = Color . White , modifier = Modifier . align ( Alignment . Center ) . alpha ( textAlpha ) ) Box ( modifier = Modifier . align ( Alignment . BottomCenter ) . fillMaxWidth () . height ( 40. dp ) . padding ( top = selectBarPadding ) . background ( Color ( 0 xFF5FB878 )) ) { Row ( modifier = Modifier . align ( Alignment . Center ) . alpha ( 1 - textAlpha ) ) { Icon ( painter = painterResource ( id = R . drawable . ic_star ), contentDescription = \"star\" , tint = Color . White ) Spacer ( modifier = Modifier . width ( 2. dp )) Text ( text = \"\u5df2\u9009\u62e9\" , fontSize = 20. sp , fontWeight = FontWeight . W900 , color = Color . White ) } } } }","title":"UpdateTransition"},{"location":"design/animation/update_transition/#1","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd\u8fc7\u6e21\u52a8\u753b\u5982\u679c\u5728\u5b9e\u9645\u5e94\u7528\u573a\u666f\u4e2d\u5982\u4f55\u8fdb\u884c\u4f7f\u7528\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6700\u7b80\u5355\u7684\u5f00\u5173\u6309\u94ae\u793a\u4f8b\u5c55\u793a\u3002 \u9996\u5148\uff0c\u8fc7\u6e21\u52a8\u753b\u662f\u4f9d\u8d56\u72b6\u6001\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u521b\u5efa\u72b6\u6001\u7c7b\u3002 sealed class SwitchState { object OPEN : SwitchState () object CLOSE : SwitchState () } \u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a MutableState \u8868\u793a\u5f53\u524d\u5f00\u5173\u7684\u72b6\u6001\u3002 var selectedState : SwitchState by remember { mutableStateOf ( SwitchState . CLOSE ) } \u4e0a\u8ff0\u6b65\u9aa4\u90fd\u5f88\u7b80\u5355\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u9700\u8981\u5f00\u59cb\u7740\u5b9e\u51c6\u5907\u6211\u4eec\u7684\u52a8\u753b\u4e86\u3002\u4e3a\u6f14\u793a\u65b9\u4fbf\uff0c\u8fd9\u91cc\u6211\u4eec\u7684\u8bbe\u8ba1\u65b9\u6848\u662f\u5f53\u5f00\u5173\u88ab\u6253\u5f00\u65f6\uff0c\u6587\u6848\u9010\u6e10\u6d88\u5931\uff0c\u4e8e\u6b64\u540c\u65f6\u5e95\u90e8\u9010\u6e10\u4e0a\u5347\u9009\u4e2d\u7684\u6807\u7b7e\uff0c\u5c31\u50cf\u8fd9\u6837\u3002 \u4e0b\u9762\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230 updateTransition \u4e86\uff0c\u901a\u8fc7 API \u58f0\u660e\u53ef\u77e5\uff0c\u6b64\u65f6\u9700\u8981\u4f20\u5165 targetState (\u5fc5\u987b) \u548c label (\u53ef\u9009)\u3002\u6b64 API \u4f1a\u8fd4\u56de\u4e00\u4e2a Transition \u5b9e\u4f8b\uff0c\u5373\u8be5\u8fc7\u6e21\u52a8\u753b\u7684\u53e5\u67c4\u3002 @Composable fun < T > updateTransition ( targetState : T , label : String? = null ): Transition < T > targetState\uff1a\u8fc7\u6e21\u52a8\u753b\u6240\u4f9d\u8d56\u7684\u72b6\u6001\u3002 label\uff1a\u8fc7\u6e21\u52a8\u753b\u7684\u6807\u7b7e\u3002 \u7531\u4e8e\u6211\u4eec\u7684\u8fc7\u6e21\u52a8\u753b\u4f9d\u8d56\u5f00\u5173\u7684\u9009\u4e2d\u72b6\u6001\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f9d\u8d56\u4e4b\u524d\u6240\u521b\u5efa\u7684 MutableState \u5373\u53ef val transition = updateTransition ( selectedState , label = \"switch_transition\" ) \u83b7\u53d6\u5230 Transition \u5b9e\u4f8b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u521b\u5efa\u8fc7\u6e21\u52a8\u753b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u72b6\u6001\u4e86\u3002\u524d\u9762\u8bf4\u8fc7\u5f53\u5f00\u5173\u88ab\u6253\u5f00\u65f6\uff0c\u6587\u6848\u9010\u6e10\u6d88\u5931\uff0c\u4e8e\u6b64\u540c\u65f6\u5e95\u90e8\u9010\u6e10\u4e0a\u5347\u9009\u4e2d\u7684\u6807\u7b7e\u3002\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4e24\u4e2a\u5c5e\u6027\u72b6\u6001\uff0c selectBarPadding \u4e0e textAlpha \u3002 \u6211\u4eec\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u72b6\u6001\u58f0\u660e\u4e86\u5176\u5728\u4e0d\u540c\u72b6\u6001\u65f6\u6240\u5bf9\u5e94\u7684\u503c\uff0c\u5f53\u8fc7\u5ea6\u52a8\u753b\u6240\u4f9d\u8d56\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5c5e\u6027\u72b6\u6001\u90fd\u4f1a\u5f97\u5230\u76f8\u5e94\u7684\u66f4\u65b0\u3002 val selectBarPadding by transition . animateDp ( transitionSpec = { tween ( 1000 ) }, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 40. dp SwitchState . OPEN -> 0. dp } } val textAlpha by transition . animateFloat ( transitionSpec = { tween ( 1000 )}, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 1f SwitchState . OPEN -> 0f } } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ec5\u9700\u5c06\u521b\u5efa\u7684\u5c5e\u6027\u72b6\u6001\u5e94\u7528\u5230\u6211\u4eec\u7684\u7ec4\u4ef6\u4e2d\u5373\u53ef\u3002 Text ( modifier = Modifier . alpha ( textAlpha ) ... ) Box ( modifier = Modifier . padding ( top = selectBarPadding ) ... )","title":"1. \u7b80\u5355\u4f7f\u7528"},{"location":"design/animation/update_transition/#2","text":"sealed class SwitchState { object OPEN : SwitchState () object CLOSE : SwitchState () } @Composable fun SwitchBlock (){ var selectedState : SwitchState by remember { mutableStateOf ( SwitchState . CLOSE ) } val transition = updateTransition ( selectedState , label = \"switch_transition\" ) val selectBarPadding by transition . animateDp ( transitionSpec = { tween ( 1000 ) }, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 40. dp SwitchState . OPEN -> 0. dp } } val textAlpha by transition . animateFloat ( transitionSpec = { tween ( 1000 ) }, label = \"\" ) { when ( it ) { SwitchState . CLOSE -> 1f SwitchState . OPEN -> 0f } } Box ( modifier = Modifier . size ( 150. dp ) . padding ( 8. dp ) . clip ( RoundedCornerShape ( 10. dp )) . clickable { selectedState = if ( selectedState == SwitchState . OPEN ) SwitchState . CLOSE else SwitchState . OPEN } ) { Image ( painter = painterResource ( id = R . drawable . flower ), contentDescription = \"node_background\" , contentScale = ContentScale . FillBounds ) Text ( text = \"\u70b9\u6211\" , fontSize = 30. sp , fontWeight = FontWeight . W900 , color = Color . White , modifier = Modifier . align ( Alignment . Center ) . alpha ( textAlpha ) ) Box ( modifier = Modifier . align ( Alignment . BottomCenter ) . fillMaxWidth () . height ( 40. dp ) . padding ( top = selectBarPadding ) . background ( Color ( 0 xFF5FB878 )) ) { Row ( modifier = Modifier . align ( Alignment . Center ) . alpha ( 1 - textAlpha ) ) { Icon ( painter = painterResource ( id = R . drawable . ic_star ), contentDescription = \"star\" , tint = Color . White ) Spacer ( modifier = Modifier . width ( 2. dp )) Text ( text = \"\u5df2\u9009\u62e9\" , fontSize = 20. sp , fontWeight = FontWeight . W900 , color = Color . White ) } } } }","title":"2. \u5b8c\u6574\u793a\u4f8b\u4ee3\u7801"},{"location":"design/draw/custom_draw/","text":"\u6982\u8ff0 Jetpack Compose \u4f5c\u4e3a\u4e00\u6b3e UI \u6846\u67b6\uff0c\u81ea\u5b9a\u4e49\u7ed8\u5236\u90e8\u5206\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u901a\u8fc7\u5b98\u65b9\u6240\u63d0\u4f9b\u7684\u57fa\u7840 API\uff0c \u5141\u8bb8\u5f00\u53d1\u8005\u5b9e\u73b0\u5404\u79cd\u573a\u666f\u4e0b\u7684\u7ed8\u5236\u5b9a\u5236\u9700\u6c42\u3002\u5982\u679c\u4f60\u5bf9 Android \u539f\u751f Canvas \u5df2\u7ecf\u4e86\u5982\u6307\u638c\u7684\u8bdd\uff0c\u90a3\u4e48\u8fc1\u79fb\u81f3 Jetpack Compose \u57fa\u672c\u6ca1\u6709\u4efb\u4f55\u6210\u672c\u3002\u5373\u4f7f\u4f60\u4e0d\u66fe\u4e86\u89e3 Android \u539f\u751f Canvas \u4e5f\u4e0d\u8981\u62c5\u5fc3\uff0c\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u4f60\u540c\u6837\u4e5f\u53ef\u4ee5\u638c\u63e1\u5982\u4f55\u5728 Jetpack Compose \u5b8c\u6210\u81ea\u5b9a\u4e49\u7ed8\u5236\u3002 \u4ece Canvas Composable \u5f00\u59cb Canvas Composable \u662f\u5b98\u65b9\u63d0\u4f9b\u7684\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u81ea\u5b9a\u4e49\u7ed8\u5236\u7684\u72ec\u7acb\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u4e0d\u5305\u542b\u4efb\u4f55\u5b50\u5143\u7d20\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u7edfView\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u72ec\u7acbView\uff08\u4e0d\u662fViewGroup\uff0c\u4e0d\u5305\u542b\u5b50View\uff09\u3002\u4f5c\u4e3a\u4e00\u4e2a\u201d\u72ec\u7acbView\u201c\uff0c\u6211\u4eec\u540c\u6837\u4e5f\u53ef\u4ee5\u901a\u8fc7 Layout Modifier \u6765\u5b9a\u5236\u6d4b\u91cf\u5e03\u5c40\u8fc7\u7a0b\uff0c\u6709\u5173\u4e8e\u6d4b\u91cf\u5e03\u5c40\u7684\u5b9a\u5236\u53ef\u4ee5\u62d3\u5c55\u9605\u8bfb \u81ea\u5b9a\u4e49Layout \u3002 Canvas\u53c2\u6570\u6709\u4e24\u4e2a\u53c2\u6570, \u7c7b\u578b\u5206\u522b\u662f Modifier \u4e0e DrawScope.() -> Unit \u3002Modifier \u4f5c\u4e3a\u8be5\u7ec4\u4ef6\u7684\u4fee\u9970\u7b26\u4e0d\u96be\u7406\u89e3\uff0c DrawScope.() -> Unit \u662f\u4e00\u4e2a reciever \u4e3a DrawScope \u7c7b\u578b\u7684 lambda\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 lambda \u4e2d\u4efb\u610f\u4f7f\u7528 DrawScope \u4e3a\u6211\u4eec\u6240\u63d0\u4f9b\u7684 API \u4e86\u3002 fun Canvas ( modifier : Modifier , onDraw : DrawScope .() -> Unit ) \u6211\u4eec\u6765\u770b\u770b DrawScope \u4e3a\u6211\u4eec\u9650\u5b9a\u4e86\u54ea\u4e9b API\u3002\u8fd9\u4e9b API \u5b57\u9762\u610f\u601d\u5f88\u597d\u7406\u89e3\uff0c\u5728\u4f7f\u7528\u65f6\u4e34\u65f6\u67e5\u627e\u5373\u53ef\u3002 API \u63cf\u8ff0 drawLine \u7ed8\u5236\u4e00\u6761\u7ebf drawRect \u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62 drawImage \u7ed8\u5236\u4e00\u5f20\u56fe\u7247 drawRoundRect \u7ed8\u5236\u4e00\u4e2a\u5706\u89d2\u77e9\u5f62 drawCircle \u7ed8\u5236\u4e00\u4e2a\u5706 drawOval \u7ed8\u5236\u4e00\u4e2a\u692d\u5706 drawArc \u7ed8\u5236\u4e00\u6761\u5f27\u7ebf drawPath \u7ed8\u5236\u4e00\u6761\u8def\u5f84 drawPoints \u7ed8\u5236\u4e00\u4e9b\u70b9 \u7b80\u5355\u793a\u4f8b \u8ba9\u6211\u4eec\u753b\u4e00\u4e2a\u7b80\u5355\u7684\u5706\u73af\u4f5c\u4e3a\u793a\u4f8b\u3002 @Preview @Composable fun DrawColorRing () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { var radius = 300. dp var ringWidth = 30. dp Canvas ( modifier = Modifier . size ( radius )) { this . drawCircle ( // \u753b\u5706 brush = Brush . sweepGradient ( listOf ( Color . Red , Color . Green , Color . Red ), Offset ( radius . toPx () / 2f , radius . toPx () / 2f )), radius = radius . toPx () / 2f , style = Stroke ( width = ringWidth . toPx () ) ) } } } Jetpack Compose \u4f5c\u4e3a\u4e00\u6b3e\u8de8\u5e73\u53f0 UI \u6846\u67b6\uff0c\u6240\u4f7f\u7528 Canvas \u53ea\u662f\u4e00\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u5c01\u88c5\uff0c\u6700\u7ec8\u8fd8\u662f\u843d\u5b9e\u5230\u5177\u4f53\u5e73\u53f0\u7684Canvas\u5b9e\u73b0\u7684\u3002\u6240\u4ee5\u5728 Android \u5e73\u53f0\u5373\u4f7f\u6211\u4eec\u4f7f\u7528\u7684\u662f DrawScope \u4e3a\u6211\u4eec\u6240\u63d0\u4f9b\u7684 API \uff0c\u6700\u7ec8\u4ecd\u7136\u8fd8\u662f\u4f1a\u4f7f\u7528\u5230Android\u539f\u751f\u7684Canvas\u7684\u3002\u5982\u679c\u4f60\u66fe\u7ecf\u5728\u4f20\u7edfView\u7cfb\u7edf\u4e2d\u505a\u8fc7\u81ea\u5b9a\u4e49\u7ed8\u5236\uff0c\u5728\u7ed8\u5236\u5904\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u611f\u89c9 Compose \u597d\u50cf\u5c11\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u4e1c\u897f \u2014\u2014 Paint \u753b\u7b14 \uff0c\u96be\u4e0d\u6210\u6bcf\u6b21\u7ed8\u5236\u65f6\u90fd\u4f1a\u6839\u636e API \u5982\u6b64\u53c2\u6570\u4e0d\u540c\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Painter ?\u5176\u5b9e\u6211\u4eec\u7684 DrawScope \u4f1a\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u753b\u7b14\u8fdb\u884c\u7f13\u5b58\u7684\uff0c\u6240\u4ee5\u6027\u80fd\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 // CanvasDrawScope private fun obtainFillPaint (): Paint = fillPaint ?: Paint (). apply { style = PaintingStyle . Fill }. also { fillPaint = it } private fun obtainStrokePaint (): Paint = strokePaint ?: Paint (). apply { style = PaintingStyle . Stroke }. also { strokePaint = it } private fun selectPaint ( drawStyle : DrawStyle ): Paint = when ( drawStyle ) { Fill -> obtainFillPaint () is Stroke -> obtainStrokePaint () . apply { if ( strokeWidth != drawStyle . width ) strokeWidth = drawStyle . width if ( strokeCap != drawStyle . cap ) strokeCap = drawStyle . cap if ( strokeMiterLimit != drawStyle . miter ) strokeMiterLimit = drawStyle . miter if ( strokeJoin != drawStyle . join ) strokeJoin = drawStyle . join if ( pathEffect != drawStyle . pathEffect ) pathEffect = drawStyle . pathEffect } } \u6253\u5f00 Canvas Composable \u7684\u5b9e\u73b0\u53ef\u4ee5\u53d1\u73b0\u4ed6\u5176\u5b9e\u5c31\u662f\u4e2a Spacer \u5957\u58f3\uff0c\u771f\u6b63\u53d1\u6325\u7ed8\u5236\u4f5c\u7528\u7684\u5176\u5b9e\u662f\u8fd9\u4e2a Modifier.drawBehind() \u3002drawBehind\uff08\u753b\u5728\u540e\u9762\uff09\uff0c\u5b57\u9762\u610f\u601d\u5f88\u660e\u786e\u3002\u7531\u4e8e\u6b64\u65f6\u662f\u4fee\u9970\u5728 Spacer \u4e0a\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u6240\u7684\u4e00\u5207\u90fd\u753b\u5728\u4e86 Spacer \u540e\u9762\u3002\u7531\u4e8e Spacer \u9ed8\u8ba4\u80cc\u666f\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6240\u753b\u7684\u5c31\u5b8c\u5168\u5c55\u793a\u51fa\u6765\u4e86\u3002 \u65e2\u7136\u90fd\u804a\u5230\u4e86 drawBehind ,\u518d\u4e0d\u591a\u804a\u804a\u4ed6\u7684\u51e0\u4f4d\u597d\u5144\u5f1f\u591a\u4e0d\u597d\u3002 @Composable fun Canvas ( modifier : Modifier , onDraw : DrawScope .() -> Unit ) = Spacer ( modifier . drawBehind ( onDraw )) DrawModifier \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7ed8\u5236\uff0c\u5b98\u65b9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e09\u4e2a Modifier API\uff0c\u5206\u522b\u662f drawWithContent \u3001 drawBehind \u3001 drawWithCache \u3002 \u63a5\u4e0b\u6765\u7531\u6211\u6765\u4ecb\u7ecd\u8fd9\u4e09\u5144\u5f1f\u662f\u8c01\uff0c\u5e76\u4e14\u8be5\u5982\u4f55\u7528\u3002 drawWithContent drawWithContent \u9700\u8981\u4e00\u4e2aReciever\u4e3a ContentDrawScope \u7c7b\u578b\u7684lambda\uff0c\u800c\u8fd9\u4e2a ContentDrawScope \u62d3\u5c55\u4e86 DrawScope \u7684\u80fd\u529b\uff0c\u591a\u4e86\u4e2a drawContent API\u3002\u8fd9\u4e2a API \u662f\u63d0\u4f9b\u7ed9\u5f00\u53d1\u8005\u6765\u63a7\u5236\u7ed8\u5236\u5c42\u7ea7\u7684\u3002 fun Modifier . drawWithContent ( onDraw : ContentDrawScope .() -> Unit ) interface ContentDrawScope : DrawScope { /** * Causes child drawing operations to run during the `onPaint` lambda. */ fun drawContent () } \u8fd9\u4e2a\u6982\u5ff5\u7c7b\u4f3c\u4e8eView\u7cfb\u7edf\u7684onDraw\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5728 TextView \u7ed8\u5236\u6587\u672c\u7684\u57fa\u7840\u4e0a\u7ed8\u5236\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 super.onDraw() \u4e0e\u6211\u4eec\u81ea\u5df1\u589e\u52a0\u7ed8\u5236\u903b\u8f91\u7684\u8c03\u7528\u5148\u540e\u5173\u7cfb\u4ece\u800c\u786e\u5b9a\u7ed8\u5236\u7684\u5c42\u7ea7\u3002 drawContent \u53ef\u4ee5\u7406\u89e3\u7b49\u4ef7\u4e8e super.onDraw \u7684\u6982\u5ff5\u3002\u8d8a\u65e9\u8fdb\u884c\u7ed8\u5236Z\u8f74\u8d8a\u5c0f\uff0c\u540e\u9762\u7684\u7ed8\u5236\u4f1a\u8986\u76d6\u524d\u9762\u7684\u7ed8\u5236\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u7ed8\u5236\u7684\u5c42\u7ea7\u5173\u7cfb\u3002 class MyTextView ( context : Context ): AppCompatTextView ( context ) { override fun onDraw ( canvas : Canvas?) { // \u5728 TextView \u4e0b\u5c42\u7ed8\u5236\u7684\u63a7\u5236\u903b\u8f91 // ... super . onDraw ( canvas ) // \u5728 TextView \u4e0a\u5c42\u7ed8\u5236\u7684\u63a7\u5236\u903b\u8f91 // ... } } drawBehind drawBehind \uff0c\u753b\u5728\u540e\u9762\u3002\u5177\u4f53\u753b\u5728\u8c01\u540e\u9762\u5462\uff0c\u5177\u4f53\u753b\u5728\u4ed6\u6240\u4fee\u9970\u7684UI\u7ec4\u4ef6\u540e\u9762\u3002\u6839\u636e\u524d\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u5230\uff0c\u5176\u5b9e\u4e0d\u5c31\u662f\u5148\u753b\u6211\u4eec\u81ea\u5df1\u5b9a\u5236\u7684\u7ed8\u5236\u63a7\u5236\u903b\u8f91\u540e\uff0c\u518d\u753bUI\u7ec4\u4ef6\u672c\u8eab\u561b\uff1f\u6211\u4eec\u7ffb\u9605\u6e90\u7801\u53ef\u4ee5\u770b\u5230\u3002 fun Modifier . drawBehind ( onDraw : DrawScope .() -> Unit ) = this . then ( DrawBackgroundModifier ( onDraw = onDraw , // onDraw \u4e3a\u6211\u4eec\u5b9a\u5236\u7684\u7ed8\u5236\u63a7\u5236\u903b\u8f91 ... ) ) private class DrawBackgroundModifier ( val onDraw : DrawScope .() -> Unit , ... ) : DrawModifier , InspectorValueInfo ( inspectorInfo ) { override fun ContentDrawScope . draw () { onDraw () // \u5148\u753b\u6211\u4eec\u5b9a\u5236\u7684\u7ed8\u5236\u63a7\u5236\u903b\u8f91 drawContent () // \u540e\u753bUI\u7ec4\u4ef6\u672c\u8eab } ... } drawWithContent\u4e0edrawBehind\u7684\u6bd4\u8f83\u793a\u4f8b \u6211\u4eec\u6765\u4e3a\u7528\u6237\u5934\u50cf\u589e\u52a0\u4e00\u4e2a\u7ea2\u70b9\u6d88\u606f\u63d0\u9192\u4f5c\u4e3a\u793a\u4f8b\uff08\u7136\u7136\u7ed9\u6211\u53d1\u6d88\u606f\u4e86..\u563f\u563f\ud83e\udd24\uff09 @Preview @Composable fun DrawBefore () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Card ( shape = RoundedCornerShape ( 8. dp ) , modifier = Modifier . size ( 100. dp ) . drawWithContent { drawContent () drawCircle ( Color ( 0 xffe7614e ), 18. dp . toPx () / 2 , center = Offset ( drawContext . size . width , 0f )) } ) { Image ( painter = painterResource ( id = R . drawable . diana ), contentDescription = \"Diana\" ) } } } @Preview @Composable fun DrawBehind () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Card ( shape = RoundedCornerShape ( 8. dp ) , modifier = Modifier . size ( 100. dp ) . drawBehind { drawCircle ( Color ( 0 xffe7614e ), 18. dp . toPx () / 2 , center = Offset ( drawContext . size . width , 0f )) } ) { Image ( painter = painterResource ( id = R . drawable . diana ), contentDescription = \"Diana\" ) } } } \u4f7f\u7528 drawBehind \u9ed8\u8ba4\u5c06\u7ea2\u70b9\u63d0\u9192\u6dfb\u52a0\u5230\u5934\u50cf\u540e\u9762\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528 drawWithContent \u5373\u53ef\u63a7\u5236\u7ed8\u5236\u7684\u5c42\u7ea7\u5173\u7cfb\u4e86\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u90fd\u5e0c\u671b\u5c06\u7ea2\u70b9\u63d0\u9192\u7ed8\u5236\u6700\u9876\u5c42\u3002\u6240\u4ee5\u6b64\u65f6\u5e94\u8be5\u5148 drawContent \uff0c\u540e drawCircle \u3002 drawWithCache \u6709\u4e9b\u65f6\u5019\u6211\u4eec\u7ed8\u5236\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684UI\u6548\u679c\u65f6\uff0c\u4e0d\u5e0c\u671b\u5f53 Recompose \u53d1\u751f\u65f6\u6240\u6709\u7ed8\u753b\u6240\u7528\u7684\u6240\u6709\u5b9e\u4f8b\u90fd\u91cd\u65b0\u6784\u5efa\u4e00\u6b21\uff08\u7c7b\u4f3cPath\uff09\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4ea7\u751f\u5185\u5b58\u6296\u52a8\u3002\u5728 Compose \u4e2d\u6211\u4eec\u4e00\u822c\u80fd\u591f\u60f3\u5230\u4f7f\u7528 remember \u8fdb\u884c\u7f13\u5b58\uff0c\u7136\u800c\u6211\u4eec\u6240\u7ed8\u5236\u7684\u4f5c\u7528\u57df\u662f DrawScope \u5e76\u4e0d\u662f Composable \uff0c\u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528 remember \uff0c\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f drawWithCache \u63d0\u4f9b\u4e86\u8fd9\u4e2a\u80fd\u529b\u3002 \u6253\u5f00 drawWithCache \u7684\u58f0\u660e\u53ef\u4ee5\u770b\u5230\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aReciever\u4e3a CacheDrawScope \u7c7b\u578b\u7684lambda\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u4e00\u4e2a DrawResult \u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b CacheDrawScope \u4e3a\u6211\u4eec\u9650\u5b9a\u4e86\u54ea\u4e9b API\u3002 \u54c8\u54c8\u53ef\u4ee5\u770b\u5230\uff0c CacheDrawScope \u4e2d\u7684 onDrawBehind \u3001 onDrawWithContent \u63d0\u4f9b\u4e86 DrawResult \u7c7b\u578b\u8fd4\u56de\u503c\uff0c\u8fd9\u4e24\u4e2a API \u5b8c\u5168\u7b49\u4ef7\u4e8e drawBehind \u4e0e drawWithContent \u3002\u600e\u4e48\u7528\u5c31\u4e0d\u5fc5\u591a\u8bf4\u4e86\u3002 fun Modifier . drawWithCache ( onBuildDrawCache : CacheDrawScope .() -> DrawResult ) class CacheDrawScope internal constructor () : Density { ... fun onDrawBehind ( block : DrawScope .() -> Unit ): DrawResult fun onDrawWithContent ( block : ContentDrawScope .() -> Unit ): DrawResult ... } drawWithCache \u793a\u4f8b \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6dfb\u52a0\u7528\u6237\u5934\u50cf\u76f8\u6846\u4f5c\u4e3a\u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7\u6539\u53d8\u76f8\u6846\u989c\u8272\u6765\u89e6\u53d1Recompose\u3002\u5f53\u7136\u76f8\u6846\u80af\u5b9a\u662f\u7528 Path \u5b9e\u73b0\u7684\uff0c\u7531\u4e8e\u662f\u6539\u53d8\u76f8\u6846\u989c\u8272\uff0c\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b Recompose \u65f6\u91cd\u5efa Path \u5b9e\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 drawWithCache \u6765\u5b9e\u73b0\u4e86\u3002 @Preview @Composable fun DrawBorder () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Column ( horizontalAlignment = Alignment . CenterHorizontally ) { var borderColor by mutableStateOf ( Color . Red ) Card ( shape = RoundedCornerShape ( 0. dp ) , modifier = Modifier . size ( 100. dp ) . drawWithCache { Log . d ( \"compose_study\" , \"\u6b64\u5904\u4e0d\u4f1a\u53d1\u751f Recompose\" ) var path = Path (). apply { moveTo ( 0f , 0f ) relativeLineTo ( 100. dp . toPx (), 0f ) relativeLineTo ( 0f , 100. dp . toPx ()) relativeLineTo ( - 100. dp . toPx (), 0f ) relativeLineTo ( 0f , - 100. dp . toPx ()) } onDrawWithContent { Log . d ( \"compose_study\" , \"\u6b64\u5904\u4f1a\u53d1\u751f Recompose\" ) drawContent () drawPath ( path = path , color = borderColor , style = Stroke ( width = 10f , ) ) } } ) { Image ( painter = painterResource ( id = R . drawable . diana ), contentDescription = \"Diana\" ) } Spacer ( modifier = Modifier . height ( 20. dp )) Button ( onClick = { borderColor = Color . Yellow }) { Text ( \"Change Color\" ) } } } } \u4e0e\u539f\u751f\u517c\u5bb9 \u524d\u9762\u6211\u4eec\u8bf4\u8fc7 DrawScope \u4e2d\u6240\u63d0\u4f9b\u7684 API \u4ec5\u662f\u4e00\u4e2a\u9ad8\u5c42\u6b21\u7684\u5c01\u88c5\uff0c\u5e95\u5c42\u4ecd\u7136\u662f\u7528\u7684\u662f\u539f\u751f\u5e73\u53f0\u7684 Canvas \u8fdb\u884c\u7ed8\u5236\u3002\u4f5c\u4e3a\u4e00\u4e2a\u9ad8\u5c42\u6b21\u5c01\u88c5\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5e73\u53f0\u901a\u7528\u6027\uff0c\u5fc5\u7136\u4f1a\u5bfc\u81f4\u5177\u4f53\u5e73\u53f0 API \u63d0\u4f9b\u7684\u4e00\u4e9b API \u7684\u4e22\u5931\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5728 Android \u539f\u751f Canvas \u53ef\u4ee5\u7ed8\u5236\u6587\u5b57 drawText \uff0c\u4f46\u8fd9\u5728 DrawScope \u662f\u6ca1\u6709\u88ab\u63d0\u4f9b\u7684\uff0c\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u505a\u5462\u3002 \u5728 DrawScope \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5230 drawContext \u6210\u5458\uff0c drawContext \u5b58\u50a8\u4e86\u4ee5\u4e0b\u4fe1\u606f\u3002 size\uff1a \u7ed8\u5236\u5c3a\u5bf8 canvas\uff1a Compose \u5c01\u88c5\u7684\u9ad8\u5c42\u6b21 Canvas transform\uff1a transform\u63a7\u5236\u5668\uff0c\u7528\u4ee5\u65cb\u8f6c\u3001\u7f29\u653e\u4e0e\u79fb\u52a8 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 canvas.nativeCanvas \u83b7\u53d6\u5177\u4f53\u5e73\u53f0 Canvas \u5b9e\u4f8b\uff0c\u5728 Android \u5e73\u53f0\u5c31\u5bf9\u5e94 AndroidCanvas \uff0c\u901a\u8fc7\u8fd9\u4e2a nativeCanvas \u5c31\u53ef\u4ee5\u8c03\u7528\u5230\u539f\u751f\u5e73\u53f0 Canvas \u65b9\u6cd5\u4e86\u3002\u6240\u4ee5\u5982\u679c\u4f60\u4e0d\u559c\u6b22\u4f7f\u7528 DrawScope \u63d0\u4f9b\u7684\u5e73\u53f0\u901a\u7528 API\u6216\u662f\u9700\u6c42\u9700\u8981\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u539f\u751f\u5e73\u53f0 Canvas \uff0c\u4f46\u8fd9\u6837\u505a\u7684\u4ee3\u4ef7\u5c31\u662f\u4f1a\u4e22\u5931\u5e73\u53f0\u901a\u7528\u6027\uff0c\u5bf9\u4e8e\u4e0d\u540c\u5e73\u53f0\u9700\u8981\u7ed9\u4e88\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u4e0d\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u6a21\u5757\u8fdb\u884c\u63d0\u4f9b\uff0c\u5982\u679c\u4f60\u53ea\u9488\u5bf9 Android \u5e73\u53f0\u8fdb\u884c\u5f00\u53d1\u5c31\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e48\u591a\u4e86\uff0cAndroid \u5e73\u53f0 Canvas \u8fd8\u662f\u5f88\u9999\u7684\u3002 \u81ea\u5b9a\u4e49\u7ed8\u5236\u80fd\u529b\u7684\u8fdb\u9636 \u5982\u679c\u4f60\u4e0d\u6ee1\u8db3\u4e8e\u7b80\u5355\u7684UI\u6837\u5f0f\u7ed8\u5236\uff0c\u76ee\u524d\u56fd\u5185\u5df2\u7ecf\u6709\u8bb8\u591a\u4f18\u79c0\u6280\u672f\u6587\u7ae0\u53ef\u4ee5\u4f9b\u4f60\u53c2\u8003\u4e0e\u5b66\u4e60\u4e86\uff0c\u4ee5\u4e0b\u63a8\u8350\u7684\u662f \u8def\u5f88\u957fOoO \u5927\u4f6c\u5728\u6398\u91d1\u793e\u533a\u5206\u4eab\u7684\u6709\u5173Compose \u81ea\u5b9a\u4e49\u7ed8\u5236\u7cfb\u5217\u6280\u672f\u6587\u7ae0\u3002 JetPack-Compose - \u81ea\u5b9a\u4e49\u7ed8\u5236 JetPack-Compose - Flutter \u52a8\u6001UI? JetPack-Compose \u6c34\u58a8\u753b\u6548\u679c Jetpack\u2014Compose UI\u7ec8\u7ed3\u7bc7","title":"\u7ed8\u5236 (Graphics)"},{"location":"design/draw/custom_draw/#_1","text":"Jetpack Compose \u4f5c\u4e3a\u4e00\u6b3e UI \u6846\u67b6\uff0c\u81ea\u5b9a\u4e49\u7ed8\u5236\u90e8\u5206\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u901a\u8fc7\u5b98\u65b9\u6240\u63d0\u4f9b\u7684\u57fa\u7840 API\uff0c \u5141\u8bb8\u5f00\u53d1\u8005\u5b9e\u73b0\u5404\u79cd\u573a\u666f\u4e0b\u7684\u7ed8\u5236\u5b9a\u5236\u9700\u6c42\u3002\u5982\u679c\u4f60\u5bf9 Android \u539f\u751f Canvas \u5df2\u7ecf\u4e86\u5982\u6307\u638c\u7684\u8bdd\uff0c\u90a3\u4e48\u8fc1\u79fb\u81f3 Jetpack Compose \u57fa\u672c\u6ca1\u6709\u4efb\u4f55\u6210\u672c\u3002\u5373\u4f7f\u4f60\u4e0d\u66fe\u4e86\u89e3 Android \u539f\u751f Canvas \u4e5f\u4e0d\u8981\u62c5\u5fc3\uff0c\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u4f60\u540c\u6837\u4e5f\u53ef\u4ee5\u638c\u63e1\u5982\u4f55\u5728 Jetpack Compose \u5b8c\u6210\u81ea\u5b9a\u4e49\u7ed8\u5236\u3002","title":"\u6982\u8ff0"},{"location":"design/draw/custom_draw/#canvas-composable","text":"Canvas Composable \u662f\u5b98\u65b9\u63d0\u4f9b\u7684\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u81ea\u5b9a\u4e49\u7ed8\u5236\u7684\u72ec\u7acb\u7ec4\u4ef6\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u4e0d\u5305\u542b\u4efb\u4f55\u5b50\u5143\u7d20\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u7edfView\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u72ec\u7acbView\uff08\u4e0d\u662fViewGroup\uff0c\u4e0d\u5305\u542b\u5b50View\uff09\u3002\u4f5c\u4e3a\u4e00\u4e2a\u201d\u72ec\u7acbView\u201c\uff0c\u6211\u4eec\u540c\u6837\u4e5f\u53ef\u4ee5\u901a\u8fc7 Layout Modifier \u6765\u5b9a\u5236\u6d4b\u91cf\u5e03\u5c40\u8fc7\u7a0b\uff0c\u6709\u5173\u4e8e\u6d4b\u91cf\u5e03\u5c40\u7684\u5b9a\u5236\u53ef\u4ee5\u62d3\u5c55\u9605\u8bfb \u81ea\u5b9a\u4e49Layout \u3002 Canvas\u53c2\u6570\u6709\u4e24\u4e2a\u53c2\u6570, \u7c7b\u578b\u5206\u522b\u662f Modifier \u4e0e DrawScope.() -> Unit \u3002Modifier \u4f5c\u4e3a\u8be5\u7ec4\u4ef6\u7684\u4fee\u9970\u7b26\u4e0d\u96be\u7406\u89e3\uff0c DrawScope.() -> Unit \u662f\u4e00\u4e2a reciever \u4e3a DrawScope \u7c7b\u578b\u7684 lambda\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 lambda \u4e2d\u4efb\u610f\u4f7f\u7528 DrawScope \u4e3a\u6211\u4eec\u6240\u63d0\u4f9b\u7684 API \u4e86\u3002 fun Canvas ( modifier : Modifier , onDraw : DrawScope .() -> Unit ) \u6211\u4eec\u6765\u770b\u770b DrawScope \u4e3a\u6211\u4eec\u9650\u5b9a\u4e86\u54ea\u4e9b API\u3002\u8fd9\u4e9b API \u5b57\u9762\u610f\u601d\u5f88\u597d\u7406\u89e3\uff0c\u5728\u4f7f\u7528\u65f6\u4e34\u65f6\u67e5\u627e\u5373\u53ef\u3002 API \u63cf\u8ff0 drawLine \u7ed8\u5236\u4e00\u6761\u7ebf drawRect \u7ed8\u5236\u4e00\u4e2a\u77e9\u5f62 drawImage \u7ed8\u5236\u4e00\u5f20\u56fe\u7247 drawRoundRect \u7ed8\u5236\u4e00\u4e2a\u5706\u89d2\u77e9\u5f62 drawCircle \u7ed8\u5236\u4e00\u4e2a\u5706 drawOval \u7ed8\u5236\u4e00\u4e2a\u692d\u5706 drawArc \u7ed8\u5236\u4e00\u6761\u5f27\u7ebf drawPath \u7ed8\u5236\u4e00\u6761\u8def\u5f84 drawPoints \u7ed8\u5236\u4e00\u4e9b\u70b9","title":"\u4ece Canvas Composable \u5f00\u59cb"},{"location":"design/draw/custom_draw/#_2","text":"\u8ba9\u6211\u4eec\u753b\u4e00\u4e2a\u7b80\u5355\u7684\u5706\u73af\u4f5c\u4e3a\u793a\u4f8b\u3002 @Preview @Composable fun DrawColorRing () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { var radius = 300. dp var ringWidth = 30. dp Canvas ( modifier = Modifier . size ( radius )) { this . drawCircle ( // \u753b\u5706 brush = Brush . sweepGradient ( listOf ( Color . Red , Color . Green , Color . Red ), Offset ( radius . toPx () / 2f , radius . toPx () / 2f )), radius = radius . toPx () / 2f , style = Stroke ( width = ringWidth . toPx () ) ) } } } Jetpack Compose \u4f5c\u4e3a\u4e00\u6b3e\u8de8\u5e73\u53f0 UI \u6846\u67b6\uff0c\u6240\u4f7f\u7528 Canvas \u53ea\u662f\u4e00\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u5c01\u88c5\uff0c\u6700\u7ec8\u8fd8\u662f\u843d\u5b9e\u5230\u5177\u4f53\u5e73\u53f0\u7684Canvas\u5b9e\u73b0\u7684\u3002\u6240\u4ee5\u5728 Android \u5e73\u53f0\u5373\u4f7f\u6211\u4eec\u4f7f\u7528\u7684\u662f DrawScope \u4e3a\u6211\u4eec\u6240\u63d0\u4f9b\u7684 API \uff0c\u6700\u7ec8\u4ecd\u7136\u8fd8\u662f\u4f1a\u4f7f\u7528\u5230Android\u539f\u751f\u7684Canvas\u7684\u3002\u5982\u679c\u4f60\u66fe\u7ecf\u5728\u4f20\u7edfView\u7cfb\u7edf\u4e2d\u505a\u8fc7\u81ea\u5b9a\u4e49\u7ed8\u5236\uff0c\u5728\u7ed8\u5236\u5904\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u611f\u89c9 Compose \u597d\u50cf\u5c11\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u4e1c\u897f \u2014\u2014 Paint \u753b\u7b14 \uff0c\u96be\u4e0d\u6210\u6bcf\u6b21\u7ed8\u5236\u65f6\u90fd\u4f1a\u6839\u636e API \u5982\u6b64\u53c2\u6570\u4e0d\u540c\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Painter ?\u5176\u5b9e\u6211\u4eec\u7684 DrawScope \u4f1a\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u753b\u7b14\u8fdb\u884c\u7f13\u5b58\u7684\uff0c\u6240\u4ee5\u6027\u80fd\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 // CanvasDrawScope private fun obtainFillPaint (): Paint = fillPaint ?: Paint (). apply { style = PaintingStyle . Fill }. also { fillPaint = it } private fun obtainStrokePaint (): Paint = strokePaint ?: Paint (). apply { style = PaintingStyle . Stroke }. also { strokePaint = it } private fun selectPaint ( drawStyle : DrawStyle ): Paint = when ( drawStyle ) { Fill -> obtainFillPaint () is Stroke -> obtainStrokePaint () . apply { if ( strokeWidth != drawStyle . width ) strokeWidth = drawStyle . width if ( strokeCap != drawStyle . cap ) strokeCap = drawStyle . cap if ( strokeMiterLimit != drawStyle . miter ) strokeMiterLimit = drawStyle . miter if ( strokeJoin != drawStyle . join ) strokeJoin = drawStyle . join if ( pathEffect != drawStyle . pathEffect ) pathEffect = drawStyle . pathEffect } } \u6253\u5f00 Canvas Composable \u7684\u5b9e\u73b0\u53ef\u4ee5\u53d1\u73b0\u4ed6\u5176\u5b9e\u5c31\u662f\u4e2a Spacer \u5957\u58f3\uff0c\u771f\u6b63\u53d1\u6325\u7ed8\u5236\u4f5c\u7528\u7684\u5176\u5b9e\u662f\u8fd9\u4e2a Modifier.drawBehind() \u3002drawBehind\uff08\u753b\u5728\u540e\u9762\uff09\uff0c\u5b57\u9762\u610f\u601d\u5f88\u660e\u786e\u3002\u7531\u4e8e\u6b64\u65f6\u662f\u4fee\u9970\u5728 Spacer \u4e0a\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u6240\u7684\u4e00\u5207\u90fd\u753b\u5728\u4e86 Spacer \u540e\u9762\u3002\u7531\u4e8e Spacer \u9ed8\u8ba4\u80cc\u666f\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6240\u753b\u7684\u5c31\u5b8c\u5168\u5c55\u793a\u51fa\u6765\u4e86\u3002 \u65e2\u7136\u90fd\u804a\u5230\u4e86 drawBehind ,\u518d\u4e0d\u591a\u804a\u804a\u4ed6\u7684\u51e0\u4f4d\u597d\u5144\u5f1f\u591a\u4e0d\u597d\u3002 @Composable fun Canvas ( modifier : Modifier , onDraw : DrawScope .() -> Unit ) = Spacer ( modifier . drawBehind ( onDraw ))","title":"\u7b80\u5355\u793a\u4f8b"},{"location":"design/draw/custom_draw/#drawmodifier","text":"\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7ed8\u5236\uff0c\u5b98\u65b9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e09\u4e2a Modifier API\uff0c\u5206\u522b\u662f drawWithContent \u3001 drawBehind \u3001 drawWithCache \u3002 \u63a5\u4e0b\u6765\u7531\u6211\u6765\u4ecb\u7ecd\u8fd9\u4e09\u5144\u5f1f\u662f\u8c01\uff0c\u5e76\u4e14\u8be5\u5982\u4f55\u7528\u3002","title":"DrawModifier"},{"location":"design/draw/custom_draw/#drawwithcontent","text":"drawWithContent \u9700\u8981\u4e00\u4e2aReciever\u4e3a ContentDrawScope \u7c7b\u578b\u7684lambda\uff0c\u800c\u8fd9\u4e2a ContentDrawScope \u62d3\u5c55\u4e86 DrawScope \u7684\u80fd\u529b\uff0c\u591a\u4e86\u4e2a drawContent API\u3002\u8fd9\u4e2a API \u662f\u63d0\u4f9b\u7ed9\u5f00\u53d1\u8005\u6765\u63a7\u5236\u7ed8\u5236\u5c42\u7ea7\u7684\u3002 fun Modifier . drawWithContent ( onDraw : ContentDrawScope .() -> Unit ) interface ContentDrawScope : DrawScope { /** * Causes child drawing operations to run during the `onPaint` lambda. */ fun drawContent () } \u8fd9\u4e2a\u6982\u5ff5\u7c7b\u4f3c\u4e8eView\u7cfb\u7edf\u7684onDraw\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5728 TextView \u7ed8\u5236\u6587\u672c\u7684\u57fa\u7840\u4e0a\u7ed8\u5236\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 super.onDraw() \u4e0e\u6211\u4eec\u81ea\u5df1\u589e\u52a0\u7ed8\u5236\u903b\u8f91\u7684\u8c03\u7528\u5148\u540e\u5173\u7cfb\u4ece\u800c\u786e\u5b9a\u7ed8\u5236\u7684\u5c42\u7ea7\u3002 drawContent \u53ef\u4ee5\u7406\u89e3\u7b49\u4ef7\u4e8e super.onDraw \u7684\u6982\u5ff5\u3002\u8d8a\u65e9\u8fdb\u884c\u7ed8\u5236Z\u8f74\u8d8a\u5c0f\uff0c\u540e\u9762\u7684\u7ed8\u5236\u4f1a\u8986\u76d6\u524d\u9762\u7684\u7ed8\u5236\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u7ed8\u5236\u7684\u5c42\u7ea7\u5173\u7cfb\u3002 class MyTextView ( context : Context ): AppCompatTextView ( context ) { override fun onDraw ( canvas : Canvas?) { // \u5728 TextView \u4e0b\u5c42\u7ed8\u5236\u7684\u63a7\u5236\u903b\u8f91 // ... super . onDraw ( canvas ) // \u5728 TextView \u4e0a\u5c42\u7ed8\u5236\u7684\u63a7\u5236\u903b\u8f91 // ... } }","title":"drawWithContent"},{"location":"design/draw/custom_draw/#drawbehind","text":"drawBehind \uff0c\u753b\u5728\u540e\u9762\u3002\u5177\u4f53\u753b\u5728\u8c01\u540e\u9762\u5462\uff0c\u5177\u4f53\u753b\u5728\u4ed6\u6240\u4fee\u9970\u7684UI\u7ec4\u4ef6\u540e\u9762\u3002\u6839\u636e\u524d\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u5230\uff0c\u5176\u5b9e\u4e0d\u5c31\u662f\u5148\u753b\u6211\u4eec\u81ea\u5df1\u5b9a\u5236\u7684\u7ed8\u5236\u63a7\u5236\u903b\u8f91\u540e\uff0c\u518d\u753bUI\u7ec4\u4ef6\u672c\u8eab\u561b\uff1f\u6211\u4eec\u7ffb\u9605\u6e90\u7801\u53ef\u4ee5\u770b\u5230\u3002 fun Modifier . drawBehind ( onDraw : DrawScope .() -> Unit ) = this . then ( DrawBackgroundModifier ( onDraw = onDraw , // onDraw \u4e3a\u6211\u4eec\u5b9a\u5236\u7684\u7ed8\u5236\u63a7\u5236\u903b\u8f91 ... ) ) private class DrawBackgroundModifier ( val onDraw : DrawScope .() -> Unit , ... ) : DrawModifier , InspectorValueInfo ( inspectorInfo ) { override fun ContentDrawScope . draw () { onDraw () // \u5148\u753b\u6211\u4eec\u5b9a\u5236\u7684\u7ed8\u5236\u63a7\u5236\u903b\u8f91 drawContent () // \u540e\u753bUI\u7ec4\u4ef6\u672c\u8eab } ... }","title":"drawBehind"},{"location":"design/draw/custom_draw/#drawwithcontentdrawbehind","text":"\u6211\u4eec\u6765\u4e3a\u7528\u6237\u5934\u50cf\u589e\u52a0\u4e00\u4e2a\u7ea2\u70b9\u6d88\u606f\u63d0\u9192\u4f5c\u4e3a\u793a\u4f8b\uff08\u7136\u7136\u7ed9\u6211\u53d1\u6d88\u606f\u4e86..\u563f\u563f\ud83e\udd24\uff09 @Preview @Composable fun DrawBefore () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Card ( shape = RoundedCornerShape ( 8. dp ) , modifier = Modifier . size ( 100. dp ) . drawWithContent { drawContent () drawCircle ( Color ( 0 xffe7614e ), 18. dp . toPx () / 2 , center = Offset ( drawContext . size . width , 0f )) } ) { Image ( painter = painterResource ( id = R . drawable . diana ), contentDescription = \"Diana\" ) } } } @Preview @Composable fun DrawBehind () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Card ( shape = RoundedCornerShape ( 8. dp ) , modifier = Modifier . size ( 100. dp ) . drawBehind { drawCircle ( Color ( 0 xffe7614e ), 18. dp . toPx () / 2 , center = Offset ( drawContext . size . width , 0f )) } ) { Image ( painter = painterResource ( id = R . drawable . diana ), contentDescription = \"Diana\" ) } } } \u4f7f\u7528 drawBehind \u9ed8\u8ba4\u5c06\u7ea2\u70b9\u63d0\u9192\u6dfb\u52a0\u5230\u5934\u50cf\u540e\u9762\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528 drawWithContent \u5373\u53ef\u63a7\u5236\u7ed8\u5236\u7684\u5c42\u7ea7\u5173\u7cfb\u4e86\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u90fd\u5e0c\u671b\u5c06\u7ea2\u70b9\u63d0\u9192\u7ed8\u5236\u6700\u9876\u5c42\u3002\u6240\u4ee5\u6b64\u65f6\u5e94\u8be5\u5148 drawContent \uff0c\u540e drawCircle \u3002","title":"drawWithContent\u4e0edrawBehind\u7684\u6bd4\u8f83\u793a\u4f8b"},{"location":"design/draw/custom_draw/#drawwithcache","text":"\u6709\u4e9b\u65f6\u5019\u6211\u4eec\u7ed8\u5236\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684UI\u6548\u679c\u65f6\uff0c\u4e0d\u5e0c\u671b\u5f53 Recompose \u53d1\u751f\u65f6\u6240\u6709\u7ed8\u753b\u6240\u7528\u7684\u6240\u6709\u5b9e\u4f8b\u90fd\u91cd\u65b0\u6784\u5efa\u4e00\u6b21\uff08\u7c7b\u4f3cPath\uff09\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4ea7\u751f\u5185\u5b58\u6296\u52a8\u3002\u5728 Compose \u4e2d\u6211\u4eec\u4e00\u822c\u80fd\u591f\u60f3\u5230\u4f7f\u7528 remember \u8fdb\u884c\u7f13\u5b58\uff0c\u7136\u800c\u6211\u4eec\u6240\u7ed8\u5236\u7684\u4f5c\u7528\u57df\u662f DrawScope \u5e76\u4e0d\u662f Composable \uff0c\u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528 remember \uff0c\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u529e\u5462\uff1f drawWithCache \u63d0\u4f9b\u4e86\u8fd9\u4e2a\u80fd\u529b\u3002 \u6253\u5f00 drawWithCache \u7684\u58f0\u660e\u53ef\u4ee5\u770b\u5230\uff0c\u9700\u8981\u4f20\u5165\u4e00\u4e2aReciever\u4e3a CacheDrawScope \u7c7b\u578b\u7684lambda\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u4e00\u4e2a DrawResult \u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b CacheDrawScope \u4e3a\u6211\u4eec\u9650\u5b9a\u4e86\u54ea\u4e9b API\u3002 \u54c8\u54c8\u53ef\u4ee5\u770b\u5230\uff0c CacheDrawScope \u4e2d\u7684 onDrawBehind \u3001 onDrawWithContent \u63d0\u4f9b\u4e86 DrawResult \u7c7b\u578b\u8fd4\u56de\u503c\uff0c\u8fd9\u4e24\u4e2a API \u5b8c\u5168\u7b49\u4ef7\u4e8e drawBehind \u4e0e drawWithContent \u3002\u600e\u4e48\u7528\u5c31\u4e0d\u5fc5\u591a\u8bf4\u4e86\u3002 fun Modifier . drawWithCache ( onBuildDrawCache : CacheDrawScope .() -> DrawResult ) class CacheDrawScope internal constructor () : Density { ... fun onDrawBehind ( block : DrawScope .() -> Unit ): DrawResult fun onDrawWithContent ( block : ContentDrawScope .() -> Unit ): DrawResult ... }","title":"drawWithCache"},{"location":"design/draw/custom_draw/#drawwithcache_1","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6dfb\u52a0\u7528\u6237\u5934\u50cf\u76f8\u6846\u4f5c\u4e3a\u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7\u6539\u53d8\u76f8\u6846\u989c\u8272\u6765\u89e6\u53d1Recompose\u3002\u5f53\u7136\u76f8\u6846\u80af\u5b9a\u662f\u7528 Path \u5b9e\u73b0\u7684\uff0c\u7531\u4e8e\u662f\u6539\u53d8\u76f8\u6846\u989c\u8272\uff0c\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b Recompose \u65f6\u91cd\u5efa Path \u5b9e\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 drawWithCache \u6765\u5b9e\u73b0\u4e86\u3002 @Preview @Composable fun DrawBorder () { Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Column ( horizontalAlignment = Alignment . CenterHorizontally ) { var borderColor by mutableStateOf ( Color . Red ) Card ( shape = RoundedCornerShape ( 0. dp ) , modifier = Modifier . size ( 100. dp ) . drawWithCache { Log . d ( \"compose_study\" , \"\u6b64\u5904\u4e0d\u4f1a\u53d1\u751f Recompose\" ) var path = Path (). apply { moveTo ( 0f , 0f ) relativeLineTo ( 100. dp . toPx (), 0f ) relativeLineTo ( 0f , 100. dp . toPx ()) relativeLineTo ( - 100. dp . toPx (), 0f ) relativeLineTo ( 0f , - 100. dp . toPx ()) } onDrawWithContent { Log . d ( \"compose_study\" , \"\u6b64\u5904\u4f1a\u53d1\u751f Recompose\" ) drawContent () drawPath ( path = path , color = borderColor , style = Stroke ( width = 10f , ) ) } } ) { Image ( painter = painterResource ( id = R . drawable . diana ), contentDescription = \"Diana\" ) } Spacer ( modifier = Modifier . height ( 20. dp )) Button ( onClick = { borderColor = Color . Yellow }) { Text ( \"Change Color\" ) } } } }","title":"drawWithCache \u793a\u4f8b"},{"location":"design/draw/custom_draw/#_3","text":"\u524d\u9762\u6211\u4eec\u8bf4\u8fc7 DrawScope \u4e2d\u6240\u63d0\u4f9b\u7684 API \u4ec5\u662f\u4e00\u4e2a\u9ad8\u5c42\u6b21\u7684\u5c01\u88c5\uff0c\u5e95\u5c42\u4ecd\u7136\u662f\u7528\u7684\u662f\u539f\u751f\u5e73\u53f0\u7684 Canvas \u8fdb\u884c\u7ed8\u5236\u3002\u4f5c\u4e3a\u4e00\u4e2a\u9ad8\u5c42\u6b21\u5c01\u88c5\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5e73\u53f0\u901a\u7528\u6027\uff0c\u5fc5\u7136\u4f1a\u5bfc\u81f4\u5177\u4f53\u5e73\u53f0 API \u63d0\u4f9b\u7684\u4e00\u4e9b API \u7684\u4e22\u5931\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5728 Android \u539f\u751f Canvas \u53ef\u4ee5\u7ed8\u5236\u6587\u5b57 drawText \uff0c\u4f46\u8fd9\u5728 DrawScope \u662f\u6ca1\u6709\u88ab\u63d0\u4f9b\u7684\uff0c\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u505a\u5462\u3002 \u5728 DrawScope \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5230 drawContext \u6210\u5458\uff0c drawContext \u5b58\u50a8\u4e86\u4ee5\u4e0b\u4fe1\u606f\u3002 size\uff1a \u7ed8\u5236\u5c3a\u5bf8 canvas\uff1a Compose \u5c01\u88c5\u7684\u9ad8\u5c42\u6b21 Canvas transform\uff1a transform\u63a7\u5236\u5668\uff0c\u7528\u4ee5\u65cb\u8f6c\u3001\u7f29\u653e\u4e0e\u79fb\u52a8 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 canvas.nativeCanvas \u83b7\u53d6\u5177\u4f53\u5e73\u53f0 Canvas \u5b9e\u4f8b\uff0c\u5728 Android \u5e73\u53f0\u5c31\u5bf9\u5e94 AndroidCanvas \uff0c\u901a\u8fc7\u8fd9\u4e2a nativeCanvas \u5c31\u53ef\u4ee5\u8c03\u7528\u5230\u539f\u751f\u5e73\u53f0 Canvas \u65b9\u6cd5\u4e86\u3002\u6240\u4ee5\u5982\u679c\u4f60\u4e0d\u559c\u6b22\u4f7f\u7528 DrawScope \u63d0\u4f9b\u7684\u5e73\u53f0\u901a\u7528 API\u6216\u662f\u9700\u6c42\u9700\u8981\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u539f\u751f\u5e73\u53f0 Canvas \uff0c\u4f46\u8fd9\u6837\u505a\u7684\u4ee3\u4ef7\u5c31\u662f\u4f1a\u4e22\u5931\u5e73\u53f0\u901a\u7528\u6027\uff0c\u5bf9\u4e8e\u4e0d\u540c\u5e73\u53f0\u9700\u8981\u7ed9\u4e88\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u4e0d\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u6a21\u5757\u8fdb\u884c\u63d0\u4f9b\uff0c\u5982\u679c\u4f60\u53ea\u9488\u5bf9 Android \u5e73\u53f0\u8fdb\u884c\u5f00\u53d1\u5c31\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e48\u591a\u4e86\uff0cAndroid \u5e73\u53f0 Canvas \u8fd8\u662f\u5f88\u9999\u7684\u3002","title":"\u4e0e\u539f\u751f\u517c\u5bb9"},{"location":"design/draw/custom_draw/#_4","text":"\u5982\u679c\u4f60\u4e0d\u6ee1\u8db3\u4e8e\u7b80\u5355\u7684UI\u6837\u5f0f\u7ed8\u5236\uff0c\u76ee\u524d\u56fd\u5185\u5df2\u7ecf\u6709\u8bb8\u591a\u4f18\u79c0\u6280\u672f\u6587\u7ae0\u53ef\u4ee5\u4f9b\u4f60\u53c2\u8003\u4e0e\u5b66\u4e60\u4e86\uff0c\u4ee5\u4e0b\u63a8\u8350\u7684\u662f \u8def\u5f88\u957fOoO \u5927\u4f6c\u5728\u6398\u91d1\u793e\u533a\u5206\u4eab\u7684\u6709\u5173Compose \u81ea\u5b9a\u4e49\u7ed8\u5236\u7cfb\u5217\u6280\u672f\u6587\u7ae0\u3002 JetPack-Compose - \u81ea\u5b9a\u4e49\u7ed8\u5236 JetPack-Compose - Flutter \u52a8\u6001UI? JetPack-Compose \u6c34\u58a8\u753b\u6548\u679c Jetpack\u2014Compose UI\u7ec8\u7ed3\u7bc7","title":"\u81ea\u5b9a\u4e49\u7ed8\u5236\u80fd\u529b\u7684\u8fdb\u9636"},{"location":"design/gesture/custom_gesture/","text":"\u6982\u8ff0 Jetpack Compose \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u624b\u52bf\u5904\u7406 Modifier\uff0c\u5bf9\u4e8e\u5e38\u89c1\u4e1a\u52a1\u9700\u6c42\u6765\u8bf4\u5df2\u8db3\u591f\u6211\u4eec\u4f7f\u7528\u4e86\uff0c\u7136\u800c\u5982\u679c\u8bf4\u6211\u4eec\u5bf9\u624b\u52bf\u6709\u5b9a\u5236\u9700\u6c42\uff0c\u5c31\u9700\u8981\u5177\u5907\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u7684\u80fd\u529b\u4e86\u3002\u901a\u8fc7\u4f7f\u7528\u5b98\u65b9\u6240\u63d0\u4f9b\u7684\u57fa\u7840 API \u6765\u5b8c\u6210\u5404\u7c7b\u624b\u52bf\u4ea4\u4e92\u9700\u6c42\uff0c\u89e6\u6478\u53cd\u9988\u57fa\u7840 API \u7c7b\u4f3c\u4f20\u7edf View \u7cfb\u7edf\u7684 onTouchEvent() \u3002 \u5f53\u7136 Compose \u4e2d\u4e5f\u652f\u6301\u7c7b\u4f3c\u4f20\u7edf ViewGroup \u901a\u8fc7 onInterceptTouchEvent() \u5b9a\u5236\u624b\u52bf\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u3002\u901a\u8fc7\u5bf9\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u7684\u5b66\u4e60\u5c06\u5e2e\u52a9\u5927\u5bb6\u638c\u63e1\u5904\u7406\u7edd\u5927\u591a\u6570\u573a\u666f\u4e0b\u624b\u52bf\u9700\u6c42\u7684\u80fd\u529b\u3002 \u4f7f\u7528 PointerInput Modifier \u5bf9\u4e8e\u6240\u6709\u624b\u52bf\u64cd\u4f5c\u7684\u5904\u7406\u90fd\u9700\u8981\u5c01\u88c5\u5728\u8fd9\u4e2a Modifier \u4e2d\uff0c\u6211\u4eec\u77e5\u9053 Modifier \u662f\u7528\u6765\u4fee\u9970 UI \u7ec4\u4ef6\u7684\uff0c\u6240\u4ee5\u5c06\u624b\u52bf\u64cd\u4f5c\u7684\u5904\u7406\u5c01\u88c5\u5728 Modifier \u7b26\u5408\u5f00\u53d1\u8005\u8bbe\u8ba1\u76f4\u89c9\uff0c\u8fd9\u540c\u65f6\u4e5f\u505a\u5230\u4e86\u624b\u52bf\u5904\u7406\u903b\u8f91\u4e0e UI \u89c6\u56fe\u7684\u89e3\u8026\uff0c\u4ece\u800c\u63d0\u9ad8\u590d\u7528\u6027\u3002 \u901a\u8fc7\u7ffb\u9605 Swipeable Modifier \u3001 Draggable Modifier \u4ee5\u53ca Transformer Modifier \uff0c\u6211\u4eec\u90fd\u80fd\u770b\u5230 PointerInput Modifier \u7684\u8eab\u5f71\u3002\u56e0\u4e3a\u8fd9\u7c7b\u4e0a\u5c42\u7684\u624b\u52bf\u5904\u7406 Modifier \u5176\u5b9e\u90fd\u662f\u57fa\u4e8e\u8fd9\u4e2a\u57fa\u7840 Modifier \u5b9e\u73b0\u7684\u3002\u6240\u4ee5\u65e2\u7136\u8981\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6d41\u7a0b\uff0c\u81ea\u5b9a\u4e49\u903b\u8f91\u4e5f\u5fc5\u7136\u8981\u5728\u8fd9\u4e2a Modifier \u4e2d\u8fdb\u884c\u5b9e\u73b0\u3002 \u901a\u8fc7 PointerInput Modifier \u5b9e\u73b0\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u6240\u5b9a\u4e49\u7684\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6d41\u7a0b\u5747\u53d1\u751f\u5728 PointerInputScope \u4e2d\uff0csuspend \u5173\u952e\u5b57\u4e5f\u544a\u77e5\u6211\u4eec\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6d41\u7a0b\u662f\u53d1\u751f\u5728\u534f\u7a0b\u4e2d\u3002\u8fd9\u5176\u5b9e\u662f\u65e0\u53ef\u539a\u975e\u7684\uff0c\u5728\u63a2\u7d22\u91cd\u7ec4\u5de5\u4f5c\u539f\u7406\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e5f\u7ecf\u5e38\u80fd\u591f\u770b\u5230\u534f\u7a0b\u7684\u8eab\u5f71\u3002\u4f34\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u4e3b\u6d41\u5f00\u53d1\u6280\u672f\u62e5\u62b1\u534f\u7a0b\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u534f\u7a0b\u6210\u4e86 Android \u5f00\u53d1\u8005\u672a\u6765\u5fc5\u987b\u638c\u63e1\u7684\u6280\u80fd\u3002\u63a8\u5e7f\u534f\u7a0b\u540c\u65f6\u5176\u5b9e\u4e5f\u662f\u5728\u63a8\u5e7f Kotlin\uff0c\u5373\u4f7f\u5b98\u65b9\u4e00\u76f4\u5f3a\u8c03\u4e0d\u4f1a\u653e\u5f03 Java\uff0c\u7136\u800c\u8c01\u53c8\u4f1a\u5728 Java \u4e2d\u4f7f\u7528 Kotlin \u534f\u7a0b\u5462\uff1f fun Modifier . pointerInput ( vararg keys : Any? , block : suspend PointerInputScope .() -> Unit ): Modifier = composed ( ... ) { ... remember ( density ) { SuspendingPointerInputFilter ( viewConfiguration , density ) }. apply { LaunchedEffect ( this , * keys ) { block () } } } \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u770b\u770b PointerInputScope \u4f5c\u7528\u57df\u4e2d\uff0c\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b API \u6765\u5904\u7406\u624b\u52bf\u4ea4\u4e92\u3002\u672c\u6587\u5c06\u4f1a\u6839\u636e\u624b\u52bf\u80fd\u529b\u5206\u7c7b\u8fdb\u884c\u89e3\u91ca\u8bf4\u660e\u3002 \u62d6\u52a8\u7c7b\u578b\u57fa\u7840 API API \u4ecb\u7ecd API\u540d\u79f0 \u4f5c\u7528 detectDragGestures \u76d1\u542c\u62d6\u52a8\u624b\u52bf detectDragGesturesAfterLongPress \u76d1\u542c\u957f\u6309\u540e\u7684\u62d6\u52a8\u624b\u52bf detectHorizontalDragGestures \u76d1\u542c\u6c34\u5e73\u62d6\u52a8\u624b\u52bf detectVerticalDragGestures \u76d1\u542c\u5782\u76f4\u62d6\u52a8\u624b\u52bf \u8c08\u53ca\u62d6\u52a8\uff0c\u8bb8\u591a\u4eba\u7b2c\u4e00\u4e2a\u53cd\u5e94\u5c31\u662f Draggable Modifier \uff0c\u56e0\u4e3a Draggable Modifier \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u76d1\u542c UI \u7ec4\u4ef6\u62d6\u52a8\u80fd\u529b\u3002\u7136\u800c Draggable Modifier \u5728\u63d0\u4f9b\u4e86\u76d1\u542c UI \u7ec4\u4ef6\u62d6\u52a8\u80fd\u529b\u7684\u540c\u65f6\u4e5f\u62d3\u5c55\u589e\u52a0\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u901a\u8fc7 Draggable Modifier \u53c2\u6570\u5217\u8868\u5373\u53ef\u770b\u51fa\u3002\u4f8b\u5982\u901a\u8fc7\u4f7f\u7528 DraggableState \u5141\u8bb8\u5f00\u53d1\u8005\u6839\u636e\u9700\u6c42\u4f7f UI \u7ec4\u4ef6\u81ea\u52a8\u88ab\u62d6\u52a8\u3002 fun Modifier . draggable ( state : DraggableState , orientation : Orientation , enabled : Boolean = true , interactionSource : MutableInteractionSource? = null , startDragImmediately : Boolean = false , onDragStarted : suspend CoroutineScope .( startedPosition : Offset ) -> Unit = {}, onDragStopped : suspend CoroutineScope .( velocity : Float ) -> Unit = {}, reverseDirection : Boolean = false ) \u6211\u4eec\u4e0a\u9762\u6240\u7f57\u5217\u7684\u8fd9\u4e9b\u62d6\u52a8 API \u53ea\u63d0\u4f9b\u4e86\u76d1\u542c UI \u7ec4\u4ef6\u62d6\u52a8\u7684\u80fd\u529b\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u4e3a\u5176\u62d3\u5c55\u529f\u80fd\uff0c\u8fd9\u4e5f\u662f\u8fd9\u4e9bAPI\u6240\u5b58\u5728\u7684\u610f\u4e49\u3002\u6211\u4eec\u4ece\u5b57\u9762\u4e0a\u5c31\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a API \u6240\u5bf9\u5e94\u7684\u542b\u4e49\uff0c\u7531\u4e8e\u8fd9\u4e9bAPI\u7684\u529f\u80fd\u4e0e\u53c2\u6570\u76f8\u8fd1\uff0c\u8fd9\u91cc\u6211\u4eec\u4ec5\u4ee5 detectDragGestures \u4f5c\u4e3a\u4e3e\u4f8b\u8bf4\u660e\u3002 \u4e3e\u4f8b\u8bf4\u660e \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5b8c\u6210\u4e00\u4e2a\u7eff\u8272\u65b9\u5757\u7684\u624b\u52bf\u62d6\u52a8\u3002\u5728 Draggabel Modifier \u4e2d\u6211\u4eec\u8fd8\u53ea\u80fd\u76d1\u542c\u5782\u76f4\u6216\u6c34\u5e73\u4e2d\u67d0\u4e00\u4e2a\u65b9\u5411\u7684\u624b\u52bf\u62d6\u52a8\uff0c\u800c\u4f7f\u7528 detectDragGestures \u6240\u6709\u624b\u52bf\u4fe1\u606f\u90fd\u662f\u53ef\u4ee5\u62ff\u5230\u7684\u3002\u5982\u679c\u6211\u4eec\u8fd8\u662f\u53ea\u5e0c\u671b\u62ff\u5230\u67d0\u4e00\u4e2a\u65b9\u5411\u7684\u624b\u52bf\u62d6\u52a8\uff0c\u4f7f\u7528 detectHorizontalDragGestures \u6216 detectVerticalDragGestures \u5373\u53ef\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 detectDragGestures \u5e76\u4e14\u5ffd\u7565\u6389\u67d0\u4e2a\u65b9\u5411\u7684\u624b\u52bf\u4fe1\u606f\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5728\u957f\u6309\u540e\u624d\u80fd\u62ff\u5230\u624b\u52bf\u4fe1\u606f\u53ef\u4ee5\u4f7f\u7528 detectDragGesturesAfterLongPress \u3002 detectDragGestures \u63d0\u4f9b\u4e86\u56db\u4e2a\u53c2\u6570\u3002 onDragStart (\u53ef\u9009)\uff1a\u62d6\u52a8\u5f00\u59cb\u65f6\u56de\u8c03 onDragEnd (\u53ef\u9009)\uff1a\u62d6\u52a8\u7ed3\u675f\u65f6\u56de\u8c03 onDragCancel (\u53ef\u9009)\uff1a\u62d6\u52a8\u53d6\u6d88\u65f6\u56de\u8c03 onDrag (\u5fc5\u987b)\uff1a\u62d6\u52a8\u65f6\u56de\u8c03 decectDragGestures \u7684\u6e90\u7801\u5206\u6790\u5728 awaitTouchSlopOrCancellation \u5c0f\u8282\u4f1a\u6709\u8bb2\u89e3\u3002 suspend fun PointerInputScope . detectDragGestures ( onDragStart : ( Offset ) -> Unit = { }, onDragEnd : () -> Unit = { }, onDragCancel : () -> Unit = { }, onDrag : ( change : PointerInputChange , dragAmount : Offset ) -> Unit ) \ud83d\udca1 Tips \u6709\u4e9b\u540c\u5b66\u53ef\u80fd\u56f0\u60d1 onDragCancel \u89e6\u53d1\u65f6\u673a\u3002\u5728\u4e00\u4e9b\u573a\u666f\u4e2d\uff0c\u5f53\u7ec4\u4ef6\u62d6\u52a8\u65f6\u4f1a\u6839\u636e\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u8fdb\u884c\u4e8b\u4ef6\u5206\u53d1\uff0c\u5f53\u524d\u9762\u5148\u5904\u7406\u4e8b\u4ef6\u7684\u7ec4\u4ef6\u6ee1\u8db3\u4e86\u8bbe\u7f6e\u7684\u6d88\u8d39\u6761\u4ef6\uff0c\u5bfc\u81f4\u624b\u52bf\u4e8b\u4ef6\u88ab\u6d88\u8d39\uff0c\u5bfc\u81f4\u672c\u7ec4\u4ef6\u62ff\u5230\u7684\u662f\u88ab\u6d88\u8d39\u7684\u624b\u52bf\u4e8b\u4ef6\uff0c\u4ece\u800c\u4f1a\u6267\u884c onDragCancel \u56de\u8c03\u3002\u5982\u4f55\u5b9a\u5236\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u5e76\u6d88\u8d39\u4e8b\u4ef6\u540e\u7eed\u4f1a\u8fdb\u884c\u8be6\u7ec6\u7684\u63cf\u8ff0\u3002 \u793a\u4f8b\u5982\u4e0b\u6240\u793a @Preview @Composable fun DragGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () ) { Box ( Modifier . size ( boxSize ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { detectDragGestures ( onDragStart = { offset -> // \u62d6\u52a8\u5f00\u59cb }, onDragEnd = { // \u62d6\u52a8\u7ed3\u675f }, onDragCancel = { // \u62d6\u52a8\u53d6\u6d88 }, onDrag = { change : PointerInputChange , dragAmount : Offset -> // \u62d6\u52a8\u65f6 offset += dragAmount } ) } ) } } \u70b9\u51fb\u7c7b\u578b\u57fa\u7840 API API \u4ecb\u7ecd API\u540d\u79f0 \u4f5c\u7528 detectTapGestures \u76d1\u542c\u70b9\u51fb\u624b\u52bf \u4e0e Clickable Modifier \u4e0d\u540c\u7684\u662f\uff0c detectTapGestures \u53ef\u4ee5\u76d1\u542c\u66f4\u591a\u7684\u70b9\u51fb\u4e8b\u4ef6\u3002\u4f5c\u4e3a\u624b\u673a\u76d1\u542c\u7684\u57fa\u7840 API\uff0c\u5fc5\u7136\u4e0d\u4f1a\u5b58\u5728 Clickable Modifier \u6240\u62d3\u5c55\u7684\u6d9f\u6f2a\u6548\u679c\u3002 \u4e3e\u4f8b\u8bf4\u660e \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4e3a\u4e00\u4e2a\u7eff\u8272\u65b9\u5757\u6dfb\u52a0\u70b9\u51fb\u624b\u52bf\u5904\u7406\u903b\u8f91\u3002 detectTapGestures \u63d0\u4f9b\u4e86\u56db\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u7528\u6765\u76d1\u542c\u4e0d\u540c\u70b9\u51fb\u4e8b\u4ef6\u3002 onDoubleTap (\u53ef\u9009)\uff1a\u53cc\u51fb\u65f6\u56de\u8c03 onLongPress (\u53ef\u9009)\uff1a\u957f\u6309\u65f6\u56de\u8c03 onPress (\u53ef\u9009)\uff1a\u6309\u4e0b\u65f6\u56de\u8c03 onTap (\u53ef\u9009)\uff1a\u8f7b\u89e6\u65f6\u56de\u8c03 suspend fun PointerInputScope . detectTapGestures ( onDoubleTap : (( Offset ) -> Unit ) ? = null , onLongPress : (( Offset ) -> Unit ) ? = null , onPress : suspend PressGestureScope .( Offset ) -> Unit = NoPressGesture , onTap : (( Offset ) -> Unit ) ? = null ) \ud83d\udca1 Tips onPress \u666e\u901a\u6309\u4e0b\u4e8b\u4ef6 onDoubleTap \u524d\u5fc5\u5b9a\u4f1a\u5148\u56de\u8c03 2 \u6b21 Press onLongPress \u524d\u5fc5\u5b9a\u4f1a\u5148\u56de\u8c03 1 \u6b21 Press\uff08\u65f6\u95f4\u957f\uff09 onTap \u524d\u5fc5\u5b9a\u4f1a\u5148\u56de\u8c03 1 \u6b21 Press\uff08\u65f6\u95f4\u77ed\uff09 \u793a\u4f8b\u5982\u4e0b\u6240\u793a @Preview @Composable fun TapGestureDemo () { var boxSize = 100. dp Box ( Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Box ( Modifier . size ( boxSize ) . background ( Color . Green ) . pointerInput ( Unit ) { detectTapGestures ( onDoubleTap = { offset : Offset -> // \u53cc\u51fb }, onLongPress = { offset : Offset -> // \u957f\u6309 }, onPress = { offset : Offset -> // \u6309\u4e0b }, onTap = { offset : Offset -> // \u8f7b\u89e6 } ) } ) } } \u53d8\u6362\u7c7b\u578b\u57fa\u7840 API API \u4ecb\u7ecd API\u540d\u79f0 \u4f5c\u7528 detectTransformGestures \u76d1\u542c\u62d6\u52a8\u3001\u7f29\u653e\u4e0e\u65cb\u8f6c\u624b\u52bf \u4e0e Transfomer Modifier \u4e0d\u540c\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u4e2a API \u53ef\u4ee5\u76d1\u542c\u5355\u6307\u7684\u62d6\u52a8\u624b\u52bf\uff0c\u548c\u62d6\u52a8\u7c7b\u578b\u57fa\u7840 API\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u4e00\u6837\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u652f\u6301\u76d1\u542c\u53cc\u6307\u7f29\u653e\u4e0e\u65cb\u8f6c\u624b\u52bf\u3002\u53cd\u89c2 Transfomer Modifier \u53ea\u80fd\u76d1\u542c\u5230\u53cc\u6307\u62d6\u52a8\u624b\u52bf\uff0c\u4e0d\u77e5\u8bbe\u8ba1\u6210\u8fd9\u6837\u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u662f\u5426\u662f Google \u6709\u610f\u800c\u4e3a\u4e4b\u3002 \u4e3e\u4f8b\u8bf4\u660e \u63a5\u4e0b\u6765\u6211\u4eec\u4e3a\u8fd9\u4e2a\u7eff\u8272\u65b9\u5757\u6dfb\u52a0\u53d8\u5316\u624b\u52bf\u5904\u7406\u903b\u8f91\u3002 detectTransformGestures \u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53c2\u6570\u3002 panZoomLock(\u53ef\u9009)\uff1a \u5f53\u62d6\u52a8\u6216\u7f29\u653e\u624b\u52bf\u53d1\u751f\u65f6\u662f\u5426\u652f\u6301\u65cb\u8f6c onGesture(\u5fc5\u987b)\uff1a\u5f53\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u624b\u52bf\u53d1\u751f\u65f6\u56de\u8c03 suspend fun PointerInputScope . detectTransformGestures ( panZoomLock : Boolean = false , onGesture : ( centroid : Offset , pan : Offset , zoom : Float , rotation : Float ) -> Unit ) \ud83d\udca1 Tips \u5173\u4e8e\u504f\u79fb\u3001\u7f29\u653e\u4e0e\u65cb\u8f6c\uff0c\u6211\u4eec\u5efa\u8bae\u7684\u8c03\u7528\u987a\u5e8f\u662f rotate -> scale -> offset \u82e5offset\u53d1\u751f\u5728rotate\u4e4b\u524d\u65f6\uff0crotate\u4f1a\u5bf9offset\u9020\u6210\u5f71\u54cd\u3002\u5177\u4f53\u8868\u73b0\u4e3a\u5f53\u51fa\u73b0\u62d6\u52a8\u624b\u52bf\u65f6\uff0c\u7ec4\u4ef6\u4f1a\u4ee5\u5f53\u524d\u89d2\u5ea6\u4e3a\u5750\u6807\u8f74\u8fdb\u884c\u504f\u79fb\u3002 \u82e5offset\u53d1\u751f\u5728scale\u4e4b\u524d\u65f6\uff0cscale\u4e5f\u4f1a\u5bf9offset\u9020\u6210\u5f71\u54cd\u3002\u5177\u4f53\u8868\u73b0\u4e3aUI\u7ec4\u4ef6\u5728\u62d6\u52a8\u65f6\u4e0d\u8ddf\u624b @Preview @Composable fun TransformGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } var ratationAngle by remember { mutableStateOf ( 0f ) } var scale by remember { mutableStateOf ( 1f ) } Box ( Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Box ( Modifier . size ( boxSize ) . rotate ( ratationAngle ) // \u9700\u8981\u6ce8\u610foffset\u4e0erotate\u7684\u8c03\u7528\u5148\u540e\u987a\u5e8f . scale ( scale ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { detectTransformGestures ( panZoomLock = true , // \u5e73\u79fb\u6216\u653e\u5927\u65f6\u662f\u5426\u53ef\u4ee5\u65cb\u8f6c onGesture = { centroid : Offset , pan : Offset , zoom : Float , rotation : Float -> offset += pan scale *= zoom ratationAngle += rotation } ) } ) } } forEachGesture \u5728\u4f20\u7edf View \u7cfb\u7edf\u4e2d\uff0c\u4e00\u6b21\u624b\u6307\u6309\u4e0b\u3001\u79fb\u52a8\u5230\u62ac\u8d77\u8fc7\u7a0b\u4e2d\u7684\u6240\u6709\u624b\u52bf\u4e8b\u4ef6\u53ef\u4ee5\u5171\u540c\u6784\u6210\u4e00\u4e2a\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6765\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u8fdb\u884c\u5b9a\u5236\u5904\u7406\u3002Compose \u63d0\u4f9b\u4e86 forEachGesture \u4ee5\u5141\u8bb8\u7528\u6237\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u8fdb\u884c\u76f8\u540c\u7684\u5b9a\u5236\u5904\u7406\u3002\u5982\u679c\u6211\u4eec\u5fd8\u8bb0\u4f7f\u7528 forEachGesture \uff0c\u90a3\u4e48\u53ea\u4f1a\u5904\u7406\u7b2c\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u3002\u6709\u4e9b\u540c\u5b66\u53ef\u80fd\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48\u6211\u4e0d\u80fd\u5728\u624b\u52bf\u5904\u7406\u903b\u8f91\u6700\u5916\u5c42\u5957\u4e00\u5c42 while(true) \u5462\uff0c\u901a\u8fc7 forEachGesture \u7684\u5b9e\u73b0\u6211\u4eec\u53ef\u4ee5\u770b\u5230 forEachGesture \u5176\u5b9e\u5185\u90e8\u4e5f\u662f\u7531 while \u5b9e\u73b0\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u4ed6\u4fdd\u8bc1\u4e86\u534f\u7a0b\u53ea\u6709\u5b58\u6d3b\u65f6\u624d\u80fd\u76d1\u542c\u624b\u52bf\u4e8b\u4ef6\uff0c\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u4ea4\u4e92\u7ed3\u675f\u65f6\u6240\u6709\u624b\u6307\u90fd\u662f\u79bb\u5f00\u5c4f\u5e55\u7684\u3002\u6709\u4e9b\u540c\u5b66\u770b\u5230 while \u53ef\u80fd\u65b0\u751f\u7591\u95ee\uff0c\u96be\u9053\u8fd9\u6837\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\u561b\uff1f\u5176\u5b9e\u6211\u4eec\u5728\u4ecb\u7ecd PointerInput Modifier \u65f6\u5c31\u63d0\u5230\u8fc7\uff0c\u6211\u4eec\u7684\u624b\u52bf\u64cd\u4f5c\u5904\u7406\u5747\u53d1\u751f\u5728\u534f\u7a0b\u4e2d\u3002\u5176\u5b9e\u524d\u9762\u6211\u4eec\u6240\u63d0\u5230\u7684\u7edd\u5927\u591a\u6570 API \u5176\u5185\u90e8\u5b9e\u73b0\u5747\u4f7f\u7528\u4e86 forEachGesture \u3002\u6709\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\u6211\u4eec\u4ec5\u4f7f\u7528\u524d\u9762\u6240\u63d0\u51fa\u7684 API \u53ef\u80fd\u4ecd\u7136\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u5f53\u7136\u5982\u679c\u53ef\u4ee5\u6ee1\u8db3\u7684\u8bdd\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5176\u5206\u522b\u5bf9\u5e94\u7684 Modifier \u5373\u53ef\uff0c\u524d\u9762\u6240\u63d0\u51fa\u7684 API \u5b58\u5728\u7684\u610f\u4e49\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u4e3a\u5176\u8fdb\u884c\u529f\u80fd\u62d3\u5c55\u3002\u65e2\u7136\u8981\u638c\u63e1\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\uff0c\u6211\u4eec\u5c31\u8981\u4ece\u66f4\u5e95\u5c42\u89d2\u5ea6\u6765\u770b\u8fd9\u4e9b\u4e0a\u5c42 API \u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u4e86\u89e3\u539f\u7406\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u81ea\u5b9a\u4e49\u4e86\u3002 suspend fun PointerInputScope . forEachGesture ( block : suspend PointerInputScope .() -> Unit ) { val currentContext = currentCoroutineContext () while ( currentContext . isActive ) { try { block () // \u6302\u8d77\u7b49\u5f85\u6240\u6709\u624b\u6307\u62ac\u8d77 awaitAllPointersUp () } catch ( e : CancellationException ) { ... } } } \u624b\u52bf\u4e8b\u4ef6\u4f5c\u7528\u57df awaitPointerEventScope \u5728 PointerInputScope \u4e2d\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u540d\u4e3a awaitPointerEventScope \u7684 API \u65b9\u6cd5\u3002 \u901a\u8fc7\u7ffb\u9605\u65b9\u6cd5\u58f0\u660e\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e2a\u6302\u8d77\u65b9\u6cd5\uff0c\u5176\u5c3e\u90e8 lambda \u5728 AwaitPointerEventScope \u4f5c\u7528\u57df\u4e2d\u3002 \u901a\u8fc7\u8fd9\u4e2a AwaitPointerEventScope \u4f5c\u7528\u57df\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5230\u66f4\u52a0\u5e95\u5c42\u7684 API \u624b\u52bf\u4e8b\u4ef6\uff0c\u8fd9\u4e5f\u4e3a\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u63d0\u4f9b\u4e86\u53ef\u80fd\u3002 suspend fun < R > awaitPointerEventScope ( block : suspend AwaitPointerEventScope .() -> R ): R \u6211\u4eec\u5728 AwaitPointerEventScope \u4e2d\u53d1\u73b0\u4e86\u4ee5\u4e0b\u8fd9\u4e9b\u57fa\u7840\u624b\u52bf\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b API \u5747\u662f\u6302\u8d77\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u5bf9\u6bcf\u4e2a API \u8fdb\u884c\u63cf\u8ff0\u8bf4\u660e\u3002 API\u540d\u79f0 \u4f5c\u7528 awaitPointerEvent \u624b\u52bf\u4e8b\u4ef6 awaitFirstDown \u7b2c\u4e00\u6839\u624b\u6307\u7684\u6309\u4e0b\u4e8b\u4ef6 drag \u62d6\u52a8\u4e8b\u4ef6 horizontalDrag \u6c34\u5e73\u62d6\u52a8\u4e8b\u4ef6 verticalDrag \u5782\u76f4\u62d6\u52a8\u4e8b\u4ef6 awaitDragOrCancellation \u5355\u6b21\u62d6\u52a8\u4e8b\u4ef6 awaitHorizontalDragOrCancellation \u5355\u6b21\u6c34\u5e73\u62d6\u52a8\u4e8b\u4ef6 awaitVerticalDragOrCancellation \u5355\u6b21\u5782\u76f4\u62d6\u52a8\u4e8b\u4ef6 awaitTouchSlopOrCancellation \u6709\u6548\u62d6\u52a8\u4e8b\u4ef6 awaitHorizontalTouchSlopOrCancellation \u6709\u6548\u6c34\u5e73\u62d6\u52a8\u4e8b\u4ef6 awaitVerticalTouchSlopOrCancellation \u6709\u6548\u5782\u76f4\u62d6\u52a8\u4e8b\u4ef6 \u4e07\u7269\u4e4b\u6e90 awaitPointerEvent awaitPointerEvent \u7c7b\u4f3c\u4e8e\u4f20\u7edf View \u7cfb\u7edf\u7684 onTouchEvent() \u3002\u65e0\u8bba\u7528\u6237\u662f\u6309\u4e0b\u3001\u79fb\u52a8\u6216\u62ac\u8d77\u90fd\u5c06\u89c6\u4f5c\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\uff0c\u5f53\u624b\u52bf\u4e8b\u4ef6\u53d1\u751f\u65f6 awaitPointerEvent \u4f1a\u6062\u590d\u6267\u884c\u5e76\u5c06\u624b\u52bf\u4e8b\u4ef6\u8fd4\u56de\u3002 suspend fun awaitPointerEvent ( pass : PointerEventPass = PointerEventPass . Main ): PointerEvent \u901a\u8fc7 API \u58f0\u660e\u53ef\u4ee5\u770b\u5230 awaitPointerEvent \u6709\u4e2a\u53ef\u9009\u53c2\u6570 PointerEventPass \u6211\u4eec\u77e5\u9053\u624b\u52bf\u4e8b\u4ef6\u7684\u5206\u53d1\u662f\u7531\u7236\u7ec4\u4ef6\u5230\u5b50\u7ec4\u4ef6\u7684\u5355\u94fe\u7ed3\u6784\u3002\u8fd9\u4e2a\u53c2\u6570\u76ee\u7684\u662f\u7528\u4ee5\u8bbe\u7f6e\u7236\u7ec4\u4ef6\u4e0e\u5b50\u7ec4\u4ef6\u7684\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\uff0c PointerEventPass \u6709 3 \u4e2a\u679a\u4e3e\u503c\u53ef\u4f9b\u9009\u62e9\uff0c\u6bcf\u4e2a\u679a\u4e3e\u503c\u7684\u5177\u4f53\u542b\u4e49\u5982\u4e0b \u679a\u4e3e\u503c \u542b\u4e49 PointerEventPass.Initial \u672c\u7ec4\u4ef6\u4f18\u5148\u5904\u7406\u624b\u52bf\uff0c\u5904\u7406\u540e\u4ea4\u7ed9\u5b50\u7ec4\u4ef6 PointerEventPass.Main \u82e5\u5b50\u7ec4\u4ef6\u4e3aFinal\uff0c\u672c\u7ec4\u4ef6\u4f18\u5148\u5904\u7406\u624b\u52bf\u3002\u5426\u5219\u5c06\u624b\u52bf\u4ea4\u7ed9\u5b50\u7ec4\u4ef6\u5904\u7406\uff0c\u7ed3\u675f\u540e\u672c\u7ec4\u4ef6\u518d\u5904\u7406\u3002 PointerEventPass.Final \u82e5\u5b50\u7ec4\u4ef6\u4e5f\u4e3aFinal\uff0c\u672c\u7ec4\u4ef6\u4f18\u5148\u5904\u7406\u624b\u52bf\u3002\u5426\u5219\u5c06\u624b\u52bf\u4ea4\u7ed9\u5b50\u7ec4\u4ef6\u5904\u7406\uff0c\u7ed3\u675f\u540e\u672c\u7ec4\u4ef6\u518d\u5904\u7406\u3002 \u5927\u5bb6\u53ef\u80fd\u89c9\u5f97 Main \u4e0e Final \u662f\u7b49\u4ef7\u7684\u3002\u4f46\u5176\u5b9e\u4e24\u8005\u5728\u4f5c\u4e3a\u5b50\u7ec4\u4ef6\u65f6\u5206\u53d1\u987a\u5e8f\u4f1a\u5b8c\u5168\u4e0d\u540c\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u3002 \u5f53\u7236\u7ec4\u4ef6\u4e3aFinal\uff0c\u5b50\u7ec4\u4ef6\u4e3aMain\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\uff1a \u5b50\u7ec4\u4ef6 -> \u7236\u7ec4\u4ef6 \u5f53\u7236\u7ec4\u4ef6\u4e3aFinal\uff0c\u5b50\u7ec4\u4ef6\u4e3aFinal\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\uff1a \u7236\u7ec4\u4ef6 -> \u5b50\u7ec4\u4ef6 \u6587\u5b57\u63cf\u8ff0\u53ef\u80fd\u5e76\u4e0d\u76f4\u89c2\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u4e3e\u4f8b\u8bf4\u660e\u3002 \u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b \u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u901a\u8fc7\u4e00\u4e2a\u5d4c\u5957\u4e86\u4e09\u5c42 Box \u7684\u793a\u4f8b\u6765\u76f4\u89c2\u8868\u73b0\u4e8b\u4ef6\u5206\u53d1\u8fc7\u7a0b\u3002\u6211\u4eec\u4e3a\u8fd9\u5d4c\u5957\u7684\u4e09\u5c42Box \u4e2d\u7684\u6bcf\u4e00\u5c42\u90fd\u8fdb\u884c\u624b\u52bf\u83b7\u53d6\u3002 \u5982\u679c\u6211\u4eec\u70b9\u51fb\u4e2d\u95f4\u7684\u7eff\u8272\u65b9\u5757\u65f6\uff0c\u4fbf\u4f1a\u89e6\u53d1\u624b\u52bf\u4e8b\u4ef6\u3002 \u5f53\u4e09\u5c42 Box \u5747\u4f7f\u7528\u9ed8\u8ba4 Main \u6a21\u5f0f\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u4e3a\uff1a\u7b2c\u4e09\u5c42 -> \u7b2c\u4e8c\u5c42 -> \u7b2c\u4e00\u5c42 \u5f53\u7b2c\u4e00\u5c42Box\u4f7f\u7528 Inital \u6a21\u5f0f\uff0c\u7b2c\u4e8c\u5c42\u4f7f\u7528 Final \u6a21\u5f0f\uff0c\u7b2c\u4e09\u5c42\u4f7f\u7528 Main \u6a21\u5f0f\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u4e3a\uff1a\u7b2c\u4e00\u5c42 -> \u7b2c\u4e09\u5c42 -> \u7b2c\u4e8c\u5c42 @Preview @Composable fun NestedBoxDemo () { Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { awaitPointerEventScope { awaitPointerEvent ( PointerEventPass . Initial ) Log . d ( \"compose_study\" , \"first layer\" ) } } ) { Box ( contentAlignment = Alignment . Center , modifier = Modifier . size ( 400. dp ) . background ( Color . Blue ) . pointerInput ( Unit ) { awaitPointerEventScope { awaitPointerEvent ( PointerEventPass . Final ) Log . d ( \"compose_study\" , \"second layer\" ) } } ) { Box ( Modifier . size ( 200. dp ) . background ( Color . Green ) . pointerInput ( Unit ) { awaitPointerEventScope { awaitPointerEvent () Log . d ( \"compose_study\" , \"third layer\" ) } } ) } } } // Output: // first layer // third layer // second layer \u80fd\u591f\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u51b3\u5b9a\u624b\u52bf\u4e8b\u4ef6\u7531\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u4e2d\u54ea\u4e2a\u7ec4\u4ef6\u8fdb\u884c\u6d88\u8d39\u3002\u90a3\u4e48\u5982\u4f55\u8fdb\u884c\u6d88\u8d39\u5462\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u770b\u770b awaitPointerEvent \u8fd4\u56de\u7684\u624b\u52bf\u4e8b\u4ef6\u4e86\u3002\u901a\u8fc7 awaintPointerEvent \u58f0\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u7684\u624b\u52bf\u4e8b\u4ef6\u662f\u4e2a PointerEvent \u5b9e\u4f8b\u3002 \u901a\u8fc7 PointerEvent \u7c7b\u58f0\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6210\u5458\u5c5e\u6027 changes \u4e0e motionEvent\u3002 motionEvent \u6211\u4eec\u518d\u719f\u6089\u4e0d\u8fc7\u4e86\uff0c\u5c31\u662f\u4f20\u7edf View \u7cfb\u7edf\u4e2d\u7684\u624b\u52bf\u4e8b\u4ef6\uff0c\u7136\u800c\u5374\u88ab\u58f0\u660e\u4e86 internal \u5173\u952e\u5b57\uff0c\u770b\u6765\u662f\u4e0d\u5e0c\u671b\u6211\u4eec\u4f7f\u7528\u3002 changes \u662f\u4e00\u4e2a List\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6bcf\u6b21\u53d1\u751f\u624b\u52bf\u4e8b\u4ef6\u65f6\uff0c\u5c4f\u5e55\u4e0a\u6240\u6709\u624b\u6307\u7684\u72b6\u6001\u4fe1\u606f\u3002 \u5f53\u53ea\u6709\u4e00\u6839\u624b\u6307\u65f6\uff0c\u8fd9\u4e2a List \u7684\u5927\u5c0f\u4e3a 1\u3002\u5728\u591a\u6307\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a List \u83b7\u53d6\u5176\u4ed6\u624b\u6307\u7684\u72b6\u6001\u4fe1\u606f\u5c31\u53ef\u4ee5\u8f7b\u677e\u5b9a\u5236\u591a\u6307\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u4e86\u3002 actual data class PointerEvent internal constructor ( actual val changes : List < PointerInputChange > , internal val motionEvent : MotionEvent? ) PointerInputChange class PointerInputChange ( val id : PointerId , // \u624b\u6307Id val uptimeMillis : Long , // \u5f53\u524d\u624b\u52bf\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233 val position : Offset , // \u5f53\u524d\u624b\u52bf\u4e8b\u4ef6\u76f8\u5bf9\u7ec4\u4ef6\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e val pressed : Boolean , // \u5f53\u524d\u624b\u52bf\u662f\u5426\u6309\u4e0b val previousUptimeMillis : Long , // \u4e0a\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233 val previousPosition : Offset , // \u4e0a\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\u76f8\u5bf9\u7ec4\u4ef6\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e val previousPressed : Boolean , // \u4e0a\u4e00\u6b21\u624b\u52bf\u662f\u5426\u6309\u4e0b val consumed : ConsumedData , // \u5f53\u524d\u624b\u52bf\u662f\u5426\u5df2\u88ab\u6d88\u8d39 val type : PointerType = PointerType . Touch // \u624b\u52bf\u7c7b\u578b(\u9f20\u6807\u3001\u624b\u6307\u3001\u624b\u5199\u7b14\u3001\u6a61\u76ae) ) API\u540d\u79f0 \u4f5c\u7528 changedToDown \u662f\u5426\u5df2\u7ecf\u6309\u4e0b(\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56defalse) changedToDownIgnoreConsumed \u662f\u5426\u5df2\u7ecf\u6309\u4e0b(\u5ffd\u7565\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u6807\u8bb0) changedToUp \u662f\u5426\u5df2\u7ecf\u62ac\u8d77(\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56defalse) changedToUpIgnoreConsumed \u662f\u5426\u5df2\u7ecf\u62ac\u8d77(\u5ffd\u7565\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u6807\u8bb0) positionChanged \u662f\u5426\u4f4d\u7f6e\u53d1\u751f\u4e86\u6539\u53d8(\u79fb\u52a8\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56defalse) positionChangedIgnoreConsumed \u662f\u5426\u4f4d\u7f6e\u53d1\u751f\u4e86\u6539\u53d8(\u5ffd\u7565\u5df2\u6d88\u8d39\u6807\u8bb0) positionChange \u4f4d\u7f6e\u6539\u53d8\u91cf(\u79fb\u52a8\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56deOffset.Zero) positionChangeIgnoreConsumed \u4f4d\u7f6e\u6539\u53d8\u91cf(\u5ffd\u7565\u79fb\u52a8\u624b\u52bf\u5df2\u6d88\u8d39\u6807\u8bb0) positionChangeConsumed \u5f53\u524d\u79fb\u52a8\u624b\u52bf\u662f\u5426\u5df2\u88ab\u6d88\u8d39 anyChangeConsumed \u5f53\u524d\u6309\u4e0b\u624b\u52bf\u6216\u79fb\u52a8\u624b\u52bf\u662f\u5426\u6709\u88ab\u6d88\u8d39 consumeDownChange \u6d88\u8d39\u6309\u4e0b\u624b\u52bf consumePositionChange \u6d88\u8d39\u79fb\u52a8\u624b\u52bf consumeAllChanges \u6d88\u8d39\u6309\u4e0b\u4e0e\u79fb\u52a8\u624b\u52bf isOutOfBounds \u5f53\u524d\u624b\u52bf\u662f\u5426\u5728\u56fa\u5b9a\u8303\u56f4\u5185 \u8fd9\u4e9b API \u4f1a\u5728\u6211\u4eec\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u65f6\u4f1a\u88ab\u7528\u5230\u3002\u53ef\u4ee5\u53d1\u73b0\u7684\u662f\uff0cCompose \u901a\u8fc7 PointerEventPass \u6765\u5b9a\u5236\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\uff0c\u5728\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u4e2d\u5373\u4f7f\u524d\u4e00\u4e2a\u7ec4\u4ef6\u5148\u83b7\u53d6\u4e86\u624b\u52bf\u4fe1\u606f\u5e76\u8fdb\u884c\u4e86\u6d88\u8d39\uff0c\u540e\u9762\u7684\u7ec4\u4ef6\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u5e26\u6709 IgnoreConsumed \u7cfb\u5217 API \u6765\u83b7\u53d6\u5230\u624b\u52bf\u4fe1\u606f\u3002\u8fd9\u4e5f\u6781\u5927\u589e\u52a0\u4e86\u624b\u52bf\u64cd\u4f5c\u7684\u53ef\u5b9a\u5236\u6027\u3002\u5c31\u597d\u50cf\u7236\u7ec4\u4ef6\u5148\u628a\u4e8b\u4ef6\u6d88\u8d39\uff0c\u5e0c\u671b\u5b50\u7ec4\u4ef6\u4e0d\u8981\u5904\u7406\u8fd9\u4e2a\u624b\u52bf\u4e86\uff0c\u4f46\u5b50\u7ec4\u4ef6\u5b8c\u5168\u53ef\u4ee5\u4e0d\u7528\u542c\u4ece\u7236\u7ec4\u4ef6\u7684\u8bdd\u3002 \u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u6765\u770b\u770b\u8be5\u5982\u4f55\u8fdb\u884c\u624b\u52bf\u6d88\u8d39\uff0c\u5904\u4e8e\u65b9\u4fbf\u6211\u4eec\u7684\u793a\u4f8b\u4e0d\u6d89\u53ca\u79fb\u52a8\uff0c\u53ea\u6d88\u8d39\u6309\u4e0b\u624b\u52bf\u4e8b\u4ef6\u6765\u8fdb\u884c\u4e3e\u4f8b\u3002\u548c\u4e4b\u524d\u7684\u6837\u5f0f\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u624b\u52bf\u6d88\u8d39\u653e\u5728\u4e86\u7b2c\u4e09\u5c42 Box\uff0c\u6839\u636e\u4e8b\u4ef6\u5206\u53d1\u89c4\u5219\u6211\u4eec\u77e5\u9053\u7b2c\u4e09\u5c42Box\u662f\u7b2c2\u4e2a\u5904\u7406\u624b\u52bf\u4e8b\u4ef6\u7684\uff0c\u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u3002 @Preview @Composable fun Demo () { Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Initial ) Log . d ( \"compose_study\" , \"first layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } } ) { Box ( contentAlignment = Alignment . Center , modifier = Modifier . size ( 400. dp ) . background ( Color . Blue ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Final ) Log . d ( \"compose_study\" , \"second layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } } ) { Box ( Modifier . size ( 200. dp ) . background ( Color . Green ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent () event . changes [ 0 ] . consumeDownChange () Log . d ( \"compose_study\" , \"third layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } } ) } } } // Output: // first layer, downChange: false // third layer, downChange: true // second layer, downChange: true \u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u6211\u4eec\u662f\u5728\u5b9a\u5236\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\uff0c\u90a3\u4e48\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u4e24\u79cd\u5199\u6cd5 // \u6b63\u786e\u5199\u6cd5 awaitPointerEventScope { var event = awaitPointerEvent () event . changes [ 0 ] . consumeDownChange () } // \u9519\u8bef\u5199\u6cd5 var event = awaitPointerEventScope { awaitPointerEvent () } event . changes [ 0 ] . consumeDownChange () \u4ed6\u4eec\u7684\u533a\u522b\u5728\u4e8e awaitPointerEventScope \u4f1a\u5728\u5176\u5185\u90e8\u6240\u6709\u624b\u52bf\u5728\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u7ed3\u675f\u540e\u8fd4\u56de\uff0c\u5f53\u6240\u6709\u7ec4\u4ef6\u90fd\u5df2\u7ecf\u5b8c\u6210\u624b\u52bf\u5904\u7406\u518d\u8fdb\u884c\u6d88\u8d39\u5df2\u7ecf\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u4e86\u3002\u6211\u4eec\u4ecd\u7136\u7528\u521a\u624d\u7684\u4f8b\u5b50\u6765\u76f4\u89c2\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u5728\u6bcf\u4e00\u5c42Box awaitPointerEventScope \u540e\u9762\u6dfb\u52a0\u4e86\u65e5\u5fd7\u4fe1\u606f\u3002 \u901a\u8fc7\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e09\u5c42\u6267\u884c\u7684\u76f8\u5bf9\u987a\u5e8f\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u7136\u800c\u5374\u662f\u5728\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u7ed3\u675f\u540e\u624d\u8fdb\u884c\u8f93\u51fa\u7684\u3002 @Preview @Composable fun Demo () { Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Initial ) Log . d ( \"compose_study\" , \"first layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } Log . d ( \"compose_study\" , \"first layer Outside\" ) } ) { Box ( contentAlignment = Alignment . Center , modifier = Modifier . size ( 400. dp ) . background ( Color . Blue ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Final ) Log . d ( \"compose_study\" , \"second layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } Log . d ( \"compose_study\" , \"second layer Outside\" ) } ) { Box ( Modifier . size ( 200. dp ) . background ( Color . Green ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent () event . changes [ 0 ] . consumeDownChange () Log . d ( \"compose_study\" , \"third layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } Log . d ( \"compose_study\" , \"third layer Outside\" ) } ) } } } // Output: // first layer, downChange: false // third layer, downChange: true // second layer, downChange: true // first layer Outside // third layer Outside // second layer Outside awaitFirstDown awaitFirstDown \u5c06\u7b49\u5f85\u7b2c\u4e00\u6839\u624b\u6307\u6309\u4e0b\u4e8b\u4ef6\u65f6\u6062\u590d\u6267\u884c\uff0c\u5e76\u5c06\u624b\u6307\u6309\u4e0b\u4e8b\u4ef6\u8fd4\u56de\u3002\u5206\u6790\u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 awaitFirstDown \u4e5f\u4f7f\u7528\u7684\u662f awaitPointerEvent \u5b9e\u73b0\u7684\uff0c\u9ed8\u8ba4\u4f7f\u7528 Main \u6a21\u5f0f\u3002 suspend fun AwaitPointerEventScope . awaitFirstDown ( requireUnconsumed : Boolean = true ): PointerInputChange { var event : PointerEvent do { event = awaitPointerEvent () } while ( ! event . changes . fastAll { if ( requireUnconsumed ) it . changedToDown () else it . changedToDownIgnoreConsumed () } ) return event . changes [ 0 ] } drag \u770b\u5230 drag \u53ef\u80fd\u5f88\u591a\u540c\u5b66\u7591\u60d1\u4e3a\u4ec0\u4e48\u53c8\u662f\u62d6\u52a8\u3002\u5176\u5b9e\u524d\u9762\u6240\u63d0\u5230\u7684\u62d6\u52a8\u7c7b\u578b\u57fa\u7840API detectDragGestures \u5176\u5185\u90e8\u5c31\u662f\u4f7f\u7528 drag \u800c\u5b9e\u73b0\u7684\u3002\u4e0e detectDragGestures \u4e0d\u540c\u7684\u662f\uff0c drag \u9700\u8981\u4e3b\u52a8\u4f20\u5165\u4e00\u4e2a PointerId \u7528\u4ee5\u8868\u793a\u8981\u5177\u4f53\u83b7\u53d6\u5230\u54ea\u6839\u624b\u6307\u7684\u62d6\u52a8\u4e8b\u4ef6\u3002 suspend fun AwaitPointerEventScope . drag ( pointerId : PointerId , onDrag : ( PointerInputChange ) -> Unit ) \u7ffb\u9605\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e drag \u5185\u90e8\u5b9e\u73b0\u6700\u7ec8\u4f7f\u7528\u7684\u4ecd\u7136\u8fd8\u662f awaitPointerEvent \u3002\u8fd9\u91cc\u5c31\u4e0d\u5177\u4f53\u5c55\u5f00\u770b\u4e86\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u5df1\u53bb\u8ddf\u6e90\u7801\u3002 \u4e3e\u4f8b\u8bf4\u660e \u901a\u8fc7\u7ed3\u5408 awaitFirstDown \u4e0e drag \u8fd9\u4e9b\u57fa\u7840 API \u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0 UI \u62d6\u52a8\u624b\u52bf\u6d41\u7a0b\u4e86\u3002\u6211\u4eec\u4ecd\u7136\u4ee5\u6211\u4eec\u7684\u7eff\u8272\u65b9\u5757\u4f5c\u4e3a\u5b9e\u4f8b\uff0c\u4e3a\u5176\u6dfb\u52a0\u62d6\u52a8\u624b\u52bf\u3002 @Preview @Composable fun BaseDragGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () ) { Box ( Modifier . size ( boxSize ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { forEachGesture { // \u5faa\u73af\u76d1\u542c\u6bcf\u4e00\u7ec4\u4e8b\u4ef6\u5e8f\u5217 awaitPointerEventScope { var downEvent = awaitFirstDown () drag ( downEvent . id ) { offset += it . positionChange () } } } } ) } } awaitDragOrCancellation \u4e0e drag \u4e0d\u540c\u7684\u662f\uff0c awaitDragOrCancellation \u8d1f\u8d23\u76d1\u542c\u5355\u6b21\u62d6\u52a8\u4e8b\u4ef6\u3002\u5f53\u624b\u6307\u5df2\u7ecf\u62ac\u8d77\u6216\u62d6\u52a8\u4e8b\u4ef6\u5df2\u7ecf\u88ab\u6d88\u8d39\u65f6\u4f1a\u8fd4\u56de null\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 awaitDragOrCancellation \u6765\u5b8c\u6210 UI \u62d6\u52a8\u624b\u52bf\u5904\u7406\u6d41\u7a0b\u3002\u901a\u8fc7\u7ffb\u9605\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0 drag \u5176\u5b9e\u5185\u90e8\u4e5f\u662f\u4f7f\u7528 awaitDragOrCancellation \u8fdb\u884c\u5b9e\u73b0\u7684\u3002\u800c awaitDragOrCancellation \u5185\u90e8\u4ecd\u7136\u662f awaitPointerEvent \u3002 @Preview @Composable fun BaseDragGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () ) { Box ( Modifier . size ( boxSize ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { forEachGesture { awaitPointerEventScope { var downPointer = awaitFirstDown () while ( true ) { var event = awaitDragOrCancellation ( downPointer . id ) if ( event == null ) { break } offset += event . positionChange () } } } } ) } } awaitTouchSlopOrCancellation awaitTouchSlopOrCancellation \u7528\u4e8e\u76d1\u6d4b\u5f53\u524d\u62d6\u52a8\u624b\u52bf\u662f\u5426\u662f\u4e00\u6b21\u6709\u6548\u7684\u62d6\u52a8\u3002\u6709\u6548\u6307\u7684\u662f\u5f53\u524d\u624b\u52bf\u6ed1\u52a8\u7684\u6b27\u5f0f\u8ddd\u79bb(\u4f4d\u79fb)\u662f\u5426\u8d85\u8fc7\u8bbe\u5b9a\u7684\u9608\u503c\u3002\u82e5\u62d6\u52a8\u624b\u52bf\u8fd8\u6ca1\u6709\u8fbe\u5230\u9608\u503c\u4fbf\u62ac\u8d77\u6216\u62d6\u52a8\u624b\u52bf\u4e8b\u4ef6\u5df2\u7ecf\u88ab\u6d88\u8d39\u65f6\u5c06\u8fd4\u56denull\uff0c\u7ffb\u9605\u6e90\u7801\u6211\u4eec\u53c8\u627e\u5230\u4e86 awaitPointerEvent \uff0c\u6240\u4ee5\u8bf4 awaitPointerEvent \u662f\u4e07\u7269\u4e4b\u6e90\u561b\uff5e\u3002 suspend fun AwaitPointerEventScope . awaitTouchSlopOrCancellation ( pointerId : PointerId , onTouchSlopReached : ( change : PointerInputChange , overSlop : Offset ) -> Unit ): PointerInputChange? { ... val touchSlop = viewConfiguration . touchSlop var pointer = pointerId while ( true ) { val event = awaitPointerEvent () ... if ( dragEvent . positionChangeConsumed ()) { ... } else if ( dragEvent . changedToUpIgnoreConsumed ()) { ... } else { ... if ( distance >= touchSlop ) { ... } ... } } } \u6211\u4eec\u524d\u9762\u6240\u63d0\u5230\u7684 detectDragGestures \u5176\u5185\u90e8\u4e0d\u4ec5\u4f7f\u7528\u4e86 drag \u8fd8\u4f7f\u7528\u4e86 awaitTouchSlopOrCancellation \u6765\u5224\u65ad\u624b\u52bf\u62d6\u52a8\u64cd\u4f5c\u3002\u4ec5\u5f53\u76d1\u6d4b\u4e3a\u4e00\u6b21\u6709\u6548\u7684\u62d6\u52a8\u65f6\uff0c\u624d\u4f1a\u6267\u884c onDragStart \u56de\u8c03\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u4f7f\u7528 drag \u6765\u76d1\u542c\u62d6\u52a8\u624b\u52bf\uff0c\u4ec5\u5f53 drag \u8fd4\u56de false (\u5373\u5728\u62d6\u52a8\u8fc7\u7a0b\u4e2d\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u524d\u9762\u7684\u7ec4\u4ef6\u8fbe\u6210\u5b9a\u5236\u6761\u4ef6\u6d88\u8d39\u4e86\u8fd9\u6b21\u7684\u62d6\u52a8\u624b\u52bf\u4e8b\u4ef6) \u4f1a\u6267\u884c onDragCancel \u56de\u8c03\uff0c\u5426\u5219\u5982\u679c\u6240\u6709\u624b\u6307\u62ac\u8d77\u6b63\u5e38\u7ed3\u675f\u5219\u4f1a\u6267\u884c onDragEnd \u56de\u8c03\u3002 suspend fun PointerInputScope . detectDragGestures ( onDragStart : ( Offset ) -> Unit = { }, onDragEnd : () -> Unit = { }, onDragCancel : () -> Unit = { }, onDrag : ( change : PointerInputChange , dragAmount : Offset ) -> Unit ) { forEachGesture { awaitPointerEventScope { .... do { drag = awaitTouchSlopOrCancellation ( down . id ) { change , over -> change . consumePositionChange () overSlop = over } } while ( drag != null && ! drag . positionChangeConsumed ()) if ( drag != null ) { onDragStart . invoke ( drag . position ) // \u62d6\u52a8\u5f00\u59cb onDrag ( drag , overSlop ) if ( ! drag ( drag . id ) { onDrag ( it , it . positionChange ()) it . consumePositionChange () } ) { onDragCancel () // \u62d6\u52a8\u53d6\u6d88 } else { onDragEnd () } } } } }","title":"\u81ea\u5b9a\u4e49\u89e6\u6478\u53cd\u9988"},{"location":"design/gesture/custom_gesture/#_1","text":"Jetpack Compose \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u624b\u52bf\u5904\u7406 Modifier\uff0c\u5bf9\u4e8e\u5e38\u89c1\u4e1a\u52a1\u9700\u6c42\u6765\u8bf4\u5df2\u8db3\u591f\u6211\u4eec\u4f7f\u7528\u4e86\uff0c\u7136\u800c\u5982\u679c\u8bf4\u6211\u4eec\u5bf9\u624b\u52bf\u6709\u5b9a\u5236\u9700\u6c42\uff0c\u5c31\u9700\u8981\u5177\u5907\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u7684\u80fd\u529b\u4e86\u3002\u901a\u8fc7\u4f7f\u7528\u5b98\u65b9\u6240\u63d0\u4f9b\u7684\u57fa\u7840 API \u6765\u5b8c\u6210\u5404\u7c7b\u624b\u52bf\u4ea4\u4e92\u9700\u6c42\uff0c\u89e6\u6478\u53cd\u9988\u57fa\u7840 API \u7c7b\u4f3c\u4f20\u7edf View \u7cfb\u7edf\u7684 onTouchEvent() \u3002 \u5f53\u7136 Compose \u4e2d\u4e5f\u652f\u6301\u7c7b\u4f3c\u4f20\u7edf ViewGroup \u901a\u8fc7 onInterceptTouchEvent() \u5b9a\u5236\u624b\u52bf\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u3002\u901a\u8fc7\u5bf9\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u7684\u5b66\u4e60\u5c06\u5e2e\u52a9\u5927\u5bb6\u638c\u63e1\u5904\u7406\u7edd\u5927\u591a\u6570\u573a\u666f\u4e0b\u624b\u52bf\u9700\u6c42\u7684\u80fd\u529b\u3002","title":"\u6982\u8ff0"},{"location":"design/gesture/custom_gesture/#pointerinput-modifier","text":"\u5bf9\u4e8e\u6240\u6709\u624b\u52bf\u64cd\u4f5c\u7684\u5904\u7406\u90fd\u9700\u8981\u5c01\u88c5\u5728\u8fd9\u4e2a Modifier \u4e2d\uff0c\u6211\u4eec\u77e5\u9053 Modifier \u662f\u7528\u6765\u4fee\u9970 UI \u7ec4\u4ef6\u7684\uff0c\u6240\u4ee5\u5c06\u624b\u52bf\u64cd\u4f5c\u7684\u5904\u7406\u5c01\u88c5\u5728 Modifier \u7b26\u5408\u5f00\u53d1\u8005\u8bbe\u8ba1\u76f4\u89c9\uff0c\u8fd9\u540c\u65f6\u4e5f\u505a\u5230\u4e86\u624b\u52bf\u5904\u7406\u903b\u8f91\u4e0e UI \u89c6\u56fe\u7684\u89e3\u8026\uff0c\u4ece\u800c\u63d0\u9ad8\u590d\u7528\u6027\u3002 \u901a\u8fc7\u7ffb\u9605 Swipeable Modifier \u3001 Draggable Modifier \u4ee5\u53ca Transformer Modifier \uff0c\u6211\u4eec\u90fd\u80fd\u770b\u5230 PointerInput Modifier \u7684\u8eab\u5f71\u3002\u56e0\u4e3a\u8fd9\u7c7b\u4e0a\u5c42\u7684\u624b\u52bf\u5904\u7406 Modifier \u5176\u5b9e\u90fd\u662f\u57fa\u4e8e\u8fd9\u4e2a\u57fa\u7840 Modifier \u5b9e\u73b0\u7684\u3002\u6240\u4ee5\u65e2\u7136\u8981\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6d41\u7a0b\uff0c\u81ea\u5b9a\u4e49\u903b\u8f91\u4e5f\u5fc5\u7136\u8981\u5728\u8fd9\u4e2a Modifier \u4e2d\u8fdb\u884c\u5b9e\u73b0\u3002 \u901a\u8fc7 PointerInput Modifier \u5b9e\u73b0\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u6240\u5b9a\u4e49\u7684\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6d41\u7a0b\u5747\u53d1\u751f\u5728 PointerInputScope \u4e2d\uff0csuspend \u5173\u952e\u5b57\u4e5f\u544a\u77e5\u6211\u4eec\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6d41\u7a0b\u662f\u53d1\u751f\u5728\u534f\u7a0b\u4e2d\u3002\u8fd9\u5176\u5b9e\u662f\u65e0\u53ef\u539a\u975e\u7684\uff0c\u5728\u63a2\u7d22\u91cd\u7ec4\u5de5\u4f5c\u539f\u7406\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e5f\u7ecf\u5e38\u80fd\u591f\u770b\u5230\u534f\u7a0b\u7684\u8eab\u5f71\u3002\u4f34\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u4e3b\u6d41\u5f00\u53d1\u6280\u672f\u62e5\u62b1\u534f\u7a0b\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u534f\u7a0b\u6210\u4e86 Android \u5f00\u53d1\u8005\u672a\u6765\u5fc5\u987b\u638c\u63e1\u7684\u6280\u80fd\u3002\u63a8\u5e7f\u534f\u7a0b\u540c\u65f6\u5176\u5b9e\u4e5f\u662f\u5728\u63a8\u5e7f Kotlin\uff0c\u5373\u4f7f\u5b98\u65b9\u4e00\u76f4\u5f3a\u8c03\u4e0d\u4f1a\u653e\u5f03 Java\uff0c\u7136\u800c\u8c01\u53c8\u4f1a\u5728 Java \u4e2d\u4f7f\u7528 Kotlin \u534f\u7a0b\u5462\uff1f fun Modifier . pointerInput ( vararg keys : Any? , block : suspend PointerInputScope .() -> Unit ): Modifier = composed ( ... ) { ... remember ( density ) { SuspendingPointerInputFilter ( viewConfiguration , density ) }. apply { LaunchedEffect ( this , * keys ) { block () } } } \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u770b\u770b PointerInputScope \u4f5c\u7528\u57df\u4e2d\uff0c\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b API \u6765\u5904\u7406\u624b\u52bf\u4ea4\u4e92\u3002\u672c\u6587\u5c06\u4f1a\u6839\u636e\u624b\u52bf\u80fd\u529b\u5206\u7c7b\u8fdb\u884c\u89e3\u91ca\u8bf4\u660e\u3002","title":"\u4f7f\u7528 PointerInput Modifier"},{"location":"design/gesture/custom_gesture/#api","text":"","title":"\u62d6\u52a8\u7c7b\u578b\u57fa\u7840 API"},{"location":"design/gesture/custom_gesture/#api_1","text":"API\u540d\u79f0 \u4f5c\u7528 detectDragGestures \u76d1\u542c\u62d6\u52a8\u624b\u52bf detectDragGesturesAfterLongPress \u76d1\u542c\u957f\u6309\u540e\u7684\u62d6\u52a8\u624b\u52bf detectHorizontalDragGestures \u76d1\u542c\u6c34\u5e73\u62d6\u52a8\u624b\u52bf detectVerticalDragGestures \u76d1\u542c\u5782\u76f4\u62d6\u52a8\u624b\u52bf \u8c08\u53ca\u62d6\u52a8\uff0c\u8bb8\u591a\u4eba\u7b2c\u4e00\u4e2a\u53cd\u5e94\u5c31\u662f Draggable Modifier \uff0c\u56e0\u4e3a Draggable Modifier \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u76d1\u542c UI \u7ec4\u4ef6\u62d6\u52a8\u80fd\u529b\u3002\u7136\u800c Draggable Modifier \u5728\u63d0\u4f9b\u4e86\u76d1\u542c UI \u7ec4\u4ef6\u62d6\u52a8\u80fd\u529b\u7684\u540c\u65f6\u4e5f\u62d3\u5c55\u589e\u52a0\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u901a\u8fc7 Draggable Modifier \u53c2\u6570\u5217\u8868\u5373\u53ef\u770b\u51fa\u3002\u4f8b\u5982\u901a\u8fc7\u4f7f\u7528 DraggableState \u5141\u8bb8\u5f00\u53d1\u8005\u6839\u636e\u9700\u6c42\u4f7f UI \u7ec4\u4ef6\u81ea\u52a8\u88ab\u62d6\u52a8\u3002 fun Modifier . draggable ( state : DraggableState , orientation : Orientation , enabled : Boolean = true , interactionSource : MutableInteractionSource? = null , startDragImmediately : Boolean = false , onDragStarted : suspend CoroutineScope .( startedPosition : Offset ) -> Unit = {}, onDragStopped : suspend CoroutineScope .( velocity : Float ) -> Unit = {}, reverseDirection : Boolean = false ) \u6211\u4eec\u4e0a\u9762\u6240\u7f57\u5217\u7684\u8fd9\u4e9b\u62d6\u52a8 API \u53ea\u63d0\u4f9b\u4e86\u76d1\u542c UI \u7ec4\u4ef6\u62d6\u52a8\u7684\u80fd\u529b\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u4e3a\u5176\u62d3\u5c55\u529f\u80fd\uff0c\u8fd9\u4e5f\u662f\u8fd9\u4e9bAPI\u6240\u5b58\u5728\u7684\u610f\u4e49\u3002\u6211\u4eec\u4ece\u5b57\u9762\u4e0a\u5c31\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a API \u6240\u5bf9\u5e94\u7684\u542b\u4e49\uff0c\u7531\u4e8e\u8fd9\u4e9bAPI\u7684\u529f\u80fd\u4e0e\u53c2\u6570\u76f8\u8fd1\uff0c\u8fd9\u91cc\u6211\u4eec\u4ec5\u4ee5 detectDragGestures \u4f5c\u4e3a\u4e3e\u4f8b\u8bf4\u660e\u3002","title":"API \u4ecb\u7ecd"},{"location":"design/gesture/custom_gesture/#_2","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5b8c\u6210\u4e00\u4e2a\u7eff\u8272\u65b9\u5757\u7684\u624b\u52bf\u62d6\u52a8\u3002\u5728 Draggabel Modifier \u4e2d\u6211\u4eec\u8fd8\u53ea\u80fd\u76d1\u542c\u5782\u76f4\u6216\u6c34\u5e73\u4e2d\u67d0\u4e00\u4e2a\u65b9\u5411\u7684\u624b\u52bf\u62d6\u52a8\uff0c\u800c\u4f7f\u7528 detectDragGestures \u6240\u6709\u624b\u52bf\u4fe1\u606f\u90fd\u662f\u53ef\u4ee5\u62ff\u5230\u7684\u3002\u5982\u679c\u6211\u4eec\u8fd8\u662f\u53ea\u5e0c\u671b\u62ff\u5230\u67d0\u4e00\u4e2a\u65b9\u5411\u7684\u624b\u52bf\u62d6\u52a8\uff0c\u4f7f\u7528 detectHorizontalDragGestures \u6216 detectVerticalDragGestures \u5373\u53ef\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 detectDragGestures \u5e76\u4e14\u5ffd\u7565\u6389\u67d0\u4e2a\u65b9\u5411\u7684\u624b\u52bf\u4fe1\u606f\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5728\u957f\u6309\u540e\u624d\u80fd\u62ff\u5230\u624b\u52bf\u4fe1\u606f\u53ef\u4ee5\u4f7f\u7528 detectDragGesturesAfterLongPress \u3002 detectDragGestures \u63d0\u4f9b\u4e86\u56db\u4e2a\u53c2\u6570\u3002 onDragStart (\u53ef\u9009)\uff1a\u62d6\u52a8\u5f00\u59cb\u65f6\u56de\u8c03 onDragEnd (\u53ef\u9009)\uff1a\u62d6\u52a8\u7ed3\u675f\u65f6\u56de\u8c03 onDragCancel (\u53ef\u9009)\uff1a\u62d6\u52a8\u53d6\u6d88\u65f6\u56de\u8c03 onDrag (\u5fc5\u987b)\uff1a\u62d6\u52a8\u65f6\u56de\u8c03 decectDragGestures \u7684\u6e90\u7801\u5206\u6790\u5728 awaitTouchSlopOrCancellation \u5c0f\u8282\u4f1a\u6709\u8bb2\u89e3\u3002 suspend fun PointerInputScope . detectDragGestures ( onDragStart : ( Offset ) -> Unit = { }, onDragEnd : () -> Unit = { }, onDragCancel : () -> Unit = { }, onDrag : ( change : PointerInputChange , dragAmount : Offset ) -> Unit ) \ud83d\udca1 Tips \u6709\u4e9b\u540c\u5b66\u53ef\u80fd\u56f0\u60d1 onDragCancel \u89e6\u53d1\u65f6\u673a\u3002\u5728\u4e00\u4e9b\u573a\u666f\u4e2d\uff0c\u5f53\u7ec4\u4ef6\u62d6\u52a8\u65f6\u4f1a\u6839\u636e\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u8fdb\u884c\u4e8b\u4ef6\u5206\u53d1\uff0c\u5f53\u524d\u9762\u5148\u5904\u7406\u4e8b\u4ef6\u7684\u7ec4\u4ef6\u6ee1\u8db3\u4e86\u8bbe\u7f6e\u7684\u6d88\u8d39\u6761\u4ef6\uff0c\u5bfc\u81f4\u624b\u52bf\u4e8b\u4ef6\u88ab\u6d88\u8d39\uff0c\u5bfc\u81f4\u672c\u7ec4\u4ef6\u62ff\u5230\u7684\u662f\u88ab\u6d88\u8d39\u7684\u624b\u52bf\u4e8b\u4ef6\uff0c\u4ece\u800c\u4f1a\u6267\u884c onDragCancel \u56de\u8c03\u3002\u5982\u4f55\u5b9a\u5236\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u5e76\u6d88\u8d39\u4e8b\u4ef6\u540e\u7eed\u4f1a\u8fdb\u884c\u8be6\u7ec6\u7684\u63cf\u8ff0\u3002 \u793a\u4f8b\u5982\u4e0b\u6240\u793a @Preview @Composable fun DragGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () ) { Box ( Modifier . size ( boxSize ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { detectDragGestures ( onDragStart = { offset -> // \u62d6\u52a8\u5f00\u59cb }, onDragEnd = { // \u62d6\u52a8\u7ed3\u675f }, onDragCancel = { // \u62d6\u52a8\u53d6\u6d88 }, onDrag = { change : PointerInputChange , dragAmount : Offset -> // \u62d6\u52a8\u65f6 offset += dragAmount } ) } ) } }","title":"\u4e3e\u4f8b\u8bf4\u660e"},{"location":"design/gesture/custom_gesture/#api_2","text":"","title":"\u70b9\u51fb\u7c7b\u578b\u57fa\u7840 API"},{"location":"design/gesture/custom_gesture/#api_3","text":"API\u540d\u79f0 \u4f5c\u7528 detectTapGestures \u76d1\u542c\u70b9\u51fb\u624b\u52bf \u4e0e Clickable Modifier \u4e0d\u540c\u7684\u662f\uff0c detectTapGestures \u53ef\u4ee5\u76d1\u542c\u66f4\u591a\u7684\u70b9\u51fb\u4e8b\u4ef6\u3002\u4f5c\u4e3a\u624b\u673a\u76d1\u542c\u7684\u57fa\u7840 API\uff0c\u5fc5\u7136\u4e0d\u4f1a\u5b58\u5728 Clickable Modifier \u6240\u62d3\u5c55\u7684\u6d9f\u6f2a\u6548\u679c\u3002","title":"API \u4ecb\u7ecd"},{"location":"design/gesture/custom_gesture/#_3","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4e3a\u4e00\u4e2a\u7eff\u8272\u65b9\u5757\u6dfb\u52a0\u70b9\u51fb\u624b\u52bf\u5904\u7406\u903b\u8f91\u3002 detectTapGestures \u63d0\u4f9b\u4e86\u56db\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u7528\u6765\u76d1\u542c\u4e0d\u540c\u70b9\u51fb\u4e8b\u4ef6\u3002 onDoubleTap (\u53ef\u9009)\uff1a\u53cc\u51fb\u65f6\u56de\u8c03 onLongPress (\u53ef\u9009)\uff1a\u957f\u6309\u65f6\u56de\u8c03 onPress (\u53ef\u9009)\uff1a\u6309\u4e0b\u65f6\u56de\u8c03 onTap (\u53ef\u9009)\uff1a\u8f7b\u89e6\u65f6\u56de\u8c03 suspend fun PointerInputScope . detectTapGestures ( onDoubleTap : (( Offset ) -> Unit ) ? = null , onLongPress : (( Offset ) -> Unit ) ? = null , onPress : suspend PressGestureScope .( Offset ) -> Unit = NoPressGesture , onTap : (( Offset ) -> Unit ) ? = null ) \ud83d\udca1 Tips onPress \u666e\u901a\u6309\u4e0b\u4e8b\u4ef6 onDoubleTap \u524d\u5fc5\u5b9a\u4f1a\u5148\u56de\u8c03 2 \u6b21 Press onLongPress \u524d\u5fc5\u5b9a\u4f1a\u5148\u56de\u8c03 1 \u6b21 Press\uff08\u65f6\u95f4\u957f\uff09 onTap \u524d\u5fc5\u5b9a\u4f1a\u5148\u56de\u8c03 1 \u6b21 Press\uff08\u65f6\u95f4\u77ed\uff09 \u793a\u4f8b\u5982\u4e0b\u6240\u793a @Preview @Composable fun TapGestureDemo () { var boxSize = 100. dp Box ( Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Box ( Modifier . size ( boxSize ) . background ( Color . Green ) . pointerInput ( Unit ) { detectTapGestures ( onDoubleTap = { offset : Offset -> // \u53cc\u51fb }, onLongPress = { offset : Offset -> // \u957f\u6309 }, onPress = { offset : Offset -> // \u6309\u4e0b }, onTap = { offset : Offset -> // \u8f7b\u89e6 } ) } ) } }","title":"\u4e3e\u4f8b\u8bf4\u660e"},{"location":"design/gesture/custom_gesture/#api_4","text":"","title":"\u53d8\u6362\u7c7b\u578b\u57fa\u7840 API"},{"location":"design/gesture/custom_gesture/#api_5","text":"API\u540d\u79f0 \u4f5c\u7528 detectTransformGestures \u76d1\u542c\u62d6\u52a8\u3001\u7f29\u653e\u4e0e\u65cb\u8f6c\u624b\u52bf \u4e0e Transfomer Modifier \u4e0d\u540c\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u4e2a API \u53ef\u4ee5\u76d1\u542c\u5355\u6307\u7684\u62d6\u52a8\u624b\u52bf\uff0c\u548c\u62d6\u52a8\u7c7b\u578b\u57fa\u7840 API\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u4e00\u6837\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u652f\u6301\u76d1\u542c\u53cc\u6307\u7f29\u653e\u4e0e\u65cb\u8f6c\u624b\u52bf\u3002\u53cd\u89c2 Transfomer Modifier \u53ea\u80fd\u76d1\u542c\u5230\u53cc\u6307\u62d6\u52a8\u624b\u52bf\uff0c\u4e0d\u77e5\u8bbe\u8ba1\u6210\u8fd9\u6837\u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u662f\u5426\u662f Google \u6709\u610f\u800c\u4e3a\u4e4b\u3002","title":"API \u4ecb\u7ecd"},{"location":"design/gesture/custom_gesture/#_4","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u4e3a\u8fd9\u4e2a\u7eff\u8272\u65b9\u5757\u6dfb\u52a0\u53d8\u5316\u624b\u52bf\u5904\u7406\u903b\u8f91\u3002 detectTransformGestures \u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53c2\u6570\u3002 panZoomLock(\u53ef\u9009)\uff1a \u5f53\u62d6\u52a8\u6216\u7f29\u653e\u624b\u52bf\u53d1\u751f\u65f6\u662f\u5426\u652f\u6301\u65cb\u8f6c onGesture(\u5fc5\u987b)\uff1a\u5f53\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u624b\u52bf\u53d1\u751f\u65f6\u56de\u8c03 suspend fun PointerInputScope . detectTransformGestures ( panZoomLock : Boolean = false , onGesture : ( centroid : Offset , pan : Offset , zoom : Float , rotation : Float ) -> Unit ) \ud83d\udca1 Tips \u5173\u4e8e\u504f\u79fb\u3001\u7f29\u653e\u4e0e\u65cb\u8f6c\uff0c\u6211\u4eec\u5efa\u8bae\u7684\u8c03\u7528\u987a\u5e8f\u662f rotate -> scale -> offset \u82e5offset\u53d1\u751f\u5728rotate\u4e4b\u524d\u65f6\uff0crotate\u4f1a\u5bf9offset\u9020\u6210\u5f71\u54cd\u3002\u5177\u4f53\u8868\u73b0\u4e3a\u5f53\u51fa\u73b0\u62d6\u52a8\u624b\u52bf\u65f6\uff0c\u7ec4\u4ef6\u4f1a\u4ee5\u5f53\u524d\u89d2\u5ea6\u4e3a\u5750\u6807\u8f74\u8fdb\u884c\u504f\u79fb\u3002 \u82e5offset\u53d1\u751f\u5728scale\u4e4b\u524d\u65f6\uff0cscale\u4e5f\u4f1a\u5bf9offset\u9020\u6210\u5f71\u54cd\u3002\u5177\u4f53\u8868\u73b0\u4e3aUI\u7ec4\u4ef6\u5728\u62d6\u52a8\u65f6\u4e0d\u8ddf\u624b @Preview @Composable fun TransformGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } var ratationAngle by remember { mutableStateOf ( 0f ) } var scale by remember { mutableStateOf ( 1f ) } Box ( Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Box ( Modifier . size ( boxSize ) . rotate ( ratationAngle ) // \u9700\u8981\u6ce8\u610foffset\u4e0erotate\u7684\u8c03\u7528\u5148\u540e\u987a\u5e8f . scale ( scale ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { detectTransformGestures ( panZoomLock = true , // \u5e73\u79fb\u6216\u653e\u5927\u65f6\u662f\u5426\u53ef\u4ee5\u65cb\u8f6c onGesture = { centroid : Offset , pan : Offset , zoom : Float , rotation : Float -> offset += pan scale *= zoom ratationAngle += rotation } ) } ) } }","title":"\u4e3e\u4f8b\u8bf4\u660e"},{"location":"design/gesture/custom_gesture/#foreachgesture","text":"\u5728\u4f20\u7edf View \u7cfb\u7edf\u4e2d\uff0c\u4e00\u6b21\u624b\u6307\u6309\u4e0b\u3001\u79fb\u52a8\u5230\u62ac\u8d77\u8fc7\u7a0b\u4e2d\u7684\u6240\u6709\u624b\u52bf\u4e8b\u4ef6\u53ef\u4ee5\u5171\u540c\u6784\u6210\u4e00\u4e2a\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u6765\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u8fdb\u884c\u5b9a\u5236\u5904\u7406\u3002Compose \u63d0\u4f9b\u4e86 forEachGesture \u4ee5\u5141\u8bb8\u7528\u6237\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u8fdb\u884c\u76f8\u540c\u7684\u5b9a\u5236\u5904\u7406\u3002\u5982\u679c\u6211\u4eec\u5fd8\u8bb0\u4f7f\u7528 forEachGesture \uff0c\u90a3\u4e48\u53ea\u4f1a\u5904\u7406\u7b2c\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\u5e8f\u5217\u3002\u6709\u4e9b\u540c\u5b66\u53ef\u80fd\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48\u6211\u4e0d\u80fd\u5728\u624b\u52bf\u5904\u7406\u903b\u8f91\u6700\u5916\u5c42\u5957\u4e00\u5c42 while(true) \u5462\uff0c\u901a\u8fc7 forEachGesture \u7684\u5b9e\u73b0\u6211\u4eec\u53ef\u4ee5\u770b\u5230 forEachGesture \u5176\u5b9e\u5185\u90e8\u4e5f\u662f\u7531 while \u5b9e\u73b0\u7684\uff0c\u9664\u6b64\u4e4b\u5916\u4ed6\u4fdd\u8bc1\u4e86\u534f\u7a0b\u53ea\u6709\u5b58\u6d3b\u65f6\u624d\u80fd\u76d1\u542c\u624b\u52bf\u4e8b\u4ef6\uff0c\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u4ea4\u4e92\u7ed3\u675f\u65f6\u6240\u6709\u624b\u6307\u90fd\u662f\u79bb\u5f00\u5c4f\u5e55\u7684\u3002\u6709\u4e9b\u540c\u5b66\u770b\u5230 while \u53ef\u80fd\u65b0\u751f\u7591\u95ee\uff0c\u96be\u9053\u8fd9\u6837\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\u561b\uff1f\u5176\u5b9e\u6211\u4eec\u5728\u4ecb\u7ecd PointerInput Modifier \u65f6\u5c31\u63d0\u5230\u8fc7\uff0c\u6211\u4eec\u7684\u624b\u52bf\u64cd\u4f5c\u5904\u7406\u5747\u53d1\u751f\u5728\u534f\u7a0b\u4e2d\u3002\u5176\u5b9e\u524d\u9762\u6211\u4eec\u6240\u63d0\u5230\u7684\u7edd\u5927\u591a\u6570 API \u5176\u5185\u90e8\u5b9e\u73b0\u5747\u4f7f\u7528\u4e86 forEachGesture \u3002\u6709\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\u6211\u4eec\u4ec5\u4f7f\u7528\u524d\u9762\u6240\u63d0\u51fa\u7684 API \u53ef\u80fd\u4ecd\u7136\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u5f53\u7136\u5982\u679c\u53ef\u4ee5\u6ee1\u8db3\u7684\u8bdd\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5176\u5206\u522b\u5bf9\u5e94\u7684 Modifier \u5373\u53ef\uff0c\u524d\u9762\u6240\u63d0\u51fa\u7684 API \u5b58\u5728\u7684\u610f\u4e49\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u4e3a\u5176\u8fdb\u884c\u529f\u80fd\u62d3\u5c55\u3002\u65e2\u7136\u8981\u638c\u63e1\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\uff0c\u6211\u4eec\u5c31\u8981\u4ece\u66f4\u5e95\u5c42\u89d2\u5ea6\u6765\u770b\u8fd9\u4e9b\u4e0a\u5c42 API \u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u4e86\u89e3\u539f\u7406\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u81ea\u5b9a\u4e49\u4e86\u3002 suspend fun PointerInputScope . forEachGesture ( block : suspend PointerInputScope .() -> Unit ) { val currentContext = currentCoroutineContext () while ( currentContext . isActive ) { try { block () // \u6302\u8d77\u7b49\u5f85\u6240\u6709\u624b\u6307\u62ac\u8d77 awaitAllPointersUp () } catch ( e : CancellationException ) { ... } } }","title":"forEachGesture"},{"location":"design/gesture/custom_gesture/#awaitpointereventscope","text":"\u5728 PointerInputScope \u4e2d\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u540d\u4e3a awaitPointerEventScope \u7684 API \u65b9\u6cd5\u3002 \u901a\u8fc7\u7ffb\u9605\u65b9\u6cd5\u58f0\u660e\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e2a\u6302\u8d77\u65b9\u6cd5\uff0c\u5176\u5c3e\u90e8 lambda \u5728 AwaitPointerEventScope \u4f5c\u7528\u57df\u4e2d\u3002 \u901a\u8fc7\u8fd9\u4e2a AwaitPointerEventScope \u4f5c\u7528\u57df\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5230\u66f4\u52a0\u5e95\u5c42\u7684 API \u624b\u52bf\u4e8b\u4ef6\uff0c\u8fd9\u4e5f\u4e3a\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u63d0\u4f9b\u4e86\u53ef\u80fd\u3002 suspend fun < R > awaitPointerEventScope ( block : suspend AwaitPointerEventScope .() -> R ): R \u6211\u4eec\u5728 AwaitPointerEventScope \u4e2d\u53d1\u73b0\u4e86\u4ee5\u4e0b\u8fd9\u4e9b\u57fa\u7840\u624b\u52bf\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b API \u5747\u662f\u6302\u8d77\u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u5bf9\u6bcf\u4e2a API \u8fdb\u884c\u63cf\u8ff0\u8bf4\u660e\u3002 API\u540d\u79f0 \u4f5c\u7528 awaitPointerEvent \u624b\u52bf\u4e8b\u4ef6 awaitFirstDown \u7b2c\u4e00\u6839\u624b\u6307\u7684\u6309\u4e0b\u4e8b\u4ef6 drag \u62d6\u52a8\u4e8b\u4ef6 horizontalDrag \u6c34\u5e73\u62d6\u52a8\u4e8b\u4ef6 verticalDrag \u5782\u76f4\u62d6\u52a8\u4e8b\u4ef6 awaitDragOrCancellation \u5355\u6b21\u62d6\u52a8\u4e8b\u4ef6 awaitHorizontalDragOrCancellation \u5355\u6b21\u6c34\u5e73\u62d6\u52a8\u4e8b\u4ef6 awaitVerticalDragOrCancellation \u5355\u6b21\u5782\u76f4\u62d6\u52a8\u4e8b\u4ef6 awaitTouchSlopOrCancellation \u6709\u6548\u62d6\u52a8\u4e8b\u4ef6 awaitHorizontalTouchSlopOrCancellation \u6709\u6548\u6c34\u5e73\u62d6\u52a8\u4e8b\u4ef6 awaitVerticalTouchSlopOrCancellation \u6709\u6548\u5782\u76f4\u62d6\u52a8\u4e8b\u4ef6","title":"\u624b\u52bf\u4e8b\u4ef6\u4f5c\u7528\u57df awaitPointerEventScope"},{"location":"design/gesture/custom_gesture/#awaitpointerevent","text":"awaitPointerEvent \u7c7b\u4f3c\u4e8e\u4f20\u7edf View \u7cfb\u7edf\u7684 onTouchEvent() \u3002\u65e0\u8bba\u7528\u6237\u662f\u6309\u4e0b\u3001\u79fb\u52a8\u6216\u62ac\u8d77\u90fd\u5c06\u89c6\u4f5c\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\uff0c\u5f53\u624b\u52bf\u4e8b\u4ef6\u53d1\u751f\u65f6 awaitPointerEvent \u4f1a\u6062\u590d\u6267\u884c\u5e76\u5c06\u624b\u52bf\u4e8b\u4ef6\u8fd4\u56de\u3002 suspend fun awaitPointerEvent ( pass : PointerEventPass = PointerEventPass . Main ): PointerEvent \u901a\u8fc7 API \u58f0\u660e\u53ef\u4ee5\u770b\u5230 awaitPointerEvent \u6709\u4e2a\u53ef\u9009\u53c2\u6570 PointerEventPass \u6211\u4eec\u77e5\u9053\u624b\u52bf\u4e8b\u4ef6\u7684\u5206\u53d1\u662f\u7531\u7236\u7ec4\u4ef6\u5230\u5b50\u7ec4\u4ef6\u7684\u5355\u94fe\u7ed3\u6784\u3002\u8fd9\u4e2a\u53c2\u6570\u76ee\u7684\u662f\u7528\u4ee5\u8bbe\u7f6e\u7236\u7ec4\u4ef6\u4e0e\u5b50\u7ec4\u4ef6\u7684\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\uff0c PointerEventPass \u6709 3 \u4e2a\u679a\u4e3e\u503c\u53ef\u4f9b\u9009\u62e9\uff0c\u6bcf\u4e2a\u679a\u4e3e\u503c\u7684\u5177\u4f53\u542b\u4e49\u5982\u4e0b \u679a\u4e3e\u503c \u542b\u4e49 PointerEventPass.Initial \u672c\u7ec4\u4ef6\u4f18\u5148\u5904\u7406\u624b\u52bf\uff0c\u5904\u7406\u540e\u4ea4\u7ed9\u5b50\u7ec4\u4ef6 PointerEventPass.Main \u82e5\u5b50\u7ec4\u4ef6\u4e3aFinal\uff0c\u672c\u7ec4\u4ef6\u4f18\u5148\u5904\u7406\u624b\u52bf\u3002\u5426\u5219\u5c06\u624b\u52bf\u4ea4\u7ed9\u5b50\u7ec4\u4ef6\u5904\u7406\uff0c\u7ed3\u675f\u540e\u672c\u7ec4\u4ef6\u518d\u5904\u7406\u3002 PointerEventPass.Final \u82e5\u5b50\u7ec4\u4ef6\u4e5f\u4e3aFinal\uff0c\u672c\u7ec4\u4ef6\u4f18\u5148\u5904\u7406\u624b\u52bf\u3002\u5426\u5219\u5c06\u624b\u52bf\u4ea4\u7ed9\u5b50\u7ec4\u4ef6\u5904\u7406\uff0c\u7ed3\u675f\u540e\u672c\u7ec4\u4ef6\u518d\u5904\u7406\u3002 \u5927\u5bb6\u53ef\u80fd\u89c9\u5f97 Main \u4e0e Final \u662f\u7b49\u4ef7\u7684\u3002\u4f46\u5176\u5b9e\u4e24\u8005\u5728\u4f5c\u4e3a\u5b50\u7ec4\u4ef6\u65f6\u5206\u53d1\u987a\u5e8f\u4f1a\u5b8c\u5168\u4e0d\u540c\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u3002 \u5f53\u7236\u7ec4\u4ef6\u4e3aFinal\uff0c\u5b50\u7ec4\u4ef6\u4e3aMain\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\uff1a \u5b50\u7ec4\u4ef6 -> \u7236\u7ec4\u4ef6 \u5f53\u7236\u7ec4\u4ef6\u4e3aFinal\uff0c\u5b50\u7ec4\u4ef6\u4e3aFinal\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\uff1a \u7236\u7ec4\u4ef6 -> \u5b50\u7ec4\u4ef6 \u6587\u5b57\u63cf\u8ff0\u53ef\u80fd\u5e76\u4e0d\u76f4\u89c2\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u4e3e\u4f8b\u8bf4\u660e\u3002","title":"\u4e07\u7269\u4e4b\u6e90 awaitPointerEvent"},{"location":"design/gesture/custom_gesture/#_5","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u901a\u8fc7\u4e00\u4e2a\u5d4c\u5957\u4e86\u4e09\u5c42 Box \u7684\u793a\u4f8b\u6765\u76f4\u89c2\u8868\u73b0\u4e8b\u4ef6\u5206\u53d1\u8fc7\u7a0b\u3002\u6211\u4eec\u4e3a\u8fd9\u5d4c\u5957\u7684\u4e09\u5c42Box \u4e2d\u7684\u6bcf\u4e00\u5c42\u90fd\u8fdb\u884c\u624b\u52bf\u83b7\u53d6\u3002 \u5982\u679c\u6211\u4eec\u70b9\u51fb\u4e2d\u95f4\u7684\u7eff\u8272\u65b9\u5757\u65f6\uff0c\u4fbf\u4f1a\u89e6\u53d1\u624b\u52bf\u4e8b\u4ef6\u3002 \u5f53\u4e09\u5c42 Box \u5747\u4f7f\u7528\u9ed8\u8ba4 Main \u6a21\u5f0f\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u4e3a\uff1a\u7b2c\u4e09\u5c42 -> \u7b2c\u4e8c\u5c42 -> \u7b2c\u4e00\u5c42 \u5f53\u7b2c\u4e00\u5c42Box\u4f7f\u7528 Inital \u6a21\u5f0f\uff0c\u7b2c\u4e8c\u5c42\u4f7f\u7528 Final \u6a21\u5f0f\uff0c\u7b2c\u4e09\u5c42\u4f7f\u7528 Main \u6a21\u5f0f\u65f6\uff0c\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u4e3a\uff1a\u7b2c\u4e00\u5c42 -> \u7b2c\u4e09\u5c42 -> \u7b2c\u4e8c\u5c42 @Preview @Composable fun NestedBoxDemo () { Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { awaitPointerEventScope { awaitPointerEvent ( PointerEventPass . Initial ) Log . d ( \"compose_study\" , \"first layer\" ) } } ) { Box ( contentAlignment = Alignment . Center , modifier = Modifier . size ( 400. dp ) . background ( Color . Blue ) . pointerInput ( Unit ) { awaitPointerEventScope { awaitPointerEvent ( PointerEventPass . Final ) Log . d ( \"compose_study\" , \"second layer\" ) } } ) { Box ( Modifier . size ( 200. dp ) . background ( Color . Green ) . pointerInput ( Unit ) { awaitPointerEventScope { awaitPointerEvent () Log . d ( \"compose_study\" , \"third layer\" ) } } ) } } } // Output: // first layer // third layer // second layer \u80fd\u591f\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u5206\u53d1\u987a\u5e8f\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u51b3\u5b9a\u624b\u52bf\u4e8b\u4ef6\u7531\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u4e2d\u54ea\u4e2a\u7ec4\u4ef6\u8fdb\u884c\u6d88\u8d39\u3002\u90a3\u4e48\u5982\u4f55\u8fdb\u884c\u6d88\u8d39\u5462\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u770b\u770b awaitPointerEvent \u8fd4\u56de\u7684\u624b\u52bf\u4e8b\u4ef6\u4e86\u3002\u901a\u8fc7 awaintPointerEvent \u58f0\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u7684\u624b\u52bf\u4e8b\u4ef6\u662f\u4e2a PointerEvent \u5b9e\u4f8b\u3002 \u901a\u8fc7 PointerEvent \u7c7b\u58f0\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6210\u5458\u5c5e\u6027 changes \u4e0e motionEvent\u3002 motionEvent \u6211\u4eec\u518d\u719f\u6089\u4e0d\u8fc7\u4e86\uff0c\u5c31\u662f\u4f20\u7edf View \u7cfb\u7edf\u4e2d\u7684\u624b\u52bf\u4e8b\u4ef6\uff0c\u7136\u800c\u5374\u88ab\u58f0\u660e\u4e86 internal \u5173\u952e\u5b57\uff0c\u770b\u6765\u662f\u4e0d\u5e0c\u671b\u6211\u4eec\u4f7f\u7528\u3002 changes \u662f\u4e00\u4e2a List\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6bcf\u6b21\u53d1\u751f\u624b\u52bf\u4e8b\u4ef6\u65f6\uff0c\u5c4f\u5e55\u4e0a\u6240\u6709\u624b\u6307\u7684\u72b6\u6001\u4fe1\u606f\u3002 \u5f53\u53ea\u6709\u4e00\u6839\u624b\u6307\u65f6\uff0c\u8fd9\u4e2a List \u7684\u5927\u5c0f\u4e3a 1\u3002\u5728\u591a\u6307\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a List \u83b7\u53d6\u5176\u4ed6\u624b\u6307\u7684\u72b6\u6001\u4fe1\u606f\u5c31\u53ef\u4ee5\u8f7b\u677e\u5b9a\u5236\u591a\u6307\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u4e86\u3002 actual data class PointerEvent internal constructor ( actual val changes : List < PointerInputChange > , internal val motionEvent : MotionEvent? )","title":"\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b"},{"location":"design/gesture/custom_gesture/#pointerinputchange","text":"class PointerInputChange ( val id : PointerId , // \u624b\u6307Id val uptimeMillis : Long , // \u5f53\u524d\u624b\u52bf\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233 val position : Offset , // \u5f53\u524d\u624b\u52bf\u4e8b\u4ef6\u76f8\u5bf9\u7ec4\u4ef6\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e val pressed : Boolean , // \u5f53\u524d\u624b\u52bf\u662f\u5426\u6309\u4e0b val previousUptimeMillis : Long , // \u4e0a\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233 val previousPosition : Offset , // \u4e0a\u4e00\u6b21\u624b\u52bf\u4e8b\u4ef6\u76f8\u5bf9\u7ec4\u4ef6\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e val previousPressed : Boolean , // \u4e0a\u4e00\u6b21\u624b\u52bf\u662f\u5426\u6309\u4e0b val consumed : ConsumedData , // \u5f53\u524d\u624b\u52bf\u662f\u5426\u5df2\u88ab\u6d88\u8d39 val type : PointerType = PointerType . Touch // \u624b\u52bf\u7c7b\u578b(\u9f20\u6807\u3001\u624b\u6307\u3001\u624b\u5199\u7b14\u3001\u6a61\u76ae) ) API\u540d\u79f0 \u4f5c\u7528 changedToDown \u662f\u5426\u5df2\u7ecf\u6309\u4e0b(\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56defalse) changedToDownIgnoreConsumed \u662f\u5426\u5df2\u7ecf\u6309\u4e0b(\u5ffd\u7565\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u6807\u8bb0) changedToUp \u662f\u5426\u5df2\u7ecf\u62ac\u8d77(\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56defalse) changedToUpIgnoreConsumed \u662f\u5426\u5df2\u7ecf\u62ac\u8d77(\u5ffd\u7565\u6309\u4e0b\u624b\u52bf\u5df2\u6d88\u8d39\u6807\u8bb0) positionChanged \u662f\u5426\u4f4d\u7f6e\u53d1\u751f\u4e86\u6539\u53d8(\u79fb\u52a8\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56defalse) positionChangedIgnoreConsumed \u662f\u5426\u4f4d\u7f6e\u53d1\u751f\u4e86\u6539\u53d8(\u5ffd\u7565\u5df2\u6d88\u8d39\u6807\u8bb0) positionChange \u4f4d\u7f6e\u6539\u53d8\u91cf(\u79fb\u52a8\u624b\u52bf\u5df2\u6d88\u8d39\u5219\u8fd4\u56deOffset.Zero) positionChangeIgnoreConsumed \u4f4d\u7f6e\u6539\u53d8\u91cf(\u5ffd\u7565\u79fb\u52a8\u624b\u52bf\u5df2\u6d88\u8d39\u6807\u8bb0) positionChangeConsumed \u5f53\u524d\u79fb\u52a8\u624b\u52bf\u662f\u5426\u5df2\u88ab\u6d88\u8d39 anyChangeConsumed \u5f53\u524d\u6309\u4e0b\u624b\u52bf\u6216\u79fb\u52a8\u624b\u52bf\u662f\u5426\u6709\u88ab\u6d88\u8d39 consumeDownChange \u6d88\u8d39\u6309\u4e0b\u624b\u52bf consumePositionChange \u6d88\u8d39\u79fb\u52a8\u624b\u52bf consumeAllChanges \u6d88\u8d39\u6309\u4e0b\u4e0e\u79fb\u52a8\u624b\u52bf isOutOfBounds \u5f53\u524d\u624b\u52bf\u662f\u5426\u5728\u56fa\u5b9a\u8303\u56f4\u5185 \u8fd9\u4e9b API \u4f1a\u5728\u6211\u4eec\u81ea\u5b9a\u4e49\u624b\u52bf\u5904\u7406\u65f6\u4f1a\u88ab\u7528\u5230\u3002\u53ef\u4ee5\u53d1\u73b0\u7684\u662f\uff0cCompose \u901a\u8fc7 PointerEventPass \u6765\u5b9a\u5236\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\uff0c\u5728\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u4e2d\u5373\u4f7f\u524d\u4e00\u4e2a\u7ec4\u4ef6\u5148\u83b7\u53d6\u4e86\u624b\u52bf\u4fe1\u606f\u5e76\u8fdb\u884c\u4e86\u6d88\u8d39\uff0c\u540e\u9762\u7684\u7ec4\u4ef6\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u5e26\u6709 IgnoreConsumed \u7cfb\u5217 API \u6765\u83b7\u53d6\u5230\u624b\u52bf\u4fe1\u606f\u3002\u8fd9\u4e5f\u6781\u5927\u589e\u52a0\u4e86\u624b\u52bf\u64cd\u4f5c\u7684\u53ef\u5b9a\u5236\u6027\u3002\u5c31\u597d\u50cf\u7236\u7ec4\u4ef6\u5148\u628a\u4e8b\u4ef6\u6d88\u8d39\uff0c\u5e0c\u671b\u5b50\u7ec4\u4ef6\u4e0d\u8981\u5904\u7406\u8fd9\u4e2a\u624b\u52bf\u4e86\uff0c\u4f46\u5b50\u7ec4\u4ef6\u5b8c\u5168\u53ef\u4ee5\u4e0d\u7528\u542c\u4ece\u7236\u7ec4\u4ef6\u7684\u8bdd\u3002 \u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\u6765\u770b\u770b\u8be5\u5982\u4f55\u8fdb\u884c\u624b\u52bf\u6d88\u8d39\uff0c\u5904\u4e8e\u65b9\u4fbf\u6211\u4eec\u7684\u793a\u4f8b\u4e0d\u6d89\u53ca\u79fb\u52a8\uff0c\u53ea\u6d88\u8d39\u6309\u4e0b\u624b\u52bf\u4e8b\u4ef6\u6765\u8fdb\u884c\u4e3e\u4f8b\u3002\u548c\u4e4b\u524d\u7684\u6837\u5f0f\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u624b\u52bf\u6d88\u8d39\u653e\u5728\u4e86\u7b2c\u4e09\u5c42 Box\uff0c\u6839\u636e\u4e8b\u4ef6\u5206\u53d1\u89c4\u5219\u6211\u4eec\u77e5\u9053\u7b2c\u4e09\u5c42Box\u662f\u7b2c2\u4e2a\u5904\u7406\u624b\u52bf\u4e8b\u4ef6\u7684\uff0c\u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u3002 @Preview @Composable fun Demo () { Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Initial ) Log . d ( \"compose_study\" , \"first layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } } ) { Box ( contentAlignment = Alignment . Center , modifier = Modifier . size ( 400. dp ) . background ( Color . Blue ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Final ) Log . d ( \"compose_study\" , \"second layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } } ) { Box ( Modifier . size ( 200. dp ) . background ( Color . Green ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent () event . changes [ 0 ] . consumeDownChange () Log . d ( \"compose_study\" , \"third layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } } ) } } } // Output: // first layer, downChange: false // third layer, downChange: true // second layer, downChange: true \u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u6211\u4eec\u662f\u5728\u5b9a\u5236\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\uff0c\u90a3\u4e48\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u4e24\u79cd\u5199\u6cd5 // \u6b63\u786e\u5199\u6cd5 awaitPointerEventScope { var event = awaitPointerEvent () event . changes [ 0 ] . consumeDownChange () } // \u9519\u8bef\u5199\u6cd5 var event = awaitPointerEventScope { awaitPointerEvent () } event . changes [ 0 ] . consumeDownChange () \u4ed6\u4eec\u7684\u533a\u522b\u5728\u4e8e awaitPointerEventScope \u4f1a\u5728\u5176\u5185\u90e8\u6240\u6709\u624b\u52bf\u5728\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u7ed3\u675f\u540e\u8fd4\u56de\uff0c\u5f53\u6240\u6709\u7ec4\u4ef6\u90fd\u5df2\u7ecf\u5b8c\u6210\u624b\u52bf\u5904\u7406\u518d\u8fdb\u884c\u6d88\u8d39\u5df2\u7ecf\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u4e86\u3002\u6211\u4eec\u4ecd\u7136\u7528\u521a\u624d\u7684\u4f8b\u5b50\u6765\u76f4\u89c2\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u5728\u6bcf\u4e00\u5c42Box awaitPointerEventScope \u540e\u9762\u6dfb\u52a0\u4e86\u65e5\u5fd7\u4fe1\u606f\u3002 \u901a\u8fc7\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e09\u5c42\u6267\u884c\u7684\u76f8\u5bf9\u987a\u5e8f\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u7136\u800c\u5374\u662f\u5728\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u7ed3\u675f\u540e\u624d\u8fdb\u884c\u8f93\u51fa\u7684\u3002 @Preview @Composable fun Demo () { Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Initial ) Log . d ( \"compose_study\" , \"first layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } Log . d ( \"compose_study\" , \"first layer Outside\" ) } ) { Box ( contentAlignment = Alignment . Center , modifier = Modifier . size ( 400. dp ) . background ( Color . Blue ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent ( PointerEventPass . Final ) Log . d ( \"compose_study\" , \"second layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } Log . d ( \"compose_study\" , \"second layer Outside\" ) } ) { Box ( Modifier . size ( 200. dp ) . background ( Color . Green ) . pointerInput ( Unit ) { awaitPointerEventScope { var event = awaitPointerEvent () event . changes [ 0 ] . consumeDownChange () Log . d ( \"compose_study\" , \"third layer, downChange: ${ event . changes [ 0 ] . consumed . downChange } \" ) } Log . d ( \"compose_study\" , \"third layer Outside\" ) } ) } } } // Output: // first layer, downChange: false // third layer, downChange: true // second layer, downChange: true // first layer Outside // third layer Outside // second layer Outside","title":"PointerInputChange"},{"location":"design/gesture/custom_gesture/#awaitfirstdown","text":"awaitFirstDown \u5c06\u7b49\u5f85\u7b2c\u4e00\u6839\u624b\u6307\u6309\u4e0b\u4e8b\u4ef6\u65f6\u6062\u590d\u6267\u884c\uff0c\u5e76\u5c06\u624b\u6307\u6309\u4e0b\u4e8b\u4ef6\u8fd4\u56de\u3002\u5206\u6790\u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 awaitFirstDown \u4e5f\u4f7f\u7528\u7684\u662f awaitPointerEvent \u5b9e\u73b0\u7684\uff0c\u9ed8\u8ba4\u4f7f\u7528 Main \u6a21\u5f0f\u3002 suspend fun AwaitPointerEventScope . awaitFirstDown ( requireUnconsumed : Boolean = true ): PointerInputChange { var event : PointerEvent do { event = awaitPointerEvent () } while ( ! event . changes . fastAll { if ( requireUnconsumed ) it . changedToDown () else it . changedToDownIgnoreConsumed () } ) return event . changes [ 0 ] }","title":"awaitFirstDown"},{"location":"design/gesture/custom_gesture/#drag","text":"\u770b\u5230 drag \u53ef\u80fd\u5f88\u591a\u540c\u5b66\u7591\u60d1\u4e3a\u4ec0\u4e48\u53c8\u662f\u62d6\u52a8\u3002\u5176\u5b9e\u524d\u9762\u6240\u63d0\u5230\u7684\u62d6\u52a8\u7c7b\u578b\u57fa\u7840API detectDragGestures \u5176\u5185\u90e8\u5c31\u662f\u4f7f\u7528 drag \u800c\u5b9e\u73b0\u7684\u3002\u4e0e detectDragGestures \u4e0d\u540c\u7684\u662f\uff0c drag \u9700\u8981\u4e3b\u52a8\u4f20\u5165\u4e00\u4e2a PointerId \u7528\u4ee5\u8868\u793a\u8981\u5177\u4f53\u83b7\u53d6\u5230\u54ea\u6839\u624b\u6307\u7684\u62d6\u52a8\u4e8b\u4ef6\u3002 suspend fun AwaitPointerEventScope . drag ( pointerId : PointerId , onDrag : ( PointerInputChange ) -> Unit ) \u7ffb\u9605\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e drag \u5185\u90e8\u5b9e\u73b0\u6700\u7ec8\u4f7f\u7528\u7684\u4ecd\u7136\u8fd8\u662f awaitPointerEvent \u3002\u8fd9\u91cc\u5c31\u4e0d\u5177\u4f53\u5c55\u5f00\u770b\u4e86\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u5df1\u53bb\u8ddf\u6e90\u7801\u3002","title":"drag"},{"location":"design/gesture/custom_gesture/#_6","text":"\u901a\u8fc7\u7ed3\u5408 awaitFirstDown \u4e0e drag \u8fd9\u4e9b\u57fa\u7840 API \u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0 UI \u62d6\u52a8\u624b\u52bf\u6d41\u7a0b\u4e86\u3002\u6211\u4eec\u4ecd\u7136\u4ee5\u6211\u4eec\u7684\u7eff\u8272\u65b9\u5757\u4f5c\u4e3a\u5b9e\u4f8b\uff0c\u4e3a\u5176\u6dfb\u52a0\u62d6\u52a8\u624b\u52bf\u3002 @Preview @Composable fun BaseDragGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () ) { Box ( Modifier . size ( boxSize ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { forEachGesture { // \u5faa\u73af\u76d1\u542c\u6bcf\u4e00\u7ec4\u4e8b\u4ef6\u5e8f\u5217 awaitPointerEventScope { var downEvent = awaitFirstDown () drag ( downEvent . id ) { offset += it . positionChange () } } } } ) } }","title":"\u4e3e\u4f8b\u8bf4\u660e"},{"location":"design/gesture/custom_gesture/#awaitdragorcancellation","text":"\u4e0e drag \u4e0d\u540c\u7684\u662f\uff0c awaitDragOrCancellation \u8d1f\u8d23\u76d1\u542c\u5355\u6b21\u62d6\u52a8\u4e8b\u4ef6\u3002\u5f53\u624b\u6307\u5df2\u7ecf\u62ac\u8d77\u6216\u62d6\u52a8\u4e8b\u4ef6\u5df2\u7ecf\u88ab\u6d88\u8d39\u65f6\u4f1a\u8fd4\u56de null\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 awaitDragOrCancellation \u6765\u5b8c\u6210 UI \u62d6\u52a8\u624b\u52bf\u5904\u7406\u6d41\u7a0b\u3002\u901a\u8fc7\u7ffb\u9605\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0 drag \u5176\u5b9e\u5185\u90e8\u4e5f\u662f\u4f7f\u7528 awaitDragOrCancellation \u8fdb\u884c\u5b9e\u73b0\u7684\u3002\u800c awaitDragOrCancellation \u5185\u90e8\u4ecd\u7136\u662f awaitPointerEvent \u3002 @Preview @Composable fun BaseDragGestureDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } Box ( contentAlignment = Alignment . Center , modifier = Modifier . fillMaxSize () ) { Box ( Modifier . size ( boxSize ) . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . background ( Color . Green ) . pointerInput ( Unit ) { forEachGesture { awaitPointerEventScope { var downPointer = awaitFirstDown () while ( true ) { var event = awaitDragOrCancellation ( downPointer . id ) if ( event == null ) { break } offset += event . positionChange () } } } } ) } }","title":"awaitDragOrCancellation"},{"location":"design/gesture/custom_gesture/#awaittouchsloporcancellation","text":"awaitTouchSlopOrCancellation \u7528\u4e8e\u76d1\u6d4b\u5f53\u524d\u62d6\u52a8\u624b\u52bf\u662f\u5426\u662f\u4e00\u6b21\u6709\u6548\u7684\u62d6\u52a8\u3002\u6709\u6548\u6307\u7684\u662f\u5f53\u524d\u624b\u52bf\u6ed1\u52a8\u7684\u6b27\u5f0f\u8ddd\u79bb(\u4f4d\u79fb)\u662f\u5426\u8d85\u8fc7\u8bbe\u5b9a\u7684\u9608\u503c\u3002\u82e5\u62d6\u52a8\u624b\u52bf\u8fd8\u6ca1\u6709\u8fbe\u5230\u9608\u503c\u4fbf\u62ac\u8d77\u6216\u62d6\u52a8\u624b\u52bf\u4e8b\u4ef6\u5df2\u7ecf\u88ab\u6d88\u8d39\u65f6\u5c06\u8fd4\u56denull\uff0c\u7ffb\u9605\u6e90\u7801\u6211\u4eec\u53c8\u627e\u5230\u4e86 awaitPointerEvent \uff0c\u6240\u4ee5\u8bf4 awaitPointerEvent \u662f\u4e07\u7269\u4e4b\u6e90\u561b\uff5e\u3002 suspend fun AwaitPointerEventScope . awaitTouchSlopOrCancellation ( pointerId : PointerId , onTouchSlopReached : ( change : PointerInputChange , overSlop : Offset ) -> Unit ): PointerInputChange? { ... val touchSlop = viewConfiguration . touchSlop var pointer = pointerId while ( true ) { val event = awaitPointerEvent () ... if ( dragEvent . positionChangeConsumed ()) { ... } else if ( dragEvent . changedToUpIgnoreConsumed ()) { ... } else { ... if ( distance >= touchSlop ) { ... } ... } } } \u6211\u4eec\u524d\u9762\u6240\u63d0\u5230\u7684 detectDragGestures \u5176\u5185\u90e8\u4e0d\u4ec5\u4f7f\u7528\u4e86 drag \u8fd8\u4f7f\u7528\u4e86 awaitTouchSlopOrCancellation \u6765\u5224\u65ad\u624b\u52bf\u62d6\u52a8\u64cd\u4f5c\u3002\u4ec5\u5f53\u76d1\u6d4b\u4e3a\u4e00\u6b21\u6709\u6548\u7684\u62d6\u52a8\u65f6\uff0c\u624d\u4f1a\u6267\u884c onDragStart \u56de\u8c03\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u4f7f\u7528 drag \u6765\u76d1\u542c\u62d6\u52a8\u624b\u52bf\uff0c\u4ec5\u5f53 drag \u8fd4\u56de false (\u5373\u5728\u62d6\u52a8\u8fc7\u7a0b\u4e2d\u4e8b\u4ef6\u5206\u53d1\u6d41\u7a0b\u524d\u9762\u7684\u7ec4\u4ef6\u8fbe\u6210\u5b9a\u5236\u6761\u4ef6\u6d88\u8d39\u4e86\u8fd9\u6b21\u7684\u62d6\u52a8\u624b\u52bf\u4e8b\u4ef6) \u4f1a\u6267\u884c onDragCancel \u56de\u8c03\uff0c\u5426\u5219\u5982\u679c\u6240\u6709\u624b\u6307\u62ac\u8d77\u6b63\u5e38\u7ed3\u675f\u5219\u4f1a\u6267\u884c onDragEnd \u56de\u8c03\u3002 suspend fun PointerInputScope . detectDragGestures ( onDragStart : ( Offset ) -> Unit = { }, onDragEnd : () -> Unit = { }, onDragCancel : () -> Unit = { }, onDrag : ( change : PointerInputChange , dragAmount : Offset ) -> Unit ) { forEachGesture { awaitPointerEventScope { .... do { drag = awaitTouchSlopOrCancellation ( down . id ) { change , over -> change . consumePositionChange () overSlop = over } } while ( drag != null && ! drag . positionChangeConsumed ()) if ( drag != null ) { onDragStart . invoke ( drag . position ) // \u62d6\u52a8\u5f00\u59cb onDrag ( drag , overSlop ) if ( ! drag ( drag . id ) { onDrag ( it , it . positionChange ()) it . consumePositionChange () } ) { onDragCancel () // \u62d6\u52a8\u53d6\u6d88 } else { onDragEnd () } } } } }","title":"awaitTouchSlopOrCancellation"},{"location":"design/gesture/draggable/","text":"1. Draggable\u80fd\u505a\u4ec0\u4e48 draggable \u4fee\u9970\u7b26\u5141\u8bb8\u5f00\u53d1\u8005\u76d1\u542cUI\u7ec4\u4ef6\u7684\u62d6\u52a8\u624b\u52bf\u504f\u79fb\u91cf\uff0c\u901a\u8fc7\u504f\u79fb\u91cf\u4ece\u800c\u53ef\u4ee5\u5b9a\u5236UI\u52a8\u753b\u6548\u679c\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c draggable \u4fee\u9970\u7b26\u53ea\u80fd\u76d1\u542c\u5782\u76f4\u65b9\u5411\u504f\u79fb\u6216\u6c34\u5e73\u65b9\u5411\u504f\u79fb\u3002 2. Draggable\u53c2\u6570\u5217\u8868 \u4f7f\u7528 draggable \u4fee\u9970\u7b26\u81f3\u5c11\u9700\u8981\u4f20\u5165\u4e24\u4e2a\u53c2\u6570 draggableState \u3001 orientation draggableState\uff1a\u901a\u8fc7 draggableState \u53ef\u4ee5\u83b7\u53d6\u5230\u62d6\u52a8\u624b\u52bf\u7684\u504f\u79fb\u91cf\uff0c\u5e76\u5141\u8bb8\u5f00\u53d1\u8005\u52a8\u6001\u63a7\u5236\u504f\u79fb\u91cf orientation\uff1a\u76d1\u542c\u7684\u62d6\u52a8\u624b\u52bf\u65b9\u5411\uff0c\u53ea\u80fd\u662f\u6c34\u5e73\u65b9\u5411(Orientation.Horizontal)\u6216\u5782\u76f4\u65b9\u5411(Orientation.Vertical) fun Modifier . draggable ( state : DraggableState , orientation : Orientation , enabled : Boolean = true , interactionSource : MutableInteractionSource? = null , startDragImmediately : Boolean = false , onDragStarted : suspend CoroutineScope .( startedPosition : Offset ) -> Unit = {}, onDragStopped : suspend CoroutineScope .( velocity : Float ) -> Unit = {}, reverseDirection : Boolean = false ) 3. Draggable\u4f7f\u7528\u793a\u4f8b \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Draggable \u4fee\u9970\u7b26\u5b8c\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u6ed1\u5757\u62d6\u52a8\u52a8\u753b\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e86\u6ed1\u5757\u504f\u79fb\u91cf\u4ee5\u53ca\u6ed1\u5757\u7684\u8fb9\u957f\u3002 \u901a\u8fc7 rememberDraggableState \u65b9\u6cd5\u83b7\u53d6 DraggableState \u5b9e\u4f8b\uff0c\u901a\u8fc7\u56de\u8c03lambda\u76d1\u542c\u5f53\u524d\u7684\u504f\u79fb\u91cf\u5e76\u8fdb\u884c\u7d2f\u52a0\uff0c\u5e76\u4e14\u9650\u5236\u4e86\u6ed1\u5757\u7684\u504f\u79fb\u533a\u95f4\u3002 var offsetX by remember { mutableStateOf ( 0f ) } val boxSideLengthDp = 50. dp val boxSildeLengthPx = with ( LocalDensity . current ) { boxSideLengthDp . toPx () } val draggableState = rememberDraggableState { offsetX = ( offsetX + it ). coerceIn ( 0f , 3 * boxSildeLengthPx ) } \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4e3a draggable \u4fee\u9970\u7b26\u63d0\u4f9b\u7ed9draggableState\u4e0eorientation\u4e86\u3002 \u6ce8\u610f\uff1a\u7531\u4e8eModifer\u94fe\u5f0f\u6267\u884c\uff0c\u6b64\u65f6offset\u5fc5\u9700\u5728draggable\u4e0ebackground\u524d\u9762\u3002 \u26a0\ufe0f\u9519\u8bef\u793a\u4f8b1(draggable\u5728offset\u524d\u9762) : \u7b2c\u4e8c\u6b21\u62d6\u52a8\u65f6UI\u63a7\u4ef6\u62d6\u52a8\u53ea\u80fd\u62d6\u52a8\u521d\u59cb\u4f4d\u7f6e\u624d\u751f\u6548\uff0c\u4e0d\u4f1a\u8ddf\u968fUI\u63a7\u4ef6\u800c\u79fb\u52a8\u76d1\u542c\uff0c\u539f\u56e0\u662f\u6bcf\u6b21\u62d6\u52a8\u65f6draggable\u90fd\u76d1\u542c\u7684\u90fd\u662f\u521d\u59cb\u4f4d\u7f6e\uff0c\u4e0d\u662f\u504f\u79fb\u540e\u4f4d\u7f6e\u3002 \u26a0\ufe0f\u9519\u8bef\u793a\u4f8b2(background\u5728offset\u524d\u9762) : UI\u63a7\u4ef6\u7ed8\u5236\u7684\u9ed1\u5757\u4e0d\u4f1a\u8ddf\u624b\uff0c\u539f\u56e0\u5728\u4e8e\u6bcf\u6b21\u7ed8\u5236\u65f6background\u90fd\u5728\u521d\u59cb\u4f4d\u7f6e\u7ed8\u5236\uff0c\u4e0d\u662f\u504f\u79fb\u540e\u4f4d\u7f6e\u3002 Box ( Modifier . width ( boxSideLengthDp * 4 ) . height ( boxSideLengthDp ) . background ( Color . LightGray ) ) { Box ( Modifier . size ( boxSideLengthDp ) . offset { IntOffset ( offsetX . roundToInt (), 0 ) } . draggable ( orientation = Orientation . Horizontal , state = draggableState ) . background ( Color . DarkGray ) ) } \u6548\u679c\u5c55\u793a","title":"Draggable\u62d6\u52a8"},{"location":"design/gesture/draggable/#1-draggable","text":"draggable \u4fee\u9970\u7b26\u5141\u8bb8\u5f00\u53d1\u8005\u76d1\u542cUI\u7ec4\u4ef6\u7684\u62d6\u52a8\u624b\u52bf\u504f\u79fb\u91cf\uff0c\u901a\u8fc7\u504f\u79fb\u91cf\u4ece\u800c\u53ef\u4ee5\u5b9a\u5236UI\u52a8\u753b\u6548\u679c\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c draggable \u4fee\u9970\u7b26\u53ea\u80fd\u76d1\u542c\u5782\u76f4\u65b9\u5411\u504f\u79fb\u6216\u6c34\u5e73\u65b9\u5411\u504f\u79fb\u3002","title":"1. Draggable\u80fd\u505a\u4ec0\u4e48"},{"location":"design/gesture/draggable/#2-draggable","text":"\u4f7f\u7528 draggable \u4fee\u9970\u7b26\u81f3\u5c11\u9700\u8981\u4f20\u5165\u4e24\u4e2a\u53c2\u6570 draggableState \u3001 orientation draggableState\uff1a\u901a\u8fc7 draggableState \u53ef\u4ee5\u83b7\u53d6\u5230\u62d6\u52a8\u624b\u52bf\u7684\u504f\u79fb\u91cf\uff0c\u5e76\u5141\u8bb8\u5f00\u53d1\u8005\u52a8\u6001\u63a7\u5236\u504f\u79fb\u91cf orientation\uff1a\u76d1\u542c\u7684\u62d6\u52a8\u624b\u52bf\u65b9\u5411\uff0c\u53ea\u80fd\u662f\u6c34\u5e73\u65b9\u5411(Orientation.Horizontal)\u6216\u5782\u76f4\u65b9\u5411(Orientation.Vertical) fun Modifier . draggable ( state : DraggableState , orientation : Orientation , enabled : Boolean = true , interactionSource : MutableInteractionSource? = null , startDragImmediately : Boolean = false , onDragStarted : suspend CoroutineScope .( startedPosition : Offset ) -> Unit = {}, onDragStopped : suspend CoroutineScope .( velocity : Float ) -> Unit = {}, reverseDirection : Boolean = false )","title":"2. Draggable\u53c2\u6570\u5217\u8868"},{"location":"design/gesture/draggable/#3-draggable","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Draggable \u4fee\u9970\u7b26\u5b8c\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u6ed1\u5757\u62d6\u52a8\u52a8\u753b\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e86\u6ed1\u5757\u504f\u79fb\u91cf\u4ee5\u53ca\u6ed1\u5757\u7684\u8fb9\u957f\u3002 \u901a\u8fc7 rememberDraggableState \u65b9\u6cd5\u83b7\u53d6 DraggableState \u5b9e\u4f8b\uff0c\u901a\u8fc7\u56de\u8c03lambda\u76d1\u542c\u5f53\u524d\u7684\u504f\u79fb\u91cf\u5e76\u8fdb\u884c\u7d2f\u52a0\uff0c\u5e76\u4e14\u9650\u5236\u4e86\u6ed1\u5757\u7684\u504f\u79fb\u533a\u95f4\u3002 var offsetX by remember { mutableStateOf ( 0f ) } val boxSideLengthDp = 50. dp val boxSildeLengthPx = with ( LocalDensity . current ) { boxSideLengthDp . toPx () } val draggableState = rememberDraggableState { offsetX = ( offsetX + it ). coerceIn ( 0f , 3 * boxSildeLengthPx ) } \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4e3a draggable \u4fee\u9970\u7b26\u63d0\u4f9b\u7ed9draggableState\u4e0eorientation\u4e86\u3002 \u6ce8\u610f\uff1a\u7531\u4e8eModifer\u94fe\u5f0f\u6267\u884c\uff0c\u6b64\u65f6offset\u5fc5\u9700\u5728draggable\u4e0ebackground\u524d\u9762\u3002 \u26a0\ufe0f\u9519\u8bef\u793a\u4f8b1(draggable\u5728offset\u524d\u9762) : \u7b2c\u4e8c\u6b21\u62d6\u52a8\u65f6UI\u63a7\u4ef6\u62d6\u52a8\u53ea\u80fd\u62d6\u52a8\u521d\u59cb\u4f4d\u7f6e\u624d\u751f\u6548\uff0c\u4e0d\u4f1a\u8ddf\u968fUI\u63a7\u4ef6\u800c\u79fb\u52a8\u76d1\u542c\uff0c\u539f\u56e0\u662f\u6bcf\u6b21\u62d6\u52a8\u65f6draggable\u90fd\u76d1\u542c\u7684\u90fd\u662f\u521d\u59cb\u4f4d\u7f6e\uff0c\u4e0d\u662f\u504f\u79fb\u540e\u4f4d\u7f6e\u3002 \u26a0\ufe0f\u9519\u8bef\u793a\u4f8b2(background\u5728offset\u524d\u9762) : UI\u63a7\u4ef6\u7ed8\u5236\u7684\u9ed1\u5757\u4e0d\u4f1a\u8ddf\u624b\uff0c\u539f\u56e0\u5728\u4e8e\u6bcf\u6b21\u7ed8\u5236\u65f6background\u90fd\u5728\u521d\u59cb\u4f4d\u7f6e\u7ed8\u5236\uff0c\u4e0d\u662f\u504f\u79fb\u540e\u4f4d\u7f6e\u3002 Box ( Modifier . width ( boxSideLengthDp * 4 ) . height ( boxSideLengthDp ) . background ( Color . LightGray ) ) { Box ( Modifier . size ( boxSideLengthDp ) . offset { IntOffset ( offsetX . roundToInt (), 0 ) } . draggable ( orientation = Orientation . Horizontal , state = draggableState ) . background ( Color . DarkGray ) ) } \u6548\u679c\u5c55\u793a","title":"3. Draggable\u4f7f\u7528\u793a\u4f8b"},{"location":"design/gesture/nested_scroll/","text":"nestedScroll \u4ecb\u7ecd nestedScroll \u4fee\u9970\u7b26\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u5d4c\u5957\u6ed1\u52a8\u7684\u573a\u666f\uff0c\u4e3a\u7236\u5e03\u5c40\u52ab\u6301\u6d88\u8d39\u5b50\u5e03\u5c40\u6ed1\u52a8\u624b\u52bf\u63d0\u4f9b\u4e86\u53ef\u80fd\u3002 nestedScroll \u53c2\u6570\u5217\u8868 \u4f7f\u7528 nestedScroll \u53c2\u6570\u5217\u8868\u4e2d\u6709\u4e00\u4e2a\u5fc5\u9009\u53c2\u6570 connection \u548c\u4e00\u4e2a\u53ef\u9009\u53c2\u6570 dispatcher connection: \u5d4c\u5957\u6ed1\u52a8\u624b\u52bf\u5904\u7406\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u5185\u90e8\u56de\u8c03\u53ef\u4ee5\u5728\u5b50\u5e03\u5c40\u83b7\u5f97\u6ed1\u52a8\u4e8b\u4ef6\u524d\u9884\u5148\u6d88\u8d39\u6389\u90e8\u5206\u6216\u5168\u90e8\u624b\u52bf\u504f\u79fb\u91cf\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5b50\u5e03\u5c40\u6d88\u8d39\u540e\u5269\u4e0b\u7684\u624b\u52bf\u504f\u79fb\u91cf\u3002 dispatcher\uff1a\u8c03\u5ea6\u5668\uff0c\u5185\u90e8\u5305\u542b\u7528\u4e8e\u7236\u5e03\u5c40\u7684 NestedScrollConnection , \u53ef\u4ee5\u8c03\u7528 dispatch* \u65b9\u6cd5\u6765\u901a\u77e5\u7236\u5e03\u5c40\u53d1\u751f\u6ed1\u52a8 fun Modifier . nestedScroll ( connection : NestedScrollConnection , dispatcher : NestedScrollDispatcher? = null ) NestedScrollConnection NestedScrollConnection \u63d0\u4f9b\u4e86\u56db\u4e2a\u56de\u8c03\u65b9\u6cd5\u3002 interface NestedScrollConnection { fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset = Offset . Zero fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset = Offset . Zero suspend fun onPreFling ( available : Velocity ): Velocity = Velocity . Zero suspend fun onPostFling ( consumed : Velocity , available : Velocity ): Velocity { return Velocity . Zero } } onPreScroll \u65b9\u6cd5\u63cf\u8ff0\uff1a\u9884\u5148\u52ab\u6301\u6ed1\u52a8\u4e8b\u4ef6\uff0c\u6d88\u8d39\u540e\u518d\u4ea4\u7531\u5b50\u5e03\u5c40\u3002 \u53c2\u6570\u5217\u8868\uff1a available\uff1a\u5f53\u524d\u53ef\u7528\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf source\uff1a\u6ed1\u52a8\u4e8b\u4ef6\u7684\u7c7b\u578b \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Offset.Zero onPostScroll \u65b9\u6cd5\u63cf\u8ff0\uff1a\u83b7\u53d6\u5b50\u5e03\u5c40\u5904\u7406\u540e\u7684\u6ed1\u52a8\u4e8b\u4ef6 \u53c2\u6570\u5217\u8868\uff1a consumed\uff1a\u4e4b\u524d\u6d88\u8d39\u7684\u6240\u6709\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf available\uff1a\u5f53\u524d\u5269\u4e0b\u8fd8\u53ef\u7528\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf source\uff1a\u6ed1\u52a8\u4e8b\u4ef6\u7684\u7c7b\u578b \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Offset.Zero \uff0c\u5219\u5269\u4e0b\u504f\u79fb\u91cf\u4f1a\u7ee7\u7eed\u4ea4\u7531\u5f53\u524d\u5e03\u5c40\u7684\u7236\u5e03\u5c40\u8fdb\u884c\u5904\u7406 onPreFling \u65b9\u6cd5\u63cf\u8ff0\uff1a\u83b7\u53d6 Fling \u5f00\u59cb\u65f6\u7684\u901f\u5ea6\u3002 \u53c2\u6570\u5217\u8868\uff1a available\uff1a Fling \u5f00\u59cb\u65f6\u7684\u901f\u5ea6 \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u901f\u5ea6\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Velocity.Zero onPostFling \u65b9\u6cd5\u63cf\u8ff0\uff1a\u83b7\u53d6 Fling \u7ed3\u675f\u65f6\u7684\u901f\u5ea6\u4fe1\u606f\u3002 \u53c2\u6570\u5217\u8868\uff1a consumed\uff1a\u4e4b\u524d\u6d88\u8d39\u7684\u6240\u6709\u901f\u5ea6 available\uff1a\u5f53\u524d\u5269\u4e0b\u8fd8\u53ef\u7528\u7684\u901f\u5ea6 \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u901f\u5ea6\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Velocity.Zero \uff0c\u5269\u4e0b\u901f\u5ea6\u4f1a\u7ee7\u7eed\u4ea4\u7531\u5f53\u524d\u5e03\u5c40\u7684\u7236\u5e03\u5c40\u8fdb\u884c\u5904\u7406\u3002 \u6ce8\u610f Fling\u542b\u4e49\uff1a\u5f53\u6211\u4eec\u624b\u6307\u5728\u6ed1\u52a8\u5217\u8868\u65f6\uff0c\u5982\u679c\u662f\u5feb\u901f\u6ed1\u52a8\u5e76\u62ac\u8d77\uff0c\u5219\u5217\u8868\u4f1a\u6839\u636e\u60ef\u6027\u7ee7\u7eed\u98d8\u4e00\u6bb5\u8ddd\u79bb\u540e\u505c\u4e0b\uff0c\u8fd9\u4e2a\u884c\u4e3a\u5c31\u662f Fling \uff0c onPreFling \u5728\u4f60\u624b\u6307\u521a\u62ac\u8d77\u65f6\u4fbf\u4f1a\u56de\u8c03\uff0c\u800c onPostFling \u4f1a\u5728\u98d8\u4e00\u6bb5\u8ddd\u79bb\u505c\u4e0b\u540e\u56de\u8c03\u3002 \u793a\u4f8b\uff1a\u4e0b\u6ed1\u5237\u65b0 \u50cf\u4e0b\u6ed1\u5237\u65b0\u8fd9\u6837\u6d89\u53ca\u5230\u5d4c\u5957\u6ed1\u52a8\u7684\u624b\u52bf\u884c\u4e3a\u5c31\u53ef\u4ee5\u4f7f\u7528 nestedScroll \u4fee\u9970\u7b26\u6765\u5b8c\u6210\u3002 \u793a\u4f8b\u4ecb\u7ecd \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\u5b58\u5728\u7740\u52a0\u8f7d\u52a8\u753b\u548c\u5217\u8868\u6570\u636e\u3002\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0b\u6ed1\u65f6\uff0c\u6b64\u65f6\u5982\u679c\u5217\u8868\u9876\u90e8\u6ca1\u6709\u6570\u636e\u5219\u4f1a\u9010\u6e10\u51fa\u73b0\u52a0\u8f7d\u52a8\u753b\u3002\u4e0e\u4e4b\u76f8\u53cd\uff0c\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6ed1\u65f6\uff0c\u6b64\u65f6\u5982\u679c\u52a0\u8f7d\u52a8\u753b\u8fd8\u5728\uff0c\u5219\u52a0\u8f7d\u52a8\u753b\u9010\u6e10\u5411\u4e0a\u6d88\u5931\uff0c\u76f4\u5230\u52a0\u8f7d\u52a8\u753b\u5b8c\u5168\u6d88\u5931\u540e\uff0c\u5217\u8868\u624d\u4f1a\u88ab\u5411\u4e0b\u6ed1\u52a8\u3002 \u8bbe\u8ba1\u5b9e\u73b0\u65b9\u6848 \u4e3a\u5b9e\u73b0\u8fd9\u4e2a\u6ed1\u52a8\u5237\u65b0\u7684\u9700\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u5982\u4e0b\u65b9\u6848\u3002\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u52a0\u8f7d\u52a8\u753b\u548c\u5217\u8868\u6570\u636e\u653e\u5230\u4e00\u4e2a\u7236\u5e03\u5c40\u4e2d\u7edf\u4e00\u7ba1\u7406\u3002 \u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0b\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u4ea4\u7ed9\u5b50\u5e03\u5c40\u4e2d\u7684\u5217\u8868\u8fdb\u884c\u5904\u7406\uff0c\u5982\u679c\u5217\u8868\u5df2\u7ecf\u6ed1\u5230\u9876\u90e8\u8bf4\u660e\u6b64\u65f6\u6ed1\u52a8\u624b\u52bf\u4e8b\u4ef6\u6ca1\u6709\u88ab\u6d88\u8d39\uff0c\u6b64\u65f6\u518d\u4ea4\u7531\u7236\u5e03\u5c40\u8fdb\u884c\u6d88\u8d39\u3002\u7236\u5e03\u5c40\u53ef\u4ee5\u6d88\u8d39\u5217\u8868\u6d88\u8d39\u5269\u4e0b\u7684\u6ed1\u52a8\u624b\u52bf\u4e8b\u4ef6\uff08\u4e3a\u52a0\u8f7d\u52a8\u753b\u589e\u52a0\u504f\u79fb\uff09\u3002 \u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u88ab\u7236\u5e03\u5c40\u6d88\u8d39\uff08\u4e3a\u52a0\u8f7d\u52a8\u753b\u51cf\u5c0f\u504f\u79fb\uff09\uff0c\u5982\u679c\u52a0\u8f7d\u52a8\u753b\u672c\u8eab\u4ecd\u672a\u51fa\u73b0\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u6d88\u8d39\u3002\u7136\u540e\u5c06\u5269\u4e0b\u7684\u6ed1\u52a8\u624b\u52bf\u4ea4\u7ed9\u5b50\u5e03\u5c40\u5217\u8868\u8fdb\u884c\u6d88\u8d39\u3002 NestedScrollConnection \u5b9e\u73b0 \u4f7f\u7528 nestedScroll \u4fee\u9970\u7b26\u6700\u91cd\u8981\u7684\u5c31\u662f\u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u573a\u666f\u6765\u5b9a\u5236 NestedScrollConnection \u7684\u5b9e\u73b0\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u9010\u4e2a\u5206\u6790 NestedScrollConnection \u91cd\u7684\u501f\u53e3\u8be5\u5982\u4f55\u8fdb\u884c\u5b9e\u73b0\u3002 \u5b9e\u73b0 onPostScroll \u5411\u6211\u4eec\u4e4b\u524d\u8bbe\u8ba1\u7684\u5b9e\u73b0\u65b9\u6848\u4e00\u6837\uff0c\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0b\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u4ea4\u7ed9\u5b50\u5e03\u5c40\u4e2d\u7684\u5217\u8868\u8fdb\u884c\u5904\u7406\uff0c\u5982\u679c\u5217\u8868\u5df2\u7ecf\u6ed1\u5230\u9876\u90e8\u8bf4\u660e\u6b64\u65f6\u6ed1\u52a8\u624b\u52bf\u4e8b\u4ef6\u6ca1\u6709\u88ab\u6d88\u8d39\uff0c\u6b64\u65f6\u518d\u4ea4\u7531\u7236\u5e03\u5c40\u8fdb\u884c\u6d88\u8d39\u3002 onPostScroll \u56de\u8c03\u65f6\u673a\u662f\u7b26\u5408\u6211\u4eec\u7684\u9700\u6c42\u7684\u3002 \u6211\u4eec\u9996\u5148\u9700\u8981\u5224\u65ad\u8be5\u6ed1\u52a8\u4e8b\u4ef6\u662f\u4e0d\u662f\u62d6\u52a8\u4e8b\u4ef6\uff0c\u901a\u8fc7 available.y > 0 \u5224\u65ad\u662f\u5426\u662f\u4e0b\u6ed1\u624b\u52bf\uff0c\u5982\u679c\u90fd\u6ca1\u95ee\u9898\u65f6\uff0c\u901a\u77e5\u52a0\u8f7d\u52a8\u753b\u589e\u52a0\u504f\u79fb\u91cf\u3002\u8fd4\u56de\u503c Offset(x = 0f, y = available.y) \u610f\u5473\u7740\u5c06\u5269\u4e0b\u7684\u6240\u6709\u504f\u79fb\u91cf\u5168\u90e8\u6d88\u8d39\u8c03\uff0c\u4e0d\u518d\u5411\u5916\u5c42\u7236\u5e03\u5c40\u7ee7\u7eed\u4f20\u64ad\u4e86\u3002 override fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset { if ( source == NestedScrollSource . Drag && available . y > 0 ) { state . updateOffsetDelta ( available . y ) return Offset ( x = 0f , y = available . y ) } else { return Offset . Zero } } \u5b9e\u73b0 onPreScroll \u4e0e\u4e0a\u9762\u76f8\u53cd\uff0c\u6b64\u65f6\u6211\u4eec\u5e0c\u671b\u4e0b\u6ed1\u6536\u56de\u52a0\u8f7d\u52a8\u753b\uff0c\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u88ab\u7236\u5e03\u5c40\u6d88\u8d39\uff08\u4e3a\u52a0\u8f7d\u52a8\u753b\u51cf\u5c0f\u504f\u79fb\uff09\uff0c\u5982\u679c\u52a0\u8f7d\u52a8\u753b\u672c\u8eab\u4ecd\u672a\u51fa\u73b0\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u6d88\u8d39\u3002\u7136\u540e\u5c06\u5269\u4e0b\u7684\u6ed1\u52a8\u624b\u52bf\u4ea4\u7ed9\u5b50\u5e03\u5c40\u5217\u8868\u8fdb\u884c\u6d88\u8d39\u3002 onPreScroll \u56de\u8c03\u65f6\u673a\u662f\u7b26\u5408\u8fd9\u4e2a\u9700\u6c42\u7684\u3002 \u6211\u4eec\u9996\u5148\u9700\u8981\u5224\u65ad\u8be5\u6ed1\u52a8\u4e8b\u4ef6\u662f\u4e0d\u662f\u62d6\u52a8\u4e8b\u4ef6\uff0c\u901a\u8fc7 available.y < 0 \u5224\u65ad\u662f\u5426\u662f\u4e0a\u6ed1\u624b\u52bf\u3002\u6b64\u65f6\u53ef\u80fd\u52a0\u8f7d\u52a8\u753b\u672c\u8eab\u672a\u51fa\u73b0\uff0c\u6240\u4ee5\u9700\u8981\u989d\u5916\u8fdb\u884c\u5224\u65ad\u3002\u5982\u679c\u672a\u51fa\u73b0\u5219\u8fd4\u56de Offset.Zero \u4e0d\u6d88\u8d39\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u5219\u8fd4\u56de Offset(x = 0f, y = available.y) \u8fdb\u884c\u6d88\u8d39\u3002 override fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset { if ( source == NestedScrollSource . Drag && available . y < 0 ) { state . updateOffsetDelta ( available . y ) return if ( state . isSwipeInProgress ) Offset ( x = 0f , y = available . y ) else Offset . Zero } else { return Offset . Zero } } \u5b9e\u73b0 onPreFling \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u677e\u624b\u65f6\u7684\u5438\u9644\u6548\u679c\u3002\u5982\u679c\u62c9\u8fc7\u52a0\u8f7d\u52a8\u753b\u9ad8\u5ea6\u7684\u4e00\u822c\u5219\u8fdb\u884c\u52a0\u8f7d\uff0c\u5426\u5219\u5c31\u6536\u7f29\u56de\u521d\u59cb\u72b6\u6001\u3002\u524d\u95ee\u6211\u63d0\u5230\u4e86 onPreFling \u5728\u677e\u624b\u65f6\u56de\u8c03\uff0c\u5373\u7b26\u5408\u6211\u4eec\u5f53\u524d\u8fd9\u4e2a\u7684\u573a\u666f\u3002 \u6ce8\u610f \u5373\u4f7f\u4f60\u677e\u624b\u65f6\u901f\u5ea6\u5f88\u6162\u6216\u9759\u6b62\uff0c onPreFling \u4e0e onPostFling \u90fd\u4f1a\u56de\u8c03\uff0c\u53ea\u662f\u901f\u5ea6\u6570\u503c\u5f88\u5c0f\u3002 \u8fd9\u91cc\u6211\u4eec\u53ea\u9700\u8981\u5438\u5f15\u6548\u679c\uff0c\u5e76\u4e0d\u5e0c\u671b\u6d88\u8d39\u901f\u5ea6\uff0c\u6240\u4ee5\u8fd4\u56de Velocity.Zero \u5373\u53ef override suspend fun onPreFling ( available : Velocity ): Velocity { if ( state . indicatorOffset > height / 2 ) { state . animateToOffset ( height ) state . isRefreshing = true } else { state . animateToOffset ( 0. dp ) } return Velocity . Zero } \u5b9e\u73b0 onPreFling \u7531\u4e8e\u6211\u4eec\u7684\u4e0b\u6ed1\u5237\u65b0\u624b\u52bf\u5904\u7406\u4e0d\u6d89\u53ca onPreFling \u56de\u8c03\u65f6\u673a\uff0c\u6240\u4ee5\u4e0d\u8fdb\u884c\u989d\u5916\u7684\u5b9e\u73b0\u3002 \u793a\u4f8b\u6e90\u7801 \u672c\u793a\u4f8b\u7684\u5b8c\u6574\u6e90\u7801\u5df2\u7ecf\u5f00\u6e90\u5728\u6211\u7684 Github Repo \u4e2d\uff0c\u6b22\u8fce\u8fdb\u884c\u9605\u8bfb\u5e76\u63d0\u4ea4\u4efb\u4f55\u53cd\u9988\u3002 \u793a\u4f8b\uff1a\u4f38\u7f29 ToolBar \u6548\u679c\u56fe \u5f53\u5217\u8868\u5411\u4e0a\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0a\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0a\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0a\u6ed1\u52a8 \u5f53\u5217\u8868\u5411\u4e0b\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0b\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0b\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0b\u6ed1\u52a8 NestedScrollConnection \u5b9e\u73b0 \u4f4d\u79fb\u91cf\u5b9a\u4e49 // \u5b9a\u4e49 ToolBar \u7684\u9ad8\u5ea6 val toolbarHeight = 200. dp // ToolBar \u6700\u5927\u5411\u4e0a\u4f4d\u79fb\u91cf // 56.dp \u53c2\u8003\u81ea androidx.compose.material AppBar.kt \u91cc\u9762\u5b9a\u4e49\u7684 private val AppBarHeight = 56.dp val maxUpPx = with ( LocalDensity . current ) { toolbarHeight . roundToPx (). toFloat () - 56. dp . roundToPx (). toFloat () } // ToolBar \u6700\u5c0f\u5411\u4e0a\u4f4d\u79fb\u91cf val minUpPx = 0f // \u504f\u79fb\u6298\u53e0\u5de5\u5177\u680f\u4e0a\u79fb\u9ad8\u5ea6 val toolbarOffsetHeightPx = remember { mutableStateOf ( 0f ) } onPreScroll \u5b9e\u73b0 val nestedScrollConnection = remember { object : NestedScrollConnection { override fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset { val delta = available . y val newOffset = toolbarOffsetHeightPx . value + delta // \u8bbe\u7f6e ToolBar \u7684\u4f4d\u79fb\u8303\u56f4 toolbarOffsetHeightPx . value = newOffset . coerceIn ( - maxUpPx , - minUpPx ) return Offset . Zero } } } \u5e03\u5c40\u5b9e\u73b0 Box ( Modifier . fillMaxSize () . nestedScroll ( nestedScrollConnection ) // \u4f5c\u4e3a\u7236\u7ea7\u9644\u52a0\u5230\u5d4c\u5957\u6eda\u52a8\u7cfb\u7edf ) { // \u5217\u8868\u5e26\u6709\u5185\u7f6e\u7684\u5d4c\u5957\u6eda\u52a8\u652f\u6301\uff0c\u5b83\u5c06\u901a\u77e5\u6211\u4eec\u5b83\u7684\u6eda\u52a8 LazyColumn ( contentPadding = PaddingValues ( top = toolbarHeight )) { items ( 100 ) { index -> Text ( \"I'm item $ index \" , modifier = Modifier . fillMaxWidth (). padding ( 16. dp )) } } ScrollableAppBar ( title = \"toolbar offset is ${ toolbarOffsetHeightPx . value } \" , backgroundImageId = R . drawable . top_bar_bk , scrollableAppBarHeight = toolbarHeight , toolbarOffsetHeightPx = toolbarOffsetHeightPx ) } ScrollableAppBar \u5b9e\u73b0 \u5173\u4e8e ScrollableAppBar \u7684\u5b9a\u4e49,\u8bf7\u53c2\u8003 ScrollableAppBar \uff0c\u5982\u679c\u60f3\u4e86\u89e3 ScrollableAppBar \u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003 Compose \u4f38\u7f29ToolBar\u7684\u5b9e\u73b0","title":"NestedScroll\u5d4c\u5957\u6ed1\u52a8"},{"location":"design/gesture/nested_scroll/#nestedscroll","text":"nestedScroll \u4fee\u9970\u7b26\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u5d4c\u5957\u6ed1\u52a8\u7684\u573a\u666f\uff0c\u4e3a\u7236\u5e03\u5c40\u52ab\u6301\u6d88\u8d39\u5b50\u5e03\u5c40\u6ed1\u52a8\u624b\u52bf\u63d0\u4f9b\u4e86\u53ef\u80fd\u3002","title":"nestedScroll \u4ecb\u7ecd"},{"location":"design/gesture/nested_scroll/#nestedscroll_1","text":"\u4f7f\u7528 nestedScroll \u53c2\u6570\u5217\u8868\u4e2d\u6709\u4e00\u4e2a\u5fc5\u9009\u53c2\u6570 connection \u548c\u4e00\u4e2a\u53ef\u9009\u53c2\u6570 dispatcher connection: \u5d4c\u5957\u6ed1\u52a8\u624b\u52bf\u5904\u7406\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u5185\u90e8\u56de\u8c03\u53ef\u4ee5\u5728\u5b50\u5e03\u5c40\u83b7\u5f97\u6ed1\u52a8\u4e8b\u4ef6\u524d\u9884\u5148\u6d88\u8d39\u6389\u90e8\u5206\u6216\u5168\u90e8\u624b\u52bf\u504f\u79fb\u91cf\uff0c\u4e5f\u53ef\u4ee5\u83b7\u53d6\u5b50\u5e03\u5c40\u6d88\u8d39\u540e\u5269\u4e0b\u7684\u624b\u52bf\u504f\u79fb\u91cf\u3002 dispatcher\uff1a\u8c03\u5ea6\u5668\uff0c\u5185\u90e8\u5305\u542b\u7528\u4e8e\u7236\u5e03\u5c40\u7684 NestedScrollConnection , \u53ef\u4ee5\u8c03\u7528 dispatch* \u65b9\u6cd5\u6765\u901a\u77e5\u7236\u5e03\u5c40\u53d1\u751f\u6ed1\u52a8 fun Modifier . nestedScroll ( connection : NestedScrollConnection , dispatcher : NestedScrollDispatcher? = null )","title":"nestedScroll \u53c2\u6570\u5217\u8868"},{"location":"design/gesture/nested_scroll/#nestedscrollconnection","text":"NestedScrollConnection \u63d0\u4f9b\u4e86\u56db\u4e2a\u56de\u8c03\u65b9\u6cd5\u3002 interface NestedScrollConnection { fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset = Offset . Zero fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset = Offset . Zero suspend fun onPreFling ( available : Velocity ): Velocity = Velocity . Zero suspend fun onPostFling ( consumed : Velocity , available : Velocity ): Velocity { return Velocity . Zero } }","title":"NestedScrollConnection"},{"location":"design/gesture/nested_scroll/#onprescroll","text":"\u65b9\u6cd5\u63cf\u8ff0\uff1a\u9884\u5148\u52ab\u6301\u6ed1\u52a8\u4e8b\u4ef6\uff0c\u6d88\u8d39\u540e\u518d\u4ea4\u7531\u5b50\u5e03\u5c40\u3002 \u53c2\u6570\u5217\u8868\uff1a available\uff1a\u5f53\u524d\u53ef\u7528\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf source\uff1a\u6ed1\u52a8\u4e8b\u4ef6\u7684\u7c7b\u578b \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Offset.Zero","title":"onPreScroll"},{"location":"design/gesture/nested_scroll/#onpostscroll","text":"\u65b9\u6cd5\u63cf\u8ff0\uff1a\u83b7\u53d6\u5b50\u5e03\u5c40\u5904\u7406\u540e\u7684\u6ed1\u52a8\u4e8b\u4ef6 \u53c2\u6570\u5217\u8868\uff1a consumed\uff1a\u4e4b\u524d\u6d88\u8d39\u7684\u6240\u6709\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf available\uff1a\u5f53\u524d\u5269\u4e0b\u8fd8\u53ef\u7528\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf source\uff1a\u6ed1\u52a8\u4e8b\u4ef6\u7684\u7c7b\u578b \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Offset.Zero \uff0c\u5219\u5269\u4e0b\u504f\u79fb\u91cf\u4f1a\u7ee7\u7eed\u4ea4\u7531\u5f53\u524d\u5e03\u5c40\u7684\u7236\u5e03\u5c40\u8fdb\u884c\u5904\u7406","title":"onPostScroll"},{"location":"design/gesture/nested_scroll/#onprefling","text":"\u65b9\u6cd5\u63cf\u8ff0\uff1a\u83b7\u53d6 Fling \u5f00\u59cb\u65f6\u7684\u901f\u5ea6\u3002 \u53c2\u6570\u5217\u8868\uff1a available\uff1a Fling \u5f00\u59cb\u65f6\u7684\u901f\u5ea6 \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u901f\u5ea6\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Velocity.Zero","title":"onPreFling"},{"location":"design/gesture/nested_scroll/#onpostfling","text":"\u65b9\u6cd5\u63cf\u8ff0\uff1a\u83b7\u53d6 Fling \u7ed3\u675f\u65f6\u7684\u901f\u5ea6\u4fe1\u606f\u3002 \u53c2\u6570\u5217\u8868\uff1a consumed\uff1a\u4e4b\u524d\u6d88\u8d39\u7684\u6240\u6709\u901f\u5ea6 available\uff1a\u5f53\u524d\u5269\u4e0b\u8fd8\u53ef\u7528\u7684\u901f\u5ea6 \u8fd4\u56de\u503c\uff1a\u5f53\u524d\u7ec4\u4ef6\u6d88\u8d39\u7684\u901f\u5ea6\uff0c\u5982\u679c\u4e0d\u60f3\u6d88\u8d39\u53ef\u8fd4\u56de Velocity.Zero \uff0c\u5269\u4e0b\u901f\u5ea6\u4f1a\u7ee7\u7eed\u4ea4\u7531\u5f53\u524d\u5e03\u5c40\u7684\u7236\u5e03\u5c40\u8fdb\u884c\u5904\u7406\u3002 \u6ce8\u610f Fling\u542b\u4e49\uff1a\u5f53\u6211\u4eec\u624b\u6307\u5728\u6ed1\u52a8\u5217\u8868\u65f6\uff0c\u5982\u679c\u662f\u5feb\u901f\u6ed1\u52a8\u5e76\u62ac\u8d77\uff0c\u5219\u5217\u8868\u4f1a\u6839\u636e\u60ef\u6027\u7ee7\u7eed\u98d8\u4e00\u6bb5\u8ddd\u79bb\u540e\u505c\u4e0b\uff0c\u8fd9\u4e2a\u884c\u4e3a\u5c31\u662f Fling \uff0c onPreFling \u5728\u4f60\u624b\u6307\u521a\u62ac\u8d77\u65f6\u4fbf\u4f1a\u56de\u8c03\uff0c\u800c onPostFling \u4f1a\u5728\u98d8\u4e00\u6bb5\u8ddd\u79bb\u505c\u4e0b\u540e\u56de\u8c03\u3002","title":"onPostFling"},{"location":"design/gesture/nested_scroll/#_1","text":"\u50cf\u4e0b\u6ed1\u5237\u65b0\u8fd9\u6837\u6d89\u53ca\u5230\u5d4c\u5957\u6ed1\u52a8\u7684\u624b\u52bf\u884c\u4e3a\u5c31\u53ef\u4ee5\u4f7f\u7528 nestedScroll \u4fee\u9970\u7b26\u6765\u5b8c\u6210\u3002","title":"\u793a\u4f8b\uff1a\u4e0b\u6ed1\u5237\u65b0"},{"location":"design/gesture/nested_scroll/#_2","text":"\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\u5b58\u5728\u7740\u52a0\u8f7d\u52a8\u753b\u548c\u5217\u8868\u6570\u636e\u3002\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0b\u6ed1\u65f6\uff0c\u6b64\u65f6\u5982\u679c\u5217\u8868\u9876\u90e8\u6ca1\u6709\u6570\u636e\u5219\u4f1a\u9010\u6e10\u51fa\u73b0\u52a0\u8f7d\u52a8\u753b\u3002\u4e0e\u4e4b\u76f8\u53cd\uff0c\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6ed1\u65f6\uff0c\u6b64\u65f6\u5982\u679c\u52a0\u8f7d\u52a8\u753b\u8fd8\u5728\uff0c\u5219\u52a0\u8f7d\u52a8\u753b\u9010\u6e10\u5411\u4e0a\u6d88\u5931\uff0c\u76f4\u5230\u52a0\u8f7d\u52a8\u753b\u5b8c\u5168\u6d88\u5931\u540e\uff0c\u5217\u8868\u624d\u4f1a\u88ab\u5411\u4e0b\u6ed1\u52a8\u3002","title":"\u793a\u4f8b\u4ecb\u7ecd"},{"location":"design/gesture/nested_scroll/#_3","text":"\u4e3a\u5b9e\u73b0\u8fd9\u4e2a\u6ed1\u52a8\u5237\u65b0\u7684\u9700\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u5982\u4e0b\u65b9\u6848\u3002\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u52a0\u8f7d\u52a8\u753b\u548c\u5217\u8868\u6570\u636e\u653e\u5230\u4e00\u4e2a\u7236\u5e03\u5c40\u4e2d\u7edf\u4e00\u7ba1\u7406\u3002 \u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0b\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u4ea4\u7ed9\u5b50\u5e03\u5c40\u4e2d\u7684\u5217\u8868\u8fdb\u884c\u5904\u7406\uff0c\u5982\u679c\u5217\u8868\u5df2\u7ecf\u6ed1\u5230\u9876\u90e8\u8bf4\u660e\u6b64\u65f6\u6ed1\u52a8\u624b\u52bf\u4e8b\u4ef6\u6ca1\u6709\u88ab\u6d88\u8d39\uff0c\u6b64\u65f6\u518d\u4ea4\u7531\u7236\u5e03\u5c40\u8fdb\u884c\u6d88\u8d39\u3002\u7236\u5e03\u5c40\u53ef\u4ee5\u6d88\u8d39\u5217\u8868\u6d88\u8d39\u5269\u4e0b\u7684\u6ed1\u52a8\u624b\u52bf\u4e8b\u4ef6\uff08\u4e3a\u52a0\u8f7d\u52a8\u753b\u589e\u52a0\u504f\u79fb\uff09\u3002 \u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u88ab\u7236\u5e03\u5c40\u6d88\u8d39\uff08\u4e3a\u52a0\u8f7d\u52a8\u753b\u51cf\u5c0f\u504f\u79fb\uff09\uff0c\u5982\u679c\u52a0\u8f7d\u52a8\u753b\u672c\u8eab\u4ecd\u672a\u51fa\u73b0\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u6d88\u8d39\u3002\u7136\u540e\u5c06\u5269\u4e0b\u7684\u6ed1\u52a8\u624b\u52bf\u4ea4\u7ed9\u5b50\u5e03\u5c40\u5217\u8868\u8fdb\u884c\u6d88\u8d39\u3002","title":"\u8bbe\u8ba1\u5b9e\u73b0\u65b9\u6848"},{"location":"design/gesture/nested_scroll/#nestedscrollconnection_1","text":"\u4f7f\u7528 nestedScroll \u4fee\u9970\u7b26\u6700\u91cd\u8981\u7684\u5c31\u662f\u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u573a\u666f\u6765\u5b9a\u5236 NestedScrollConnection \u7684\u5b9e\u73b0\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u9010\u4e2a\u5206\u6790 NestedScrollConnection \u91cd\u7684\u501f\u53e3\u8be5\u5982\u4f55\u8fdb\u884c\u5b9e\u73b0\u3002","title":"NestedScrollConnection \u5b9e\u73b0"},{"location":"design/gesture/nested_scroll/#onpostscroll_1","text":"\u5411\u6211\u4eec\u4e4b\u524d\u8bbe\u8ba1\u7684\u5b9e\u73b0\u65b9\u6848\u4e00\u6837\uff0c\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0b\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u4ea4\u7ed9\u5b50\u5e03\u5c40\u4e2d\u7684\u5217\u8868\u8fdb\u884c\u5904\u7406\uff0c\u5982\u679c\u5217\u8868\u5df2\u7ecf\u6ed1\u5230\u9876\u90e8\u8bf4\u660e\u6b64\u65f6\u6ed1\u52a8\u624b\u52bf\u4e8b\u4ef6\u6ca1\u6709\u88ab\u6d88\u8d39\uff0c\u6b64\u65f6\u518d\u4ea4\u7531\u7236\u5e03\u5c40\u8fdb\u884c\u6d88\u8d39\u3002 onPostScroll \u56de\u8c03\u65f6\u673a\u662f\u7b26\u5408\u6211\u4eec\u7684\u9700\u6c42\u7684\u3002 \u6211\u4eec\u9996\u5148\u9700\u8981\u5224\u65ad\u8be5\u6ed1\u52a8\u4e8b\u4ef6\u662f\u4e0d\u662f\u62d6\u52a8\u4e8b\u4ef6\uff0c\u901a\u8fc7 available.y > 0 \u5224\u65ad\u662f\u5426\u662f\u4e0b\u6ed1\u624b\u52bf\uff0c\u5982\u679c\u90fd\u6ca1\u95ee\u9898\u65f6\uff0c\u901a\u77e5\u52a0\u8f7d\u52a8\u753b\u589e\u52a0\u504f\u79fb\u91cf\u3002\u8fd4\u56de\u503c Offset(x = 0f, y = available.y) \u610f\u5473\u7740\u5c06\u5269\u4e0b\u7684\u6240\u6709\u504f\u79fb\u91cf\u5168\u90e8\u6d88\u8d39\u8c03\uff0c\u4e0d\u518d\u5411\u5916\u5c42\u7236\u5e03\u5c40\u7ee7\u7eed\u4f20\u64ad\u4e86\u3002 override fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset { if ( source == NestedScrollSource . Drag && available . y > 0 ) { state . updateOffsetDelta ( available . y ) return Offset ( x = 0f , y = available . y ) } else { return Offset . Zero } }","title":"\u5b9e\u73b0 onPostScroll"},{"location":"design/gesture/nested_scroll/#onprescroll_1","text":"\u4e0e\u4e0a\u9762\u76f8\u53cd\uff0c\u6b64\u65f6\u6211\u4eec\u5e0c\u671b\u4e0b\u6ed1\u6536\u56de\u52a0\u8f7d\u52a8\u753b\uff0c\u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6ed1\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u52a8\u624b\u52bf\u9996\u5148\u88ab\u7236\u5e03\u5c40\u6d88\u8d39\uff08\u4e3a\u52a0\u8f7d\u52a8\u753b\u51cf\u5c0f\u504f\u79fb\uff09\uff0c\u5982\u679c\u52a0\u8f7d\u52a8\u753b\u672c\u8eab\u4ecd\u672a\u51fa\u73b0\u65f6\uff0c\u5219\u4e0d\u8fdb\u884c\u6d88\u8d39\u3002\u7136\u540e\u5c06\u5269\u4e0b\u7684\u6ed1\u52a8\u624b\u52bf\u4ea4\u7ed9\u5b50\u5e03\u5c40\u5217\u8868\u8fdb\u884c\u6d88\u8d39\u3002 onPreScroll \u56de\u8c03\u65f6\u673a\u662f\u7b26\u5408\u8fd9\u4e2a\u9700\u6c42\u7684\u3002 \u6211\u4eec\u9996\u5148\u9700\u8981\u5224\u65ad\u8be5\u6ed1\u52a8\u4e8b\u4ef6\u662f\u4e0d\u662f\u62d6\u52a8\u4e8b\u4ef6\uff0c\u901a\u8fc7 available.y < 0 \u5224\u65ad\u662f\u5426\u662f\u4e0a\u6ed1\u624b\u52bf\u3002\u6b64\u65f6\u53ef\u80fd\u52a0\u8f7d\u52a8\u753b\u672c\u8eab\u672a\u51fa\u73b0\uff0c\u6240\u4ee5\u9700\u8981\u989d\u5916\u8fdb\u884c\u5224\u65ad\u3002\u5982\u679c\u672a\u51fa\u73b0\u5219\u8fd4\u56de Offset.Zero \u4e0d\u6d88\u8d39\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u5219\u8fd4\u56de Offset(x = 0f, y = available.y) \u8fdb\u884c\u6d88\u8d39\u3002 override fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset { if ( source == NestedScrollSource . Drag && available . y < 0 ) { state . updateOffsetDelta ( available . y ) return if ( state . isSwipeInProgress ) Offset ( x = 0f , y = available . y ) else Offset . Zero } else { return Offset . Zero } }","title":"\u5b9e\u73b0 onPreScroll"},{"location":"design/gesture/nested_scroll/#onprefling_1","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u677e\u624b\u65f6\u7684\u5438\u9644\u6548\u679c\u3002\u5982\u679c\u62c9\u8fc7\u52a0\u8f7d\u52a8\u753b\u9ad8\u5ea6\u7684\u4e00\u822c\u5219\u8fdb\u884c\u52a0\u8f7d\uff0c\u5426\u5219\u5c31\u6536\u7f29\u56de\u521d\u59cb\u72b6\u6001\u3002\u524d\u95ee\u6211\u63d0\u5230\u4e86 onPreFling \u5728\u677e\u624b\u65f6\u56de\u8c03\uff0c\u5373\u7b26\u5408\u6211\u4eec\u5f53\u524d\u8fd9\u4e2a\u7684\u573a\u666f\u3002 \u6ce8\u610f \u5373\u4f7f\u4f60\u677e\u624b\u65f6\u901f\u5ea6\u5f88\u6162\u6216\u9759\u6b62\uff0c onPreFling \u4e0e onPostFling \u90fd\u4f1a\u56de\u8c03\uff0c\u53ea\u662f\u901f\u5ea6\u6570\u503c\u5f88\u5c0f\u3002 \u8fd9\u91cc\u6211\u4eec\u53ea\u9700\u8981\u5438\u5f15\u6548\u679c\uff0c\u5e76\u4e0d\u5e0c\u671b\u6d88\u8d39\u901f\u5ea6\uff0c\u6240\u4ee5\u8fd4\u56de Velocity.Zero \u5373\u53ef override suspend fun onPreFling ( available : Velocity ): Velocity { if ( state . indicatorOffset > height / 2 ) { state . animateToOffset ( height ) state . isRefreshing = true } else { state . animateToOffset ( 0. dp ) } return Velocity . Zero }","title":"\u5b9e\u73b0 onPreFling"},{"location":"design/gesture/nested_scroll/#onprefling_2","text":"\u7531\u4e8e\u6211\u4eec\u7684\u4e0b\u6ed1\u5237\u65b0\u624b\u52bf\u5904\u7406\u4e0d\u6d89\u53ca onPreFling \u56de\u8c03\u65f6\u673a\uff0c\u6240\u4ee5\u4e0d\u8fdb\u884c\u989d\u5916\u7684\u5b9e\u73b0\u3002","title":"\u5b9e\u73b0 onPreFling"},{"location":"design/gesture/nested_scroll/#_4","text":"\u672c\u793a\u4f8b\u7684\u5b8c\u6574\u6e90\u7801\u5df2\u7ecf\u5f00\u6e90\u5728\u6211\u7684 Github Repo \u4e2d\uff0c\u6b22\u8fce\u8fdb\u884c\u9605\u8bfb\u5e76\u63d0\u4ea4\u4efb\u4f55\u53cd\u9988\u3002","title":"\u793a\u4f8b\u6e90\u7801"},{"location":"design/gesture/nested_scroll/#toolbar","text":"","title":"\u793a\u4f8b\uff1a\u4f38\u7f29 ToolBar"},{"location":"design/gesture/nested_scroll/#_5","text":"\u5f53\u5217\u8868\u5411\u4e0a\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0a\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0a\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0a\u6ed1\u52a8 \u5f53\u5217\u8868\u5411\u4e0b\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0b\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0b\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0b\u6ed1\u52a8","title":"\u6548\u679c\u56fe"},{"location":"design/gesture/nested_scroll/#nestedscrollconnection_2","text":"","title":"NestedScrollConnection \u5b9e\u73b0"},{"location":"design/gesture/nested_scroll/#_6","text":"// \u5b9a\u4e49 ToolBar \u7684\u9ad8\u5ea6 val toolbarHeight = 200. dp // ToolBar \u6700\u5927\u5411\u4e0a\u4f4d\u79fb\u91cf // 56.dp \u53c2\u8003\u81ea androidx.compose.material AppBar.kt \u91cc\u9762\u5b9a\u4e49\u7684 private val AppBarHeight = 56.dp val maxUpPx = with ( LocalDensity . current ) { toolbarHeight . roundToPx (). toFloat () - 56. dp . roundToPx (). toFloat () } // ToolBar \u6700\u5c0f\u5411\u4e0a\u4f4d\u79fb\u91cf val minUpPx = 0f // \u504f\u79fb\u6298\u53e0\u5de5\u5177\u680f\u4e0a\u79fb\u9ad8\u5ea6 val toolbarOffsetHeightPx = remember { mutableStateOf ( 0f ) }","title":"\u4f4d\u79fb\u91cf\u5b9a\u4e49"},{"location":"design/gesture/nested_scroll/#onprescroll_2","text":"val nestedScrollConnection = remember { object : NestedScrollConnection { override fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset { val delta = available . y val newOffset = toolbarOffsetHeightPx . value + delta // \u8bbe\u7f6e ToolBar \u7684\u4f4d\u79fb\u8303\u56f4 toolbarOffsetHeightPx . value = newOffset . coerceIn ( - maxUpPx , - minUpPx ) return Offset . Zero } } }","title":"onPreScroll \u5b9e\u73b0"},{"location":"design/gesture/nested_scroll/#_7","text":"Box ( Modifier . fillMaxSize () . nestedScroll ( nestedScrollConnection ) // \u4f5c\u4e3a\u7236\u7ea7\u9644\u52a0\u5230\u5d4c\u5957\u6eda\u52a8\u7cfb\u7edf ) { // \u5217\u8868\u5e26\u6709\u5185\u7f6e\u7684\u5d4c\u5957\u6eda\u52a8\u652f\u6301\uff0c\u5b83\u5c06\u901a\u77e5\u6211\u4eec\u5b83\u7684\u6eda\u52a8 LazyColumn ( contentPadding = PaddingValues ( top = toolbarHeight )) { items ( 100 ) { index -> Text ( \"I'm item $ index \" , modifier = Modifier . fillMaxWidth (). padding ( 16. dp )) } } ScrollableAppBar ( title = \"toolbar offset is ${ toolbarOffsetHeightPx . value } \" , backgroundImageId = R . drawable . top_bar_bk , scrollableAppBarHeight = toolbarHeight , toolbarOffsetHeightPx = toolbarOffsetHeightPx ) }","title":"\u5e03\u5c40\u5b9e\u73b0"},{"location":"design/gesture/nested_scroll/#scrollableappbar","text":"\u5173\u4e8e ScrollableAppBar \u7684\u5b9a\u4e49,\u8bf7\u53c2\u8003 ScrollableAppBar \uff0c\u5982\u679c\u60f3\u4e86\u89e3 ScrollableAppBar \u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003 Compose \u4f38\u7f29ToolBar\u7684\u5b9e\u73b0","title":"ScrollableAppBar \u5b9e\u73b0"},{"location":"design/gesture/overview/","text":"Compose \u63d0\u4f9b\u4e86\u591a\u79cd API\uff0c\u53ef\u5e2e\u52a9\u60a8\u68c0\u6d4b\u7528\u6237\u4e92\u52a8\u751f\u6210\u7684\u624b\u52bf\u3002API \u6db5\u76d6\u5404\u79cd\u7528\u4f8b\uff1a \u5176\u4e2d\u4e00\u4e9b \u7ea7\u522b\u8f83\u9ad8 \uff0c\u65e8\u5728\u8986\u76d6\u6700\u5e38\u7528\u7684\u624b\u52bf\u3002\u4f8b\u5982\uff0c clickable \u4fee\u9970\u7b26\u53ef\u7528\u4e8e\u8f7b\u677e\u68c0\u6d4b\u70b9\u51fb\uff0c\u6b64\u5916\u5b83\u8fd8\u63d0\u4f9b\u65e0\u969c\u788d\u529f\u80fd\uff0c\u5e76\u5728\u70b9\u6309\u65f6\u663e\u793a\u89c6\u89c9\u6307\u793a\uff08\u4f8b\u5982\u6d9f\u6f2a\uff09\u3002 \u8fd8\u6709\u4e00\u4e9b\u4e0d\u592a\u5e38\u7528\u7684\u624b\u52bf\u68c0\u6d4b\u5668\uff0c\u5b83\u4eec\u5728 \u8f83\u4f4e\u7ea7\u522b \u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\uff0c\u4f8b\u5982 PointerInputScope.detectTapGestures \u6216 PointerInputScope.detectDragGestures \uff0c\u4f46\u4e0d\u63d0\u4f9b\u989d\u5916\u529f\u80fd\u3002 1. \u70b9\u51fb\u5e76\u6309\u4e0b clickable \u4fee\u9970\u7b26\u5141\u8bb8\u5e94\u7528\u68c0\u6d4b\u5bf9\u5df2\u5e94\u7528\u8be5\u4fee\u9970\u7b26\u7684\u5143\u7d20\u7684\u70b9\u51fb\u3002 @Composable fun ClickableSample () { val count = remember { mutableStateOf ( 0 ) } // content that you want to make clickable Text ( text = count . value . toString (), modifier = Modifier . clickable { count . value += 1 } ) } \u5f53\u9700\u8981\u66f4\u5927\u7075\u6d3b\u6027\u65f6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 pointerInput \u4fee\u9970\u7b26\u63d0\u4f9b\u70b9\u6309\u624b\u52bf\u68c0\u6d4b\u5668\uff1a Modifier . pointerInput ( Unit ) { detectTapGestures ( onPress = { /* Called when the gesture starts */ }, onDoubleTap = { /* Called on Double Tap */ }, onLongPress = { /* Called on Long Press */ }, onTap = { /* Called on Tap */ } ) } Info \u5982\u679c\u60a8\u60f3\u8981\u663e\u793a\u9879\u5217\u8868\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 LazyColumn \u548c LazyRow \u800c\u4e0d\u662f\u4f7f\u7528\u8fd9\u4e9b API\u3002 LazyColumn \u548c LazyRow \u5177\u6709\u6eda\u52a8\u529f\u80fd\uff0c\u5b83\u4eec\u7684\u6548\u7387\u8fdc\u9ad8\u4e8e\u6eda\u52a8\u4fee\u9970\u7b26\uff0c\u56e0\u4e3a\u5b83\u4eec\u4ec5\u5728\u9700\u8981\u65f6\u7ec4\u5408\u5404\u4e2a\u9879\u3002\u5982\u9700\u4e86\u89e3\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605\u201c\u5217\u8868\u201d\u3002 2. \u6eda\u52a8 \u6eda\u52a8\u4fee\u9970\u7b26 verticalScroll \u548c horizontalScroll \u4fee\u9970\u7b26\u63d0\u4f9b\u4e00\u79cd\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u53ef\u8ba9\u7528\u6237\u5728\u5143\u7d20\u5185\u5bb9\u8fb9\u754c\u5927\u4e8e\u6700\u5927\u5c3a\u5bf8\u7ea6\u675f\u65f6\u6eda\u52a8\u5143\u7d20\u3002\u5229\u7528 verticalScroll \u548c horizontalScroll \u4fee\u9970\u7b26\uff0c\u60a8\u65e0\u9700\u8f6c\u6362\u6216\u504f\u79fb\u5185\u5bb9\u3002 @Composable fun ScrollBoxes () { Column ( modifier = Modifier . background ( Color . LightGray ) . size ( 100. dp ) . verticalScroll ( rememberScrollState ()) ) { repeat ( 10 ) { Text ( \"Item $ it \" , modifier = Modifier . padding ( 2. dp )) } } } \u501f\u52a9 ScrollState \uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u6eda\u52a8\u4f4d\u7f6e\u6216\u83b7\u53d6\u5f53\u524d\u72b6\u6001\u3002\u5982\u9700\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u521b\u5efa\u6b64\u5217\u8868\uff0c\u8bf7\u4f7f\u7528 rememberScrollState() \u3002 @Composable private fun ScrollBoxesSmooth () { // Smoothly scroll 100px on first composition val state = rememberScrollState () LaunchedEffect ( Unit ) { state . animateScrollTo ( 100 ) } Column ( modifier = Modifier . background ( Color . LightGray ) . size ( 100. dp ) . padding ( horizontal = 8. dp ) . verticalScroll ( state ) ) { repeat ( 10 ) { Text ( \"Item $ it \" , modifier = Modifier . padding ( 2. dp )) } } } \u53ef\u6eda\u52a8\u7684\u4fee\u9970\u7b26 scrollable \u4fee\u9970\u7b26\u4e0e\u6eda\u52a8\u4fee\u9970\u7b26\u4e0d\u540c\uff0c\u533a\u522b\u5728\u4e8e scrollable \u53ef\u68c0\u6d4b\u6eda\u52a8\u624b\u52bf\uff0c\u4f46\u4e0d\u4f1a\u504f\u79fb\u5176\u5185\u5bb9\u3002\u6b64\u4fee\u9970\u7b26\u9700\u8981 ScrollableController \u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u6784\u9020 ScrollableController \u65f6\uff0c\u60a8\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a consumeScrollDelta \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5728\u6bcf\u4e2a\u6eda\u52a8\u6b65\u9aa4\uff08\u901a\u8fc7\u624b\u52bf\u8f93\u5165\u3001\u5e73\u6ed1\u6eda\u52a8\u6216\u6295\u63b7\uff09\u8c03\u7528\uff0c\u5e76\u4e14\u589e\u91cf\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u3002\u4e3a\u4e86\u786e\u4fdd\u6b63\u786e\u4f20\u64ad\u4e8b\u4ef6\uff0c\u5fc5\u987b\u4ece\u6b64\u51fd\u6570\u8fd4\u56de\u4f7f\u7528\u7684\u6eda\u52a8\u8ddd\u79bb\u91cf\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6bb5\u53ef\u68c0\u6d4b\u624b\u52bf\u5e76\u663e\u793a\u504f\u79fb\u91cf\u7684\u6570\u503c\uff0c\u4f46\u4e0d\u4f1a\u504f\u79fb\u4efb\u4f55\u5143\u7d20\uff1a @Composable fun ScrollableSample () { // actual composable state var offset by remember { mutableStateOf ( 0f ) } Box ( Modifier . size ( 150. dp ) . scrollable ( orientation = Orientation . Vertical , // Scrollable state: describes how to consume // scrolling delta and update offset state = rememberScrollableState { delta -> offset += delta delta } ) . background ( Color . LightGray ), contentAlignment = Alignment . Center ) { Text ( offset . toString ()) } }","title":"\u6982\u8ff0"},{"location":"design/gesture/overview/#1","text":"clickable \u4fee\u9970\u7b26\u5141\u8bb8\u5e94\u7528\u68c0\u6d4b\u5bf9\u5df2\u5e94\u7528\u8be5\u4fee\u9970\u7b26\u7684\u5143\u7d20\u7684\u70b9\u51fb\u3002 @Composable fun ClickableSample () { val count = remember { mutableStateOf ( 0 ) } // content that you want to make clickable Text ( text = count . value . toString (), modifier = Modifier . clickable { count . value += 1 } ) } \u5f53\u9700\u8981\u66f4\u5927\u7075\u6d3b\u6027\u65f6\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 pointerInput \u4fee\u9970\u7b26\u63d0\u4f9b\u70b9\u6309\u624b\u52bf\u68c0\u6d4b\u5668\uff1a Modifier . pointerInput ( Unit ) { detectTapGestures ( onPress = { /* Called when the gesture starts */ }, onDoubleTap = { /* Called on Double Tap */ }, onLongPress = { /* Called on Long Press */ }, onTap = { /* Called on Tap */ } ) } Info \u5982\u679c\u60a8\u60f3\u8981\u663e\u793a\u9879\u5217\u8868\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 LazyColumn \u548c LazyRow \u800c\u4e0d\u662f\u4f7f\u7528\u8fd9\u4e9b API\u3002 LazyColumn \u548c LazyRow \u5177\u6709\u6eda\u52a8\u529f\u80fd\uff0c\u5b83\u4eec\u7684\u6548\u7387\u8fdc\u9ad8\u4e8e\u6eda\u52a8\u4fee\u9970\u7b26\uff0c\u56e0\u4e3a\u5b83\u4eec\u4ec5\u5728\u9700\u8981\u65f6\u7ec4\u5408\u5404\u4e2a\u9879\u3002\u5982\u9700\u4e86\u89e3\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605\u201c\u5217\u8868\u201d\u3002","title":"1. \u70b9\u51fb\u5e76\u6309\u4e0b"},{"location":"design/gesture/overview/#2","text":"","title":"2. \u6eda\u52a8"},{"location":"design/gesture/overview/#_1","text":"verticalScroll \u548c horizontalScroll \u4fee\u9970\u7b26\u63d0\u4f9b\u4e00\u79cd\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u53ef\u8ba9\u7528\u6237\u5728\u5143\u7d20\u5185\u5bb9\u8fb9\u754c\u5927\u4e8e\u6700\u5927\u5c3a\u5bf8\u7ea6\u675f\u65f6\u6eda\u52a8\u5143\u7d20\u3002\u5229\u7528 verticalScroll \u548c horizontalScroll \u4fee\u9970\u7b26\uff0c\u60a8\u65e0\u9700\u8f6c\u6362\u6216\u504f\u79fb\u5185\u5bb9\u3002 @Composable fun ScrollBoxes () { Column ( modifier = Modifier . background ( Color . LightGray ) . size ( 100. dp ) . verticalScroll ( rememberScrollState ()) ) { repeat ( 10 ) { Text ( \"Item $ it \" , modifier = Modifier . padding ( 2. dp )) } } } \u501f\u52a9 ScrollState \uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u6eda\u52a8\u4f4d\u7f6e\u6216\u83b7\u53d6\u5f53\u524d\u72b6\u6001\u3002\u5982\u9700\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u521b\u5efa\u6b64\u5217\u8868\uff0c\u8bf7\u4f7f\u7528 rememberScrollState() \u3002 @Composable private fun ScrollBoxesSmooth () { // Smoothly scroll 100px on first composition val state = rememberScrollState () LaunchedEffect ( Unit ) { state . animateScrollTo ( 100 ) } Column ( modifier = Modifier . background ( Color . LightGray ) . size ( 100. dp ) . padding ( horizontal = 8. dp ) . verticalScroll ( state ) ) { repeat ( 10 ) { Text ( \"Item $ it \" , modifier = Modifier . padding ( 2. dp )) } } }","title":"\u6eda\u52a8\u4fee\u9970\u7b26"},{"location":"design/gesture/overview/#_2","text":"scrollable \u4fee\u9970\u7b26\u4e0e\u6eda\u52a8\u4fee\u9970\u7b26\u4e0d\u540c\uff0c\u533a\u522b\u5728\u4e8e scrollable \u53ef\u68c0\u6d4b\u6eda\u52a8\u624b\u52bf\uff0c\u4f46\u4e0d\u4f1a\u504f\u79fb\u5176\u5185\u5bb9\u3002\u6b64\u4fee\u9970\u7b26\u9700\u8981 ScrollableController \u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002\u6784\u9020 ScrollableController \u65f6\uff0c\u60a8\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a consumeScrollDelta \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5728\u6bcf\u4e2a\u6eda\u52a8\u6b65\u9aa4\uff08\u901a\u8fc7\u624b\u52bf\u8f93\u5165\u3001\u5e73\u6ed1\u6eda\u52a8\u6216\u6295\u63b7\uff09\u8c03\u7528\uff0c\u5e76\u4e14\u589e\u91cf\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u3002\u4e3a\u4e86\u786e\u4fdd\u6b63\u786e\u4f20\u64ad\u4e8b\u4ef6\uff0c\u5fc5\u987b\u4ece\u6b64\u51fd\u6570\u8fd4\u56de\u4f7f\u7528\u7684\u6eda\u52a8\u8ddd\u79bb\u91cf\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6bb5\u53ef\u68c0\u6d4b\u624b\u52bf\u5e76\u663e\u793a\u504f\u79fb\u91cf\u7684\u6570\u503c\uff0c\u4f46\u4e0d\u4f1a\u504f\u79fb\u4efb\u4f55\u5143\u7d20\uff1a @Composable fun ScrollableSample () { // actual composable state var offset by remember { mutableStateOf ( 0f ) } Box ( Modifier . size ( 150. dp ) . scrollable ( orientation = Orientation . Vertical , // Scrollable state: describes how to consume // scrolling delta and update offset state = rememberScrollableState { delta -> offset += delta delta } ) . background ( Color . LightGray ), contentAlignment = Alignment . Center ) { Text ( offset . toString ()) } }","title":"\u53ef\u6eda\u52a8\u7684\u4fee\u9970\u7b26"},{"location":"design/gesture/swipeable/","text":"1. Swipeable\u80fd\u505a\u4ec0\u4e48 \u4e0e draggable \u4fee\u9970\u7b26\u4e0d\u540c\u7684\u662f\uff0c swipeable \u4fee\u9970\u7b26\u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7\u951a\u70b9\u8bbe\u7f6e\u4ece\u800c\u5b9e\u73b0\u7ec4\u4ef6\u5448\u73b0\u5438\u9644\u6548\u679c\u7684\u52a8\u753b\uff0c\u5e38\u7528\u4e8e\u5f00\u5173\u7b49\u52a8\u753b\uff0c\u4e5f\u53ef\u7528\u4e8e\u4e0b\u62c9\u5237\u65b0\u7b49\u7279\u6b8a\u6548\u679c\u7684\u5b9e\u73b0\u3002 \u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c swipeable \u4fee\u9970\u7b26\u4e0d\u4f1a\u4e3a\u88ab\u4fee\u9970\u7684\u7ec4\u4ef6\u63d0\u4f9b\u4efb\u4f55\u9ed8\u8ba4\u52a8\u753b\uff0c\u53ea\u80fd\u4e3a\u7ec4\u4ef6\u63d0\u4f9b\u624b\u52bf\u504f\u79fb\u91cf\u7b49\u4fe1\u606f\u3002\u5f00\u53d1\u8005\u53ef\u6839\u636e\u81ea\u8eab\u9700\u6c42\u6839\u636e\u504f\u79fb\u91cf\u7ed3\u5408\u5176\u4ed6\u4fee\u9970\u7b26\u5b9a\u5236\u52a8\u753b\u5c55\u793a\u3002 2. Swipeable\u53c2\u6570\u5217\u8868 \u4f7f\u7528 swipeable \u4fee\u9970\u7b26\u81f3\u5c11\u9700\u8981\u4f20\u5165\u4e09\u4e2a\u53c2\u6570 swipeableState \u3001 anchors \u3001 orientation swipeableState\uff1a\u901a\u8fc7 swipeableState \u7684\u8bbe\u7f6e\u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u624b\u52bf\u7684\u504f\u79fb\u91cf\u4fe1\u606f anchors\uff1a\u951a\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u951a\u70b9\u8bbe\u7f6e\u5728\u4e0d\u540c\u72b6\u6001\u65f6\u6240\u5e94\u8be5\u5bf9\u5e94\u7684\u504f\u79fb\u91cf\u4fe1\u606f orientation\uff1a\u624b\u52bf\u65b9\u5411\uff0c\u88ab\u4fee\u9970\u7ec4\u4ef6\u7684\u624b\u52bf\u65b9\u5411\u53ea\u80fd\u662f\u6c34\u5e73\u6216\u5782\u76f4 thresholds (\u5e38\u7528\u975e\u5fc5\u9700)\uff1a\u5e38\u7528\u4f5c\u5b9a\u5236\u4e0d\u540c\u951a\u70b9\u95f4\u5438\u9644\u6548\u679c\u7684\u4e34\u754c\u9608\u503c\uff0c\u5e38\u7528\u6709 FixedThreshold(Dp) \u548c FractionalThreshold(Float) \u7b49 fun < T > Modifier . swipeable ( state : SwipeableState < T > , anchors : Map < Float , T > , orientation : Orientation , enabled : Boolean = true , reverseDirection : Boolean = false , interactionSource : MutableInteractionSource? = null , thresholds : ( from : T , to : T ) -> ThresholdConfig = { _ , _ -> FixedThreshold ( 56. dp ) }, resistance : ResistanceConfig? = resistanceConfig ( anchors . keys ), velocityThreshold : Dp = VelocityThreshold ) 3. Swipeable\u4f7f\u7528\u793a\u4f8b \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 swipeable \u4fee\u9970\u7b26\u5b8c\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u5f00\u5173\u52a8\u753b\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u679a\u4e3e\u9879\u7528\u4e8e\u63cf\u8ff0\u5f00\u5173\u7684\u72b6\u6001\uff0c\u5e76\u8bbe\u7f6e\u4e86\u5f00\u5173\u7684\u5c3a\u5bf8\u3002 \u6211\u4eec\u901a\u8fc7 rememberSwipeableState \u65b9\u6cd5\u83b7\u53d6 SwipeableState \u5b9e\u4f8b\uff0c\u5e76\u5c06\u521d\u59cb\u72b6\u6001\u8bbe\u7f6e\u4e3a Status.CLOSE\u3002 enum class Status { CLOSE , OPEN } var blockSize = 48. dp var blockSizePx = with ( LocalDensity . current ) { blockSize . toPx () } var swipeableState = rememberSwipeableState ( initialValue = Status . CLOSE ) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u6bcf\u4e2a\u72b6\u6001\u90fd\u76f8\u5bf9\u5e94\u4e00\u4e2a\u951a\u70b9\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u58f0\u660e\u6bcf\u4e2a\u951a\u70b9\u6240\u5bf9\u5e94\u6570\u503c\uff0c\u951a\u70b9\u4ee5\u952e\u503c\u5bf9\u8fdb\u884c\u8868\u793a\u3002 \u4e8e\u6b64\u540c\u65f6\uff0cCompose \u4e5f\u5f97\u77e5\u4e86\u5f00\u53d1\u8005\u6240\u5e0c\u671b\u7684\u521d\u59cb\u72b6\u6001\u6570\u503c\u3002 var anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ) \u6211\u4eec\u63a5\u4e0b\u6765\u8bf4\u660e\u951a\u70b9\u95f4\u5438\u9644\u52a8\u753b\u7684\u9608\u503c\u3002\u6211\u4eec\u5e0c\u671b\u4ece\u5173\u95ed\u72b6\u6001\u5230\u5f00\u542f\u72b6\u6001\uff0c\u6ed1\u5757\u4ec5\u9700\u79fb\u52a8\u8d85\u8fc7 30% \u5219\u4f1a\u81ea\u52a8\u5438\u9644\u5230\u5f00\u542f\u72b6\u6001\uff0c\u4ece\u5f00\u542f\u72b6\u6001\u5230\u5173\u95ed\u72b6\u6001\uff0c\u6ed1\u5757\u9700\u79fb\u52a8\u8d85\u8fc7 50% \u624d\u4f1a\u81ea\u52a8\u5438\u9644\u5230\u5173\u95ed\u72b6\u6001\u3002 Modifier . swipeable ( state = swipeableState , anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ), thresholds = { from , to -> if ( from == Status . CLOSE ) { FractionalThreshold ( 0.3f ) } else { FractionalThreshold ( 0.5f ) } }, orientation = Orientation . Horizontal ) \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 SwipeableState \u83b7\u53d6\u5230\u504f\u79fb\u91cf\u4fe1\u606f\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u5757\u6839\u636e\u504f\u79fb\u91cf\u8fdb\u884c\u79fb\u52a8\uff0c\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u4f7f\u7528 offset \u63cf\u8ff0\u7b26\u5373\u8fbe\u6210\u9700\u6c42\u3002 \u6ce8\u610f \u7531\u4e8e Modifer \u662f\u94fe\u5f0f\u6267\u884c\uff0c\u6b64\u65f6 offset \u5fc5\u9700\u5728 swipeable \u4e0e background \u524d\u9762\u3002 @ExperimentalMaterialApi @Preview @Composable fun SwipeableDemo () { var blockSize = 48. dp var blockSizePx = with ( LocalDensity . current ) { blockSize . toPx () } var swipeableState = rememberSwipeableState ( initialValue = Status . CLOSE ) var anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ) Box ( modifier = Modifier . size ( height = blockSize , width = blockSize * 2 ) . background ( Color . LightGray ) ) { Box ( modifier = Modifier . offset { IntOffset ( swipeableState . offset . value . toInt (), 0 ) } . swipeable ( state = swipeableState , anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ), thresholds = { from , to -> if ( from == Status . CLOSE ) { FractionalThreshold ( 0.3f ) } else { FractionalThreshold ( 0.5f ) } }, orientation = Orientation . Horizontal ) . size ( blockSize ) . background ( Color . DarkGray ) ) } } \u6548\u679c\u5c55\u793a","title":"Swipeable\u6ed1\u52a8"},{"location":"design/gesture/swipeable/#1-swipeable","text":"\u4e0e draggable \u4fee\u9970\u7b26\u4e0d\u540c\u7684\u662f\uff0c swipeable \u4fee\u9970\u7b26\u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7\u951a\u70b9\u8bbe\u7f6e\u4ece\u800c\u5b9e\u73b0\u7ec4\u4ef6\u5448\u73b0\u5438\u9644\u6548\u679c\u7684\u52a8\u753b\uff0c\u5e38\u7528\u4e8e\u5f00\u5173\u7b49\u52a8\u753b\uff0c\u4e5f\u53ef\u7528\u4e8e\u4e0b\u62c9\u5237\u65b0\u7b49\u7279\u6b8a\u6548\u679c\u7684\u5b9e\u73b0\u3002 \u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c swipeable \u4fee\u9970\u7b26\u4e0d\u4f1a\u4e3a\u88ab\u4fee\u9970\u7684\u7ec4\u4ef6\u63d0\u4f9b\u4efb\u4f55\u9ed8\u8ba4\u52a8\u753b\uff0c\u53ea\u80fd\u4e3a\u7ec4\u4ef6\u63d0\u4f9b\u624b\u52bf\u504f\u79fb\u91cf\u7b49\u4fe1\u606f\u3002\u5f00\u53d1\u8005\u53ef\u6839\u636e\u81ea\u8eab\u9700\u6c42\u6839\u636e\u504f\u79fb\u91cf\u7ed3\u5408\u5176\u4ed6\u4fee\u9970\u7b26\u5b9a\u5236\u52a8\u753b\u5c55\u793a\u3002","title":"1. Swipeable\u80fd\u505a\u4ec0\u4e48"},{"location":"design/gesture/swipeable/#2-swipeable","text":"\u4f7f\u7528 swipeable \u4fee\u9970\u7b26\u81f3\u5c11\u9700\u8981\u4f20\u5165\u4e09\u4e2a\u53c2\u6570 swipeableState \u3001 anchors \u3001 orientation swipeableState\uff1a\u901a\u8fc7 swipeableState \u7684\u8bbe\u7f6e\u53ef\u4ee5\u83b7\u53d6\u5230\u5f53\u524d\u624b\u52bf\u7684\u504f\u79fb\u91cf\u4fe1\u606f anchors\uff1a\u951a\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u951a\u70b9\u8bbe\u7f6e\u5728\u4e0d\u540c\u72b6\u6001\u65f6\u6240\u5e94\u8be5\u5bf9\u5e94\u7684\u504f\u79fb\u91cf\u4fe1\u606f orientation\uff1a\u624b\u52bf\u65b9\u5411\uff0c\u88ab\u4fee\u9970\u7ec4\u4ef6\u7684\u624b\u52bf\u65b9\u5411\u53ea\u80fd\u662f\u6c34\u5e73\u6216\u5782\u76f4 thresholds (\u5e38\u7528\u975e\u5fc5\u9700)\uff1a\u5e38\u7528\u4f5c\u5b9a\u5236\u4e0d\u540c\u951a\u70b9\u95f4\u5438\u9644\u6548\u679c\u7684\u4e34\u754c\u9608\u503c\uff0c\u5e38\u7528\u6709 FixedThreshold(Dp) \u548c FractionalThreshold(Float) \u7b49 fun < T > Modifier . swipeable ( state : SwipeableState < T > , anchors : Map < Float , T > , orientation : Orientation , enabled : Boolean = true , reverseDirection : Boolean = false , interactionSource : MutableInteractionSource? = null , thresholds : ( from : T , to : T ) -> ThresholdConfig = { _ , _ -> FixedThreshold ( 56. dp ) }, resistance : ResistanceConfig? = resistanceConfig ( anchors . keys ), velocityThreshold : Dp = VelocityThreshold )","title":"2. Swipeable\u53c2\u6570\u5217\u8868"},{"location":"design/gesture/swipeable/#3-swipeable","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 swipeable \u4fee\u9970\u7b26\u5b8c\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u5f00\u5173\u52a8\u753b\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u679a\u4e3e\u9879\u7528\u4e8e\u63cf\u8ff0\u5f00\u5173\u7684\u72b6\u6001\uff0c\u5e76\u8bbe\u7f6e\u4e86\u5f00\u5173\u7684\u5c3a\u5bf8\u3002 \u6211\u4eec\u901a\u8fc7 rememberSwipeableState \u65b9\u6cd5\u83b7\u53d6 SwipeableState \u5b9e\u4f8b\uff0c\u5e76\u5c06\u521d\u59cb\u72b6\u6001\u8bbe\u7f6e\u4e3a Status.CLOSE\u3002 enum class Status { CLOSE , OPEN } var blockSize = 48. dp var blockSizePx = with ( LocalDensity . current ) { blockSize . toPx () } var swipeableState = rememberSwipeableState ( initialValue = Status . CLOSE ) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u6bcf\u4e2a\u72b6\u6001\u90fd\u76f8\u5bf9\u5e94\u4e00\u4e2a\u951a\u70b9\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u58f0\u660e\u6bcf\u4e2a\u951a\u70b9\u6240\u5bf9\u5e94\u6570\u503c\uff0c\u951a\u70b9\u4ee5\u952e\u503c\u5bf9\u8fdb\u884c\u8868\u793a\u3002 \u4e8e\u6b64\u540c\u65f6\uff0cCompose \u4e5f\u5f97\u77e5\u4e86\u5f00\u53d1\u8005\u6240\u5e0c\u671b\u7684\u521d\u59cb\u72b6\u6001\u6570\u503c\u3002 var anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ) \u6211\u4eec\u63a5\u4e0b\u6765\u8bf4\u660e\u951a\u70b9\u95f4\u5438\u9644\u52a8\u753b\u7684\u9608\u503c\u3002\u6211\u4eec\u5e0c\u671b\u4ece\u5173\u95ed\u72b6\u6001\u5230\u5f00\u542f\u72b6\u6001\uff0c\u6ed1\u5757\u4ec5\u9700\u79fb\u52a8\u8d85\u8fc7 30% \u5219\u4f1a\u81ea\u52a8\u5438\u9644\u5230\u5f00\u542f\u72b6\u6001\uff0c\u4ece\u5f00\u542f\u72b6\u6001\u5230\u5173\u95ed\u72b6\u6001\uff0c\u6ed1\u5757\u9700\u79fb\u52a8\u8d85\u8fc7 50% \u624d\u4f1a\u81ea\u52a8\u5438\u9644\u5230\u5173\u95ed\u72b6\u6001\u3002 Modifier . swipeable ( state = swipeableState , anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ), thresholds = { from , to -> if ( from == Status . CLOSE ) { FractionalThreshold ( 0.3f ) } else { FractionalThreshold ( 0.5f ) } }, orientation = Orientation . Horizontal ) \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 SwipeableState \u83b7\u53d6\u5230\u504f\u79fb\u91cf\u4fe1\u606f\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u6ed1\u5757\u6839\u636e\u504f\u79fb\u91cf\u8fdb\u884c\u79fb\u52a8\uff0c\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u4f7f\u7528 offset \u63cf\u8ff0\u7b26\u5373\u8fbe\u6210\u9700\u6c42\u3002 \u6ce8\u610f \u7531\u4e8e Modifer \u662f\u94fe\u5f0f\u6267\u884c\uff0c\u6b64\u65f6 offset \u5fc5\u9700\u5728 swipeable \u4e0e background \u524d\u9762\u3002 @ExperimentalMaterialApi @Preview @Composable fun SwipeableDemo () { var blockSize = 48. dp var blockSizePx = with ( LocalDensity . current ) { blockSize . toPx () } var swipeableState = rememberSwipeableState ( initialValue = Status . CLOSE ) var anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ) Box ( modifier = Modifier . size ( height = blockSize , width = blockSize * 2 ) . background ( Color . LightGray ) ) { Box ( modifier = Modifier . offset { IntOffset ( swipeableState . offset . value . toInt (), 0 ) } . swipeable ( state = swipeableState , anchors = mapOf ( 0f to Status . CLOSE , blockSizePx to Status . OPEN ), thresholds = { from , to -> if ( from == Status . CLOSE ) { FractionalThreshold ( 0.3f ) } else { FractionalThreshold ( 0.5f ) } }, orientation = Orientation . Horizontal ) . size ( blockSize ) . background ( Color . DarkGray ) ) } } \u6548\u679c\u5c55\u793a","title":"3. Swipeable\u4f7f\u7528\u793a\u4f8b"},{"location":"design/gesture/transformer/","text":"1. Transformer \u80fd\u505a\u4ec0\u4e48 transformer \u4fee\u9970\u7b26\u5141\u8bb8\u5f00\u53d1\u8005\u76d1\u542c UI \u7ec4\u4ef6\u7684\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u624b\u52bf\uff0c\u901a\u8fc7\u6240\u63d0\u4f9b\u7684\u4fe1\u606f\u6765\u5b9e\u73b0 UI \u52a8\u753b\u6548\u679c\u3002 2. Transformer \u53c2\u6570\u5217\u8868 \u4f7f\u7528 transformer \u4fee\u9970\u7b26\u81f3\u5c11\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u53c2\u6570 transformableState transformableState\uff1a\u901a\u8fc7\u4f7f\u7528 rememberTransformableState \u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a transformableState , \u901a\u8fc7 rememberTransformableState \u7684\u5c3e\u90e8 lambda \u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u624b\u52bf\u4fe1\u606f\u3002\u901a\u8fc7 transformableState \u8fd8\u5141\u8bb8\u5f00\u53d1\u8005\u6839\u636e\u9700\u6c42\u52a8\u6001\u5bf9 UI \u7ec4\u4ef6\u8fdb\u884c\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u64cd\u4f5c\uff0c\u6700\u7ec8\u90fd\u4f1a rememberTransformableState \u7684\u5c3e\u90e8 lambda \u56de\u8c03\u3002 lockRotationOnZoomPan(\u53ef\u9009\u53c2\u6570)\uff1a\u5f53\u4e3b\u52a8\u8bbe\u7f6e\u4e3a true \u65f6\uff0c\u5f53UI\u7ec4\u4ef6\u5df2\u53d1\u751f\u53cc\u6307\u62d6\u52a8\u6216\u7f29\u653e\u65f6\uff0c\u5c06\u83b7\u53d6\u4e0d\u5230\u65cb\u8f6c\u89d2\u5ea6\u504f\u79fb\u91cf\u4fe1\u606f\u3002 fun Modifier . transformable ( state : TransformableState , lockRotationOnZoomPan : Boolean = false , enabled : Boolean = true ) 3. Transformer \u4f7f\u7528\u793a\u4f8b \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Transformer \u4fee\u9970\u7b26\u5b8c\u6210\u65b9\u5757\u7684\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e86\u65b9\u5757\u7684\u8fb9\u957f\u3001\u504f\u79fb\u91cf\u3001\u6bd4\u4f8b\u3001\u65cb\u8f6c\u89d2\u5ea6\u7b49\u4fe1\u606f\u3002 \u901a\u8fc7 rememberTransformableState \u65b9\u6cd5\u83b7\u53d6 TransformableState \u5b9e\u4f8b\uff0c\u901a\u8fc7\u56de\u8c03\u5c3e\u90e8\u5bf9 lambda \u83b7\u53d6\u5230\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u7b49\u624b\u52bf\u4fe1\u606f\u4ee5\u7ef4\u62a4\u5f53\u524d UI \u7ec4\u4ef6\u7684\u504f\u79fb\u91cf\u3001\u6bd4\u4f8b\u3001\u65cb\u8f6c\u89d2\u5ea6\u7b49\u72b6\u6001\u4fe1\u606f\u3002 var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } var ratationAngle by remember { mutableStateOf ( 0f ) } var scale by remember { mutableStateOf ( 1f ) } var transformableState = rememberTransformableState { zoomChange : Float , panChange : Offset , rotationChange : Float -> scale *= zoomChange offset += panChange ratationAngle += rotationChange } \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6240\u521b\u5efa\u7684 transformableState \u4f20\u5165\u5230 transformer \u4fee\u9970\u7b26\u4e2d\u3002 \u6ce8\u610f\uff1a\u7531\u4e8e Modifer \u94fe\u5f0f\u6267\u884c\uff0c\u6b64\u65f6\u9700\u8981\u6ce8\u610f offset \u4e0e rotate \u8c03\u7528\u7684\u5148\u540e\u987a\u5e8f \u26a0\ufe0f\u793a\u4f8b( offset \u5728 rotate \u524d\u9762) : \u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u90fd\u9700\u8981\u7ec4\u4ef6\u5728\u65cb\u8f6c\u540e\uff0c\u5f53\u51fa\u73b0\u53cc\u6307\u62d6\u52a8\u65f6\u7ec4\u4ef6\u4f1a\u8ddf\u968f\u624b\u6307\u53d1\u751f\u504f\u79fb\u3002\u82e5 offset \u5728 rotate \u4e4b\u524d\u8c03\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\u7ec4\u4ef6\u65cb\u8f6c\u540e\uff0c\u5f53\u53cc\u6307\u62d6\u52a8\u65f6\u7ec4\u4ef6\u4f1a\u4ee5\u5f53\u524d\u65cb\u8f6c\u89d2\u5ea6\u4e3a\u57fa\u672c\u5750\u6807\u8f74\u8fdb\u884c\u504f\u79fb\u3002\u8fd9\u662f\u7531\u4e8e\u5f53\u4f60\u5148\u8fdb\u884c offset \u8bf4\u660e\u5df2\u7ecf\u53d1\u751f\u4e86\u504f\u79fb\uff0c\u800c rotate \u65f6\u4f1a\u6539\u53d8\u5f53\u524dUI\u7ec4\u4ef6\u6574\u4e2a\u5750\u6807\u8f74\uff0c\u6240\u4ee5\u51fa\u73b0\u4e0e\u9884\u671f\u4e0d\u7b26\u7684\u60c5\u51b5\u51fa\u73b0\u3002 @Preview @Composable fun TransformerDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } var ratationAngle by remember { mutableStateOf ( 0f ) } var scale by remember { mutableStateOf ( 1f ) } var transformableState = rememberTransformableState { zoomChange : Float , panChange : Offset , rotationChange : Float -> scale *= zoomChange offset += panChange ratationAngle += rotationChange } Box ( Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Box ( Modifier . size ( boxSize ) . rotate ( ratationAngle ) // \u9700\u8981\u6ce8\u610f offset \u4e0e rotate \u7684\u8c03\u7528\u5148\u540e\u987a\u5e8f . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . scale ( scale ) . background ( Color . Green ) . transformable ( state = transformableState , lockRotationOnZoomPan = false ) ) } } \u6548\u679c\u5c55\u793a","title":"Transformer\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u4e0e\u65cb\u8f6c"},{"location":"design/gesture/transformer/#1-transformer","text":"transformer \u4fee\u9970\u7b26\u5141\u8bb8\u5f00\u53d1\u8005\u76d1\u542c UI \u7ec4\u4ef6\u7684\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u624b\u52bf\uff0c\u901a\u8fc7\u6240\u63d0\u4f9b\u7684\u4fe1\u606f\u6765\u5b9e\u73b0 UI \u52a8\u753b\u6548\u679c\u3002","title":"1. Transformer \u80fd\u505a\u4ec0\u4e48"},{"location":"design/gesture/transformer/#2-transformer","text":"\u4f7f\u7528 transformer \u4fee\u9970\u7b26\u81f3\u5c11\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u53c2\u6570 transformableState transformableState\uff1a\u901a\u8fc7\u4f7f\u7528 rememberTransformableState \u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a transformableState , \u901a\u8fc7 rememberTransformableState \u7684\u5c3e\u90e8 lambda \u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u624b\u52bf\u4fe1\u606f\u3002\u901a\u8fc7 transformableState \u8fd8\u5141\u8bb8\u5f00\u53d1\u8005\u6839\u636e\u9700\u6c42\u52a8\u6001\u5bf9 UI \u7ec4\u4ef6\u8fdb\u884c\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u6216\u65cb\u8f6c\u64cd\u4f5c\uff0c\u6700\u7ec8\u90fd\u4f1a rememberTransformableState \u7684\u5c3e\u90e8 lambda \u56de\u8c03\u3002 lockRotationOnZoomPan(\u53ef\u9009\u53c2\u6570)\uff1a\u5f53\u4e3b\u52a8\u8bbe\u7f6e\u4e3a true \u65f6\uff0c\u5f53UI\u7ec4\u4ef6\u5df2\u53d1\u751f\u53cc\u6307\u62d6\u52a8\u6216\u7f29\u653e\u65f6\uff0c\u5c06\u83b7\u53d6\u4e0d\u5230\u65cb\u8f6c\u89d2\u5ea6\u504f\u79fb\u91cf\u4fe1\u606f\u3002 fun Modifier . transformable ( state : TransformableState , lockRotationOnZoomPan : Boolean = false , enabled : Boolean = true )","title":"2. Transformer \u53c2\u6570\u5217\u8868"},{"location":"design/gesture/transformer/#3-transformer","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Transformer \u4fee\u9970\u7b26\u5b8c\u6210\u65b9\u5757\u7684\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e86\u65b9\u5757\u7684\u8fb9\u957f\u3001\u504f\u79fb\u91cf\u3001\u6bd4\u4f8b\u3001\u65cb\u8f6c\u89d2\u5ea6\u7b49\u4fe1\u606f\u3002 \u901a\u8fc7 rememberTransformableState \u65b9\u6cd5\u83b7\u53d6 TransformableState \u5b9e\u4f8b\uff0c\u901a\u8fc7\u56de\u8c03\u5c3e\u90e8\u5bf9 lambda \u83b7\u53d6\u5230\u53cc\u6307\u62d6\u52a8\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u7b49\u624b\u52bf\u4fe1\u606f\u4ee5\u7ef4\u62a4\u5f53\u524d UI \u7ec4\u4ef6\u7684\u504f\u79fb\u91cf\u3001\u6bd4\u4f8b\u3001\u65cb\u8f6c\u89d2\u5ea6\u7b49\u72b6\u6001\u4fe1\u606f\u3002 var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } var ratationAngle by remember { mutableStateOf ( 0f ) } var scale by remember { mutableStateOf ( 1f ) } var transformableState = rememberTransformableState { zoomChange : Float , panChange : Offset , rotationChange : Float -> scale *= zoomChange offset += panChange ratationAngle += rotationChange } \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6240\u521b\u5efa\u7684 transformableState \u4f20\u5165\u5230 transformer \u4fee\u9970\u7b26\u4e2d\u3002 \u6ce8\u610f\uff1a\u7531\u4e8e Modifer \u94fe\u5f0f\u6267\u884c\uff0c\u6b64\u65f6\u9700\u8981\u6ce8\u610f offset \u4e0e rotate \u8c03\u7528\u7684\u5148\u540e\u987a\u5e8f \u26a0\ufe0f\u793a\u4f8b( offset \u5728 rotate \u524d\u9762) : \u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u90fd\u9700\u8981\u7ec4\u4ef6\u5728\u65cb\u8f6c\u540e\uff0c\u5f53\u51fa\u73b0\u53cc\u6307\u62d6\u52a8\u65f6\u7ec4\u4ef6\u4f1a\u8ddf\u968f\u624b\u6307\u53d1\u751f\u504f\u79fb\u3002\u82e5 offset \u5728 rotate \u4e4b\u524d\u8c03\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\u7ec4\u4ef6\u65cb\u8f6c\u540e\uff0c\u5f53\u53cc\u6307\u62d6\u52a8\u65f6\u7ec4\u4ef6\u4f1a\u4ee5\u5f53\u524d\u65cb\u8f6c\u89d2\u5ea6\u4e3a\u57fa\u672c\u5750\u6807\u8f74\u8fdb\u884c\u504f\u79fb\u3002\u8fd9\u662f\u7531\u4e8e\u5f53\u4f60\u5148\u8fdb\u884c offset \u8bf4\u660e\u5df2\u7ecf\u53d1\u751f\u4e86\u504f\u79fb\uff0c\u800c rotate \u65f6\u4f1a\u6539\u53d8\u5f53\u524dUI\u7ec4\u4ef6\u6574\u4e2a\u5750\u6807\u8f74\uff0c\u6240\u4ee5\u51fa\u73b0\u4e0e\u9884\u671f\u4e0d\u7b26\u7684\u60c5\u51b5\u51fa\u73b0\u3002 @Preview @Composable fun TransformerDemo () { var boxSize = 100. dp var offset by remember { mutableStateOf ( Offset . Zero ) } var ratationAngle by remember { mutableStateOf ( 0f ) } var scale by remember { mutableStateOf ( 1f ) } var transformableState = rememberTransformableState { zoomChange : Float , panChange : Offset , rotationChange : Float -> scale *= zoomChange offset += panChange ratationAngle += rotationChange } Box ( Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Box ( Modifier . size ( boxSize ) . rotate ( ratationAngle ) // \u9700\u8981\u6ce8\u610f offset \u4e0e rotate \u7684\u8c03\u7528\u5148\u540e\u987a\u5e8f . offset { IntOffset ( offset . x . roundToInt (), offset . y . roundToInt ()) } . scale ( scale ) . background ( Color . Green ) . transformable ( state = transformableState , lockRotationOnZoomPan = false ) ) } } \u6548\u679c\u5c55\u793a","title":"3. Transformer \u4f7f\u7528\u793a\u4f8b"},{"location":"design/lists/list_item_click/","text":"\u8bb8\u591a\u65f6\u5019\u6211\u4eec\u9700\u8981\u7ed9\u5217\u8868\u9879\u521b\u5efa\u70b9\u51fb\u4e8b\u4ef6\uff0c\u672c\u6587\u89e3\u91ca\u4e86\u5982\u4f55\u5728 Jetpack Compose \u4e2d\u4e3a\u4f60\u7684\u5217\u8868\u9879\u521b\u5efa\u70b9\u51fb\u4e8b\u4ef6 1. \u521b\u5efa\u6570\u636e\u96c6 \u9996\u5148\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u5305\u542b\u4e86\u5e38\u7528\u6c34\u679c\u540d // List \u6570\u636e\u6e90 val fruits = arrayOf ( \"Apple\" , \"Apricot\" , \"Almond\" , \"Banana\" , \"Betelnut\" , \"Cherry\" , \"Damson\" ) 2. \u521b\u5efa\u5217\u8868\u9879\u53ca\u70b9\u51fb\u4e8b\u4ef6 \u63a5\u4e0b\u6765\u9700\u8981\u6211\u4eec\u58f0\u660e\u5217\u8868\u9879 FruitsRow \u548c\u70b9\u51fb\u4e8b\u4ef6 fruitClick @Composable private fun FruitsRow ( item : String , clickEvent :() -> Unit ) { Text ( text = item , modifier = Modifier . clickable ( onClick = clickEvent ) . fillMaxWidth () . wrapContentWidth ( Alignment . CenterHorizontally ) . height ( 50. dp )) } val fruitClick = { fruit : String , context : Context -> Toast . makeText ( context , fruit , Toast . LENGTH_SHORT ). show () } FruitsRow \u662f\u4e00\u4e2a \u9ad8\u9636\u51fd\u6570 \uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u6c34\u679c\u672c\u8eab\uff0c\u53e6\u4e00\u4e2a\u662f\u70b9\u51fb\u4e8b\u4ef6\u51fd\u6570 fruitClick \u662f\u4e00\u4e2a Lambda \u8868\u8fbe\u5f0f \uff0c\u6211\u4eec\u4ee5\u6b64\u4f5c\u4e3a FruitsRow \u70b9\u51fb\u4e8b\u4ef6\u53c2\u6570\u7684\u503c 3. \u521b\u5efa\u5217\u8868 \u6700\u540e\u4f7f\u7528 LazyColumn \u521b\u5efa\u5217\u8868\u5373\u53ef\uff0c\u8fd9\u6837\u6211\u4eec\u70b9\u51fb item \u7684\u65f6\u5019\u4fbf\u4f1a\u663e\u793a\u5bf9\u5e94\u7684\u6c34\u679c\u540d val context = LocalContext . current // \u5c55\u793a\u6c34\u679c\u540d\u5217\u8868 LazyColumn { items ( fruits ){ fruit -> FruitsRow ( fruit ) { fruitClick ( fruit , context ) } } }","title":"\u5217\u8868\u70b9\u51fb\u4e8b\u4ef6"},{"location":"design/lists/list_item_click/#1","text":"\u9996\u5148\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u5305\u542b\u4e86\u5e38\u7528\u6c34\u679c\u540d // List \u6570\u636e\u6e90 val fruits = arrayOf ( \"Apple\" , \"Apricot\" , \"Almond\" , \"Banana\" , \"Betelnut\" , \"Cherry\" , \"Damson\" )","title":"1. \u521b\u5efa\u6570\u636e\u96c6"},{"location":"design/lists/list_item_click/#2","text":"\u63a5\u4e0b\u6765\u9700\u8981\u6211\u4eec\u58f0\u660e\u5217\u8868\u9879 FruitsRow \u548c\u70b9\u51fb\u4e8b\u4ef6 fruitClick @Composable private fun FruitsRow ( item : String , clickEvent :() -> Unit ) { Text ( text = item , modifier = Modifier . clickable ( onClick = clickEvent ) . fillMaxWidth () . wrapContentWidth ( Alignment . CenterHorizontally ) . height ( 50. dp )) } val fruitClick = { fruit : String , context : Context -> Toast . makeText ( context , fruit , Toast . LENGTH_SHORT ). show () } FruitsRow \u662f\u4e00\u4e2a \u9ad8\u9636\u51fd\u6570 \uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u6c34\u679c\u672c\u8eab\uff0c\u53e6\u4e00\u4e2a\u662f\u70b9\u51fb\u4e8b\u4ef6\u51fd\u6570 fruitClick \u662f\u4e00\u4e2a Lambda \u8868\u8fbe\u5f0f \uff0c\u6211\u4eec\u4ee5\u6b64\u4f5c\u4e3a FruitsRow \u70b9\u51fb\u4e8b\u4ef6\u53c2\u6570\u7684\u503c","title":"2. \u521b\u5efa\u5217\u8868\u9879\u53ca\u70b9\u51fb\u4e8b\u4ef6"},{"location":"design/lists/list_item_click/#3","text":"\u6700\u540e\u4f7f\u7528 LazyColumn \u521b\u5efa\u5217\u8868\u5373\u53ef\uff0c\u8fd9\u6837\u6211\u4eec\u70b9\u51fb item \u7684\u65f6\u5019\u4fbf\u4f1a\u663e\u793a\u5bf9\u5e94\u7684\u6c34\u679c\u540d val context = LocalContext . current // \u5c55\u793a\u6c34\u679c\u540d\u5217\u8868 LazyColumn { items ( fruits ){ fruit -> FruitsRow ( fruit ) { fruitClick ( fruit , context ) } } }","title":"3. \u521b\u5efa\u5217\u8868"},{"location":"design/lists/overview/","text":"\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u663e\u793a\u9879\u76ee\u7684\u96c6\u5408\u3002\u672c\u6587\u89e3\u91ca\u4e86\u4f60\u5982\u4f55\u5728 Jetpack Compose \u4e2d\u6709\u6548\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u5982\u679c\u4f60\u77e5\u9053\u4f60\u7684\u7528\u4f8b\u4e0d\u9700\u8981\u4efb\u4f55\u6eda\u52a8\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 Column \u6216 Row \uff08\u53d6\u51b3\u4e8e\u65b9\u5411\uff09\uff0c\u5e76\u50cf\u8fd9\u6837\u901a\u8fc7\u8fed\u4ee3\u5217\u8868\u6765\u663e\u793a\u6bcf\u4e2a\u9879\u76ee\u7684\u5185\u5bb9\u3002 @Composable fun MessageList ( messages : List < Message > ) { Column { messages . forEach { message -> MessageRow ( message ) } } } \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 verticalScroll() \u8fd9\u4e2a modifier \u6765\u8ba9 Column \u53d8\u5f97\u53ef\u6eda\u52a8\u3002\u66f4\u591a\u4fe1\u606f\u89c1 \u624b\u52bf \u6587\u6863\u3002 1. Lazy composables \u5982\u679c\u4f60\u9700\u8981\u663e\u793a\u5927\u91cf\u7684\u9879\u76ee\uff08\u6216\u4e00\u4e2a\u672a\u77e5\u957f\u5ea6\u7684\u5217\u8868\uff09\uff0c\u4f7f\u7528\u50cf Column \u8fd9\u6837\u7684\u5e03\u5c40\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9879\u76ee\u90fd\u4f1a\u88ab\u7ec4\u5408\u548c\u5e03\u5c40\uff0c\u65e0\u8bba\u5b83\u4eec\u662f\u5426\u53ef\u89c1\u3002 Compose \u63d0\u4f9b\u4e86\u4e00\u7ec4\u7ec4\u4ef6\uff0c\u5b83\u4eec\u53ea\u5bf9\u7ec4\u4ef6\u89c6\u53e3\u4e2d\u53ef\u89c1\u7684\u9879\u76ee\u8fdb\u884c\u7ec4\u5408\u548c\u5e03\u5c40\u3002\u8fd9\u4e9b\u7ec4\u4ef6\u5305\u62ec LazyColumn \u548c LazyRow \u3002 Info \u5982\u679c\u4f60\u4f7f\u7528\u8fc7 RecyclerView \u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u9075\u5faa\u76f8\u540c\u7684\u539f\u5219 \u987e\u540d\u601d\u4e49\uff0c LazyColumn \u548c LazyRow \u7684\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u9879\u76ee\u5e03\u5c40\u548c\u6eda\u52a8\u65b9\u5411\u3002 LazyColumn \u4ea7\u751f\u4e00\u4e2a\u5782\u76f4\u6eda\u52a8\u7684\u5217\u8868\uff0c\u800c LazyRow \u4ea7\u751f\u4e00\u4e2a\u6c34\u5e73\u6eda\u52a8\u7684\u5217\u8868\u3002 Lazy \u7ec4\u4ef6\u4e0e Compose \u4e2d\u7684\u5927\u591a\u6570\u5e03\u5c40\u4e0d\u540c\u3002 Lazy \u7ec4\u4ef6\u4e0d\u63a5\u53d7 @Composable \u5185\u5bb9\u5757\u53c2\u6570\uff0c\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u76f4\u63a5\u64b0\u5199 Composable \uff0c\u800c\u662f\u63d0\u4f9b\u4e00\u4e2a LazyListScope.() \u5757\u3002\u8fd9\u4e2a LazyListScope \u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a DS L\uff0c\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u63cf\u8ff0\u9879\u76ee\u5185\u5bb9\u3002\u7136\u540e\uff0c Lazy \u7ec4\u4ef6\u8d1f\u8d23\u6839\u636e\u5e03\u5c40\u548c\u6eda\u52a8\u4f4d\u7f6e\u7684\u8981\u6c42\uff0c\u6dfb\u52a0\u6bcf\u4e2a\u9879\u76ee\u7684\u5185\u5bb9\u3002 \u5173\u952e\u672f\u8bed DSL \u662f\u6307\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\u3002\u6709\u5173 Compose \u5982\u4f55\u4e3a\u67d0\u4e9b API \u5b9a\u4e49 DSL \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Kotlin for Compose \u6587\u6863\u3002 2. LazyListScope DSL LazyListScope \u7684 DSL \u63d0\u4f9b\u4e86\u8bb8\u591a\u51fd\u6570\u6765\u63cf\u8ff0\u5e03\u5c40\u4e2d\u7684\u9879\u76ee\u3002\u6700\u57fa\u672c\u7684 item() \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u5355\u9879\uff0c\u800c item(Int) \u6dfb\u52a0\u4e86\u591a\u4e2a\u9879\u76ee\u3002 LazyColumn { // \u6dfb\u52a0\u5355\u4e2a\u9879\u76ee item { Text ( text = \"First item\" ) } // \u6dfb\u52a0\u4e94\u4e2a\u9879\u76ee items ( 5 ) { index -> Text ( text = \"Item: $ index \" ) } // \u6dfb\u52a0\u5176\u4ed6\u5355\u4e2a\u9879\u76ee item { Text ( text = \"Last item\" ) } } \u8fd8\u6709\u4e00\u4e9b\u6269\u5c55\u529f\u80fd\uff0c\u5141\u8bb8\u4f60\u6dfb\u52a0\u9879\u76ee\u7684\u96c6\u5408\uff0c\u5982 List \u3002\u8fd9\u4e9b\u6269\u5c55\u51fd\u6570\u4f7f\u6211\u4eec\u80fd\u591f\u8f7b\u677e\u5730\u79fb\u690d\u4e0a\u9762 Column \u7684\u4f8b\u5b50\u3002 import androidx.compose.foundation.lazy.items @Composable fun MessageList ( messages : List < Message > ) { LazyColumn { items ( messages ) { message -> MessageRow ( message ) } } } items() \u7684\u6269\u5c55\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u53d8\u4f53\uff0c\u53eb\u505a itemsIndexed() \uff0c\u5b83\u63d0\u4f9b\u4e86\u7d22\u5f15\u3002\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u89c1 LazyListScope \u53c2\u8003\u3002 3. \u5185\u5bb9\u586b\u5145 \u5728 Lazy \u7ec4\u4ef6\u4e2d\uff0c\u6211\u4eec\u5982\u679c\u8981\u8bbe\u7f6e Lazy \u7ec4\u4ef6\u91cc\u9762\u5185\u5bb9\u7684\u5185\u8fb9\u8ddd\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 contentPadding \u53c2\u6570\u6765\u8fdb\u884c\u586b\u5145 @Composable fun MessageList () { Box ( Modifier . background ( Color . Gray )){ LazyColumn ( modifier = Modifier . border ( 5. dp , color = Color . Blue ), contentPadding = PaddingValues ( horizontal = 16. dp , vertical = 8. dp ) ) { items ( 20 ){ Text ( \"LazyColumn\" ) } } } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728\u6c34\u5e73\u8fb9\u7f18\uff08\u5de6\u548c\u53f3\uff09\u6dfb\u52a0 16.dp \u7684 padding \uff0c\u7136\u540e\u5728\u5185\u5bb9\u7684\u9876\u90e8\u548c\u5e95\u90e8\u6dfb\u52a0 8.dp \u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a padding \u662f\u5e94\u7528\u5728 LazyColumn \u91cc\u9762\u7684\u5185\u5bb9\u4e0a\u7684\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u5728 LazyColumn \u672c\u8eab\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u9879\u76ee\u5c06\u5728\u5b83\u7684\u9876\u90e8\u6dfb\u52a0 8.dp \u7684 padding \uff0c\u6700\u540e\u4e00\u4e2a\u9879\u76ee\u5c06\u5728\u5b83\u7684\u5e95\u90e8\u6dfb\u52a0 8.dp \uff0c\u6240\u6709\u9879\u76ee\u5c06\u5728\u5de6\u8fb9\u548c\u53f3\u8fb9\u6709 16.dp \u7684 padding \u3002 4. \u5185\u5bb9\u95f4\u8ddd \u8981\u5728\u9879\u76ee\u4e4b\u95f4\u6dfb\u52a0\u95f4\u8ddd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Arrangement.spacedBy() \u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5728\u6bcf\u4e2a\u9879\u76ee\u4e4b\u95f4\u589e\u52a0\u4e86 4.dp \u7684\u7a7a\u95f4\u3002 @Composable fun MessageList () { Box ( Modifier . background ( Color . Gray )){ LazyColumn ( modifier = Modifier . border ( 5. dp , color = Color . Blue ), contentPadding = PaddingValues ( horizontal = 16. dp , vertical = 8. dp ), verticalArrangement = Arrangement . spacedBy ( 10. dp ) ) { items ( 20 ){ Text ( \"LazyColumn\" ) } } } } \u540c\u6837\u5730\uff0c\u5bf9\u4e8e LazyRow \u4e5f\u662f\u5982\u6b64\u3002 5. Item \u52a8\u753b \u5982\u679c\u4f60\u4f7f\u7528\u8fc7 RecyclerView \u7ec4\u4ef6\uff0c\u4f60\u4f1a\u77e5\u9053\u5b83\u80fd\u81ea\u52a8\u5bf9 item \u53d8\u5316\u8fdb\u884c\u52a8\u753b\u5904\u7406\u3002 Lazy \u5e03\u5c40\u8fd8\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\uff0c\u8fd9\u610f\u5473\u7740 item \u7684\u53d8\u5316\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5373\u65f6\u7684 snap \u3002\u4f60\u53ef\u4ee5\u5173\u6ce8\u8fd9\u4e2a bug \u6765\u8ddf\u8e2a\u8fd9\u4e2a\u529f\u80fd\u7684\u4efb\u4f55\u53d8\u5316\u3002 6. Sticky headers (\u5b9e\u9a8c\u6027) \u8bf7\u6ce8\u610f \u5b9e\u9a8c\u6027 API \u5728\u672a\u6765\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e5f\u53ef\u80fd\u88ab\u5b8c\u5168\u5220\u9664\u3002 \u5f53\u663e\u793a\u5206\u7ec4\u6570\u636e\u7684\u5217\u8868\u65f6\uff0c sticky header \u6a21\u5f0f\u5f88\u6709\u5e2e\u52a9\u3002\u4e0b\u9762\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6309\u6307\u5b9a\u7684\u6807\u9898\u5206\u7ec4\u3002 \u4e3a\u4e86\u7528 LazyColumn \u5b9e\u73b0 Sticky header \uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9a8c\u6027\u7684 stickyHeader() \u51fd\u6570\uff0c\u63d0\u4f9b\u6807\u9898\u5185\u5bb9\u3002 @ExperimentalFoundationApi @Composable fun ListWithHeader () { val sections = listOf ( \"\u8d21\u732e\u8005\" , \"\u7720\u7720\u7684\u7c89\u4e1d\" ) LazyColumn { sections . forEachIndexed { index , section -> stickyHeader { Text ( text = section , modifier = Modifier . fillMaxWidth () . background ( Color ( 0 xFFF2F4FB )) . padding ( horizontal = 10. dp , vertical = 5. dp ), fontWeight = FontWeight . W700 , color = Color ( 0 xFF0079D3 ) ) } when ( index ){ 0 -> item { Contributors ()} 1 -> item { TouchFish ()} } } } } \u4e3a\u4e86\u8282\u7701\u7bc7\u5e45\uff0c\u5b8c\u6574\u5b9e\u73b0\u4ee3\u7801\u53ef\u4ee5\u4ee5\u4e0b\u65b9\u5f0f\u67e5\u9605 Mkdocs github 7. Grids (\u5b9e\u9a8c\u6027\uff09 \u8bf7\u6ce8\u610f \u5b9e\u9a8c\u6027 API \u5728\u672a\u6765\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e5f\u53ef\u80fd\u88ab\u5b8c\u5168\u5220\u9664\u3002 LazyVerticalGrid \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7f51\u683c\u7684\u6548\u679c cells \u53c2\u6570\u8d1f\u8d23\u63a7\u5236\u5355\u5143\u683c\u5982\u4f55\u5f62\u6210\u5217\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u7f51\u683c\u4e2d\u7684\u9879\u76ee\uff0c\u4f7f\u7528 GridCells.Adaptive \u5c06\u6bcf\u4e00\u5217\u8bbe\u7f6e\u4e3a\u81f3\u5c11 128.dp \u5bbd\u3002 @ExperimentalFoundationApi @Composable fun PhotoGrid ( photos : List < Photo > ) { LazyVerticalGrid ( cells = GridCells . Adaptive ( minSize = 128. dp ) ) { items ( photos ) { photo -> PhotoItem ( photo ) } } } \u5982\u679c\u4f60\u77e5\u9053\u8981\u4f7f\u7528\u7684\u5217\u7684\u786e\u5207\u6570\u91cf\uff0c\u4f60\u53ef\u4ee5\u8f6c\u800c\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6240\u9700\u5217\u6570\u91cf\u7684 GridCells.Fixed \u5b9e\u4f8b\u3002 8. \u5bf9\u6eda\u52a8\u4f4d\u7f6e\u505a\u51fa\u53cd\u5e94 \u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5bf9\u6eda\u52a8\u4f4d\u7f6e\u548c item \u5e03\u5c40\u7684\u53d8\u5316\u505a\u51fa\u53cd\u5e94\u548c\u76d1\u542c\uff0c Lazy \u7ec4\u4ef6\u53ef\u4ee5\u4f7f\u7528 LazyListState \u6765\u652f\u6301\u8fd9\u79cd\u4f7f\u7528\u60c5\u51b5\u3002 @Composable fun MessageList ( messages : List < Message > ) { // \u8bb0\u4f4f\u6211\u4eec\u81ea\u5df1\u7684 LazyListState val listState = rememberLazyListState () // \u628a\u5b83\u63d0\u4f9b\u7ed9 LazyColumn LazyColumn ( state = listState ) { // ... } } \u5bf9\u4e8e\u7b80\u5355\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u7b2c\u4e00\u4e2a\u53ef\u89c1\u7684 item \u7684\u4fe1\u606f\u3002\u4e3a\u6b64\uff0c LazyListState \u63d0\u4f9b\u4e86 firstVisibleItemIndex \u548c firstVisibleItemScrollOffset \u5c5e\u6027\u3002 \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5373\u6839\u636e\u7528\u6237\u662f\u5426\u6eda\u52a8\u8fc7\u7b2c\u4e00\u4e2a\u9879\u76ee\u6765\u663e\u793a\u548c\u9690\u85cf\u4e00\u4e2a\u6309\u94ae\u3002 @OptIn ( ExperimentalAnimationApi :: class ) // AnimatedVisibility @Composable fun MessageList ( messages : List < Message > ) { Box { val listState = rememberLazyListState () val scope = rememberCoroutineScope () LazyColumn ( state = listState ) { // ... } // \u6dfb\u52a0\u4e00\u4e2a\u7528\u4e8e\u662f\u5426\u663e\u793a\u6309\u94ae\u7684\u4ee3\u7801 // \u5982\u679c\u7b2c\u4e00\u4e2a\u53ef\u89c1\u7684\u9879\u76ee\u5df2\u7ecf\u88ab\u79fb\u52a8\u8fc7\u53bb\uff0c\u5c31\u663e\u793a\u8fd9\u4e2a\u6309\u94ae\u3002 val showButton by remember { derivedStateOf { // \u5c3d\u91cf\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u5408\u6210 listState . firstVisibleItemIndex > 0 } } AnimatedVisibility ( visible = showButton ) { ScrollToTopButton () } // \u4f2a\u4ee3\u7801\uff0c\u53ef\u7528 FAB \u6765\u5b9e\u73b0 ScrollToTopButton ( onClick = { scope . launch { listState . animateScrollToItem ( 0 ) // \u70b9\u51fb\u8fd4\u56de\u7b2c\u4e00\u9879 // \u4f60\u53ef\u4ee5\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u770b\u5230\u8fd9\u4e2a\u65b9\u6cd5 } } ) } } \u6ce8\u610f \u4e0a\u9762\u7684\u4f8b\u5b50\u4f7f\u7528 derivedStateOf() \u6765\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u5408\u6210\u3002\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u526f\u4f5c\u7528 \u6587\u6863\u3002 \u5f53\u4f60\u9700\u8981\u66f4\u65b0\u5176\u4ed6 UI \u7684 composables \u65f6\uff0c\u76f4\u63a5\u5728 composables \u4e2d\u8bfb\u53d6\u72b6\u6001\u662f\u5f88\u6709\u7528\u7684\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u573a\u666f\u4e0d\u9700\u8981\u5728\u540c\u4e00\u4e2a composables \u4e2d\u5904\u7406\u4e8b\u4ef6\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\u662f\uff0c\u4e00\u65e6\u7528\u6237\u6eda\u52a8\u8fc7\u67d0\u4e2a\u70b9\uff0c\u5c31\u53d1\u9001\u4e00\u4e2a\u5206\u6790\u4e8b\u4ef6\u3002\u4e3a\u4e86\u6709\u6548\u5730\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a snapshotFlow() \u3002 val listState = rememberLazyListState () LazyColumn ( state = listState ) { // ... } LaunchedEffect ( listState ) { snapshotFlow { listState . firstVisibleItemIndex } . map { index -> index > 0 } . distinctUntilChanged () . filter { it == true } . collect { MyAnalyticsService . sendScrolledPastFirstItemEvent () } } LazyListState \u8fd8\u901a\u8fc7 layoutInfo \u5c5e\u6027\u63d0\u4f9b\u4e86\u5173\u4e8e\u5f53\u524d\u6b63\u5728\u663e\u793a\u7684\u6240\u6709\u9879\u76ee\u4ee5\u53ca\u5b83\u4eec\u5728\u5c4f\u5e55\u4e0a\u7684\u754c\u9650\u7684\u4fe1\u606f\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 LazyListLayoutInfo \u7c7b\u3002 9. \u63a7\u5236\u6eda\u52a8\u4f4d\u7f6e \u9664\u4e86\u5bf9\u6eda\u52a8\u4f4d\u7f6e\u505a\u51fa\u53cd\u5e94\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u63a7\u5236\u6eda\u52a8\u4f4d\u7f6e\u4e5f\u5f88\u6709\u7528\u3002 LazyListState \u901a\u8fc7 scrollToItem() \u51fd\u6570\u548c animateScrollToItem() \u51fd\u6570\u652f\u6301\u8fd9\u4e00\u70b9\uff0c\u524d\u8005 \"\u7acb\u5373 \"\u9501\u5b9a\u6eda\u52a8\u4f4d\u7f6e\uff0c\u540e\u8005\u5219\u4f7f\u7528\u52a8\u753b\u8fdb\u884c\u6eda\u52a8\uff08\u4e5f\u88ab\u79f0\u4e3a\u5e73\u6ed1\u6eda\u52a8\uff09\u3002 \u6ce8\u610f scrollToItem() \u548c animateScrollToItem() \u90fd\u662f suspend \u51fd\u6570\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u5728\u4e00\u4e2a\u534f\u7a0b\u4e2d\u8c03\u7528\u5b83\u4eec\u3002\u5173\u4e8e\u5982\u4f55\u5728 Compose \u4e2d\u8fd9\u6837\u505a\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u534f\u7a0b\u6587\u6863 @Composable fun MessageList ( messages : List < Message > ) { val listState = rememberLazyListState () // \u8bb0\u4f4f\u4e00\u4e2a\u534f\u7a0b\u4f5c\u7528\u57df\uff0c\u4ee5\u4fbf\u80fd\u591f\u542f\u52a8 val coroutineScope = rememberCoroutineScope () LazyColumn ( state = listState ) { // ... } ScrollToTopButton ( onClick = { coroutineScope . launch { // \u6eda\u52a8\u5230\u7b2c\u4e00\u4e2a\u9879\u76ee\u7684\u52a8\u753b listState . animateScrollToItem ( index = 0 ) } } ) } 10. \u5927\u578b\u6570\u636e\u96c6\uff08paging\uff09 Paging \u5e93\u53ef\u4ee5\u8ba9\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u652f\u6301\u5927\u578b\u9879\u76ee\u5217\u8868\uff0c\u5728\u5fc5\u8981\u65f6\u52a0\u8f7d\u548c\u663e\u793a\u5217\u8868\u7684\u4e00\u5c0f\u5757\u3002 Paging3.0 \u53ca\u4ee5\u540e\u7684\u7248\u672c\u901a\u8fc7 androidx.paging:paging-compose \u5e93\u63d0\u4f9b Compose \u652f\u6301\u3002 \u6ce8\u610f Compose \u53ea\u652f\u6301 Paging 3.0 \u53ca\u4ee5\u540e\u7684\u7248\u672c\u3002\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u65e9\u671f\u7248\u672c\u7684 Paging \u5e93\uff0c\u4f60\u9700\u8981\u5148 \u8fc1\u79fb \u5230 3.0\u3002 \u4e3a\u4e86\u663e\u793a\u5206\u9875\u5185\u5bb9\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 collectAsLazyPagingItems() \u6269\u5c55\u51fd\u6570\uff0c\u7136\u540e\u5c06\u8fd4\u56de\u7684 LazyPagingItems \u4f20\u7ed9\u6211\u4eec LazyColumn \u4e2d\u7684 items() \u3002\u7c7b\u4f3c\u4e8e\u89c6\u56fe\u4e2d\u7684\u5206\u9875\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u5728\u6570\u636e\u52a0\u8f7d\u65f6\u901a\u8fc7\u68c0\u67e5\u9879\u76ee\u662f\u5426\u4e3a\u7a7a\u6765\u663e\u793a\u5360\u4f4d\u7b26\u3002 import androidx.paging.compose.collectAsLazyPagingItems import androidx.paging.compose.items @Composable fun MessageList ( pager : Pager < Int , Message > ) { val lazyPagingItems = pager . flow . collectAsLazyPagingItems () LazyColumn { items ( lazyPagingItems ) { message -> if ( message != null ) { MessageRow ( message ) } else { MessagePlaceholder () } } } \u8b66\u544a \u5982\u679c\u4f60\u4f7f\u7528 RemoteMediator \u4ece\u7f51\u7edc\u670d\u52a1\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u8bf7\u786e\u4fdd\u63d0\u4f9b\u771f\u5b9e\u5927\u5c0f\u7684\u5360\u4f4d\u9879\u3002\u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e2a RemoteMediator \uff0c\u5b83\u5c06\u88ab\u53cd\u590d\u8c03\u7528\u4ee5\u83b7\u53d6\u65b0\u7684\u6570\u636e\uff0c\u76f4\u5230\u5c4f\u5e55\u88ab\u5185\u5bb9\u586b\u6ee1\u3002\u5982\u679c\u63d0\u4f9b\u5c0f\u7684\u5360\u4f4d\u7b26\uff08\u6216\u8005\u6839\u672c\u6ca1\u6709\u5360\u4f4d\u7b26\uff09\uff0c\u5c4f\u5e55\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u586b\u6ee1\uff0c\u800c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u83b7\u53d6\u8bb8\u591a\u9875\u7684\u6570\u636e\u3002 11. Items Key \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a item \u7684\u72b6\u6001\u90fd\u662f\u6839\u636e\u8be5 item \u5728\u5217\u8868\u4e2d\u7684\u4f4d\u7f6e\u6765\u786e\u5b9a\u7684\u3002\u7136\u800c\uff0c\u5982\u679c\u6570\u636e\u96c6\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u95ee\u9898\uff0c\u56e0\u4e3a\u6539\u53d8\u4f4d\u7f6e\u7684 item \u4f1a\u5931\u53bb\u4efb\u4f55\u8bb0\u5fc6\u4e2d\u7684\u72b6\u6001\u3002\u5982\u679c\u4f60\u60f3\u8c61\u4e00\u4e0b LazyRow \u5728 LazyColumn \u4e2d\u7684\u60c5\u666f\uff0c\u5982\u679c\u8be5\u884c\u6539\u53d8\u4e86 item \u7684\u4f4d\u7f6e\uff0c\u7528\u6237\u5c31\u4f1a\u5931\u53bb\u4ed6\u4eec\u5728\u8be5\u884c\u4e2d\u7684\u6eda\u52a8\u4f4d\u7f6e\u3002 \u6ce8\u610f \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a Compose \u5982\u4f55\u8bb0\u4f4f\u72b6\u6001\u7684\uff0c\u8bf7\u53c2\u9605\u8fd9\u7bc7 \u6587\u6863 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u9879\u76ee\u63d0\u4f9b\u4e00\u4e2a\u7a33\u5b9a\u800c\u552f\u4e00\u7684\u5bc6\u94a5\uff0c\u4e3a\u5bc6\u94a5\u53c2\u6570\u63d0\u4f9b\u4e00\u4e2a\u5757\u3002\u63d0\u4f9b\u4e00\u4e2a\u7a33\u5b9a\u7684\u952e\u53ef\u4ee5\u4f7f item \u72b6\u6001\u5728\u6570\u636e\u96c6\u53d8\u5316\u65f6\u4fdd\u6301\u4e00\u81f4\u3002 @Composable fun MessageList ( messages : List < Message > ) { LazyColumn { items ( items = messages , key = { message -> // \u8fd4\u56de item \u7684\u4e00\u4e2a\u7a33\u5b9a\u7684\u4e14\u552f\u4e00\u7684\u952e message . id } ) { message -> MessageRow ( message ) } } } \u6ce8\u610f \u6240\u63d0\u4f9b\u7684\u4efb\u4f55\u5bc6\u94a5\u5fc5\u987b\u80fd\u591f\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a Bundle \u4e2d\u3002\u5173\u4e8e\u54ea\u4e9b\u7c7b\u578b\u53ef\u4ee5\u88ab\u5b58\u50a8\uff0c\u8bf7\u770b\u8be5\u7c7b\u7684\u4fe1\u606f\u3002","title":"\u6982\u8ff0"},{"location":"design/lists/overview/#1-lazy-composables","text":"\u5982\u679c\u4f60\u9700\u8981\u663e\u793a\u5927\u91cf\u7684\u9879\u76ee\uff08\u6216\u4e00\u4e2a\u672a\u77e5\u957f\u5ea6\u7684\u5217\u8868\uff09\uff0c\u4f7f\u7528\u50cf Column \u8fd9\u6837\u7684\u5e03\u5c40\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9879\u76ee\u90fd\u4f1a\u88ab\u7ec4\u5408\u548c\u5e03\u5c40\uff0c\u65e0\u8bba\u5b83\u4eec\u662f\u5426\u53ef\u89c1\u3002 Compose \u63d0\u4f9b\u4e86\u4e00\u7ec4\u7ec4\u4ef6\uff0c\u5b83\u4eec\u53ea\u5bf9\u7ec4\u4ef6\u89c6\u53e3\u4e2d\u53ef\u89c1\u7684\u9879\u76ee\u8fdb\u884c\u7ec4\u5408\u548c\u5e03\u5c40\u3002\u8fd9\u4e9b\u7ec4\u4ef6\u5305\u62ec LazyColumn \u548c LazyRow \u3002 Info \u5982\u679c\u4f60\u4f7f\u7528\u8fc7 RecyclerView \u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u9075\u5faa\u76f8\u540c\u7684\u539f\u5219 \u987e\u540d\u601d\u4e49\uff0c LazyColumn \u548c LazyRow \u7684\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u9879\u76ee\u5e03\u5c40\u548c\u6eda\u52a8\u65b9\u5411\u3002 LazyColumn \u4ea7\u751f\u4e00\u4e2a\u5782\u76f4\u6eda\u52a8\u7684\u5217\u8868\uff0c\u800c LazyRow \u4ea7\u751f\u4e00\u4e2a\u6c34\u5e73\u6eda\u52a8\u7684\u5217\u8868\u3002 Lazy \u7ec4\u4ef6\u4e0e Compose \u4e2d\u7684\u5927\u591a\u6570\u5e03\u5c40\u4e0d\u540c\u3002 Lazy \u7ec4\u4ef6\u4e0d\u63a5\u53d7 @Composable \u5185\u5bb9\u5757\u53c2\u6570\uff0c\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u76f4\u63a5\u64b0\u5199 Composable \uff0c\u800c\u662f\u63d0\u4f9b\u4e00\u4e2a LazyListScope.() \u5757\u3002\u8fd9\u4e2a LazyListScope \u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a DS L\uff0c\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u63cf\u8ff0\u9879\u76ee\u5185\u5bb9\u3002\u7136\u540e\uff0c Lazy \u7ec4\u4ef6\u8d1f\u8d23\u6839\u636e\u5e03\u5c40\u548c\u6eda\u52a8\u4f4d\u7f6e\u7684\u8981\u6c42\uff0c\u6dfb\u52a0\u6bcf\u4e2a\u9879\u76ee\u7684\u5185\u5bb9\u3002 \u5173\u952e\u672f\u8bed DSL \u662f\u6307\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\u3002\u6709\u5173 Compose \u5982\u4f55\u4e3a\u67d0\u4e9b API \u5b9a\u4e49 DSL \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Kotlin for Compose \u6587\u6863\u3002","title":"1. Lazy composables"},{"location":"design/lists/overview/#2-lazylistscope-dsl","text":"LazyListScope \u7684 DSL \u63d0\u4f9b\u4e86\u8bb8\u591a\u51fd\u6570\u6765\u63cf\u8ff0\u5e03\u5c40\u4e2d\u7684\u9879\u76ee\u3002\u6700\u57fa\u672c\u7684 item() \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u5355\u9879\uff0c\u800c item(Int) \u6dfb\u52a0\u4e86\u591a\u4e2a\u9879\u76ee\u3002 LazyColumn { // \u6dfb\u52a0\u5355\u4e2a\u9879\u76ee item { Text ( text = \"First item\" ) } // \u6dfb\u52a0\u4e94\u4e2a\u9879\u76ee items ( 5 ) { index -> Text ( text = \"Item: $ index \" ) } // \u6dfb\u52a0\u5176\u4ed6\u5355\u4e2a\u9879\u76ee item { Text ( text = \"Last item\" ) } } \u8fd8\u6709\u4e00\u4e9b\u6269\u5c55\u529f\u80fd\uff0c\u5141\u8bb8\u4f60\u6dfb\u52a0\u9879\u76ee\u7684\u96c6\u5408\uff0c\u5982 List \u3002\u8fd9\u4e9b\u6269\u5c55\u51fd\u6570\u4f7f\u6211\u4eec\u80fd\u591f\u8f7b\u677e\u5730\u79fb\u690d\u4e0a\u9762 Column \u7684\u4f8b\u5b50\u3002 import androidx.compose.foundation.lazy.items @Composable fun MessageList ( messages : List < Message > ) { LazyColumn { items ( messages ) { message -> MessageRow ( message ) } } } items() \u7684\u6269\u5c55\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u53d8\u4f53\uff0c\u53eb\u505a itemsIndexed() \uff0c\u5b83\u63d0\u4f9b\u4e86\u7d22\u5f15\u3002\u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u89c1 LazyListScope \u53c2\u8003\u3002","title":"2. LazyListScope DSL"},{"location":"design/lists/overview/#3","text":"\u5728 Lazy \u7ec4\u4ef6\u4e2d\uff0c\u6211\u4eec\u5982\u679c\u8981\u8bbe\u7f6e Lazy \u7ec4\u4ef6\u91cc\u9762\u5185\u5bb9\u7684\u5185\u8fb9\u8ddd\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 contentPadding \u53c2\u6570\u6765\u8fdb\u884c\u586b\u5145 @Composable fun MessageList () { Box ( Modifier . background ( Color . Gray )){ LazyColumn ( modifier = Modifier . border ( 5. dp , color = Color . Blue ), contentPadding = PaddingValues ( horizontal = 16. dp , vertical = 8. dp ) ) { items ( 20 ){ Text ( \"LazyColumn\" ) } } } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728\u6c34\u5e73\u8fb9\u7f18\uff08\u5de6\u548c\u53f3\uff09\u6dfb\u52a0 16.dp \u7684 padding \uff0c\u7136\u540e\u5728\u5185\u5bb9\u7684\u9876\u90e8\u548c\u5e95\u90e8\u6dfb\u52a0 8.dp \u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a padding \u662f\u5e94\u7528\u5728 LazyColumn \u91cc\u9762\u7684\u5185\u5bb9\u4e0a\u7684\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u5728 LazyColumn \u672c\u8eab\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u9879\u76ee\u5c06\u5728\u5b83\u7684\u9876\u90e8\u6dfb\u52a0 8.dp \u7684 padding \uff0c\u6700\u540e\u4e00\u4e2a\u9879\u76ee\u5c06\u5728\u5b83\u7684\u5e95\u90e8\u6dfb\u52a0 8.dp \uff0c\u6240\u6709\u9879\u76ee\u5c06\u5728\u5de6\u8fb9\u548c\u53f3\u8fb9\u6709 16.dp \u7684 padding \u3002","title":"3. \u5185\u5bb9\u586b\u5145"},{"location":"design/lists/overview/#4","text":"\u8981\u5728\u9879\u76ee\u4e4b\u95f4\u6dfb\u52a0\u95f4\u8ddd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Arrangement.spacedBy() \u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5728\u6bcf\u4e2a\u9879\u76ee\u4e4b\u95f4\u589e\u52a0\u4e86 4.dp \u7684\u7a7a\u95f4\u3002 @Composable fun MessageList () { Box ( Modifier . background ( Color . Gray )){ LazyColumn ( modifier = Modifier . border ( 5. dp , color = Color . Blue ), contentPadding = PaddingValues ( horizontal = 16. dp , vertical = 8. dp ), verticalArrangement = Arrangement . spacedBy ( 10. dp ) ) { items ( 20 ){ Text ( \"LazyColumn\" ) } } } } \u540c\u6837\u5730\uff0c\u5bf9\u4e8e LazyRow \u4e5f\u662f\u5982\u6b64\u3002","title":"4. \u5185\u5bb9\u95f4\u8ddd"},{"location":"design/lists/overview/#5-item","text":"\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 RecyclerView \u7ec4\u4ef6\uff0c\u4f60\u4f1a\u77e5\u9053\u5b83\u80fd\u81ea\u52a8\u5bf9 item \u53d8\u5316\u8fdb\u884c\u52a8\u753b\u5904\u7406\u3002 Lazy \u5e03\u5c40\u8fd8\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\uff0c\u8fd9\u610f\u5473\u7740 item \u7684\u53d8\u5316\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5373\u65f6\u7684 snap \u3002\u4f60\u53ef\u4ee5\u5173\u6ce8\u8fd9\u4e2a bug \u6765\u8ddf\u8e2a\u8fd9\u4e2a\u529f\u80fd\u7684\u4efb\u4f55\u53d8\u5316\u3002","title":"5. Item \u52a8\u753b"},{"location":"design/lists/overview/#6-sticky-headers","text":"\u8bf7\u6ce8\u610f \u5b9e\u9a8c\u6027 API \u5728\u672a\u6765\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e5f\u53ef\u80fd\u88ab\u5b8c\u5168\u5220\u9664\u3002 \u5f53\u663e\u793a\u5206\u7ec4\u6570\u636e\u7684\u5217\u8868\u65f6\uff0c sticky header \u6a21\u5f0f\u5f88\u6709\u5e2e\u52a9\u3002\u4e0b\u9762\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6309\u6307\u5b9a\u7684\u6807\u9898\u5206\u7ec4\u3002 \u4e3a\u4e86\u7528 LazyColumn \u5b9e\u73b0 Sticky header \uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9a8c\u6027\u7684 stickyHeader() \u51fd\u6570\uff0c\u63d0\u4f9b\u6807\u9898\u5185\u5bb9\u3002 @ExperimentalFoundationApi @Composable fun ListWithHeader () { val sections = listOf ( \"\u8d21\u732e\u8005\" , \"\u7720\u7720\u7684\u7c89\u4e1d\" ) LazyColumn { sections . forEachIndexed { index , section -> stickyHeader { Text ( text = section , modifier = Modifier . fillMaxWidth () . background ( Color ( 0 xFFF2F4FB )) . padding ( horizontal = 10. dp , vertical = 5. dp ), fontWeight = FontWeight . W700 , color = Color ( 0 xFF0079D3 ) ) } when ( index ){ 0 -> item { Contributors ()} 1 -> item { TouchFish ()} } } } } \u4e3a\u4e86\u8282\u7701\u7bc7\u5e45\uff0c\u5b8c\u6574\u5b9e\u73b0\u4ee3\u7801\u53ef\u4ee5\u4ee5\u4e0b\u65b9\u5f0f\u67e5\u9605 Mkdocs github","title":"6. Sticky headers (\u5b9e\u9a8c\u6027)"},{"location":"design/lists/overview/#7-grids","text":"\u8bf7\u6ce8\u610f \u5b9e\u9a8c\u6027 API \u5728\u672a\u6765\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e5f\u53ef\u80fd\u88ab\u5b8c\u5168\u5220\u9664\u3002 LazyVerticalGrid \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7f51\u683c\u7684\u6548\u679c cells \u53c2\u6570\u8d1f\u8d23\u63a7\u5236\u5355\u5143\u683c\u5982\u4f55\u5f62\u6210\u5217\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u7f51\u683c\u4e2d\u7684\u9879\u76ee\uff0c\u4f7f\u7528 GridCells.Adaptive \u5c06\u6bcf\u4e00\u5217\u8bbe\u7f6e\u4e3a\u81f3\u5c11 128.dp \u5bbd\u3002 @ExperimentalFoundationApi @Composable fun PhotoGrid ( photos : List < Photo > ) { LazyVerticalGrid ( cells = GridCells . Adaptive ( minSize = 128. dp ) ) { items ( photos ) { photo -> PhotoItem ( photo ) } } } \u5982\u679c\u4f60\u77e5\u9053\u8981\u4f7f\u7528\u7684\u5217\u7684\u786e\u5207\u6570\u91cf\uff0c\u4f60\u53ef\u4ee5\u8f6c\u800c\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6240\u9700\u5217\u6570\u91cf\u7684 GridCells.Fixed \u5b9e\u4f8b\u3002","title":"7. Grids (\u5b9e\u9a8c\u6027\uff09"},{"location":"design/lists/overview/#8","text":"\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5bf9\u6eda\u52a8\u4f4d\u7f6e\u548c item \u5e03\u5c40\u7684\u53d8\u5316\u505a\u51fa\u53cd\u5e94\u548c\u76d1\u542c\uff0c Lazy \u7ec4\u4ef6\u53ef\u4ee5\u4f7f\u7528 LazyListState \u6765\u652f\u6301\u8fd9\u79cd\u4f7f\u7528\u60c5\u51b5\u3002 @Composable fun MessageList ( messages : List < Message > ) { // \u8bb0\u4f4f\u6211\u4eec\u81ea\u5df1\u7684 LazyListState val listState = rememberLazyListState () // \u628a\u5b83\u63d0\u4f9b\u7ed9 LazyColumn LazyColumn ( state = listState ) { // ... } } \u5bf9\u4e8e\u7b80\u5355\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u7b2c\u4e00\u4e2a\u53ef\u89c1\u7684 item \u7684\u4fe1\u606f\u3002\u4e3a\u6b64\uff0c LazyListState \u63d0\u4f9b\u4e86 firstVisibleItemIndex \u548c firstVisibleItemScrollOffset \u5c5e\u6027\u3002 \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5373\u6839\u636e\u7528\u6237\u662f\u5426\u6eda\u52a8\u8fc7\u7b2c\u4e00\u4e2a\u9879\u76ee\u6765\u663e\u793a\u548c\u9690\u85cf\u4e00\u4e2a\u6309\u94ae\u3002 @OptIn ( ExperimentalAnimationApi :: class ) // AnimatedVisibility @Composable fun MessageList ( messages : List < Message > ) { Box { val listState = rememberLazyListState () val scope = rememberCoroutineScope () LazyColumn ( state = listState ) { // ... } // \u6dfb\u52a0\u4e00\u4e2a\u7528\u4e8e\u662f\u5426\u663e\u793a\u6309\u94ae\u7684\u4ee3\u7801 // \u5982\u679c\u7b2c\u4e00\u4e2a\u53ef\u89c1\u7684\u9879\u76ee\u5df2\u7ecf\u88ab\u79fb\u52a8\u8fc7\u53bb\uff0c\u5c31\u663e\u793a\u8fd9\u4e2a\u6309\u94ae\u3002 val showButton by remember { derivedStateOf { // \u5c3d\u91cf\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u5408\u6210 listState . firstVisibleItemIndex > 0 } } AnimatedVisibility ( visible = showButton ) { ScrollToTopButton () } // \u4f2a\u4ee3\u7801\uff0c\u53ef\u7528 FAB \u6765\u5b9e\u73b0 ScrollToTopButton ( onClick = { scope . launch { listState . animateScrollToItem ( 0 ) // \u70b9\u51fb\u8fd4\u56de\u7b2c\u4e00\u9879 // \u4f60\u53ef\u4ee5\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u770b\u5230\u8fd9\u4e2a\u65b9\u6cd5 } } ) } } \u6ce8\u610f \u4e0a\u9762\u7684\u4f8b\u5b50\u4f7f\u7528 derivedStateOf() \u6765\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u5408\u6210\u3002\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u526f\u4f5c\u7528 \u6587\u6863\u3002 \u5f53\u4f60\u9700\u8981\u66f4\u65b0\u5176\u4ed6 UI \u7684 composables \u65f6\uff0c\u76f4\u63a5\u5728 composables \u4e2d\u8bfb\u53d6\u72b6\u6001\u662f\u5f88\u6709\u7528\u7684\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u573a\u666f\u4e0d\u9700\u8981\u5728\u540c\u4e00\u4e2a composables \u4e2d\u5904\u7406\u4e8b\u4ef6\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\u662f\uff0c\u4e00\u65e6\u7528\u6237\u6eda\u52a8\u8fc7\u67d0\u4e2a\u70b9\uff0c\u5c31\u53d1\u9001\u4e00\u4e2a\u5206\u6790\u4e8b\u4ef6\u3002\u4e3a\u4e86\u6709\u6548\u5730\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a snapshotFlow() \u3002 val listState = rememberLazyListState () LazyColumn ( state = listState ) { // ... } LaunchedEffect ( listState ) { snapshotFlow { listState . firstVisibleItemIndex } . map { index -> index > 0 } . distinctUntilChanged () . filter { it == true } . collect { MyAnalyticsService . sendScrolledPastFirstItemEvent () } } LazyListState \u8fd8\u901a\u8fc7 layoutInfo \u5c5e\u6027\u63d0\u4f9b\u4e86\u5173\u4e8e\u5f53\u524d\u6b63\u5728\u663e\u793a\u7684\u6240\u6709\u9879\u76ee\u4ee5\u53ca\u5b83\u4eec\u5728\u5c4f\u5e55\u4e0a\u7684\u754c\u9650\u7684\u4fe1\u606f\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 LazyListLayoutInfo \u7c7b\u3002","title":"8. \u5bf9\u6eda\u52a8\u4f4d\u7f6e\u505a\u51fa\u53cd\u5e94"},{"location":"design/lists/overview/#9","text":"\u9664\u4e86\u5bf9\u6eda\u52a8\u4f4d\u7f6e\u505a\u51fa\u53cd\u5e94\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u63a7\u5236\u6eda\u52a8\u4f4d\u7f6e\u4e5f\u5f88\u6709\u7528\u3002 LazyListState \u901a\u8fc7 scrollToItem() \u51fd\u6570\u548c animateScrollToItem() \u51fd\u6570\u652f\u6301\u8fd9\u4e00\u70b9\uff0c\u524d\u8005 \"\u7acb\u5373 \"\u9501\u5b9a\u6eda\u52a8\u4f4d\u7f6e\uff0c\u540e\u8005\u5219\u4f7f\u7528\u52a8\u753b\u8fdb\u884c\u6eda\u52a8\uff08\u4e5f\u88ab\u79f0\u4e3a\u5e73\u6ed1\u6eda\u52a8\uff09\u3002 \u6ce8\u610f scrollToItem() \u548c animateScrollToItem() \u90fd\u662f suspend \u51fd\u6570\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u5728\u4e00\u4e2a\u534f\u7a0b\u4e2d\u8c03\u7528\u5b83\u4eec\u3002\u5173\u4e8e\u5982\u4f55\u5728 Compose \u4e2d\u8fd9\u6837\u505a\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u534f\u7a0b\u6587\u6863 @Composable fun MessageList ( messages : List < Message > ) { val listState = rememberLazyListState () // \u8bb0\u4f4f\u4e00\u4e2a\u534f\u7a0b\u4f5c\u7528\u57df\uff0c\u4ee5\u4fbf\u80fd\u591f\u542f\u52a8 val coroutineScope = rememberCoroutineScope () LazyColumn ( state = listState ) { // ... } ScrollToTopButton ( onClick = { coroutineScope . launch { // \u6eda\u52a8\u5230\u7b2c\u4e00\u4e2a\u9879\u76ee\u7684\u52a8\u753b listState . animateScrollToItem ( index = 0 ) } } ) }","title":"9. \u63a7\u5236\u6eda\u52a8\u4f4d\u7f6e"},{"location":"design/lists/overview/#10-paging","text":"Paging \u5e93\u53ef\u4ee5\u8ba9\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u652f\u6301\u5927\u578b\u9879\u76ee\u5217\u8868\uff0c\u5728\u5fc5\u8981\u65f6\u52a0\u8f7d\u548c\u663e\u793a\u5217\u8868\u7684\u4e00\u5c0f\u5757\u3002 Paging3.0 \u53ca\u4ee5\u540e\u7684\u7248\u672c\u901a\u8fc7 androidx.paging:paging-compose \u5e93\u63d0\u4f9b Compose \u652f\u6301\u3002 \u6ce8\u610f Compose \u53ea\u652f\u6301 Paging 3.0 \u53ca\u4ee5\u540e\u7684\u7248\u672c\u3002\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u65e9\u671f\u7248\u672c\u7684 Paging \u5e93\uff0c\u4f60\u9700\u8981\u5148 \u8fc1\u79fb \u5230 3.0\u3002 \u4e3a\u4e86\u663e\u793a\u5206\u9875\u5185\u5bb9\u7684\u5217\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 collectAsLazyPagingItems() \u6269\u5c55\u51fd\u6570\uff0c\u7136\u540e\u5c06\u8fd4\u56de\u7684 LazyPagingItems \u4f20\u7ed9\u6211\u4eec LazyColumn \u4e2d\u7684 items() \u3002\u7c7b\u4f3c\u4e8e\u89c6\u56fe\u4e2d\u7684\u5206\u9875\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u5728\u6570\u636e\u52a0\u8f7d\u65f6\u901a\u8fc7\u68c0\u67e5\u9879\u76ee\u662f\u5426\u4e3a\u7a7a\u6765\u663e\u793a\u5360\u4f4d\u7b26\u3002 import androidx.paging.compose.collectAsLazyPagingItems import androidx.paging.compose.items @Composable fun MessageList ( pager : Pager < Int , Message > ) { val lazyPagingItems = pager . flow . collectAsLazyPagingItems () LazyColumn { items ( lazyPagingItems ) { message -> if ( message != null ) { MessageRow ( message ) } else { MessagePlaceholder () } } } \u8b66\u544a \u5982\u679c\u4f60\u4f7f\u7528 RemoteMediator \u4ece\u7f51\u7edc\u670d\u52a1\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u8bf7\u786e\u4fdd\u63d0\u4f9b\u771f\u5b9e\u5927\u5c0f\u7684\u5360\u4f4d\u9879\u3002\u5982\u679c\u4f60\u4f7f\u7528\u4e00\u4e2a RemoteMediator \uff0c\u5b83\u5c06\u88ab\u53cd\u590d\u8c03\u7528\u4ee5\u83b7\u53d6\u65b0\u7684\u6570\u636e\uff0c\u76f4\u5230\u5c4f\u5e55\u88ab\u5185\u5bb9\u586b\u6ee1\u3002\u5982\u679c\u63d0\u4f9b\u5c0f\u7684\u5360\u4f4d\u7b26\uff08\u6216\u8005\u6839\u672c\u6ca1\u6709\u5360\u4f4d\u7b26\uff09\uff0c\u5c4f\u5e55\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u586b\u6ee1\uff0c\u800c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u83b7\u53d6\u8bb8\u591a\u9875\u7684\u6570\u636e\u3002","title":"10. \u5927\u578b\u6570\u636e\u96c6\uff08paging\uff09"},{"location":"design/lists/overview/#11-items-key","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a item \u7684\u72b6\u6001\u90fd\u662f\u6839\u636e\u8be5 item \u5728\u5217\u8868\u4e2d\u7684\u4f4d\u7f6e\u6765\u786e\u5b9a\u7684\u3002\u7136\u800c\uff0c\u5982\u679c\u6570\u636e\u96c6\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u95ee\u9898\uff0c\u56e0\u4e3a\u6539\u53d8\u4f4d\u7f6e\u7684 item \u4f1a\u5931\u53bb\u4efb\u4f55\u8bb0\u5fc6\u4e2d\u7684\u72b6\u6001\u3002\u5982\u679c\u4f60\u60f3\u8c61\u4e00\u4e0b LazyRow \u5728 LazyColumn \u4e2d\u7684\u60c5\u666f\uff0c\u5982\u679c\u8be5\u884c\u6539\u53d8\u4e86 item \u7684\u4f4d\u7f6e\uff0c\u7528\u6237\u5c31\u4f1a\u5931\u53bb\u4ed6\u4eec\u5728\u8be5\u884c\u4e2d\u7684\u6eda\u52a8\u4f4d\u7f6e\u3002 \u6ce8\u610f \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a Compose \u5982\u4f55\u8bb0\u4f4f\u72b6\u6001\u7684\uff0c\u8bf7\u53c2\u9605\u8fd9\u7bc7 \u6587\u6863 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u9879\u76ee\u63d0\u4f9b\u4e00\u4e2a\u7a33\u5b9a\u800c\u552f\u4e00\u7684\u5bc6\u94a5\uff0c\u4e3a\u5bc6\u94a5\u53c2\u6570\u63d0\u4f9b\u4e00\u4e2a\u5757\u3002\u63d0\u4f9b\u4e00\u4e2a\u7a33\u5b9a\u7684\u952e\u53ef\u4ee5\u4f7f item \u72b6\u6001\u5728\u6570\u636e\u96c6\u53d8\u5316\u65f6\u4fdd\u6301\u4e00\u81f4\u3002 @Composable fun MessageList ( messages : List < Message > ) { LazyColumn { items ( items = messages , key = { message -> // \u8fd4\u56de item \u7684\u4e00\u4e2a\u7a33\u5b9a\u7684\u4e14\u552f\u4e00\u7684\u952e message . id } ) { message -> MessageRow ( message ) } } } \u6ce8\u610f \u6240\u63d0\u4f9b\u7684\u4efb\u4f55\u5bc6\u94a5\u5fc5\u987b\u80fd\u591f\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a Bundle \u4e2d\u3002\u5173\u4e8e\u54ea\u4e9b\u7c7b\u578b\u53ef\u4ee5\u88ab\u5b58\u50a8\uff0c\u8bf7\u770b\u8be5\u7c7b\u7684\u4fe1\u606f\u3002","title":"11. Items Key"},{"location":"design/theme/custom_your_theme/","text":"1. \u793a\u4f8b\u4ecb\u7ecd \u672c\u6587\u793a\u4f8b\u6765\u81ea\uff1ahttps://github.com/RugerMcCarthy/BloomCompose \u901a\u8fc7\u9605\u8bfb\u524d\u4e24\u7bc7\u6587\u7ae0\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5177\u5907\u81ea\u5b9a\u4e49\u4e3b\u9898\u65b9\u6848\u7684\u80fd\u529b\u4e86\u3002\u6211\u4eec\u901a\u8fc7#AndroidDevChallange\u6311\u6218\u8d5b\u7b2c\u4e09\u5468\u9898\u76ee\u4f5c\u4e3a\u793a\u4f8b\u6765\u770b\u770b\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u5982\u4f55\u8fdb\u884c\u5e94\u7528\u3002\u5728\u4e0d\u540c\u4e3b\u9898\u65b9\u6848\u4e0b\u80cc\u666f\u989c\u8272\u3001\u6587\u5b57\u989c\u8272\u4e0e\u56fe\u7247\u8d44\u6e90\u90fd\u662f\u4e0d\u540c\u7684\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5bf9\u4e8e\u6240\u6709\u6587\u672c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3b\u9898\u5b8c\u6210\u5b57\u4f53\u6837\u5f0f\u7684\u914d\u7f6e\uff0c\u6240\u8981\u5b9e\u73b0\u7684\u76ee\u6807\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\u3002 2. \u914d\u7f6e\u989c\u8272\u6837\u5f0f \u9996\u5148\uff0c\u6211\u4eec\u6765\u5b66\u4e60\u5982\u4f55\u914d\u7f6e\u989c\u8272\u6837\u5f0f\u3002\u5176\u5b9e\u8fd9\u91cc\u7684\u5185\u5bb9\u5728\u521d\u8bc6MaterialTheme\u7ae0\u8282\u4e2d\u7684\u64cd\u4f5c\u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u4ec5\u9700\u8981\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u751f\u6210\u5176\u5bf9\u5e94\u7684colors\u5373\u53ef\u3002\u6839\u636e\u9879\u76ee\u9700\u6c42\uff0c\u6211\u4eec\u8fdb\u884c\u4ee5\u4e0b\u7684\u914d\u7f6e\u3002 private val BloomLightColorPaltte = lightColors ( primary = pink100 , secondary = pink900 , background = white , surface = white850 , onPrimary = gray , onSecondary = white , onBackground = gray , onSurface = gray , ) private val BloomDarkColorPaltte = darkColors ( primary = green900 , secondary = green300 , background = gray , surface = white150 , onPrimary = white , onSecondary = gray , onBackground = white , onSurface = white850 ) @Composable fun BloomTheme ( theme : BloomTheme = BloomTheme . LIGHT , content : @Composable () () -> Unit ) { CompositionLocalProvider ( LocalWelcomeAssets provides if ( theme == BloomTheme . DARK ) WelcomeAssets . DarkWelcomeAssets else WelcomeAssets . LightWelcomeAssets , ) { MaterialTheme ( colors = if ( theme == BloomTheme . DARK ) BloomDarkColorPaltte else BloomLightColorPaltte , typography = Typography , shapes = shapes , content = content ) } } \u5728\u6211\u4eec\u7684\u89c6\u56fe\u6240\u9700\u8981Color\u7684\u5730\u65b9\u914d\u7f6e\u5373\u53ef\u3002 Text ( text = \"Beautiful home garden solutions\" , textAlign = TextAlign . Center , color = MaterialTheme . colors . onPrimary // I'm here ) 3. \u914d\u7f6e\u5b57\u4f53\u6837\u5f0f \u6211\u4eec\u63a5\u7740\u6765\u5b66\u4e60\u5982\u4f55\u914d\u7f6e\u5b57\u4f53\u6837\u5f0f\u3002\u8fd8\u8bb0\u5f97MaterialTheme\u65b9\u6cd5\u561b\uff0c\u5176\u5b9e\u7b2c\u4e8c\u4e2a\u53c2\u6570typography\u8868\u793a\u7684\u5c31\u662f\u4f60\u6240\u914d\u7f6e\u7684\u5b57\u4f53\uff0c\u53ea\u662f\u8fd9\u4e2aTypography\u662fAndroid Studio\u9ed8\u8ba4\u5e2e\u4f60\u914d\u5236\u7684\u3002 MaterialTheme ( colors = colors , typography = Typography , shapes = Shapes , content = content ) \u5982\u679c\u662f\u65b0\u5efa\u7684\u9879\u76ee\uff0cAndroid Studio\u4f1a\u5728ui.theme\u5305\u4e0b\u751f\u6210Type.kt\uff0c\u5176\u4e2d\u5305\u542b\u4e86Typography\u7684\u5b9e\u73b0\uff0c\u540d\u4e3aTypography\u7684\u53d8\u91cf\u95f4\u63a5\u8c03\u7528Typography\u7c7b\u6784\u9020\u51fd\u6570\u3002 val Typography = Typography ( body1 = TextStyle ( fontFamily = FontFamily . Default , fontWeight = FontWeight . Normal , fontSize = 16. sp ) ) \u518d\u56de\u5230MaterialTheme\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0typography\u63d0\u4f9b\u7ed9LocalTypography\u8fd9\u4e2aCompositionLocal\u5b9e\u4f8b\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u9879\u76ee\u4e2d\u5982\u4f55\u4f7f\u7528\u8fd9\u4e2a\u7279\u6b8a\u5b57\u4f53\u4e5f\u4e0d\u9700\u8981\u989d\u5916\u7684\u4ecb\u7ecd\u4e86\uff0c\u8fd9\u4e0ecolors\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 @Composable fun MaterialTheme ( colors : Colors = MaterialTheme . colors , typography : Typography = MaterialTheme . typography , shapes : Shapes = MaterialTheme . shapes , content : @Composable () -> Unit ) { val rememberedColors = remember { colors . copy () }. apply { updateColorsFrom ( colors ) } val rippleIndication = rememberRipple () val selectionColors = rememberTextSelectionColors ( rememberedColors ) CompositionLocalProvider ( LocalColors provides rememberedColors , LocalContentAlpha provides ContentAlpha . high , LocalIndication provides rippleIndication , LocalRippleTheme provides MaterialRippleTheme , LocalShapes provides shapes , LocalTextSelectionColors provides selectionColors , LocalTypography provides typography // I'm here~ ) { ProvideTextStyle ( value = typography . body1 , content = content ) } } \u65e2\u7136\u61c2\u5f97\u4e86\u539f\u7406\uff0c\u6211\u4eec\u4ec5\u9700\u8981\u6839\u636e\u9879\u76ee\u5b9e\u9645\u9700\u6c42\u914d\u7f6e\u5b57\u4f53\u6837\u5f0f\u5373\u53ef\uff0c\u65e2\u7136Android Studio\u5e2e\u52a9\u751f\u6210Type.kt\uff0c\u8bf4\u660e\u662f\u5b98\u65b9\u5e0c\u671b\u6211\u4eec\u5c06\u5b57\u4f53\u6837\u5f0f\u914d\u7f6e\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u7684\u3002\u8fd9\u662f\u4e00\u79cd\u89c4\u8303\uff0c\u4f46\u4e5f\u53ef\u4e0d\u9075\u5b88\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u6bcf\u79cd\u5b57\u4f53\u90fd\u4f1a\u6709\u4e0d\u540c\u7684\u7c97\u7ec6\u98ce\u683c\uff0c\u6211\u4eec\u5728\u5b57\u4f53\u6837\u5f0f\u914d\u7f6e\u65f6\u9700\u8981\u6307\u660e\u5b57\u4f53\u79cd\u7c7b\u4e0e\u7c97\u7ec6\u98ce\u683c\u3002 val nunitoSansFamily = FontFamily ( Font ( R . font . nunitosans_light , FontWeight . Light ), Font ( R . font . nunitosans_semibold , FontWeight . SemiBold ), Font ( R . font . nunitosans_bold , FontWeight . Bold ) ) val bloomTypography = Typography ( h1 = TextStyle ( fontSize = 18. sp , fontFamily = nunitoSansFamily , fontWeight = FontWeight . Bold ), h2 = TextStyle ( fontSize = 14. sp , letterSpacing = 0.15 . sp , fontFamily = nunitoSansFamily , fontWeight = FontWeight . Bold ), .... ) \u4f7f\u7528\u7684\u8bdd\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u4ec5\u9700\u5c06\u5b57\u4f53\u6837\u5f0f\u4f20\u5165MaterialTheme\u5373\u53ef\u3002 @Composable fun BloomTheme ( theme : BloomTheme = BloomTheme . LIGHT , content : @Composable () () -> Unit ) { MaterialTheme ( colors = if ( theme == BloomTheme . DARK ) BloomDarkColorPaltte else BloomLightColorPaltte , typography = bloomTypoGraphy , shapes = shapes , content = content ) } \u5728\u6211\u4eec\u7684\u89c6\u56fe\u7ec4\u4ef6\u4e2d\u4f7f\u7528style\u53c2\u6570\u8fdb\u884c\u914d\u7f6e\u5373\u53ef\u3002 Text ( text = \"Beautiful home garden solutions\" , textAlign = TextAlign . Center , style = MaterialTheme . typography . subtitle1 , // I'm here color = MaterialTheme . colors . onPrimary ) 4. \u914d\u7f6e\u81ea\u5b9a\u4e49\u8d44\u6e90 \u6709\u65f6\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u4f7f\u7528\u4e0d\u540c\u7684\u591a\u5a92\u4f53\u8d44\u6e90\uff0c\u4f8b\u5982\u56fe\u7247\u3001\u89c6\u9891\u3001\u97f3\u9891\u7b49\u7b49\u3002\u901a\u8fc7\u67e5\u9605MaterialTheme\u53c2\u6570\u5217\u8868\u6211\u4eec\u6ca1\u6709\u53d1\u73b0\u53ef\u4ee5\u8fdb\u884c\u914d\u7f6e\u7684\u53c2\u6570\u3002\u96be\u9053 Jetpack Compose \u4e0d\u5177\u5907\u8fd9\u6837\u7684\u80fd\u529b\uff1f\u7b54\u6848\u5f53\u7136\u662f\u5426\u5b9a\u7684\uff0cAndroid\u56e2\u961f\u5df2\u7ecf\u5145\u5206\u8003\u8651\u4e86\u5404\u79cd\u573a\u666f\uff0c\u53ea\u662f\u9488\u5bf9\u4e8e\u8fd9\u79cd\u9700\u6c42\u800c\u8a00\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u5b9a\u5236\u6269\u5c55\u3002 \u5728\u524d\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u8be6\u7ec6\u4ecb\u7ecd\u4e86MaterialTheme\u5de5\u4f5c\u539f\u7406\uff0c\u60f3\u5fc5\u4f60\u4e5f\u731c\u5230\u4e86\uff0c\u5c31\u662f\u901a\u8fc7\u5b9a\u5236CompositionLocal\u65b9\u5f0f\u6765\u5b9e\u73b0\u56fe\u7247\u8d44\u6e90\u7684\u6269\u5c55\uff0c\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u9009\u7528\u5176\u5bf9\u5e94\u7684\u591a\u5a92\u4f53\u8d44\u6e90\u3002 open class WelcomeAssets private constructor ( var background : Int , var illos : Int , var logo : Int ) { object LightWelcomeAssets : WelcomeAssets ( background = R . drawable . ic_light_welcome_bg , illos = R . drawable . ic_light_welcome_illos , logo = R . drawable . ic_light_logo ) object DarkWelcomeAssets : WelcomeAssets ( background = R . drawable . ic_dark_welcome_bg , illos = R . drawable . ic_dark_welcome_illos , logo = R . drawable . ic_dark_logo ) } internal var LocalWelcomeAssets = staticCompositionLocalOf { WelcomeAssets . LightWelcomeAssets as WelcomeAssets } \u4e8e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u5e0c\u671b\u80fd\u591f\u5728\u89c6\u56fe\u4e2d\u4ecd\u901a\u8fc7MaterialTheme\u6765\u8bbf\u95ee\u6211\u4eec\u7684\u56fe\u7247\u8d44\u6e90\uff0c\u90a3\u4e48\u5219\u53ef\u4ee5\u901a\u8fc7Kotlin\u6269\u5c55\u5c5e\u6027\u7684\u7279\u6027\u8fdb\u884c\u5b9e\u73b0(\u6269\u5c55\u5c5e\u6027\u662f\u6ca1\u6709\u5e55\u540e\u5b57\u6bb5\u7684\uff0c\u53ea\u80fd\u59d4\u6258\u5176\u4ed6\u5b9e\u4f8b)\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cCompositionLocal\u53ea\u80fd\u5728composable(\u5e26\u6709Composable\u6ce8\u89e3\u7684lambda)\u4e2d\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u8fd9\u4e2a\u5c5e\u6027\u83b7\u53d6\u6dfb\u52a0@Composable\u4e0e@ReadOnlyComposable\u6ce8\u89e3\u3002 val MaterialTheme . welcomeAssets @Composable @ReadOnlyComposable get () = LocalWelcomeAssets . current \u8fd9\u6837\u6211\u4eec\u5728\u89c6\u56fe\u4e2d\u5c31\u53ef\u4ee5\u4ecd\u7136\u901a\u8fc7MaterialTheme\u6765\u83b7\u53d6\u6269\u5c55\u7684\u56fe\u7247\u8d44\u6e90\u4e86\u3002 Image ( painter = rememberVectorPainter ( image = ImageVector . vectorResource ( id = MaterialTheme . welcomeAssets . background )), contentDescription = \"weclome_bg\" , modifier = Modifier . fillMaxSize () ) \u65e2\u7136\u4e86\u89e3\u4e86\u56fe\u7247\u7684\u4e3b\u9898\u914d\u7f6e\uff0c\u5176\u4ed6\u591a\u5a92\u4f53\u8d44\u6e90\u7684\u4e3b\u9898\u914d\u7f6e\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u8bf7\u5145\u5206\u53d1\u6325\u4f60\u7684\u60f3\u8c61\u529b\u3002","title":"\u81ea\u5b9a\u4e49\u4f60\u7684\u4e3b\u9898\u65b9\u6848"},{"location":"design/theme/custom_your_theme/#1","text":"\u672c\u6587\u793a\u4f8b\u6765\u81ea\uff1ahttps://github.com/RugerMcCarthy/BloomCompose \u901a\u8fc7\u9605\u8bfb\u524d\u4e24\u7bc7\u6587\u7ae0\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5177\u5907\u81ea\u5b9a\u4e49\u4e3b\u9898\u65b9\u6848\u7684\u80fd\u529b\u4e86\u3002\u6211\u4eec\u901a\u8fc7#AndroidDevChallange\u6311\u6218\u8d5b\u7b2c\u4e09\u5468\u9898\u76ee\u4f5c\u4e3a\u793a\u4f8b\u6765\u770b\u770b\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u5982\u4f55\u8fdb\u884c\u5e94\u7528\u3002\u5728\u4e0d\u540c\u4e3b\u9898\u65b9\u6848\u4e0b\u80cc\u666f\u989c\u8272\u3001\u6587\u5b57\u989c\u8272\u4e0e\u56fe\u7247\u8d44\u6e90\u90fd\u662f\u4e0d\u540c\u7684\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5bf9\u4e8e\u6240\u6709\u6587\u672c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3b\u9898\u5b8c\u6210\u5b57\u4f53\u6837\u5f0f\u7684\u914d\u7f6e\uff0c\u6240\u8981\u5b9e\u73b0\u7684\u76ee\u6807\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\u3002","title":"1. \u793a\u4f8b\u4ecb\u7ecd"},{"location":"design/theme/custom_your_theme/#2","text":"\u9996\u5148\uff0c\u6211\u4eec\u6765\u5b66\u4e60\u5982\u4f55\u914d\u7f6e\u989c\u8272\u6837\u5f0f\u3002\u5176\u5b9e\u8fd9\u91cc\u7684\u5185\u5bb9\u5728\u521d\u8bc6MaterialTheme\u7ae0\u8282\u4e2d\u7684\u64cd\u4f5c\u662f\u4e00\u6837\u7684\u3002\u6211\u4eec\u4ec5\u9700\u8981\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u751f\u6210\u5176\u5bf9\u5e94\u7684colors\u5373\u53ef\u3002\u6839\u636e\u9879\u76ee\u9700\u6c42\uff0c\u6211\u4eec\u8fdb\u884c\u4ee5\u4e0b\u7684\u914d\u7f6e\u3002 private val BloomLightColorPaltte = lightColors ( primary = pink100 , secondary = pink900 , background = white , surface = white850 , onPrimary = gray , onSecondary = white , onBackground = gray , onSurface = gray , ) private val BloomDarkColorPaltte = darkColors ( primary = green900 , secondary = green300 , background = gray , surface = white150 , onPrimary = white , onSecondary = gray , onBackground = white , onSurface = white850 ) @Composable fun BloomTheme ( theme : BloomTheme = BloomTheme . LIGHT , content : @Composable () () -> Unit ) { CompositionLocalProvider ( LocalWelcomeAssets provides if ( theme == BloomTheme . DARK ) WelcomeAssets . DarkWelcomeAssets else WelcomeAssets . LightWelcomeAssets , ) { MaterialTheme ( colors = if ( theme == BloomTheme . DARK ) BloomDarkColorPaltte else BloomLightColorPaltte , typography = Typography , shapes = shapes , content = content ) } } \u5728\u6211\u4eec\u7684\u89c6\u56fe\u6240\u9700\u8981Color\u7684\u5730\u65b9\u914d\u7f6e\u5373\u53ef\u3002 Text ( text = \"Beautiful home garden solutions\" , textAlign = TextAlign . Center , color = MaterialTheme . colors . onPrimary // I'm here )","title":"2. \u914d\u7f6e\u989c\u8272\u6837\u5f0f"},{"location":"design/theme/custom_your_theme/#3","text":"\u6211\u4eec\u63a5\u7740\u6765\u5b66\u4e60\u5982\u4f55\u914d\u7f6e\u5b57\u4f53\u6837\u5f0f\u3002\u8fd8\u8bb0\u5f97MaterialTheme\u65b9\u6cd5\u561b\uff0c\u5176\u5b9e\u7b2c\u4e8c\u4e2a\u53c2\u6570typography\u8868\u793a\u7684\u5c31\u662f\u4f60\u6240\u914d\u7f6e\u7684\u5b57\u4f53\uff0c\u53ea\u662f\u8fd9\u4e2aTypography\u662fAndroid Studio\u9ed8\u8ba4\u5e2e\u4f60\u914d\u5236\u7684\u3002 MaterialTheme ( colors = colors , typography = Typography , shapes = Shapes , content = content ) \u5982\u679c\u662f\u65b0\u5efa\u7684\u9879\u76ee\uff0cAndroid Studio\u4f1a\u5728ui.theme\u5305\u4e0b\u751f\u6210Type.kt\uff0c\u5176\u4e2d\u5305\u542b\u4e86Typography\u7684\u5b9e\u73b0\uff0c\u540d\u4e3aTypography\u7684\u53d8\u91cf\u95f4\u63a5\u8c03\u7528Typography\u7c7b\u6784\u9020\u51fd\u6570\u3002 val Typography = Typography ( body1 = TextStyle ( fontFamily = FontFamily . Default , fontWeight = FontWeight . Normal , fontSize = 16. sp ) ) \u518d\u56de\u5230MaterialTheme\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0typography\u63d0\u4f9b\u7ed9LocalTypography\u8fd9\u4e2aCompositionLocal\u5b9e\u4f8b\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u9879\u76ee\u4e2d\u5982\u4f55\u4f7f\u7528\u8fd9\u4e2a\u7279\u6b8a\u5b57\u4f53\u4e5f\u4e0d\u9700\u8981\u989d\u5916\u7684\u4ecb\u7ecd\u4e86\uff0c\u8fd9\u4e0ecolors\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 @Composable fun MaterialTheme ( colors : Colors = MaterialTheme . colors , typography : Typography = MaterialTheme . typography , shapes : Shapes = MaterialTheme . shapes , content : @Composable () -> Unit ) { val rememberedColors = remember { colors . copy () }. apply { updateColorsFrom ( colors ) } val rippleIndication = rememberRipple () val selectionColors = rememberTextSelectionColors ( rememberedColors ) CompositionLocalProvider ( LocalColors provides rememberedColors , LocalContentAlpha provides ContentAlpha . high , LocalIndication provides rippleIndication , LocalRippleTheme provides MaterialRippleTheme , LocalShapes provides shapes , LocalTextSelectionColors provides selectionColors , LocalTypography provides typography // I'm here~ ) { ProvideTextStyle ( value = typography . body1 , content = content ) } } \u65e2\u7136\u61c2\u5f97\u4e86\u539f\u7406\uff0c\u6211\u4eec\u4ec5\u9700\u8981\u6839\u636e\u9879\u76ee\u5b9e\u9645\u9700\u6c42\u914d\u7f6e\u5b57\u4f53\u6837\u5f0f\u5373\u53ef\uff0c\u65e2\u7136Android Studio\u5e2e\u52a9\u751f\u6210Type.kt\uff0c\u8bf4\u660e\u662f\u5b98\u65b9\u5e0c\u671b\u6211\u4eec\u5c06\u5b57\u4f53\u6837\u5f0f\u914d\u7f6e\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u7684\u3002\u8fd9\u662f\u4e00\u79cd\u89c4\u8303\uff0c\u4f46\u4e5f\u53ef\u4e0d\u9075\u5b88\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u6bcf\u79cd\u5b57\u4f53\u90fd\u4f1a\u6709\u4e0d\u540c\u7684\u7c97\u7ec6\u98ce\u683c\uff0c\u6211\u4eec\u5728\u5b57\u4f53\u6837\u5f0f\u914d\u7f6e\u65f6\u9700\u8981\u6307\u660e\u5b57\u4f53\u79cd\u7c7b\u4e0e\u7c97\u7ec6\u98ce\u683c\u3002 val nunitoSansFamily = FontFamily ( Font ( R . font . nunitosans_light , FontWeight . Light ), Font ( R . font . nunitosans_semibold , FontWeight . SemiBold ), Font ( R . font . nunitosans_bold , FontWeight . Bold ) ) val bloomTypography = Typography ( h1 = TextStyle ( fontSize = 18. sp , fontFamily = nunitoSansFamily , fontWeight = FontWeight . Bold ), h2 = TextStyle ( fontSize = 14. sp , letterSpacing = 0.15 . sp , fontFamily = nunitoSansFamily , fontWeight = FontWeight . Bold ), .... ) \u4f7f\u7528\u7684\u8bdd\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u4ec5\u9700\u5c06\u5b57\u4f53\u6837\u5f0f\u4f20\u5165MaterialTheme\u5373\u53ef\u3002 @Composable fun BloomTheme ( theme : BloomTheme = BloomTheme . LIGHT , content : @Composable () () -> Unit ) { MaterialTheme ( colors = if ( theme == BloomTheme . DARK ) BloomDarkColorPaltte else BloomLightColorPaltte , typography = bloomTypoGraphy , shapes = shapes , content = content ) } \u5728\u6211\u4eec\u7684\u89c6\u56fe\u7ec4\u4ef6\u4e2d\u4f7f\u7528style\u53c2\u6570\u8fdb\u884c\u914d\u7f6e\u5373\u53ef\u3002 Text ( text = \"Beautiful home garden solutions\" , textAlign = TextAlign . Center , style = MaterialTheme . typography . subtitle1 , // I'm here color = MaterialTheme . colors . onPrimary )","title":"3. \u914d\u7f6e\u5b57\u4f53\u6837\u5f0f"},{"location":"design/theme/custom_your_theme/#4","text":"\u6709\u65f6\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u4f7f\u7528\u4e0d\u540c\u7684\u591a\u5a92\u4f53\u8d44\u6e90\uff0c\u4f8b\u5982\u56fe\u7247\u3001\u89c6\u9891\u3001\u97f3\u9891\u7b49\u7b49\u3002\u901a\u8fc7\u67e5\u9605MaterialTheme\u53c2\u6570\u5217\u8868\u6211\u4eec\u6ca1\u6709\u53d1\u73b0\u53ef\u4ee5\u8fdb\u884c\u914d\u7f6e\u7684\u53c2\u6570\u3002\u96be\u9053 Jetpack Compose \u4e0d\u5177\u5907\u8fd9\u6837\u7684\u80fd\u529b\uff1f\u7b54\u6848\u5f53\u7136\u662f\u5426\u5b9a\u7684\uff0cAndroid\u56e2\u961f\u5df2\u7ecf\u5145\u5206\u8003\u8651\u4e86\u5404\u79cd\u573a\u666f\uff0c\u53ea\u662f\u9488\u5bf9\u4e8e\u8fd9\u79cd\u9700\u6c42\u800c\u8a00\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u5b9a\u5236\u6269\u5c55\u3002 \u5728\u524d\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u8be6\u7ec6\u4ecb\u7ecd\u4e86MaterialTheme\u5de5\u4f5c\u539f\u7406\uff0c\u60f3\u5fc5\u4f60\u4e5f\u731c\u5230\u4e86\uff0c\u5c31\u662f\u901a\u8fc7\u5b9a\u5236CompositionLocal\u65b9\u5f0f\u6765\u5b9e\u73b0\u56fe\u7247\u8d44\u6e90\u7684\u6269\u5c55\uff0c\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u9009\u7528\u5176\u5bf9\u5e94\u7684\u591a\u5a92\u4f53\u8d44\u6e90\u3002 open class WelcomeAssets private constructor ( var background : Int , var illos : Int , var logo : Int ) { object LightWelcomeAssets : WelcomeAssets ( background = R . drawable . ic_light_welcome_bg , illos = R . drawable . ic_light_welcome_illos , logo = R . drawable . ic_light_logo ) object DarkWelcomeAssets : WelcomeAssets ( background = R . drawable . ic_dark_welcome_bg , illos = R . drawable . ic_dark_welcome_illos , logo = R . drawable . ic_dark_logo ) } internal var LocalWelcomeAssets = staticCompositionLocalOf { WelcomeAssets . LightWelcomeAssets as WelcomeAssets } \u4e8e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u5e0c\u671b\u80fd\u591f\u5728\u89c6\u56fe\u4e2d\u4ecd\u901a\u8fc7MaterialTheme\u6765\u8bbf\u95ee\u6211\u4eec\u7684\u56fe\u7247\u8d44\u6e90\uff0c\u90a3\u4e48\u5219\u53ef\u4ee5\u901a\u8fc7Kotlin\u6269\u5c55\u5c5e\u6027\u7684\u7279\u6027\u8fdb\u884c\u5b9e\u73b0(\u6269\u5c55\u5c5e\u6027\u662f\u6ca1\u6709\u5e55\u540e\u5b57\u6bb5\u7684\uff0c\u53ea\u80fd\u59d4\u6258\u5176\u4ed6\u5b9e\u4f8b)\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cCompositionLocal\u53ea\u80fd\u5728composable(\u5e26\u6709Composable\u6ce8\u89e3\u7684lambda)\u4e2d\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u8fd9\u4e2a\u5c5e\u6027\u83b7\u53d6\u6dfb\u52a0@Composable\u4e0e@ReadOnlyComposable\u6ce8\u89e3\u3002 val MaterialTheme . welcomeAssets @Composable @ReadOnlyComposable get () = LocalWelcomeAssets . current \u8fd9\u6837\u6211\u4eec\u5728\u89c6\u56fe\u4e2d\u5c31\u53ef\u4ee5\u4ecd\u7136\u901a\u8fc7MaterialTheme\u6765\u83b7\u53d6\u6269\u5c55\u7684\u56fe\u7247\u8d44\u6e90\u4e86\u3002 Image ( painter = rememberVectorPainter ( image = ImageVector . vectorResource ( id = MaterialTheme . welcomeAssets . background )), contentDescription = \"weclome_bg\" , modifier = Modifier . fillMaxSize () ) \u65e2\u7136\u4e86\u89e3\u4e86\u56fe\u7247\u7684\u4e3b\u9898\u914d\u7f6e\uff0c\u5176\u4ed6\u591a\u5a92\u4f53\u8d44\u6e90\u7684\u4e3b\u9898\u914d\u7f6e\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u8bf7\u5145\u5206\u53d1\u6325\u4f60\u7684\u60f3\u8c61\u529b\u3002","title":"4. \u914d\u7f6e\u81ea\u5b9a\u4e49\u8d44\u6e90"},{"location":"design/theme/meet_material_theme/","text":"1. \u4ecb\u7ecd MaterialTheme \u662f Jetpack Compose \u6240\u63d0\u4f9b\u7684\u57fa\u4e8e Material Design \u98ce\u683c\u4e3b\u9898\u6837\u5f0f\u6a21\u7248\uff0c\u901a\u8fc7\u4e3b\u9898\u6837\u5f0f\u6a21\u7248\u7684\u914d\u7f6e\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u89c6\u56fe\u7cfb\u7edf\u4e2d\u6240\u6709\u7ec4\u4ef6\u6839\u636e\u4e3b\u9898\u5207\u6362\u800c\u76f8\u5e94\u5f97\u5230\u6837\u5f0f\u6539\u53d8\u3002 \u5f53\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Compose \u9879\u76ee\u65f6\uff0cAndroid Studio \u4f1a\u9ed8\u8ba4\u5e2e\u6211\u751f\u6210\u4e00\u4e2a Theme \u65b9\u6cd5(\u751f\u6210\u7684\u547d\u540d\u89c4\u5219\uff1a\u9879\u76ee\u540d\u79f0+Theme) class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { // \u770b\u8fd9\u91cc\uff0c\u6211\u521b\u5efa\u7684\u9879\u76ee\u540d\u79f0\u662f ComposeStudy \uff5e // \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6211\u4eec\u58f0\u660e\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\u4f1a\u4ee5 lambda \u53c2\u6570\u5f62\u5f0f\u4f20\u5165\u5176\u4e2d\u3002 ComposeStudyTheme { Surface ( color = MaterialTheme . colors . background ) { Greeting ( \"Android\" ) } } } } } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u751f\u6210\u7684 Theme \u65b9\u6cd5\u4e3a\u6211\u4eec\u505a\u4e86\u54ea\u4e9b\u4e8b\u3002 @Composable fun ComposeStudyTheme ( darkTheme : Boolean = isSystemInDarkTheme (), content : @Composable () () -> Unit ) { val colors = if ( darkTheme ) { DarkColorPalette } else { LightColorPalette } MaterialTheme ( colors = colors , // \u989c\u8272 typography = Typography , // \u5b57\u4f53 shapes = Shapes , // \u5f62\u72b6 content = content // \u58f0\u660e\u7684\u89c6\u56fe ) } private val DarkColorPalette = darkColors ( primary = Purple200 , primaryVariant = Purple700 , secondary = Teal200 ) private val LightColorPalette = lightColors ( primary = Purple500 , primaryVariant = Purple700 , secondary = Teal200 ) \u5728\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86 MaterialTheme \u3002\u4f46\u662f\u5148\u522b\u6025\u6211\u4eec\u5f80\u4e0a\u770b\u770b\uff0c\u53ef\u4ee5\u770b\u5230 Android Studio \u9ed8\u8ba4\u5e2e\u52a9\u6211\u4eec\u751f\u6210\u4e86\u4e24\u79cd\u914d\u8272\u7684\u8c03\u8272\u677f( Light \u4e0e Dark )\uff0c\u6839\u636e\u4f20\u5165\u5e03\u5c14\u503c\u7684\u4e0d\u540c\u800c\u9009\u62e9\u5176\u4e00\uff0c\u5e76\u5c06\u5176\u4f20\u5165\u5230MaterialTheme\u3002\u53ef\u4ee5\u770b\u5230\u8fd9\u4e24\u79cd\u914d\u8272\u7684\u8c03\u8272\u677f\u5206\u522b\u4f7f\u7528\u7684\u662f darkColors \u4e0e lightColors \u4e24\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e24\u8005\u7684\u5b9e\u73b0\u3002 fun lightColors ( primary : Color = Color ( 0 xFF6200EE ), primaryVariant : Color = Color ( 0 xFF3700B3 ), secondary : Color = Color ( 0 xFF03DAC6 ), secondaryVariant : Color = Color ( 0 xFF018786 ), background : Color = Color . White , surface : Color = Color . White , error : Color = Color ( 0 xFFB00020 ), onPrimary : Color = Color . White , onSecondary : Color = Color . Black , onBackground : Color = Color . Black , onSurface : Color = Color . Black , onError : Color = Color . White ): Colors = Colors ( primary , primaryVariant , secondary , secondaryVariant , background , surface , error , onPrimary , onSecondary , onBackground , onSurface , onError , true ) \u53ef\u4ee5\u770b\u5230 lightColors \u5c06\u4f20\u5165\u53c2\u6570\u900f\u4f20\u5230\u4e86Colors\u6784\u9020\u5668\u4e2d\u4e86\uff0c\u800c Colors \u6784\u9020\u5668\u5c5e\u6027\u662f\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\uff0c lightColors \u5e2e\u52a9\u6211\u4eec\u751f\u6210\u4e86\u8bb8\u591a\u5c5e\u6027\u9ed8\u8ba4\u503c\u3002\u53ef\u4ee5\u53d1\u73b0\u4e24\u79cd\u8c03\u8272\u677f\u672c\u8d28\u4e0a\u53ea\u662fColors\u6210\u5458\u5c5e\u6027\u914d\u7f6e\u7684\u4e0d\u540c\uff0c\u61c2\u5f97\u4e86\u672c\u8d28\u5c31\u53ef\u4ee5\u8fdb\u884c\u5b9a\u5236\u4e3b\u9898\u6837\u5f0f\u7684\u914d\u7f6e\u4e86\u3002 2. \u7b80\u5355\u4f7f\u7528 MaterialTheme \u5b8c\u6210\u4e3b\u9898\u914d\u8272 \u63a5\u4e0b\u6765\u662f\u4f7f\u7528\u793a\u4f8b\uff0c\u5047\u8bbe\u5f53\u524d\u9700\u6c42\u4e3a\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u4f7f\u5f97\u6211\u4eec\u5b9a\u5236\u7684\u6587\u672c\u989c\u8272\u4e5f\u4f1a\u968f\u4e4b\u53d8\u5316\u3002\u5f53\u4eae\u8272\u4e3b\u9898\u65f6\u663e\u793a\u4e3a\u7ea2\u8272\uff0c\u6697\u8272\u4e3b\u9898\u663e\u793a\u4e3a\u84dd\u8272\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Color \u7684 primary \u5c5e\u6027\u6765\u5b58\u50a8\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6210\u5458\u5c5e\u6027\u3002 @Composable fun CustomColorTheme ( isDark : Boolean , content : @Composable () () -> Unit ) { var BLUE = Color ( 0 xFF0000FF ) var RED = Color ( 0 xFFDC143C ) val colors = if ( isDark ) { darkColors ( primary = BLUE ) // \u5c06 primary \u8bbe\u7f6e\u4e3a\u84dd\u8272 } else { lightColors ( primary = RED ) // \u5c06 primary \u8bbe\u7f6e\u4e3a\u7ea2\u8272 } MaterialTheme ( colors = colors , typography = Typography , shapes = Shapes , content = content ) } \u914d\u7f6e\u5b8c\u5c31\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\u7cfb\u7edf\u4e2d\u4f7f\u7528\u4e86\uff0c\u5c06\u6211\u4eec\u89c6\u56fe\u4e2d\u7684 Text \u989c\u8272\u914d\u7f6e\u4e3a MaterialTheme.colors.primary \u3002 @Composable fun SampleText () { Text ( text = \"Hello World\" , color = MaterialTheme . colors . primary ) } @Preview ( showBackground = true ) @Composable fun DarkPreview () { CustomColorTheme ( isDark = true ) { SampleText (); } } @Preview ( showBackground = true ) @Composable fun LightPreview () { CustomColorTheme ( isDark = false ) { SampleText () } } \u6211\u4eec\u540c\u65f6\u521b\u5efa\u4e86\u4e24\u79cd\u4e3b\u9898\u7684\u9884\u89c8\uff0c\u901a\u8fc7 Android Studio \u7684 Preview \u7a97\u53e3\u5c31\u53ef\u4ee5\u9884\u89c8\u5230\u6240\u6709\u4e3b\u9898\u4e0b\u7684\u6548\u679c\u4e86\u3002","title":"\u521d\u8bc6 MaterialTheme"},{"location":"design/theme/meet_material_theme/#1","text":"MaterialTheme \u662f Jetpack Compose \u6240\u63d0\u4f9b\u7684\u57fa\u4e8e Material Design \u98ce\u683c\u4e3b\u9898\u6837\u5f0f\u6a21\u7248\uff0c\u901a\u8fc7\u4e3b\u9898\u6837\u5f0f\u6a21\u7248\u7684\u914d\u7f6e\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u89c6\u56fe\u7cfb\u7edf\u4e2d\u6240\u6709\u7ec4\u4ef6\u6839\u636e\u4e3b\u9898\u5207\u6362\u800c\u76f8\u5e94\u5f97\u5230\u6837\u5f0f\u6539\u53d8\u3002 \u5f53\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Compose \u9879\u76ee\u65f6\uff0cAndroid Studio \u4f1a\u9ed8\u8ba4\u5e2e\u6211\u751f\u6210\u4e00\u4e2a Theme \u65b9\u6cd5(\u751f\u6210\u7684\u547d\u540d\u89c4\u5219\uff1a\u9879\u76ee\u540d\u79f0+Theme) class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { // \u770b\u8fd9\u91cc\uff0c\u6211\u521b\u5efa\u7684\u9879\u76ee\u540d\u79f0\u662f ComposeStudy \uff5e // \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6211\u4eec\u58f0\u660e\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\u4f1a\u4ee5 lambda \u53c2\u6570\u5f62\u5f0f\u4f20\u5165\u5176\u4e2d\u3002 ComposeStudyTheme { Surface ( color = MaterialTheme . colors . background ) { Greeting ( \"Android\" ) } } } } } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u751f\u6210\u7684 Theme \u65b9\u6cd5\u4e3a\u6211\u4eec\u505a\u4e86\u54ea\u4e9b\u4e8b\u3002 @Composable fun ComposeStudyTheme ( darkTheme : Boolean = isSystemInDarkTheme (), content : @Composable () () -> Unit ) { val colors = if ( darkTheme ) { DarkColorPalette } else { LightColorPalette } MaterialTheme ( colors = colors , // \u989c\u8272 typography = Typography , // \u5b57\u4f53 shapes = Shapes , // \u5f62\u72b6 content = content // \u58f0\u660e\u7684\u89c6\u56fe ) } private val DarkColorPalette = darkColors ( primary = Purple200 , primaryVariant = Purple700 , secondary = Teal200 ) private val LightColorPalette = lightColors ( primary = Purple500 , primaryVariant = Purple700 , secondary = Teal200 ) \u5728\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86 MaterialTheme \u3002\u4f46\u662f\u5148\u522b\u6025\u6211\u4eec\u5f80\u4e0a\u770b\u770b\uff0c\u53ef\u4ee5\u770b\u5230 Android Studio \u9ed8\u8ba4\u5e2e\u52a9\u6211\u4eec\u751f\u6210\u4e86\u4e24\u79cd\u914d\u8272\u7684\u8c03\u8272\u677f( Light \u4e0e Dark )\uff0c\u6839\u636e\u4f20\u5165\u5e03\u5c14\u503c\u7684\u4e0d\u540c\u800c\u9009\u62e9\u5176\u4e00\uff0c\u5e76\u5c06\u5176\u4f20\u5165\u5230MaterialTheme\u3002\u53ef\u4ee5\u770b\u5230\u8fd9\u4e24\u79cd\u914d\u8272\u7684\u8c03\u8272\u677f\u5206\u522b\u4f7f\u7528\u7684\u662f darkColors \u4e0e lightColors \u4e24\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e24\u8005\u7684\u5b9e\u73b0\u3002 fun lightColors ( primary : Color = Color ( 0 xFF6200EE ), primaryVariant : Color = Color ( 0 xFF3700B3 ), secondary : Color = Color ( 0 xFF03DAC6 ), secondaryVariant : Color = Color ( 0 xFF018786 ), background : Color = Color . White , surface : Color = Color . White , error : Color = Color ( 0 xFFB00020 ), onPrimary : Color = Color . White , onSecondary : Color = Color . Black , onBackground : Color = Color . Black , onSurface : Color = Color . Black , onError : Color = Color . White ): Colors = Colors ( primary , primaryVariant , secondary , secondaryVariant , background , surface , error , onPrimary , onSecondary , onBackground , onSurface , onError , true ) \u53ef\u4ee5\u770b\u5230 lightColors \u5c06\u4f20\u5165\u53c2\u6570\u900f\u4f20\u5230\u4e86Colors\u6784\u9020\u5668\u4e2d\u4e86\uff0c\u800c Colors \u6784\u9020\u5668\u5c5e\u6027\u662f\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\uff0c lightColors \u5e2e\u52a9\u6211\u4eec\u751f\u6210\u4e86\u8bb8\u591a\u5c5e\u6027\u9ed8\u8ba4\u503c\u3002\u53ef\u4ee5\u53d1\u73b0\u4e24\u79cd\u8c03\u8272\u677f\u672c\u8d28\u4e0a\u53ea\u662fColors\u6210\u5458\u5c5e\u6027\u914d\u7f6e\u7684\u4e0d\u540c\uff0c\u61c2\u5f97\u4e86\u672c\u8d28\u5c31\u53ef\u4ee5\u8fdb\u884c\u5b9a\u5236\u4e3b\u9898\u6837\u5f0f\u7684\u914d\u7f6e\u4e86\u3002","title":"1. \u4ecb\u7ecd"},{"location":"design/theme/meet_material_theme/#2-materialtheme","text":"\u63a5\u4e0b\u6765\u662f\u4f7f\u7528\u793a\u4f8b\uff0c\u5047\u8bbe\u5f53\u524d\u9700\u6c42\u4e3a\u6839\u636e\u4e3b\u9898\u7684\u4e0d\u540c\u4f7f\u5f97\u6211\u4eec\u5b9a\u5236\u7684\u6587\u672c\u989c\u8272\u4e5f\u4f1a\u968f\u4e4b\u53d8\u5316\u3002\u5f53\u4eae\u8272\u4e3b\u9898\u65f6\u663e\u793a\u4e3a\u7ea2\u8272\uff0c\u6697\u8272\u4e3b\u9898\u663e\u793a\u4e3a\u84dd\u8272\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Color \u7684 primary \u5c5e\u6027\u6765\u5b58\u50a8\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6210\u5458\u5c5e\u6027\u3002 @Composable fun CustomColorTheme ( isDark : Boolean , content : @Composable () () -> Unit ) { var BLUE = Color ( 0 xFF0000FF ) var RED = Color ( 0 xFFDC143C ) val colors = if ( isDark ) { darkColors ( primary = BLUE ) // \u5c06 primary \u8bbe\u7f6e\u4e3a\u84dd\u8272 } else { lightColors ( primary = RED ) // \u5c06 primary \u8bbe\u7f6e\u4e3a\u7ea2\u8272 } MaterialTheme ( colors = colors , typography = Typography , shapes = Shapes , content = content ) } \u914d\u7f6e\u5b8c\u5c31\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\u7cfb\u7edf\u4e2d\u4f7f\u7528\u4e86\uff0c\u5c06\u6211\u4eec\u89c6\u56fe\u4e2d\u7684 Text \u989c\u8272\u914d\u7f6e\u4e3a MaterialTheme.colors.primary \u3002 @Composable fun SampleText () { Text ( text = \"Hello World\" , color = MaterialTheme . colors . primary ) } @Preview ( showBackground = true ) @Composable fun DarkPreview () { CustomColorTheme ( isDark = true ) { SampleText (); } } @Preview ( showBackground = true ) @Composable fun LightPreview () { CustomColorTheme ( isDark = false ) { SampleText () } } \u6211\u4eec\u540c\u65f6\u521b\u5efa\u4e86\u4e24\u79cd\u4e3b\u9898\u7684\u9884\u89c8\uff0c\u901a\u8fc7 Android Studio \u7684 Preview \u7a97\u53e3\u5c31\u53ef\u4ee5\u9884\u89c8\u5230\u6240\u6709\u4e3b\u9898\u4e0b\u7684\u6548\u679c\u4e86\u3002","title":"2. \u7b80\u5355\u4f7f\u7528 MaterialTheme \u5b8c\u6210\u4e3b\u9898\u914d\u8272"},{"location":"design/theme/overview/","text":"","title":"\u6982\u8ff0"},{"location":"design/theme/understanding_material_theme/","text":"1. MaterialTheme \u662f\u600e\u4e48\u505a\u5230\u7684 \u4e3a\u6df1\u5165\u7406\u89e3 MaterialTheme \u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u5165\u6e90\u7801\u4e00\u63a2\u7a76\u7adf\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u65f6\u4f20\u5165\u7684 content \u53c2\u6570\u5176\u5b9e\u662f\u58f0\u660e\u5728 Theme \u4e2d\u7684\u81ea\u5b9a\u4e49\u5e03\u5c40\u7cfb\u7edf\uff0c\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u5e26\u6709 Composable \u6ce8\u89e3\u7684 lambda (\u5bf9\u4e8e\u8fd9\u7c7b\u5e26\u6709 Composable \u7684 lambda \u7b80\u79f0\u4e3a composable )\u3002 \u6211\u4eec\u6240\u5173\u6ce8\u7684 colors \u88ab remember \u4fee\u9970\u540e\u8d4b\u503c\u4e3a rememberedColors\u3002\u5982\u679c MaterialTheme \u8fd9\u4e2a composable \u53d1\u751f recompose \u65f6\u4fbf\u4f1a\u68c0\u67e5 colors \u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8\u4ece\u800c\u51b3\u5b9a\u66f4\u65b0\u3002 \u63a5\u4e0b\u6765\u4f7f\u7528 CompositionLocalProvider \u65b9\u6cd5\uff0c\u901a\u8fc7\u4e2d\u7f00 providers \u5c06 rememberedColors \u63d0\u4f9b\u7ed9\u4e86 LocalColors\u3002\u8ba9\u6211\u4eec\u56de\u5230\u81ea\u5b9a\u4e49\u89c6\u56fe\u4e2d\uff0c\u770b\u770b\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7 MaterialTheme \u83b7\u53d6\u5230\u5f53\u524d\u4e3b\u9898\u914d\u8272\u7684\u3002 object MaterialTheme { val colors : Colors @Composable @ReadOnlyComposable get () = LocalColors . current val typography : Typography @Composable @ReadOnlyComposable get () = LocalTypography . current val shapes : Shapes @Composable @ReadOnlyComposable get () = LocalShapes . current } \u53ef\u4ee5\u53d1\u73b0\u5728\u83b7\u53d6\u5230\u5f53\u524d\u4e3b\u9898\u914d\u8272\u65f6\u4f7f\u7528\u7684\u662f MaterialTheme \u7c7b\u5355\u4f8b\u7684 colors \u5c5e\u6027\uff0c\u95f4\u63a5\u4f7f\u7528\u4e86 LocalColors\u3002 \u603b\u7ed3\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u81ea\u5b9a\u4e49 Theme \u4f7f\u7528\u7684\u662f MaterialTheme \u51fd\u6570\u4e3a LocalColors \u8d4b\u503c\uff0c\u800c\u5728\u83b7\u53d6\u65f6\u4f7f\u7528\u7684\u662f MaterialTheme \u7c7b\u5355\u4f8b\uff0c\u95f4\u63a5\u4ece LocalColors \u4e2d\u83b7\u53d6\u5230\u503c\u3002\u6240\u4ee5 LocalColors \u5230\u5e95\u662f\u4f55\u65b9\u795e\u5723\u5462\uff1f internal val LocalColors = staticCompositionLocalOf { lightColors () } \u901a\u8fc7\u58f0\u660e\u53ef\u4ee5\u53d1\u73b0\u4ed6\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a CompositionLocal\uff0c\u5176\u521d\u59cb\u503c\u662f lightColors() \u8fd4\u56de\u7684 colors \u914d\u7f6e\u3002 MaterialTheme \u65b9\u6cd5\u4e2d\u901a\u8fc7 CompositionLocalProvider \u65b9\u6cd5\u4e3a\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe composable \u63d0\u4f9b\u4e86\u4e00\u4e9b CompositionLocal\uff0c\u5305\u542b\u4e86\u6240\u6709\u7684\u4e3b\u9898\u914d\u7f6e\u4fe1\u606f\u3002 2. CompositionLocal\u4ecb\u7ecd \u5f88\u591a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728 composable \u6811\u4e2d\u5171\u4eab\u4e00\u4e9b\u6570\u636e\uff08\u4f8b\u5982\u4e3b\u9898\u914d\u7f6e\uff09\uff0c\u4e00\u79cd\u6709\u6548\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u663e\u5f0f\u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\u8fdb\u884c\u5b9e\u73b0\uff0c\u5f53\u53c2\u6570\u8d8a\u6765\u8d8a\u591a\u65f6\uff0ccomposable \u53c2\u6570\u5217\u8868\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u81c3\u80bf\uff0c\u96be\u4ee5\u8fdb\u884c\u7ef4\u62a4\u3002\u5f53 composable \u9700\u8981\u5f7c\u6b64\u95f4\u4f20\u9012\u6570\u636e\uff0c\u5e76\u4e14\u5b9e\u73b0\u5404\u81ea\u7684\u79c1\u6709\u6027\u65f6\uff0c\u5982\u679c\u4ecd\u91c7\u7528\u663e\u5f0f\u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\u5219\u53ef\u80fd\u4f1a\u4ea7\u751f\u610f\u6599\u4e4b\u5916\u7684\u9ebb\u70e6\u4e0e\u5d29\u6e83\u3002 \u4e3a\u89e3\u51b3\u4e0a\u8ff0\u75db\u70b9\u95ee\u9898\uff0c Jetpack Compose \u63d0\u4f9b\u4e86 CompostionLocal \u7528\u6765\u5b8c\u6210 composable \u6811\u4e2d\u5171\u4eab\u6570\u636e\u65b9\u5f0f\u3002CompositionLocals \u662f\u5177\u6709\u5c42\u7ea7\u7684\uff0c\u53ef\u4ee5\u88ab\u9650\u5b9a\u5728\u4ee5\u67d0\u4e2a composable \u4f5c\u4e3a\u6839\u7ed3\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u5176\u9ed8\u8ba4\u4f1a\u5411\u4e0b\u4f20\u9012\u7684\uff0c\u5f53\u7136\u5f53\u524d\u5b50\u6811\u4e2d\u7684\u67d0\u4e2a composable \u53ef\u4ee5\u5bf9\u8be5 CompositionLocals \u8fdb\u884c\u8986\u76d6\uff0c\u4ece\u800c\u4f7f\u5f97\u65b0\u503c\u4f1a\u5728\u8fd9\u4e2a composable \u4e2d\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\u3002 Jetpack Compose \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86compositionLocalOf \u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a CompostionLocal \u5b9e\u4f8b\u3002 import androidx.compose.runtime.compositionLocalOf var LocalString = compositionLocalOf { \"Jetpack Compose\" } \u5728 composable \u6811\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 CompositionLocalProvider \u65b9\u6cd5\u4e3a CompositionLocal \u63d0\u4f9b\u4e00\u4e2a\u503c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u4f4d\u4e8e composable \u6811\u7684\u6839\u90e8\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4f4d\u4e8e\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd8\u53ef\u4ee5\u5728\u591a\u4e2a\u4f4d\u7f6e\u4f7f\u7528\uff0c\u4ee5\u8986\u76d6\u5b50\u6811\u80fd\u591f\u83b7\u53d6\u5230\u7684\u503c\u3002\u6211\u4eec\u7684\u793a\u4f8b\u9009\u62e9\u5728 Column \u6240\u5305\u542b\u7684 composable \u4e2d\u4f7f\u7528 CompositionLocalProvider\u3002 import androidx.compose.runtime.CompositionLocalProvider setContent { CustomColorTheme ( true ) { Column { CompositionLocalProvider ( LocalString provides \"Hello World\" ) { Text ( text = LocalString . current , color = Color . Green ) CompositionLocalProvider ( LocalString provides \"Ruger McCarthy\" ) { Text ( text = LocalString . current , color = Color . Blue ) } } Text ( text = LocalString . current , color = Color . Red ) } } } \u5b9e\u9645\u6548\u679c\u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136\u6240\u6709 composable \u5747\u4f9d\u8d56\u7684\u662f\u540c\u4e00\u4e2a CompositionLocal\uff0c\u800c\u5176\u83b7\u5f97\u5230\u7684\u5b9e\u9645\u7684\u503c\u5374\u662f\u4e0d\u4e00\u6837\u7684\u3002 compositionLocalOf \u4e0e staticCompositionLocalOf \u533a\u522b \u5f53\u6211\u4eec\u521b\u5efa CompositionLocal \u65f6\uff0c\u901a\u5e38\u9700\u8981\u4f7f\u7528 compositionLocalOf \u6216 staticCompositionLocalOf \u65b9\u6cd5\u3002\u7136\u800c\u8fd9\u4e24\u8005\u7684\u533a\u522b\u662f\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e staticCompositionLocalOf \u65b9\u6cd5\u58f0\u660e\u5904\u7684\u6ce8\u91ca\u6587\u6863\u4e2d\u8bf4\u660e\u4e86\u4e00\u5207\u3002 Unlike compositionLocalOf, reads of a staticCompositionLocalOf are not tracked by the composer and changing the value provided in the CompositionLocalProvider call will cause the entirety of the content to be recomposed instead of just the places where in the composition the local value is used. \u7b80\u5355\u6982\u62ec\u5c31\u662f\uff0c\u5f53\u6211\u4eec\u9009\u62e9\u4f7f\u7528 staticCompositionLocalOf \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e2a StaticProvidableCompositionLocal \u5b9e\u4f8b\uff0c\u5f53\u5176\u6240\u63d0\u4f9b\u7684\u503c\u6539\u53d8\u65f6\uff0c\u4f1a\u5bfc\u81f4 CompositionLocalProvide \u5185\u90e8\u6240\u6709 composable \u89e6\u53d1\u91cd\u7ec4(recompose)\u3002 \u5982\u679c\u6211\u4eec\u9009\u62e9\u4f7f\u7528 compositionLocalOf \uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e2a DynamicProvidableCompositionLocal \u5b9e\u4f8b\uff0c\u5f53\u5176\u6240\u63d0\u4f9b\u7684\u503c\u6539\u53d8\u65f6\uff0c\u4ec5\u4f1a\u5bfc\u81f4 CompositionLocalProvide \u5185\u90e8\u4f9d\u8d56\u5f53\u524d CompositionLocal \u7684 composable \u89e6\u53d1\u91cd\u7ec4(recompose)\u3002 Talk is cheap\uff0cShow me the code~. \u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u884c\u5bf9\u7167\u793a\u4f8b\u5370\u8bc1\u3002 \u65e2\u7136\u8981\u5bf9\u7167\uff0c\u6211\u4eec\u5c31\u5206\u522b\u4f7f\u7528 staticCompositionLocalOf \u4e0e compositionLocalOf \u521b\u5efa CompositionLocal\u3002\u6211\u4eec\u4f7f\u7528\u4e09\u5c42\u5d4c\u5957\u7684 Box \u8fdb\u884c\u4e3e\u4f8b\uff0c\u6211\u4eec\u5c06 CompositionLocalProvide \u5305\u88f9\u5728\u6700\u5916\u5c42\uff0c\u82e5\u67d0\u5c42 Box \u89e6\u53d1\u4e86\u91cd\u7ec4(recompose) \u4fbf\u4f1a\u66f4\u65b0\u8be5\u5c42\u7684\u6587\u672c\u4fe1\u606f\u3002\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5904\u4e8e\u4e2d\u5c42 \u7684 Box \u4f9d\u8d56\u4e86 CompositionLocal\u3002 \u5f53\u6211\u4eec\u4fee\u6539\u4e86 CompositionLocal \u6240\u63d0\u4f9b\u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0 staticCompositionLocalOf \u573a\u666f\u4e0b\uff0c\u6240\u6709 Box \u5747\u53d1\u751f\u4e86\u91cd\u7ec4\uff0c\u800c DynamicCompositionLocal \u573a\u666f\u4e0b\uff0c\u4ec5\u4e2d\u5c42\u4f9d\u8d56\u4e86 CompositionLocal \u7684 Box \u89e6\u53d1\u4e86\u91cd\u7ec4\u3002\u6587\u7ae0\u7ed3\u5c3e\u5904\u63d0\u4f9b\u4e86\u5b9e\u4f8b\u4ee3\u7801\u3002 \u793a\u4f8b\u4ee3\u7801 var isStatic = false var compositionLocalName = \"\" val currentLocalColor = if ( isStatic ) { compositionLocalName = \"StaticCompositionLocal \u573a\u666f\" staticCompositionLocalOf { Color . Black } } else { compositionLocalName = \"DynamicCompositionLocal \u573a\u666f\" compositionLocalOf { Color . Black } } var recomposeFlag = \"Init\" @Preview @Composable fun CompositionLocalDemo ( isStatic : Boolean = false ) { var color by remember { mutableStateOf ( Color . Green ) } Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Column ( horizontalAlignment = Alignment . CenterHorizontally ){ Text ( text = \" ${ compositionLocalName } \" ) Spacer ( Modifier . height ( 20. dp )) CompositionLocalProvider ( currentLocalColor provides color ) { TaggedBox ( \"Wrapper: ${ recomposeFlag } \" , 400. dp , Color . Red ) { TaggedBox ( \"Middle: ${ recomposeFlag } \" , 300. dp , currentLocalColor . current ) { TaggedBox ( \"Inner: ${ recomposeFlag } \" , 200. dp , Color . Yellow ) } } } Spacer ( Modifier . height ( 20. dp )) Button ( onClick = { color = Color . Blue } ) { Text ( text = \"Change Theme\" ) } } } recomposeFlag = \"Recompose\" } @Composable fun TaggedBox ( tag : String , size : Dp , background : Color , content : @Composable () -> Unit = {}) { Column ( modifier = Modifier . size ( size ) . background ( background ), horizontalAlignment = Alignment . CenterHorizontally ) { Text ( text = tag ) Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { content () } } }","title":"\u6df1\u5165\u7406\u89e3 MaterialTheme \u4e0e CompositionLocal"},{"location":"design/theme/understanding_material_theme/#1-materialtheme","text":"\u4e3a\u6df1\u5165\u7406\u89e3 MaterialTheme \u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u5165\u6e90\u7801\u4e00\u63a2\u7a76\u7adf\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u65f6\u4f20\u5165\u7684 content \u53c2\u6570\u5176\u5b9e\u662f\u58f0\u660e\u5728 Theme \u4e2d\u7684\u81ea\u5b9a\u4e49\u5e03\u5c40\u7cfb\u7edf\uff0c\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u5e26\u6709 Composable \u6ce8\u89e3\u7684 lambda (\u5bf9\u4e8e\u8fd9\u7c7b\u5e26\u6709 Composable \u7684 lambda \u7b80\u79f0\u4e3a composable )\u3002 \u6211\u4eec\u6240\u5173\u6ce8\u7684 colors \u88ab remember \u4fee\u9970\u540e\u8d4b\u503c\u4e3a rememberedColors\u3002\u5982\u679c MaterialTheme \u8fd9\u4e2a composable \u53d1\u751f recompose \u65f6\u4fbf\u4f1a\u68c0\u67e5 colors \u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8\u4ece\u800c\u51b3\u5b9a\u66f4\u65b0\u3002 \u63a5\u4e0b\u6765\u4f7f\u7528 CompositionLocalProvider \u65b9\u6cd5\uff0c\u901a\u8fc7\u4e2d\u7f00 providers \u5c06 rememberedColors \u63d0\u4f9b\u7ed9\u4e86 LocalColors\u3002\u8ba9\u6211\u4eec\u56de\u5230\u81ea\u5b9a\u4e49\u89c6\u56fe\u4e2d\uff0c\u770b\u770b\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7 MaterialTheme \u83b7\u53d6\u5230\u5f53\u524d\u4e3b\u9898\u914d\u8272\u7684\u3002 object MaterialTheme { val colors : Colors @Composable @ReadOnlyComposable get () = LocalColors . current val typography : Typography @Composable @ReadOnlyComposable get () = LocalTypography . current val shapes : Shapes @Composable @ReadOnlyComposable get () = LocalShapes . current } \u53ef\u4ee5\u53d1\u73b0\u5728\u83b7\u53d6\u5230\u5f53\u524d\u4e3b\u9898\u914d\u8272\u65f6\u4f7f\u7528\u7684\u662f MaterialTheme \u7c7b\u5355\u4f8b\u7684 colors \u5c5e\u6027\uff0c\u95f4\u63a5\u4f7f\u7528\u4e86 LocalColors\u3002 \u603b\u7ed3\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u81ea\u5b9a\u4e49 Theme \u4f7f\u7528\u7684\u662f MaterialTheme \u51fd\u6570\u4e3a LocalColors \u8d4b\u503c\uff0c\u800c\u5728\u83b7\u53d6\u65f6\u4f7f\u7528\u7684\u662f MaterialTheme \u7c7b\u5355\u4f8b\uff0c\u95f4\u63a5\u4ece LocalColors \u4e2d\u83b7\u53d6\u5230\u503c\u3002\u6240\u4ee5 LocalColors \u5230\u5e95\u662f\u4f55\u65b9\u795e\u5723\u5462\uff1f internal val LocalColors = staticCompositionLocalOf { lightColors () } \u901a\u8fc7\u58f0\u660e\u53ef\u4ee5\u53d1\u73b0\u4ed6\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a CompositionLocal\uff0c\u5176\u521d\u59cb\u503c\u662f lightColors() \u8fd4\u56de\u7684 colors \u914d\u7f6e\u3002 MaterialTheme \u65b9\u6cd5\u4e2d\u901a\u8fc7 CompositionLocalProvider \u65b9\u6cd5\u4e3a\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe composable \u63d0\u4f9b\u4e86\u4e00\u4e9b CompositionLocal\uff0c\u5305\u542b\u4e86\u6240\u6709\u7684\u4e3b\u9898\u914d\u7f6e\u4fe1\u606f\u3002","title":"1. MaterialTheme \u662f\u600e\u4e48\u505a\u5230\u7684"},{"location":"design/theme/understanding_material_theme/#2-compositionlocal","text":"\u5f88\u591a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728 composable \u6811\u4e2d\u5171\u4eab\u4e00\u4e9b\u6570\u636e\uff08\u4f8b\u5982\u4e3b\u9898\u914d\u7f6e\uff09\uff0c\u4e00\u79cd\u6709\u6548\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u663e\u5f0f\u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\u8fdb\u884c\u5b9e\u73b0\uff0c\u5f53\u53c2\u6570\u8d8a\u6765\u8d8a\u591a\u65f6\uff0ccomposable \u53c2\u6570\u5217\u8868\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u81c3\u80bf\uff0c\u96be\u4ee5\u8fdb\u884c\u7ef4\u62a4\u3002\u5f53 composable \u9700\u8981\u5f7c\u6b64\u95f4\u4f20\u9012\u6570\u636e\uff0c\u5e76\u4e14\u5b9e\u73b0\u5404\u81ea\u7684\u79c1\u6709\u6027\u65f6\uff0c\u5982\u679c\u4ecd\u91c7\u7528\u663e\u5f0f\u53c2\u6570\u4f20\u9012\u7684\u65b9\u5f0f\u5219\u53ef\u80fd\u4f1a\u4ea7\u751f\u610f\u6599\u4e4b\u5916\u7684\u9ebb\u70e6\u4e0e\u5d29\u6e83\u3002 \u4e3a\u89e3\u51b3\u4e0a\u8ff0\u75db\u70b9\u95ee\u9898\uff0c Jetpack Compose \u63d0\u4f9b\u4e86 CompostionLocal \u7528\u6765\u5b8c\u6210 composable \u6811\u4e2d\u5171\u4eab\u6570\u636e\u65b9\u5f0f\u3002CompositionLocals \u662f\u5177\u6709\u5c42\u7ea7\u7684\uff0c\u53ef\u4ee5\u88ab\u9650\u5b9a\u5728\u4ee5\u67d0\u4e2a composable \u4f5c\u4e3a\u6839\u7ed3\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u5176\u9ed8\u8ba4\u4f1a\u5411\u4e0b\u4f20\u9012\u7684\uff0c\u5f53\u7136\u5f53\u524d\u5b50\u6811\u4e2d\u7684\u67d0\u4e2a composable \u53ef\u4ee5\u5bf9\u8be5 CompositionLocals \u8fdb\u884c\u8986\u76d6\uff0c\u4ece\u800c\u4f7f\u5f97\u65b0\u503c\u4f1a\u5728\u8fd9\u4e2a composable \u4e2d\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\u3002 Jetpack Compose \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86compositionLocalOf \u65b9\u6cd5\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a CompostionLocal \u5b9e\u4f8b\u3002 import androidx.compose.runtime.compositionLocalOf var LocalString = compositionLocalOf { \"Jetpack Compose\" } \u5728 composable \u6811\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 CompositionLocalProvider \u65b9\u6cd5\u4e3a CompositionLocal \u63d0\u4f9b\u4e00\u4e2a\u503c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u4f4d\u4e8e composable \u6811\u7684\u6839\u90e8\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4f4d\u4e8e\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd8\u53ef\u4ee5\u5728\u591a\u4e2a\u4f4d\u7f6e\u4f7f\u7528\uff0c\u4ee5\u8986\u76d6\u5b50\u6811\u80fd\u591f\u83b7\u53d6\u5230\u7684\u503c\u3002\u6211\u4eec\u7684\u793a\u4f8b\u9009\u62e9\u5728 Column \u6240\u5305\u542b\u7684 composable \u4e2d\u4f7f\u7528 CompositionLocalProvider\u3002 import androidx.compose.runtime.CompositionLocalProvider setContent { CustomColorTheme ( true ) { Column { CompositionLocalProvider ( LocalString provides \"Hello World\" ) { Text ( text = LocalString . current , color = Color . Green ) CompositionLocalProvider ( LocalString provides \"Ruger McCarthy\" ) { Text ( text = LocalString . current , color = Color . Blue ) } } Text ( text = LocalString . current , color = Color . Red ) } } } \u5b9e\u9645\u6548\u679c\u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136\u6240\u6709 composable \u5747\u4f9d\u8d56\u7684\u662f\u540c\u4e00\u4e2a CompositionLocal\uff0c\u800c\u5176\u83b7\u5f97\u5230\u7684\u5b9e\u9645\u7684\u503c\u5374\u662f\u4e0d\u4e00\u6837\u7684\u3002","title":"2. CompositionLocal\u4ecb\u7ecd"},{"location":"design/theme/understanding_material_theme/#compositionlocalof-staticcompositionlocalof","text":"\u5f53\u6211\u4eec\u521b\u5efa CompositionLocal \u65f6\uff0c\u901a\u5e38\u9700\u8981\u4f7f\u7528 compositionLocalOf \u6216 staticCompositionLocalOf \u65b9\u6cd5\u3002\u7136\u800c\u8fd9\u4e24\u8005\u7684\u533a\u522b\u662f\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e staticCompositionLocalOf \u65b9\u6cd5\u58f0\u660e\u5904\u7684\u6ce8\u91ca\u6587\u6863\u4e2d\u8bf4\u660e\u4e86\u4e00\u5207\u3002 Unlike compositionLocalOf, reads of a staticCompositionLocalOf are not tracked by the composer and changing the value provided in the CompositionLocalProvider call will cause the entirety of the content to be recomposed instead of just the places where in the composition the local value is used. \u7b80\u5355\u6982\u62ec\u5c31\u662f\uff0c\u5f53\u6211\u4eec\u9009\u62e9\u4f7f\u7528 staticCompositionLocalOf \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e2a StaticProvidableCompositionLocal \u5b9e\u4f8b\uff0c\u5f53\u5176\u6240\u63d0\u4f9b\u7684\u503c\u6539\u53d8\u65f6\uff0c\u4f1a\u5bfc\u81f4 CompositionLocalProvide \u5185\u90e8\u6240\u6709 composable \u89e6\u53d1\u91cd\u7ec4(recompose)\u3002 \u5982\u679c\u6211\u4eec\u9009\u62e9\u4f7f\u7528 compositionLocalOf \uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e2a DynamicProvidableCompositionLocal \u5b9e\u4f8b\uff0c\u5f53\u5176\u6240\u63d0\u4f9b\u7684\u503c\u6539\u53d8\u65f6\uff0c\u4ec5\u4f1a\u5bfc\u81f4 CompositionLocalProvide \u5185\u90e8\u4f9d\u8d56\u5f53\u524d CompositionLocal \u7684 composable \u89e6\u53d1\u91cd\u7ec4(recompose)\u3002 Talk is cheap\uff0cShow me the code~. \u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u884c\u5bf9\u7167\u793a\u4f8b\u5370\u8bc1\u3002 \u65e2\u7136\u8981\u5bf9\u7167\uff0c\u6211\u4eec\u5c31\u5206\u522b\u4f7f\u7528 staticCompositionLocalOf \u4e0e compositionLocalOf \u521b\u5efa CompositionLocal\u3002\u6211\u4eec\u4f7f\u7528\u4e09\u5c42\u5d4c\u5957\u7684 Box \u8fdb\u884c\u4e3e\u4f8b\uff0c\u6211\u4eec\u5c06 CompositionLocalProvide \u5305\u88f9\u5728\u6700\u5916\u5c42\uff0c\u82e5\u67d0\u5c42 Box \u89e6\u53d1\u4e86\u91cd\u7ec4(recompose) \u4fbf\u4f1a\u66f4\u65b0\u8be5\u5c42\u7684\u6587\u672c\u4fe1\u606f\u3002\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5904\u4e8e\u4e2d\u5c42 \u7684 Box \u4f9d\u8d56\u4e86 CompositionLocal\u3002 \u5f53\u6211\u4eec\u4fee\u6539\u4e86 CompositionLocal \u6240\u63d0\u4f9b\u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0 staticCompositionLocalOf \u573a\u666f\u4e0b\uff0c\u6240\u6709 Box \u5747\u53d1\u751f\u4e86\u91cd\u7ec4\uff0c\u800c DynamicCompositionLocal \u573a\u666f\u4e0b\uff0c\u4ec5\u4e2d\u5c42\u4f9d\u8d56\u4e86 CompositionLocal \u7684 Box \u89e6\u53d1\u4e86\u91cd\u7ec4\u3002\u6587\u7ae0\u7ed3\u5c3e\u5904\u63d0\u4f9b\u4e86\u5b9e\u4f8b\u4ee3\u7801\u3002 \u793a\u4f8b\u4ee3\u7801 var isStatic = false var compositionLocalName = \"\" val currentLocalColor = if ( isStatic ) { compositionLocalName = \"StaticCompositionLocal \u573a\u666f\" staticCompositionLocalOf { Color . Black } } else { compositionLocalName = \"DynamicCompositionLocal \u573a\u666f\" compositionLocalOf { Color . Black } } var recomposeFlag = \"Init\" @Preview @Composable fun CompositionLocalDemo ( isStatic : Boolean = false ) { var color by remember { mutableStateOf ( Color . Green ) } Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Column ( horizontalAlignment = Alignment . CenterHorizontally ){ Text ( text = \" ${ compositionLocalName } \" ) Spacer ( Modifier . height ( 20. dp )) CompositionLocalProvider ( currentLocalColor provides color ) { TaggedBox ( \"Wrapper: ${ recomposeFlag } \" , 400. dp , Color . Red ) { TaggedBox ( \"Middle: ${ recomposeFlag } \" , 300. dp , currentLocalColor . current ) { TaggedBox ( \"Inner: ${ recomposeFlag } \" , 200. dp , Color . Yellow ) } } } Spacer ( Modifier . height ( 20. dp )) Button ( onClick = { color = Color . Blue } ) { Text ( text = \"Change Theme\" ) } } } recomposeFlag = \"Recompose\" } @Composable fun TaggedBox ( tag : String , size : Dp , background : Color , content : @Composable () -> Unit = {}) { Column ( modifier = Modifier . size ( size ) . background ( background ), horizontalAlignment = Alignment . CenterHorizontally ) { Text ( text = tag ) Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { content () } } }","title":"compositionLocalOf \u4e0e staticCompositionLocalOf \u533a\u522b"},{"location":"elements/alertdialog/","text":"@Composable fun AlertDialog ( onDismissRequest : () -> Unit , confirmButton : () -> Unit , modifier : Modifier = Modifier , dismissButton : () -> Unit = null , title : () -> Unit = null , text : () -> Unit = null , shape : Shape = MaterialTheme . shapes . medium , backgroundColor : Color = MaterialTheme . colors . surface , contentColor : Color = contentColorFor ( backgroundColor ), properties : DialogProperties = DialogProperties () ): @Composable Unit Material Design AlertDialog 1. \u7b80\u5355\u4f7f\u7528 val openDialog = remember { mutableStateOf ( true ) } if ( openDialog . value ) { AlertDialog ( onDismissRequest = { // \u5f53\u7528\u6237\u70b9\u51fb\u5bf9\u8bdd\u6846\u4ee5\u5916\u7684\u5730\u65b9\u6216\u8005\u6309\u4e0b\u7cfb\u7edf\u8fd4\u56de\u952e\u5c06\u4f1a\u6267\u884c\u7684\u4ee3\u7801 openDialog . value = false }, title = { Text ( text = \"\u5f00\u542f\u4f4d\u7f6e\u670d\u52a1\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . h6 ) }, text = { Text ( text = \"\u8fd9\u5c06\u610f\u5473\u7740\uff0c\u6211\u4eec\u4f1a\u7ed9\u60a8\u63d0\u4f9b\u7cbe\u51c6\u7684\u4f4d\u7f6e\u670d\u52a1\uff0c\u5e76\u4e14\u60a8\u5c06\u63a5\u53d7\u5173\u4e8e\u60a8\u8ba2\u9605\u7684\u4f4d\u7f6e\u4fe1\u606f\" , fontSize = 16. sp ) }, confirmButton = { TextButton ( onClick = { openDialog . value = false }, ) { Text ( \"\u786e\u8ba4\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . button ) } }, dismissButton = { TextButton ( onClick = { openDialog . value = false } ) { Text ( \"\u53d6\u6d88\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . button ) } } ) } \u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u60a8\u5c06\u4f1a\u770b\u5230\uff1a AlertDialog \u5c06\u6839\u636e\u53ef\u7528\u7a7a\u95f4\u6765\u5b9a\u4f4d\u5176\u6309\u94ae\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u5c1d\u8bd5\u5c06\u5b83\u4eec\u6c34\u5e73\u5730\u653e\u5728\u5f7c\u6b64\u7684\u65c1\u8fb9\uff0c\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u5219\u9000\u56de\u5230\u6c34\u5e73\u653e\u7f6e\u3002\u8fd8\u6709\u53e6\u4e00\u4e2a\u7248\u672c\u7684 Composable\uff0c\u5b83\u6709\u4e00\u4e2a\u6309\u94ae\u69fd\uff0c\u53ef\u4ee5\u63d0\u4f9b\u81ea\u5b9a\u4e49\u7684\u6309\u94ae\u5e03\u5c40 @Composable fun AlertDialog ( onDismissRequest : () -> Unit , buttons : () -> Unit , modifier : Modifier = Modifier , title : () -> Unit = null , text : () -> Unit = null , shape : Shape = MaterialTheme . shapes . medium , backgroundColor : Color = MaterialTheme . colors . surface , contentColor : Color = contentColorFor ( backgroundColor ), properties : DialogProperties = DialogProperties () ): @Composable Unit \u7b80\u5355\u7684\u4e00\u4e2a\u5b9e\u73b0\u4ee3\u7801\uff1a val openDialog = remember { mutableStateOf ( true ) } if ( openDialog . value ) { AlertDialog ( onDismissRequest = { openDialog . value = false }, title = { Text ( text = \"\u5f00\u542f\u4f4d\u7f6e\u670d\u52a1\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . h6 ) }, text = { Text ( text = \"\u8fd9\u5c06\u610f\u5473\u7740\uff0c\u6211\u4eec\u4f1a\u7ed9\u60a8\u63d0\u4f9b\u7cbe\u51c6\u7684\u4f4d\u7f6e\u670d\u52a1\uff0c\u5e76\u4e14\u60a8\u5c06\u63a5\u53d7\u5173\u4e8e\u60a8\u8ba2\u9605\u7684\u4f4d\u7f6e\u4fe1\u606f\" , fontSize = 16. sp ) }, buttons = { Row ( modifier = Modifier . padding ( all = 8. dp ), horizontalArrangement = Arrangement . Center ) { Button ( modifier = Modifier . fillMaxWidth (), onClick = { openDialog . value = false } ) { Text ( \"\u5fc5\u987b\u63a5\u53d7\uff01\" ) } } } ) } 2. Dialog AlertDialog \u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u6709\u53ef\u80fd\u8fd8\u662f\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u4e1a\u52a1\u8981\u6c42\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u66f4\u5e95\u5c42\u7684\u4e00\u4e2a @Composable \u51fd\u6570 \u2014\u2014 Dialog var flag by remember { mutableStateOf ( false ) } Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Button ( onClick = { flag = true } ) { Text ( \"\u5f39\u7a97\" ) } } if ( flag ) { Dialog ( onDismissRequest = { flag = false } ) { Box ( modifier = Modifier . size ( 300. dp ) . background ( Color . White ), contentAlignment = Alignment . Center ) { Column { LinearProgressIndicator () Text ( \"\u52a0\u8f7d\u4e2d ing...\" ) } } } } 3. \u66f4\u591a AlertDialog \u53c2\u6570\u8be6\u60c5","title":"AlertDialog"},{"location":"elements/alertdialog/#1","text":"val openDialog = remember { mutableStateOf ( true ) } if ( openDialog . value ) { AlertDialog ( onDismissRequest = { // \u5f53\u7528\u6237\u70b9\u51fb\u5bf9\u8bdd\u6846\u4ee5\u5916\u7684\u5730\u65b9\u6216\u8005\u6309\u4e0b\u7cfb\u7edf\u8fd4\u56de\u952e\u5c06\u4f1a\u6267\u884c\u7684\u4ee3\u7801 openDialog . value = false }, title = { Text ( text = \"\u5f00\u542f\u4f4d\u7f6e\u670d\u52a1\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . h6 ) }, text = { Text ( text = \"\u8fd9\u5c06\u610f\u5473\u7740\uff0c\u6211\u4eec\u4f1a\u7ed9\u60a8\u63d0\u4f9b\u7cbe\u51c6\u7684\u4f4d\u7f6e\u670d\u52a1\uff0c\u5e76\u4e14\u60a8\u5c06\u63a5\u53d7\u5173\u4e8e\u60a8\u8ba2\u9605\u7684\u4f4d\u7f6e\u4fe1\u606f\" , fontSize = 16. sp ) }, confirmButton = { TextButton ( onClick = { openDialog . value = false }, ) { Text ( \"\u786e\u8ba4\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . button ) } }, dismissButton = { TextButton ( onClick = { openDialog . value = false } ) { Text ( \"\u53d6\u6d88\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . button ) } } ) } \u5982\u679c\u4e00\u5207\u987a\u5229\uff0c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u60a8\u5c06\u4f1a\u770b\u5230\uff1a AlertDialog \u5c06\u6839\u636e\u53ef\u7528\u7a7a\u95f4\u6765\u5b9a\u4f4d\u5176\u6309\u94ae\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u5c1d\u8bd5\u5c06\u5b83\u4eec\u6c34\u5e73\u5730\u653e\u5728\u5f7c\u6b64\u7684\u65c1\u8fb9\uff0c\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u5219\u9000\u56de\u5230\u6c34\u5e73\u653e\u7f6e\u3002\u8fd8\u6709\u53e6\u4e00\u4e2a\u7248\u672c\u7684 Composable\uff0c\u5b83\u6709\u4e00\u4e2a\u6309\u94ae\u69fd\uff0c\u53ef\u4ee5\u63d0\u4f9b\u81ea\u5b9a\u4e49\u7684\u6309\u94ae\u5e03\u5c40 @Composable fun AlertDialog ( onDismissRequest : () -> Unit , buttons : () -> Unit , modifier : Modifier = Modifier , title : () -> Unit = null , text : () -> Unit = null , shape : Shape = MaterialTheme . shapes . medium , backgroundColor : Color = MaterialTheme . colors . surface , contentColor : Color = contentColorFor ( backgroundColor ), properties : DialogProperties = DialogProperties () ): @Composable Unit \u7b80\u5355\u7684\u4e00\u4e2a\u5b9e\u73b0\u4ee3\u7801\uff1a val openDialog = remember { mutableStateOf ( true ) } if ( openDialog . value ) { AlertDialog ( onDismissRequest = { openDialog . value = false }, title = { Text ( text = \"\u5f00\u542f\u4f4d\u7f6e\u670d\u52a1\" , fontWeight = FontWeight . W700 , style = MaterialTheme . typography . h6 ) }, text = { Text ( text = \"\u8fd9\u5c06\u610f\u5473\u7740\uff0c\u6211\u4eec\u4f1a\u7ed9\u60a8\u63d0\u4f9b\u7cbe\u51c6\u7684\u4f4d\u7f6e\u670d\u52a1\uff0c\u5e76\u4e14\u60a8\u5c06\u63a5\u53d7\u5173\u4e8e\u60a8\u8ba2\u9605\u7684\u4f4d\u7f6e\u4fe1\u606f\" , fontSize = 16. sp ) }, buttons = { Row ( modifier = Modifier . padding ( all = 8. dp ), horizontalArrangement = Arrangement . Center ) { Button ( modifier = Modifier . fillMaxWidth (), onClick = { openDialog . value = false } ) { Text ( \"\u5fc5\u987b\u63a5\u53d7\uff01\" ) } } } ) }","title":"1. \u7b80\u5355\u4f7f\u7528"},{"location":"elements/alertdialog/#2-dialog","text":"AlertDialog \u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u6709\u53ef\u80fd\u8fd8\u662f\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u4e1a\u52a1\u8981\u6c42\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u66f4\u5e95\u5c42\u7684\u4e00\u4e2a @Composable \u51fd\u6570 \u2014\u2014 Dialog var flag by remember { mutableStateOf ( false ) } Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Button ( onClick = { flag = true } ) { Text ( \"\u5f39\u7a97\" ) } } if ( flag ) { Dialog ( onDismissRequest = { flag = false } ) { Box ( modifier = Modifier . size ( 300. dp ) . background ( Color . White ), contentAlignment = Alignment . Center ) { Column { LinearProgressIndicator () Text ( \"\u52a0\u8f7d\u4e2d ing...\" ) } } } }","title":"2. Dialog"},{"location":"elements/alertdialog/#3","text":"AlertDialog \u53c2\u6570\u8be6\u60c5","title":"3. \u66f4\u591a"},{"location":"elements/button/","text":"1. Button \u5c5e\u6027 @OptIn ( ExperimentalMaterialApi :: class ) @Composable fun Button ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = ButtonDefaults . elevation (), shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = null , colors : ButtonColors = ButtonDefaults . buttonColors (), contentPadding : PaddingValues = ButtonDefaults . ContentPadding , content : @Composable RowScope .() -> Unit ) Compose \u7684 Button \u662f\u57fa\u4e8e Material Design \u7406\u5ff5\u8bbe\u8ba1\u7684 2. \u4f7f\u7528\u793a\u4f8b 2.1 \u57fa\u672c\u4f7f\u7528 \u4ee5\u4e0b\u662f\u7b80\u5355\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u7684 Button \u4ee3\u7801\uff1a import androidx.compose.material.Button import androidx.compose.material.Text @Composable fun ButtonDemo () { Button ( onClick = { /*TODO*/ }) { Text ( \"\u786e\u8ba4\" ) } } \u6548\u679c\u5982\u56fe\u6240\u793a\uff1a \u4e5f\u8bb8\u60a8\u60f3\u6dfb\u52a0\u56fe\u6807\u5728\u6587\u5b57\u7684\u65c1\u8fb9\uff0c\u4e5f\u53ea\u9700\uff1a @Composable fun ButtonDemo () { Button ( onClick = { /*TODO*/ }) { Icon ( // Material \u5e93\u4e2d\u7684\u56fe\u6807\uff0c\u6709 Filled, Outlined, Rounded, Sharp, Two Tone \u7b49 Icons . Filled . Favorite , contentDescription = null , modifier = Modifier . size ( ButtonDefaults . IconSize ) ) // \u6dfb\u52a0\u95f4\u9694 Spacer ( Modifier . size ( ButtonDefaults . IconSpacing )) Text ( \"\u559c\u6b22\" ) } } 2.2 \u4e0d\u540c\u70b9\u51fb\u72b6\u6001\u4e0b\u7684\u6309\u94ae\u72b6\u6001 \u521b\u5efa Data class \u6765\u8bb0\u5f55\u4e0d\u540c\u72b6\u6001\u4e0b\u6309\u94ae\u7684\u6837\u5f0f data class ButtonState ( var text : String , var textColor : Color , var buttonColor : Color ) \u4f7f\u7528 MutableInteractionSource() \u83b7\u53d6\u72b6\u6001\uff0c\u6839\u636e\u4e0d\u540c\u72b6\u6001\u521b\u5efa\u6837\u5f0f // \u83b7\u53d6\u6309\u94ae\u7684\u72b6\u6001 val interactionState = remember { MutableInteractionSource () } // \u4f7f\u7528 Kotlin \u7684\u89e3\u6784\u65b9\u6cd5 val ( text , textColor , buttonColor ) = when { interactionState . collectIsPressedAsState (). value -> ButtonState ( \"Just Pressed\" , Color . Red , Color . Black ) else -> ButtonState ( \"Just Button\" , Color . White , Color . Red ) } Button \u7684\u5b9e\u73b0 Button ( onClick = { /*TODO*/ }, interactionSource = interactionState , elevation = null , shape = RoundedCornerShape ( 50 ), colors = ButtonDefaults . buttonColors ( backgroundColor = buttonColor , ), modifier = Modifier . width ( IntrinsicSize . Min ). height ( IntrinsicSize . Min ) ) { Text ( text = text , color = textColor ) } \u66f4\u591a Button \u53c2\u6570\u8be6\u60c5","title":"Button"},{"location":"elements/button/#1-button","text":"@OptIn ( ExperimentalMaterialApi :: class ) @Composable fun Button ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, elevation : ButtonElevation? = ButtonDefaults . elevation (), shape : Shape = MaterialTheme . shapes . small , border : BorderStroke? = null , colors : ButtonColors = ButtonDefaults . buttonColors (), contentPadding : PaddingValues = ButtonDefaults . ContentPadding , content : @Composable RowScope .() -> Unit ) Compose \u7684 Button \u662f\u57fa\u4e8e Material Design \u7406\u5ff5\u8bbe\u8ba1\u7684","title":"1. Button\u5c5e\u6027"},{"location":"elements/button/#2","text":"","title":"2. \u4f7f\u7528\u793a\u4f8b"},{"location":"elements/button/#21","text":"\u4ee5\u4e0b\u662f\u7b80\u5355\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u7684 Button \u4ee3\u7801\uff1a import androidx.compose.material.Button import androidx.compose.material.Text @Composable fun ButtonDemo () { Button ( onClick = { /*TODO*/ }) { Text ( \"\u786e\u8ba4\" ) } } \u6548\u679c\u5982\u56fe\u6240\u793a\uff1a \u4e5f\u8bb8\u60a8\u60f3\u6dfb\u52a0\u56fe\u6807\u5728\u6587\u5b57\u7684\u65c1\u8fb9\uff0c\u4e5f\u53ea\u9700\uff1a @Composable fun ButtonDemo () { Button ( onClick = { /*TODO*/ }) { Icon ( // Material \u5e93\u4e2d\u7684\u56fe\u6807\uff0c\u6709 Filled, Outlined, Rounded, Sharp, Two Tone \u7b49 Icons . Filled . Favorite , contentDescription = null , modifier = Modifier . size ( ButtonDefaults . IconSize ) ) // \u6dfb\u52a0\u95f4\u9694 Spacer ( Modifier . size ( ButtonDefaults . IconSpacing )) Text ( \"\u559c\u6b22\" ) } }","title":"2.1 \u57fa\u672c\u4f7f\u7528"},{"location":"elements/button/#22","text":"\u521b\u5efa Data class \u6765\u8bb0\u5f55\u4e0d\u540c\u72b6\u6001\u4e0b\u6309\u94ae\u7684\u6837\u5f0f data class ButtonState ( var text : String , var textColor : Color , var buttonColor : Color ) \u4f7f\u7528 MutableInteractionSource() \u83b7\u53d6\u72b6\u6001\uff0c\u6839\u636e\u4e0d\u540c\u72b6\u6001\u521b\u5efa\u6837\u5f0f // \u83b7\u53d6\u6309\u94ae\u7684\u72b6\u6001 val interactionState = remember { MutableInteractionSource () } // \u4f7f\u7528 Kotlin \u7684\u89e3\u6784\u65b9\u6cd5 val ( text , textColor , buttonColor ) = when { interactionState . collectIsPressedAsState (). value -> ButtonState ( \"Just Pressed\" , Color . Red , Color . Black ) else -> ButtonState ( \"Just Button\" , Color . White , Color . Red ) } Button \u7684\u5b9e\u73b0 Button ( onClick = { /*TODO*/ }, interactionSource = interactionState , elevation = null , shape = RoundedCornerShape ( 50 ), colors = ButtonDefaults . buttonColors ( backgroundColor = buttonColor , ), modifier = Modifier . width ( IntrinsicSize . Min ). height ( IntrinsicSize . Min ) ) { Text ( text = text , color = textColor ) }","title":"2.2 \u4e0d\u540c\u70b9\u51fb\u72b6\u6001\u4e0b\u7684\u6309\u94ae\u72b6\u6001"},{"location":"elements/button/#_1","text":"Button \u53c2\u6570\u8be6\u60c5","title":"\u66f4\u591a"},{"location":"elements/card/","text":"@Composable fun Card ( modifier : Modifier = Modifier , shape : Shape = MaterialTheme . shapes . medium , backgroundColor : Color = MaterialTheme . colors . surface , contentColor : Color = contentColorFor ( backgroundColor ), border : BorderStroke? = null , elevation : Dp = 1. dp , content : @Composable () -> Unit ) Card \u662f Compose \u4e2d\u4e00\u4e2a\u5e03\u5c40\u7ec4\u4ef6\uff0c\u6211\u4eec\u7528\u5b83\u53ef\u4ee5\u6765\u521b\u9020\u51fa\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u5361\u7247\u754c\u9762 @Composable fun CardDemo () { Card ( modifier = Modifier . fillMaxWidth () . padding ( 15. dp ) // \u5916\u8fb9\u8ddd . clickable { }, // \u8bbe\u7f6e\u70b9\u51fb\u6ce2\u7eb9\u6548\u679c\uff0c\u6ce8\u610f\u5982\u679c CardDemo() \u51fd\u6570\u4e0d\u5728 MaterialTheme \u4e0b\u8c03\u7528 // \u5c06\u65e0\u6cd5\u663e\u793a\u6ce2\u7eb9\u6548\u679c elevation = 10. dp // \u8bbe\u7f6e\u9634\u5f71 ) { Column ( modifier = Modifier . padding ( 15. dp ) // \u5185\u8fb9\u8ddd ) { Text ( buildAnnotatedString { append ( \"\u6b22\u8fce\u6765\u5230 \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 , color = Color ( 0 xFF4552B8 )) ) { append ( \"Jetpack Compose \u535a\u7269\u9986\" ) } } ) Text ( buildAnnotatedString { append ( \"\u4f60\u73b0\u5728\u89c2\u770b\u7684\u7ae0\u8282\u662f \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 )) { append ( \"Card\" ) } } ) } } } \u66f4\u591a Card \u53c2\u6570\u8be6\u60c5","title":"Card"},{"location":"elements/card/#_1","text":"Card \u53c2\u6570\u8be6\u60c5","title":"\u66f4\u591a"},{"location":"elements/floatingactionbutton/","text":"@OptIn ( markerClass = [ ExperimentalMaterialApi ] ) @Composable fun FloatingActionButton ( onClick : () -> Unit , modifier : Modifier = Modifier , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, shape : Shape = MaterialTheme . shapes . small . copy ( CornerSize ( percent = 50 )), backgroundColor : Color = MaterialTheme . colors . secondary , contentColor : Color = contentColorFor ( backgroundColor ), elevation : FloatingActionButtonElevation = FloatingActionButtonDefaults . elevation (), content : () -> Unit ): @OptIn ( markerClass = [ ExperimentalMaterialApi ] ) @Composable Unit 1. \u6982\u8ff0 Material Design floating action button \u4e00\u4e2a FloatActionButton \uff08FAB\uff09\u4ee3\u8868\u4e00\u4e2a\u5c4f\u5e55\u7684\u4e3b\u8981\u884c\u4e3a\u3002 FAB \u901a\u5e38\u548c\u4e00\u4e2a Icon \u4e00\u8d77\u4f7f\u7528 import androidx.compose.material.FloatingActionButton import androidx.compose.material.Icon FloatingActionButton ( onClick = { /*do something*/ }) { Icon ( Icons . Filled . Favorite , contentDescription = \"Localized description\" ) } \u53ef\u4ee5\u67e5\u9605 ExtendedFloatingActionButton \uff0c\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u6587\u672c\u548c\u53ef\u9009\u56fe\u6807\u7684\u6269\u5c55 FAB \u3002","title":"FloatingActionButton"},{"location":"elements/floatingactionbutton/#1","text":"Material Design floating action button \u4e00\u4e2a FloatActionButton \uff08FAB\uff09\u4ee3\u8868\u4e00\u4e2a\u5c4f\u5e55\u7684\u4e3b\u8981\u884c\u4e3a\u3002 FAB \u901a\u5e38\u548c\u4e00\u4e2a Icon \u4e00\u8d77\u4f7f\u7528 import androidx.compose.material.FloatingActionButton import androidx.compose.material.Icon FloatingActionButton ( onClick = { /*do something*/ }) { Icon ( Icons . Filled . Favorite , contentDescription = \"Localized description\" ) } \u53ef\u4ee5\u67e5\u9605 ExtendedFloatingActionButton \uff0c\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u6587\u672c\u548c\u53ef\u9009\u56fe\u6807\u7684\u6269\u5c55 FAB \u3002","title":"1. \u6982\u8ff0"},{"location":"elements/icon/","text":"@Composable fun Icon ( imageVector : ImageVector , contentDescription : String? , modifier : Modifier = Modifier , tint : Color = LocalContentColor . current . copy ( alpha = LocalContentAlpha . current ) ) \u4e00\u4e2a\u56fe\u6807\u7ec4\u4ef6\uff0c\u4f7f\u7528 tint \u53ef\u4ee5\u4fee\u6539 Icon \u7684\u989c\u8272\uff0c\u9ed8\u8ba4\u4e3a LocalContentColor \u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u56fe\u6807\uff0c\u8bf7\u67e5\u9605 IconButton \u3002 Row { Icon ( Icons . Filled . ArrowBack , contentDescription = null ) Icon ( Icons . Filled . ArrowBack , contentDescription = null , tint = Color . Gray ) Icon ( Icons . Filled . ArrowBack , contentDescription = null , tint = Color . Red ) Icon ( Icons . Filled . ArrowBack , contentDescription = null , tint = Color . DarkGray ) Icon ( Icons . Filled . ArrowBack , contentDescription = null , tint = Color . Magenta ) Icon ( Icons . Filled . ArrowBack , contentDescription = null , tint = Color . Yellow ) Icon ( Icons . Filled . ArrowBack , contentDescription = null , tint = Color . Cyan ) }","title":"Icon"},{"location":"elements/iconbutton/","text":"1. IconButton \u5c5e\u6027 @Composable fun IconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) IconButton \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u56fe\u6807\u6309\u94ae IconButton \u662f\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u56fe\u6807\uff0c\u7528\u4e8e\u8868\u793a\u52a8\u4f5c\uff08\u590d\u5236\uff0c\u7c98\u8d34\uff0c\u4fdd\u5b58\uff0c\u7b49\u7b49\uff09\u3002 IconButton \u7684\u6574\u4f53\u6700\u5c0f\u89e6\u6478\u76ee\u6807\u5c3a\u5bf8\u4e3a 48 x 48dp \uff0c\u4ee5\u6ee1\u8db3\u65e0\u969c\u788d\u51c6\u5219\u3002 content \u4f1a\u5728 IconButton \u5185\u5c45\u4e2d\u3002 \u8fd9\u4e2a\u7ec4\u4ef6\u901a\u5e38\u7528\u4e8e\u5e94\u7528\u680f\u5185\u7684\u5bfc\u822a\u56fe\u6807/\u52a8\u4f5c\u3002 content \u901a\u5e38\u5e94\u8be5\u662f\u4e00\u4e2a\u56fe\u6807\uff0c\u4f7f\u7528 androidx.compose.material.icons.Icons \u4e2d\u7684\u4e00\u4e2a\u56fe\u6807\u3002\u5982\u679c\u4f7f\u7528\u81ea\u5b9a\u4e49\u56fe\u6807\uff0c\u8bf7\u6ce8\u610f\u5185\u90e8\u56fe\u6807\u7684\u5178\u578b\u5c3a\u5bf8\u662f 24 x 24 dp \u3002 @Composable fun IconButtonDemo () { Row { IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . Search , null ) } IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . ArrowBack , null ) } IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . Done , null ) } } } 2. \u53d6\u6d88\u6ce2\u7eb9 \u6709\u4e9b\u65f6\u5019\u6211\u4eec\u60f3\u8981\u53d6\u6d88\u6309\u94ae\u70b9\u51fb\u6240\u4ea7\u751f\u7684\u6ce2\u7eb9\u8981\u600e\u4e48\u529e\uff1f IconButton \u7684\u6e90\u7801\u4e2d\u5176\u5b9e\u5c06 Box \u91cc\u7684 modifier.clickable \u53c2\u6570 Indication \u8bbe\u7f6e\u6210\u6ce2\u7eb9\u4e86 @Composable fun IconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) { Box ( modifier = modifier . clickable ( onClick = onClick , enabled = enabled , role = Role . Button , interactionSource = interactionSource , indication = rememberRipple ( bounded = false , radius = RippleRadius ) ) . then ( IconButtonSizeModifier ), contentAlignment = Alignment . Center ) { content () } } \u90a3\u6211\u4eec\u53ea\u9700\u8981\u590d\u5236\u6e90\u7801\u7684\u4ee3\u7801\u6dfb\u52a0\u5230\u81ea\u5df1\u7684\u9879\u76ee\u4e2d\uff0c\u5e76\u4e14\u5c06 indication \u8bbe\u7f6e\u4e3a null \u5c31\u597d\u4e86 @Composable fun MyIconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) { // \u8fd9\u4e5f\u662f\u6e90\u7801\u7684\u4e00\u90e8\u5206 val IconButtonSizeModifier = Modifier . size ( 48. dp ) Box ( modifier = modifier . clickable ( onClick = onClick , enabled = enabled , role = Role . Button , interactionSource = interactionSource , indication = null ) . then ( IconButtonSizeModifier ), contentAlignment = Alignment . Center ) { content () } } \u5173\u4e8e\u5b9e\u73b0\u8fd9\u4e2a\u6309\u94ae\u7684\u52a8\u753b\u6548\u679c\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230","title":"IconButton"},{"location":"elements/iconbutton/#1-iconbutton","text":"@Composable fun IconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) IconButton \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u56fe\u6807\u6309\u94ae IconButton \u662f\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u56fe\u6807\uff0c\u7528\u4e8e\u8868\u793a\u52a8\u4f5c\uff08\u590d\u5236\uff0c\u7c98\u8d34\uff0c\u4fdd\u5b58\uff0c\u7b49\u7b49\uff09\u3002 IconButton \u7684\u6574\u4f53\u6700\u5c0f\u89e6\u6478\u76ee\u6807\u5c3a\u5bf8\u4e3a 48 x 48dp \uff0c\u4ee5\u6ee1\u8db3\u65e0\u969c\u788d\u51c6\u5219\u3002 content \u4f1a\u5728 IconButton \u5185\u5c45\u4e2d\u3002 \u8fd9\u4e2a\u7ec4\u4ef6\u901a\u5e38\u7528\u4e8e\u5e94\u7528\u680f\u5185\u7684\u5bfc\u822a\u56fe\u6807/\u52a8\u4f5c\u3002 content \u901a\u5e38\u5e94\u8be5\u662f\u4e00\u4e2a\u56fe\u6807\uff0c\u4f7f\u7528 androidx.compose.material.icons.Icons \u4e2d\u7684\u4e00\u4e2a\u56fe\u6807\u3002\u5982\u679c\u4f7f\u7528\u81ea\u5b9a\u4e49\u56fe\u6807\uff0c\u8bf7\u6ce8\u610f\u5185\u90e8\u56fe\u6807\u7684\u5178\u578b\u5c3a\u5bf8\u662f 24 x 24 dp \u3002 @Composable fun IconButtonDemo () { Row { IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . Search , null ) } IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . ArrowBack , null ) } IconButton ( onClick = { /*TODO*/ }) { Icon ( Icons . Filled . Done , null ) } } }","title":"1. IconButton\u5c5e\u6027"},{"location":"elements/iconbutton/#2","text":"\u6709\u4e9b\u65f6\u5019\u6211\u4eec\u60f3\u8981\u53d6\u6d88\u6309\u94ae\u70b9\u51fb\u6240\u4ea7\u751f\u7684\u6ce2\u7eb9\u8981\u600e\u4e48\u529e\uff1f IconButton \u7684\u6e90\u7801\u4e2d\u5176\u5b9e\u5c06 Box \u91cc\u7684 modifier.clickable \u53c2\u6570 Indication \u8bbe\u7f6e\u6210\u6ce2\u7eb9\u4e86 @Composable fun IconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) { Box ( modifier = modifier . clickable ( onClick = onClick , enabled = enabled , role = Role . Button , interactionSource = interactionSource , indication = rememberRipple ( bounded = false , radius = RippleRadius ) ) . then ( IconButtonSizeModifier ), contentAlignment = Alignment . Center ) { content () } } \u90a3\u6211\u4eec\u53ea\u9700\u8981\u590d\u5236\u6e90\u7801\u7684\u4ee3\u7801\u6dfb\u52a0\u5230\u81ea\u5df1\u7684\u9879\u76ee\u4e2d\uff0c\u5e76\u4e14\u5c06 indication \u8bbe\u7f6e\u4e3a null \u5c31\u597d\u4e86 @Composable fun MyIconButton ( onClick : () -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, content : @Composable () -> Unit ) { // \u8fd9\u4e5f\u662f\u6e90\u7801\u7684\u4e00\u90e8\u5206 val IconButtonSizeModifier = Modifier . size ( 48. dp ) Box ( modifier = modifier . clickable ( onClick = onClick , enabled = enabled , role = Role . Button , interactionSource = interactionSource , indication = null ) . then ( IconButtonSizeModifier ), contentAlignment = Alignment . Center ) { content () } } \u5173\u4e8e\u5b9e\u73b0\u8fd9\u4e2a\u6309\u94ae\u7684\u52a8\u753b\u6548\u679c\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230","title":"2. \u53d6\u6d88\u6ce2\u7eb9"},{"location":"elements/image/","text":"@Composable fun Image ( painter : Painter , contentDescription : String? , modifier : Modifier = Modifier , alignment : Alignment = Alignment . Center , contentScale : ContentScale = ContentScale . Fit , alpha : Float = DefaultAlpha , colorFilter : ColorFilter? = null ) \u6ce8\u610f \u76ee\u524d\u5728 Compose \u4e2d Image \u6709\u4e09\u79cd\uff0c\u8be6\u60c5\u53ef\u5148\u5728 \u5b98\u7f51 \u4e2d\u627e\u5230 Image \u53ef\u4ee5\u5e2e\u6211\u4eec\u52a0\u8f7d\u4e00\u5f20\u56fe\u7247\u3002 @Composable fun ImageDemo () { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null ) } 1. \u56fe\u7247\u5927\u5c0f \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Modifier.size() \u6765\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f\u3002 @Composable fun ImageDemo () { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ) ) } 2. \u56fe\u7247\u5f62\u72b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Surface \u6765\u5e2e\u52a9\u6211\u4eec\u8bbe\u7f6e\u5f62\u72b6\u3002 @Composable fun ImageDemo () { Surface ( shape = CircleShape ) { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ) ) } } \u662f\u4e0d\u662f\u6709\u4e00\u70b9\u5c0f\u95ee\u9898\uff1f\u4f3c\u4e4e\u53ea\u6709\u5de6\u53f3\u4e24\u8fb9\u53d8\u6210\u4e86\u5706\u5f62\uff0c\u800c\u4e0a\u4e0b\u5e76\u6ca1\u6709\u3002 \u8fd9\u662f\u56e0\u4e3a Image \u4e2d\u6e90\u7801\u7684 contentScale \u53c2\u6570\u9ed8\u8ba4\u662f ContentScale.Fit \uff0c \u4e5f\u5c31\u662f\u4fdd\u6301\u56fe\u7247\u7684\u5bbd\u9ad8\u6bd4\uff0c\u7f29\u5c0f\u5230\u53ef\u4ee5\u5b8c\u6574\u663e\u793a\u6574\u5f20\u56fe\u7247\u3002 \u800c ContentScale.Crop \u4e5f\u662f\u4fdd\u6301\u5bbd\u9ad8\u6bd4\uff0c\u4f46\u662f\u5c3d\u91cf\u8ba9\u5bbd\u5ea6 \u6216\u8005 \u9ad8\u5ea6\u5b8c\u6574\u7684\u5360\u6ee1\u3002 \u6240\u4ee5\u6211\u4eec\u5c06 contentScale \u8bbe\u7f6e\u6210 ContentScale.Crop \u3002 @Composable fun ImageDemo () { Surface ( shape = CircleShape ) { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ), contentScale = ContentScale . Crop ) } } 3. \u56fe\u50cf\u8fb9\u6846 \u4f60\u53ef\u4ee5\u5229\u7528 Surface \u4e2d\u7684 border \u53c2\u6570\u6765\u8bbe\u7f6e\u8fb9\u6846\u3002 @Composable fun ImageDemo () { Surface ( shape = CircleShape , border = BorderStroke ( 5. dp , Color . Gray ) ) { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ), contentScale = ContentScale . Crop ) } } 4. \u4f7f\u7528 Coil \u6765\u52a8\u6001\u52a0\u8f7d\u56fe\u7247 Compose \u81ea\u5e26\u7684 Image \u53ea\u80fd\u52a0\u8f7d\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u7684\u56fe\u7247\u6587\u4ef6\uff0c\u5982\u679c\u60f3\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\u6216\u8005\u662f\u5176\u4ed6\u672c\u5730\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\uff0c\u5219\u9700\u8981\u8003\u8651\u5176\u4ed6\u7684\u5e93\uff0c\u6bd4\u5982 Coil \u7b80\u5355\u4f7f\u7528 Coil \u52a0\u8f7d\u7f51\u7edc\u56fe\u7247: \u8bb0\u5f97\u6253\u5f00\u7f51\u7edc\u6743\u9650\u6d4b\u8bd5 <uses-permission android:name=\"android.permission.INTERNET\" /> Image ( painter = rememberImagePainter ( data = \"https://picsum.photos/300/300\" ), contentDescription = null ) \u52a0\u8f7d Svg \u56fe\u50cf Coil \u53ef\u4ee5\u52a0\u8f7d Svg \u56fe\u50cf \u6dfb\u52a0\u4f9d\u8d56 implementation \"io.coil-kt:coil-svg:1.3.2\" // Gradle implementation(\"io.coil-kt:coil-svg:1.3.2\") // KTS val context = LocalContext . current val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( SvgDecoder ( context )) } . build () Image ( painter = rememberImagePainter ( data = \"https://coil-kt.github.io/coil/images/coil_logo_black.svg\" , imageLoader = imageLoader ), contentDescription = null ) \u653e\u5927\u7f29\u5c0f Svg \u56fe\u50cf\u6587\u4ef6 \u867d\u7136 Coil \u53ef\u4ee5\u663e\u793a Svg \u56fe\u50cf\uff0c\u4f46\u662f\u5982\u679c\u5728\u6211\u4eec\u7684 app \u4e2d\uff0c\u9700\u8981\u52a8\u6001\u7684\u653e\u5927 Svg \u56fe\u50cf\uff0c\u90a3\u4e48\u4f60\u5927\u6982\u7387\u4f1a\u5f97\u5230\u5f3a\u884c\u62c9\u5347 Svg \u50cf\u7d20\u540e\u7684\u56fe\u50cf\uff0c\u800c\u4e0d\u662f\u65e0\u635f\u653e\u5927 \u5bfc\u81f4\u7684\u539f\u56e0\u53ef\u80fd\u662f Coil \u4e2d\u7684 ImageLoader \u4f1a\u628a Svg \u8f6c\u6362\u6210\u4f4d\u56fe\uff0c\u800c\u4e0d\u662f\u5b89\u5353\u7684\u77e2\u91cf\u56fe vector drawable, \u800c\u4f4d\u56fe\u5219\u4e0d\u80fd\u65e0\u635f\u653e\u5927 val context = LocalContext . current val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( SvgDecoder ( context )) } . build () var flag by remember { mutableStateOf ( false ) } val size by animateDpAsState ( targetValue = if ( flag ) 450. dp else 50. dp ) Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Column { Image ( painter = rememberImagePainter ( data = \"https://coil-kt.github.io/coil/images/coil_logo_black.svg\" , imageLoader = imageLoader ), contentDescription = null , modifier = Modifier . size ( size ) . clickable ( onClick = { flag = ! flag }, indication = null , interactionSource = MutableInteractionSource () ) ) } } \u90a3\u4e48\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5c1d\u8bd5\u5b9e\u73b0 svg \u8f6c\u6362\u4e3a vector drawable, \u5728 github \u4e0a\u53ef\u4ee5\u641c\u7d22\u5230\u8fd9\u4e2a\u5e93 Svg to Compose \uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u80fd\u652f\u6301\u52a8\u6001\u52a0\u8f7d\u56fe\u50cf\uff0c\u4f8b\u5982\u4ece\u7f51\u7edc\u4e0a\u52a0\u8f7d\uff0c\u6216\u8005\u662f\u4ece app \u7684\u5185\u90e8\u5b58\u50a8\u6216\u8005\u5916\u90e8\u5b58\u50a8\u52a0\u8f7d\u3002 \u4f46\u662f\u5728\u6211\u641c\u5bfb\u4e2d\uff0c\u53d1\u73b0\u4e86 Landscapist \u4f9d\u8d56\uff1a implementation \"com.github.skydoves:landscapist-coil:1.3.2\" CoilImage ( imageModel = \"https://coil-kt.github.io/coil/images/coil_logo_black.svg\" , contentDescription = null , modifier = Modifier . size ( size ) . clickable ( onClick = { flag = ! flag }, indication = null , interactionSource = MutableInteractionSource () ), imageLoader = imageLoader ) 5. \u66f4\u591a Image \u53c2\u6570\u8be6\u60c5 Ucrop \u4e00\u4e2a\u56fe\u7247\u88c1\u526a\u5e93 Surface \u8be6\u60c5 Coil","title":"Image"},{"location":"elements/image/#1","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Modifier.size() \u6765\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f\u3002 @Composable fun ImageDemo () { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ) ) }","title":"1. \u56fe\u7247\u5927\u5c0f"},{"location":"elements/image/#2","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Surface \u6765\u5e2e\u52a9\u6211\u4eec\u8bbe\u7f6e\u5f62\u72b6\u3002 @Composable fun ImageDemo () { Surface ( shape = CircleShape ) { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ) ) } } \u662f\u4e0d\u662f\u6709\u4e00\u70b9\u5c0f\u95ee\u9898\uff1f\u4f3c\u4e4e\u53ea\u6709\u5de6\u53f3\u4e24\u8fb9\u53d8\u6210\u4e86\u5706\u5f62\uff0c\u800c\u4e0a\u4e0b\u5e76\u6ca1\u6709\u3002 \u8fd9\u662f\u56e0\u4e3a Image \u4e2d\u6e90\u7801\u7684 contentScale \u53c2\u6570\u9ed8\u8ba4\u662f ContentScale.Fit \uff0c \u4e5f\u5c31\u662f\u4fdd\u6301\u56fe\u7247\u7684\u5bbd\u9ad8\u6bd4\uff0c\u7f29\u5c0f\u5230\u53ef\u4ee5\u5b8c\u6574\u663e\u793a\u6574\u5f20\u56fe\u7247\u3002 \u800c ContentScale.Crop \u4e5f\u662f\u4fdd\u6301\u5bbd\u9ad8\u6bd4\uff0c\u4f46\u662f\u5c3d\u91cf\u8ba9\u5bbd\u5ea6 \u6216\u8005 \u9ad8\u5ea6\u5b8c\u6574\u7684\u5360\u6ee1\u3002 \u6240\u4ee5\u6211\u4eec\u5c06 contentScale \u8bbe\u7f6e\u6210 ContentScale.Crop \u3002 @Composable fun ImageDemo () { Surface ( shape = CircleShape ) { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ), contentScale = ContentScale . Crop ) } }","title":"2. \u56fe\u7247\u5f62\u72b6"},{"location":"elements/image/#3","text":"\u4f60\u53ef\u4ee5\u5229\u7528 Surface \u4e2d\u7684 border \u53c2\u6570\u6765\u8bbe\u7f6e\u8fb9\u6846\u3002 @Composable fun ImageDemo () { Surface ( shape = CircleShape , border = BorderStroke ( 5. dp , Color . Gray ) ) { Image ( painter = painterResource ( id = R . drawable . wallpaper ), contentDescription = null , modifier = Modifier . size ( 350. dp ), contentScale = ContentScale . Crop ) } }","title":"3. \u56fe\u50cf\u8fb9\u6846"},{"location":"elements/image/#4-coil","text":"Compose \u81ea\u5e26\u7684 Image \u53ea\u80fd\u52a0\u8f7d\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u7684\u56fe\u7247\u6587\u4ef6\uff0c\u5982\u679c\u60f3\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\u6216\u8005\u662f\u5176\u4ed6\u672c\u5730\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\uff0c\u5219\u9700\u8981\u8003\u8651\u5176\u4ed6\u7684\u5e93\uff0c\u6bd4\u5982 Coil \u7b80\u5355\u4f7f\u7528 Coil \u52a0\u8f7d\u7f51\u7edc\u56fe\u7247: \u8bb0\u5f97\u6253\u5f00\u7f51\u7edc\u6743\u9650\u6d4b\u8bd5 <uses-permission android:name=\"android.permission.INTERNET\" /> Image ( painter = rememberImagePainter ( data = \"https://picsum.photos/300/300\" ), contentDescription = null )","title":"4. \u4f7f\u7528 Coil \u6765\u52a8\u6001\u52a0\u8f7d\u56fe\u7247"},{"location":"elements/image/#svg","text":"Coil \u53ef\u4ee5\u52a0\u8f7d Svg \u56fe\u50cf \u6dfb\u52a0\u4f9d\u8d56 implementation \"io.coil-kt:coil-svg:1.3.2\" // Gradle implementation(\"io.coil-kt:coil-svg:1.3.2\") // KTS val context = LocalContext . current val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( SvgDecoder ( context )) } . build () Image ( painter = rememberImagePainter ( data = \"https://coil-kt.github.io/coil/images/coil_logo_black.svg\" , imageLoader = imageLoader ), contentDescription = null )","title":"\u52a0\u8f7d Svg \u56fe\u50cf"},{"location":"elements/image/#svg_1","text":"\u867d\u7136 Coil \u53ef\u4ee5\u663e\u793a Svg \u56fe\u50cf\uff0c\u4f46\u662f\u5982\u679c\u5728\u6211\u4eec\u7684 app \u4e2d\uff0c\u9700\u8981\u52a8\u6001\u7684\u653e\u5927 Svg \u56fe\u50cf\uff0c\u90a3\u4e48\u4f60\u5927\u6982\u7387\u4f1a\u5f97\u5230\u5f3a\u884c\u62c9\u5347 Svg \u50cf\u7d20\u540e\u7684\u56fe\u50cf\uff0c\u800c\u4e0d\u662f\u65e0\u635f\u653e\u5927 \u5bfc\u81f4\u7684\u539f\u56e0\u53ef\u80fd\u662f Coil \u4e2d\u7684 ImageLoader \u4f1a\u628a Svg \u8f6c\u6362\u6210\u4f4d\u56fe\uff0c\u800c\u4e0d\u662f\u5b89\u5353\u7684\u77e2\u91cf\u56fe vector drawable, \u800c\u4f4d\u56fe\u5219\u4e0d\u80fd\u65e0\u635f\u653e\u5927 val context = LocalContext . current val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( SvgDecoder ( context )) } . build () var flag by remember { mutableStateOf ( false ) } val size by animateDpAsState ( targetValue = if ( flag ) 450. dp else 50. dp ) Box ( modifier = Modifier . fillMaxSize (), contentAlignment = Alignment . Center ) { Column { Image ( painter = rememberImagePainter ( data = \"https://coil-kt.github.io/coil/images/coil_logo_black.svg\" , imageLoader = imageLoader ), contentDescription = null , modifier = Modifier . size ( size ) . clickable ( onClick = { flag = ! flag }, indication = null , interactionSource = MutableInteractionSource () ) ) } } \u90a3\u4e48\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5c1d\u8bd5\u5b9e\u73b0 svg \u8f6c\u6362\u4e3a vector drawable, \u5728 github \u4e0a\u53ef\u4ee5\u641c\u7d22\u5230\u8fd9\u4e2a\u5e93 Svg to Compose \uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u80fd\u652f\u6301\u52a8\u6001\u52a0\u8f7d\u56fe\u50cf\uff0c\u4f8b\u5982\u4ece\u7f51\u7edc\u4e0a\u52a0\u8f7d\uff0c\u6216\u8005\u662f\u4ece app \u7684\u5185\u90e8\u5b58\u50a8\u6216\u8005\u5916\u90e8\u5b58\u50a8\u52a0\u8f7d\u3002 \u4f46\u662f\u5728\u6211\u641c\u5bfb\u4e2d\uff0c\u53d1\u73b0\u4e86 Landscapist \u4f9d\u8d56\uff1a implementation \"com.github.skydoves:landscapist-coil:1.3.2\" CoilImage ( imageModel = \"https://coil-kt.github.io/coil/images/coil_logo_black.svg\" , contentDescription = null , modifier = Modifier . size ( size ) . clickable ( onClick = { flag = ! flag }, indication = null , interactionSource = MutableInteractionSource () ), imageLoader = imageLoader )","title":"\u653e\u5927\u7f29\u5c0f Svg \u56fe\u50cf\u6587\u4ef6"},{"location":"elements/image/#5","text":"Image \u53c2\u6570\u8be6\u60c5 Ucrop \u4e00\u4e2a\u56fe\u7247\u88c1\u526a\u5e93 Surface \u8be6\u60c5 Coil","title":"5. \u66f4\u591a"},{"location":"elements/slider/","text":"@Composable fun Slider ( value : Float , onValueChange : ( Float ) -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , valueRange : ClosedFloatingPointRange < Float > = 0f .. 1f , /*@IntRange(from = 0)*/ steps : Int = 0 , onValueChangeFinished : (() -> Unit ) ? = null , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, colors : SliderColors = SliderDefaults . colors () ) Slider \u5141\u8bb8\u7528\u6237\u4ece\u4e00\u5b9a\u8303\u56f4\u7684\u6570\u503c\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 Slider \u53cd\u6620\u4e86\u4e00\u4e2a\u6cbf\u6761\u7684\u6570\u503c\u8303\u56f4\uff0c\u7528\u6237\u53ef\u4ee5\u4ece\u4e2d\u9009\u62e9\u4e00\u4e2a\u5355\u4e00\u7684\u6570\u503c\u3002\u5b83\u4eec\u662f\u8c03\u6574\u97f3\u91cf\u3001\u4eae\u5ea6\u6216\u5e94\u7528\u56fe\u50cf\u8fc7\u6ee4\u5668\u7b49\u8bbe\u7f6e\u7684\u7406\u60f3\u9009\u62e9\u3002 Material Design Slider \u6765\u770b\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u6cd5\uff1a var progress by remember { mutableStateOf ( 0f )} Slider ( value = progress , colors = SliderDefaults . colors ( thumbColor = Color . White , // \u5706\u5708\u7684\u989c\u8272 activeTrackColor = Color ( 0 xFF0079D3 ) ), onValueChange = { progress = it }, ) @Composable fun colors ( thumbColor : Color = MaterialTheme . colors . primary , disabledThumbColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = ContentAlpha . disabled ) . compositeOver ( MaterialTheme . colors . surface ), activeTrackColor : Color = MaterialTheme . colors . primary , inactiveTrackColor : Color = activeTrackColor . copy ( alpha = InactiveTrackAlpha ), disabledActiveTrackColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = DisabledActiveTrackAlpha ), disabledInactiveTrackColor : Color = disabledActiveTrackColor . copy ( alpha = DisabledInactiveTrackAlpha ), activeTickColor : Color = contentColorFor ( activeTrackColor ). copy ( alpha = TickAlpha ), inactiveTickColor : Color = activeTrackColor . copy ( alpha = TickAlpha ), disabledActiveTickColor : Color = activeTickColor . copy ( alpha = DisabledTickAlpha ), disabledInactiveTickColor : Color = disabledInactiveTrackColor . copy ( alpha = DisabledTickAlpha ) ) // \u6ed1\u6761\u672a\u7ecf\u8fc7\u90e8\u5206\u7684\u9ed8\u8ba4 alpha \u503c const val InactiveTrackAlpha = 0.24f // \u5f53\u6ed1\u6761\u88ab\u7981\u7528\u7684\u72b6\u6001\u4e0b\u5df2\u7ecf\u8fc7\u90e8\u5206\u7684\u9ed8\u8ba4 alpha \u503c const val DisabledInactiveTrackAlpha = 0.12f // \u5f53\u6ed1\u6761\u88ab\u7981\u7528\u7684\u72b6\u6001\u4e0b\u672a\u7ecf\u8fc7\u90e8\u5206\u7684\u9ed8\u8ba4 alpha \u503c const val DisabledActiveTrackAlpha = 0.32f // \u5728\u6ed1\u6761\u4e0a\u65b9\u663e\u793a\u7684\u523b\u5ea6\u7684\u9ed8\u8ba4\u7684 alpha \u503c const val TickAlpha = 0.54f // \u5f53\u523b\u5ea6\u7ebf\u88ab\u7981\u7528\u65f6\uff0c\u9ed8\u8ba4\u7684 alpha \u503c const val DisabledTickAlpha = 0.12f \u4ece\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u8bbe\u7f6e\u6ed1\u6761\u7ecf\u8fc7\u533a\u57df\u7684\u989c\u8272\u662f activeTrackColor , \u800c\u6ed1\u6761\u4e2d\u672a\u7ecf\u8fc7\u7684\u5730\u65b9\u662f inactiveTrackColor \uff0c\u5b83\u5c06 activeTrackColor \u590d\u5236\uff0c\u5e76\u4e14\u8bbe\u7f6e\u4e86 0.24f \u7684\u900f\u660e\u5ea6 \u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u7f6e activeTrackColor \u7684\u503c\u5c31\u53ef\u4ee5\u6539\u53d8\u6ed1\u6761\u7684\u603b\u4f53\u989c\u8272\uff08\u7ecf\u8fc7\u548c\u672a\u7ecf\u8fc7\u7684\u533a\u57df\uff09","title":"Slider"},{"location":"elements/surface/","text":"@Composable fun Surface ( modifier : Modifier = Modifier , shape : Shape = RectangleShape , color : Color = MaterialTheme . colors . surface , contentColor : Color = contentColorFor ( color ), border : BorderStroke? = null , elevation : Dp = 0. dp , content : () -> Unit ): @Composable Unit Material Surface \u662f Material Design \u7684\u6838\u5fc3\u9690\u55bb\uff0c\u6bcf\u4e2a\u5e73\u9762\u90fd\u5b58\u5728\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u9ad8\u5ea6\uff0c\u8fd9\u5f71\u54cd\u4e86\u8fd9\u5757\u5e73\u9762\u5728\u89c6\u89c9\u4e0a\u4e0e\u5176\u4ed6\u5e73\u9762\u7684\u5173\u7cfb\u4ee5\u53ca\u8be5\u5e73\u9762\u5982\u4f55\u6295\u5c04\u9634\u5f71\u3002 \u53ef\u4ee5\u5c06 Surface \u7406\u89e3\u6210\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u6bcf\u4e2a\u754c\u9762\u5143\u7d20\u90fd\u57fa\u4e8e\u8fd9\u4e2a\u5bb9\u5668\uff0c\u5bb9\u5668\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u9ad8\u5ea6\uff0c\u53ef\u4ee5\u4f4d\u4e8e\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002 Surface \u4e3b\u8981\u8d1f\u8d23\uff1a \u526a\u88c1\uff1a Surface \u4f1a\u6839\u636e shape \u5c5e\u6027\u6240\u63cf\u8ff0\u7684\u5f62\u72b6\u6765\u88c1\u526a\u5b83\u7684\u5b50\u5143\u7d20\u3002 \u9ad8\u5ea6\uff1a Surface \u4f1a\u7ed8\u5236\u9634\u5f71\u6765\u8868\u793a\u5e73\u9762\u7684\u6df1\u5ea6\uff0c\u800c\u8fd9\u4e2a\u6df1\u5ea6\u7531\u9ad8\u5ea6\u5c5e\u6027 (Elevation) \u8868\u793a\u3002\u5982\u679c\u4f20\u9012\u7684\u5f62\u72b6\u662f\u51f9\u8fdb\u53bb\u7684\uff0c\u90a3\u4e48\u5728 Android \u7248\u672c\u5c0f\u4e8e 10 \u7684\u60c5\u51b5\u4e0b\uff0c\u9634\u5f71\u4e0d\u4f1a\u88ab\u753b\u51fa\u6765\u3002 \u8fb9\u6846\uff1a\u5982\u679c\u5f62\u72b6\u6709\u8fb9\u6846\uff0c\u90a3\u4e48\u5b83\u4e5f\u4f1a\u88ab\u753b\u51fa\u6765\u3002 \u80cc\u666f\uff1a Surface \u5728 shape \u6307\u5b9a\u7684\u5f62\u72b6\u4e0a\u586b\u5145\u989c\u8272\u3002\u5982\u679c\u989c\u8272\u662f Colors.surface \uff0c\u5c06\u4f7f\u7528 LocalElevationOverlay \u4e2d\u7684 ElevationOverlay \u6765\u8fdb\u884c\u53e0\u52a0--\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u53ea\u4f1a\u53d1\u751f\u5728\u6df1\u8272\u4e3b\u9898\u4e2d\u3002\u8986\u76d6\u7684\u989c\u8272\u53d6\u51b3\u4e8e\u8fd9\u4e2a Surface \u7684\u9ad8\u5ea6\uff0c\u4ee5\u53ca\u4efb\u4f55\u7236\u7ea7 Surface \u8bbe\u7f6e\u7684 LocalAbsolutelevation \u3002\u8fd9\u53ef\u4ee5\u786e\u4fdd\u4e00\u4e2a Surface \u7684\u53e0\u52a0\u9ad8\u5ea6\u6c38\u8fdc\u4e0d\u4f1a\u6bd4\u5b83\u7684\u7956\u5148\u4f4e\uff0c\u56e0\u4e3a\u5b83\u662f\u6240\u6709\u5148\u524d Surface \u7684\u9ad8\u5ea6\u7684\u603b\u548c \u5185\u5bb9\u989c\u8272\uff1a Surface \u4f7f\u7528 contentColor \u4e3a\u8fd9\u4e2a\u5e73\u9762\u7684\u5185\u5bb9\u6307\u5b9a\u4e00\u4e2a\u9996\u9009\u7684\u989c\u8272--\u8fd9\u4e2a\u989c\u8272\u88ab\u6587\u672c\u548c\u56fe\u6807\u7ec4\u4ef6\u4f5c\u4e3a\u9ed8\u8ba4\u989c\u8272\u4f7f\u7528 \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e contentColor \uff0c\u8fd9\u4e2a\u5e73\u9762\u5c06\u5c1d\u8bd5\u5c06\u5176\u80cc\u666f\u989c\u8272\u4e0e\u4e3b\u9898 Colors \u4e2d\u5b9a\u4e49\u7684\u989c\u8272\u76f8\u5339\u914d\uff0c\u5e76\u8fd4\u56de\u76f8\u5e94\u7684\u5185\u5bb9\u989c\u8272\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8fd9\u4e2a\u5e73\u9762\u7684\u989c\u8272\u662f Colors.surface \uff0c contentColor \u5c06\u88ab\u8bbe\u7f6e\u4e3a Colors.onSurface \u3002\u5982\u679c\u989c\u8272\u4e0d\u662f\u4e3b\u9898\u8c03\u8272\u677f\u7684\u4e00\u90e8\u5206\uff0c contentColor \u5c06\u4fdd\u6301\u8fd9\u4e2a Surface \u4e0a\u9762\u8bbe\u7f6e\u7684\u76f8\u540c\u503c 1. \u6765\u8bd5\u8bd5\u7528 Surface \u5b9e\u73b0 Card \u7684\u6548\u679c Surface ( shape = RoundedCornerShape ( 10. dp ), elevation = 10. dp , modifier = Modifier . fillMaxWidth () . padding ( 15. dp ) // \u5916\u8fb9\u8ddd ){ Column ( modifier = Modifier . clickable { } . padding ( 15. dp ) // \u5185\u8fb9\u8ddd ) { Text ( buildAnnotatedString { append ( \"\u6b22\u8fce\u6765\u5230 \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 , color = Color ( 0 xFF4552B8 )) ) { append ( \"Jetpack Compose \u535a\u7269\u9986\" ) } } ) Text ( buildAnnotatedString { append ( \"\u4f60\u73b0\u5728\u89c2\u770b\u7684\u7ae0\u8282\u662f \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 )) { append ( \"Card\" ) } } ) } } 2. \u66f4\u591a Surface \u53c2\u6570\u8be6\u60c5","title":"Surface"},{"location":"elements/surface/#1-surface-card","text":"Surface ( shape = RoundedCornerShape ( 10. dp ), elevation = 10. dp , modifier = Modifier . fillMaxWidth () . padding ( 15. dp ) // \u5916\u8fb9\u8ddd ){ Column ( modifier = Modifier . clickable { } . padding ( 15. dp ) // \u5185\u8fb9\u8ddd ) { Text ( buildAnnotatedString { append ( \"\u6b22\u8fce\u6765\u5230 \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 , color = Color ( 0 xFF4552B8 )) ) { append ( \"Jetpack Compose \u535a\u7269\u9986\" ) } } ) Text ( buildAnnotatedString { append ( \"\u4f60\u73b0\u5728\u89c2\u770b\u7684\u7ae0\u8282\u662f \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 )) { append ( \"Card\" ) } } ) } }","title":"1. \u6765\u8bd5\u8bd5\u7528 Surface \u5b9e\u73b0 Card \u7684\u6548\u679c"},{"location":"elements/surface/#2","text":"Surface \u53c2\u6570\u8be6\u60c5","title":"2. \u66f4\u591a"},{"location":"elements/text/","text":"@Composable fun Text ( text : String , modifier : Modifier = Modifier , color : Color = Color . Unspecified , fontSize : TextUnit = TextUnit . Unspecified , fontStyle : FontStyle? = null , fontWeight : FontWeight? = null , fontFamily : FontFamily? = null , letterSpacing : TextUnit = TextUnit . Unspecified , textDecoration : TextDecoration? = null , textAlign : TextAlign? = null , lineHeight : TextUnit = TextUnit . Unspecified , overflow : TextOverflow = TextOverflow . Clip , softWrap : Boolean = true , maxLines : Int = Int . MAX_VALUE , onTextLayout : ( TextLayoutResult ) -> Unit = {}, style : TextStyle = LocalTextStyle . current ) Text \u662f Compose \u4e2d\u6700\u57fa\u672c\u7684\u5e03\u5c40\u7ec4\u4ef6\uff0c\u5b83\u53ef\u4ee5\u663e\u793a\u6587\u5b57 @Composable fun TextDemo () { Text ( \"Hello World\" ) } \u4ece res \u4e2d\u52a0\u8f7d\u6587\u5b57 @Composable fun TextDemo () { Text ( stringResource ( id = R . string . content )) } < resources > < string name = \"app_name\" > examples </ string > < string name = \"content\" > \u6843\u4e4b\u592d\u592d\uff0c\u707c\u707c\u5176\u534e\u3002\u4e4b\u5b50\u4e8e\u5f52\uff0c\u5b9c\u5176\u5ba4\u5bb6\u3002 </ string > </ resources > 1. style \u53c2\u6570 style \u53c2\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u914d\u7f6e\u6587\u672c\u7684\u884c\u9ad8\uff0c\u989c\u8272\uff0c\u7c97\u4f53\u7b49\u8bbe\u7f6e Compose \u4e2d\u5185\u7f6e\u7684 theme \u5df2\u7ecf\u4e3a\u6211\u4eec\u51c6\u5907\u4e86\u4e00\u4e9b\u8bbe\u8ba1, \u4ece h1 \u5230 overline @Composable fun TextDemo () { Column { Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u6807\u9898\" , style = MaterialTheme . typography . h6 ) Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u6211\u662f\u5185\u5bb9\" , style = MaterialTheme . typography . body2 ) } } \u6587\u5b57\u95f4\u8ddd @Composable fun TextDemo () { Column ( modifier = Modifier . fillMaxWidth (), horizontalAlignment = Alignment . CenterHorizontally ) { Text ( text = \"\u4f60\u597d\u964c\u751f\u4eba\" , style = TextStyle ( fontWeight = FontWeight . W900 , //\u8bbe\u7f6e\u5b57\u4f53\u7c97\u7ec6 fontSize = 20. sp , letterSpacing = 7. sp ) ) } } 2. maxLines \u53c2\u6570 \u4f7f\u7528 maxLines \u53c2\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5c06\u6587\u672c\u9650\u5236\u5728\u6307\u5b9a\u7684\u884c\u6570\u4e4b\u95f4\uff0c\u5982\u679c\u6587\u672c\u8db3\u591f\u77ed\u5219\u4e0d\u4f1a\u751f\u6548\uff0c\u5982\u679c\u6587\u672c\u8d85\u8fc7 maxLines \u6240\u89c4\u5b9a\u7684\u884c\u6570\uff0c\u5219\u4f1a\u8fdb\u884c\u622a\u65ad @Composable fun TextDemo () { Column { Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u6807\u9898\uff0c\u4e0d\u662f\u5f88\u957f\uff0c\u56e0\u4e3a\u6211\u60f3\u4e0d\u51fa\u5176\u4ed6\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u6807\u9898\u4e86\" , style = MaterialTheme . typography . h6 , maxLines = 1 , ) Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u6211\u662f\u5185\u5bb9\" , style = MaterialTheme . typography . body2 ) } } overflow \u5904\u7406\u6ea2\u51fa \u4f7f\u7528 overflow \u53c2\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u6ea2\u51fa\u7684\u89c6\u89c9\u6548\u679c @Composable fun TextDemo () { Column { Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u6807\u9898\uff0c\u4e0d\u662f\u5f88\u957f\uff0c\u56e0\u4e3a\u6211\u60f3\u4e0d\u51fa\u5176\u4ed6\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u6807\u9898\u4e86\" , style = MaterialTheme . typography . h6 , maxLines = 1 , overflow = TextOverflow . Ellipsis ) Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u6211\u662f\u5185\u5bb9\" , style = MaterialTheme . typography . body2 ) } } 3. textAlign \u53c2\u6570 \u5f53\u6211\u4eec\u5728 Text \u4e2d\u8bbe\u7f6e\u4e86 fillMaxWidth() \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a Text \u7684\u5bf9\u9f50\u65b9\u5f0f @Composable fun TextDemo () { Column { Text ( text = \"\u6bcf\u5929\u6478\u9c7c\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Left ) Text ( text = \"\u8fd9\u597d\u5417\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Center ) Text ( text = \"\u8fd9\u975e\u5e38\u7684\u597d\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Right ) } } \u6ce8\u610f \u9700\u8981\u6ce8\u610f\u533a\u5206\u7684\u662f\uff0c TextAlign \u8bbe\u7f6e\u7684\u662f\u6587\u672c\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u4f4d\u7f6e\u65b9\u5411 \u5982\u679c\u9700\u8981\u5b9e\u73b0 Text \u7ec4\u4ef6\u5c45\u4e2d\uff0c\u6216\u8005\u6c34\u5e73\u4f4d\u7f6e\u4e2d\u5176\u4ed6\u65b9\u5411\uff0c\u8bf7\u53c2\u8003 \u8fd9\u91cc 4. lineHeight \u53c2\u6570 \u4f7f\u7528 lineHeight \u53c2\u6570\u53ef\u4ee5\u8ba9\u6211\u4eec\u6307\u5b9a Text \u4e2d\u6bcf\u884c\u7684\u884c\u9ad8\u95f4\u8ddd Column { Text ( text = \"\u4e24\u9762\u5305\u5939\u829d\u58eb\" . repeat ( 15 ), ) Spacer ( Modifier . padding ( vertical = 15. dp )) Text ( text = \"\u4e24\u9762\u5305\u5939\u829d\u58eb\" . repeat ( 15 ), lineHeight = 30. sp ) } 5. fontFamily \u53c2\u6570 \u4f7f\u7528 fontFamily \u53c2\u6570\u53ef\u4ee5\u8ba9\u6211\u4eec\u81ea\u5b9a\u4e49\u5b57\u4f53\uff0c\u5b83\u7684\u8c03\u7528\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a Column { Text ( \"Hello World\" , fontFamily = FontFamily . Serif ) Text ( \"Hello World\" , fontFamily = FontFamily . SansSerif ) } \u4f60\u4e5f\u53ef\u4ee5\u52a0\u8f7d res/font \u4e0b\u7684\u5b57\u4f53\u3002 \u521b\u5efa\u4e00\u4e2a font \u6587\u4ef6\u5939\u53ef\u4ee5\u53f3\u952e res \u6587\u4ef6\u5939\uff0c\u9009\u62e9 Android Resource Directory -> \u9009\u62e9 font Text ( text = \"\u5728\u670b\u53cb\u5bb6\u5ea6\u8fc7\u7684\u4e00\u5929\uff0c\u6211\u4eec\u7545\u8c08\u4e86\u8bb8\u591a\u7f8e\u597d\u7684\u4e8b\u60c5\uff0c\u7531\u8877\u7684\u5e86\u5e78\u5927\u5bb6\u4f3c\u4e4e\u5bf9\u672a\u6765\u6709\u4e86\u66f4\u597d\u7684\u671f\u5f85\" , fontFamily = FontFamily ( Font ( R . font . pingfang , FontWeight . W700 ) ) ) 6. \u53ef\u70b9\u51fb\u7684 Text \u6709\u7684\u65f6\u5019\u4e5f\u8bb8\u60a8\u9700\u8981\u5c06\u6587\u672c\u5f53\u4f5c\u6309\u94ae\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6dfb\u52a0 Modifier.clickable \u5373\u53ef \u4ee3\u7801\u5982\u4e0b\uff1a @Composable fun TextDemo () { Text ( text = \"\u786e\u8ba4\u7f16\u8f91\" , modifier = Modifier . clickable ( onClick = { // TODO }, ) ) } \u53d6\u6d88\u70b9\u51fb\u6ce2\u7eb9 \u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c clickable \u6709\u81ea\u5e26\u7684\u6ce2\u7eb9\u6548\u679c\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u53d6\u6d88\u7684\u8bdd\uff0c\u53ea\u9700\u8981\u6dfb\u52a0\u4e24\u4e2a\u53c2\u6570\u5373\u53ef\uff1a @Composable fun TextDemo () { // \u83b7\u53d6 context val context = LocalContext . current Text ( text = \"\u786e\u8ba4\u7f16\u8f91\" , modifier = Modifier . clickable ( onClick = { // \u901a\u77e5\u4e8b\u4ef6 Toast . makeText ( context , \"\u4f60\u70b9\u51fb\u4e86\u6b64\u6587\u672c\" , Toast . LENGTH_LONG ). show () }, indication = null , interactionSource = MutableInteractionSource () ) ) } \u6548\u679c\u5982\u4e0b\uff1a 7. \u7279\u5b9a\u7684\u6587\u5b57\u663e\u793a \u5982\u679c\u6211\u4eec\u60f3\u8ba9\u4e00\u4e2a Text \u8bed\u53e5\u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u6837\u5f0f\uff0c\u6bd4\u5982\u7c97\u4f53\u63d0\u9192\uff0c\u7279\u6b8a\u989c\u8272 \u5219\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5230 AnnotatedString AnnotatedString \u662f\u4e00\u4e2a\u6570\u636e\u7c7b\uff0c\u5176\u4e2d\u5305\u542b\u4e86\uff1a \u4e00\u4e2a Text \u7684\u503c \u4e00\u4e2a SpanStyleRange \u7684 List \uff0c\u7b49\u540c\u4e8e\u4f4d\u7f6e\u8303\u56f4\u5728\u6587\u5b57\u503c\u5185\u7684\u5185\u5d4c\u6837\u5f0f \u4e00\u4e2a ParagraphStyleRange \u7684 List \uff0c\u7528\u4e8e\u6307\u5b9a\u6587\u5b57\u5bf9\u9f50\u3001\u6587\u5b57\u65b9\u5411\u3001\u884c\u9ad8\u548c\u6587\u5b57\u7f29\u8fdb\u6837\u5f0f inline fun < R : Any > AnnotatedString . Builder . withStyle ( style : SpanStyle , block : AnnotatedString . Builder .() -> crossinline R ): R \u4e00\u4e2a\u7b80\u5355\u7684\u4ee3\u7801\u6f14\u793a\uff1a @Composable fun TextDemo () { Column ( modifier = Modifier . fillMaxWidth (), horizontalAlignment = Alignment . CenterHorizontally ) { Text ( buildAnnotatedString { append ( \"\u4f60\u73b0\u5728\u89c2\u770b\u7684\u7ae0\u8282\u662f \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 )) { append ( \"Text\" ) } } ) } } \u6548\u679c\u5982\u4e0b\uff1a 8. \u6587\u5b57\u8d85\u94fe\u63a5\uff1f\uff08ClickableText\uff09 \u5728\u7b2c #6 \u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u53ef\u4ee5\u901a\u8fc7 AnnotatedString \u6765\u5b8c\u6210\u5728\u4e00\u4e2a Text \u4e2d\u7ed9\u4e0d\u540c\u7684\u6587\u5b57\u5e94\u7528\u4e0d\u540c\u7684\u6837\u5f0f \u5728\u7b2c #5 \u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u53ef\u4ee5\u901a\u8fc7 Modifier.Clickable() \u6765\u5b8c\u6210\u68c0\u6d4b Text \u7684\u70b9\u51fb \u4f46\u662f Modifier.Clickable() \u65e0\u6cd5\u68c0\u6d4b Text \u4e2d\u7684\u90e8\u5206\u70b9\u51fb\uff0c\u90a3\u5982\u679c\u6211\u4eec\u9700\u8981\u68c0\u6d4b\u4e00\u4e2a Text \u4e2d\u7684\u90e8\u5206\u70b9\u51fb\u4e8b\u4ef6\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5c31\u50cf\u6211\u4eec\u7ecf\u5e38\u5728 App \u5e95\u4e0b\u770b\u5230\u7684\u7528\u6237\u534f\u8bae\u7b49 \u5176\u5b9e\u5f88\u7b80\u5355\uff0c Compose \u4e5f\u7ed9\u6211\u4eec\u51c6\u5907\u4e86 ClickableText \uff0c\u6765\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5427\uff01 val text = buildAnnotatedString { append ( \"\u52fe\u9009\u5373\u4ee3\u8868\u540c\u610f\" ) withStyle ( style = SpanStyle ( color = Color ( 0 xFF0E9FF2 ), fontWeight = FontWeight . Bold ) ) { append ( \"\u7528\u6237\u534f\u8bae\" ) } } ClickableText ( text = text , onClick = { offset -> Log . d ( TAG , \"Hi\uff0c\u4f60\u6309\u5230\u4e86\u7b2c $ offset \u4f4d\u7684\u6587\u5b57\" ) } ) \u4f46\u662f...\u600e\u4e48\u624d\u80fd\u68c0\u6d4b \u7528\u6237\u534f\u8bae \u8fd9\u56db\u4e2a\u5b57\u7b26\u7684\u70b9\u51fb\u4e8b\u4ef6\u5462\uff1f \u4e5f\u4e0d\u7528\u6015\uff0c Compose \u8fd8\u5728 buildAnnotatedString \u548c ClickableText \u4e2d\u5f15\u5165\u4e86\u76f8\u5e94\u7684\u65b9\u6cd5 \u5148\u6765\u770b\u770b\u4ee3\u7801\u5427\uff01 val annotatedText = buildAnnotatedString { append ( \"\u52fe\u9009\u5373\u4ee3\u8868\u540c\u610f\" ) pushStringAnnotation ( tag = \"tag\" , annotation = \"\u4e00\u4e2a\u7528\u6237\u534f\u8bae\u5566\u5566\u5566\uff0c\u5185\u5bb9\u5185\u5bb9\" ) withStyle ( style = SpanStyle ( color = Color ( 0 xFF0E9FF2 ), fontWeight = FontWeight . Bold ) ) { append ( \"\u7528\u6237\u534f\u8bae\" ) } pop () } ClickableText ( text = annotatedText , onClick = { offset -> annotatedText . getStringAnnotations ( tag = \"tag\" , start = offset , end = offset ). firstOrNull () ?. let { annotation -> Log . d ( TAG , \"\u4f60\u5df2\u7ecf\u70b9\u5230 ${ annotation . item } \u5566\" ) } } ) \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d \u591a\u4e86\u4e00\u4e2a pushStringAnnotation() \u65b9\u6cd5\uff0c\u5b83\u4f1a\u5c06\u7ed9\u5b9a\u7684\u6ce8\u91ca\u9644\u52a0\u5230\u4efb\u4f55\u9644\u52a0\u7684\u6587\u672c\u4e0a\uff0c\u76f4\u5230\u76f8\u5e94\u7684 pop \u88ab\u8c03\u7528 getStringAnnotations() \u65b9\u6cd5\u662f\u67e5\u8be2\u9644\u52a0\u5728\u8fd9\u4e2a AnnotatedString \u4e0a\u7684\u5b57\u7b26\u4e32\u6ce8\u91ca\u3002\u6ce8\u91ca\u662f\u9644\u52a0\u5728 AnnotatedString \u4e0a\u7684\u5143\u6570\u636e\uff0c\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d \"tag\" \u662f\u9644\u52a0\u5728\u67d0\u4e2a\u8303\u56f4\u4e0a\u7684\u5b57\u7b26\u4e32\u5143\u6570\u636e\u3002\u6ce8\u91ca\u4e5f\u4e0e\u6837\u5f0f\u4e00\u8d77\u5b58\u50a8\u5728 Range \u4e2d \u5c0f\u8bd5\u725b\u5200 \u90a3\u4e48\uff0c\u4f60\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u81ea\u5b9a\u4e49 Text \u4e2d\u7684\u6837\u5f0f\u548c\u70b9\u51fb\u4e8b\u4ef6\uff0c\u6765\u5c1d\u8bd5\u505a\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u6548\u679c\uff1f \u5b9e\u73b0\u7684\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u6765\u67e5\u770b Mkdocs Github 9. \u6587\u5b57\u590d\u5236 \u9ed8\u8ba4\u60c5\u51b5\u4e0b Text \u5e76\u4e0d\u80fd\u8fdb\u884c\u590d\u5236\u7b49\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e SelectionContainer \u6765\u5305\u88c5 Text @Composable fun TextDemo () { SelectionContainer { Column { Text ( text = \"\u6bcf\u5929\u6478\u9c7c\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Left ) Text ( text = \"\u8fd9\u597d\u5417\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Center ) Text ( text = \"\u8fd9\u975e\u5e38\u7684\u597d\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Right ) } } } 10. \u6587\u5b57\u5f3a\u8c03\u6548\u679c \u6587\u5b57\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u6765\u786e\u5b9a\u6587\u5b57\u7684\u5f3a\u8c03\u7a0b\u5ea6\uff0c\u4ee5\u7a81\u51fa\u91cd\u70b9\u5e76\u4f53\u73b0\u51fa\u89c6\u89c9\u4e0a\u7684\u5c42\u6b21\u611f\u3002 Material Design \u5efa\u8bae\u91c7\u7528\u4e0d\u540c\u7684\u4e0d\u900f\u660e\u5ea6\u6765\u4f20\u8fbe\u8fd9\u4e9b\u4e0d\u540c\u7684\u91cd\u8981\u7a0b\u5ea6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 LocalContentAlpha \u5b9e\u73b0\u6b64\u529f\u80fd\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4e3a\u6b64 CompositionLocal \u63d0\u4f9b\u4e00\u4e2a\u503c\u6765\u4e3a\u5c42\u6b21\u7ed3\u6784\u6307\u5b9a\u5185\u5bb9 Alpha \u503c\u3002\uff08 CompositionLocal \u662f\u4e00\u4e2a\u7528\u4e8e\u9690\u5f0f\u7684\u4f20\u9012\u53c2\u6570\u7684\u7ec4\u4ef6\uff0c\u540e\u7eed\u4f1a\u8bb2\u5230\uff09 // \u5c06\u5185\u90e8 Text \u7ec4\u4ef6\u7684 alpha \u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a\u9ad8 // \u6ce8\u610f: MaterialTheme \u5df2\u7ecf\u9ed8\u8ba4\u5c06\u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a high CompositionLocalProvider ( LocalContentAlpha provides ContentAlpha . high ) { Text ( \"\u8fd9\u91cc\u662fhigh\u5f3a\u8c03\u6548\u679c\" ) } // \u5c06\u5185\u90e8 Text \u7ec4\u4ef6\u7684 alpha \u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a\u4e2d CompositionLocalProvider ( LocalContentAlpha provides ContentAlpha . medium ) { Text ( \"\u8fd9\u91cc\u662fmedium\u5f3a\u8c03\u6548\u679c\" ) } // \u5c06\u5185\u90e8 Text \u7ec4\u4ef6\u7684 alpha \u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a\u7981\u7528 CompositionLocalProvider ( LocalContentAlpha provides ContentAlpha . disabled ) { Icon ( \"\u8fd9\u91cc\u662f\u7981\u7528\u540e\u7684\u6548\u679c\" ) } \u8fd9\u662f\u8fd0\u884c\u6548\u679c: \u8fd9\u5f20\u56fe\u53ef\u4ee5\u5f88\u597d\u7684\u8bf4\u660e\u8fd9\u4e2a\u6548\u679c 11. \u6587\u5b57\u6c34\u5e73\u4f4d\u7f6e \u4e00\u822c\u60c5\u51b5\u4e0b\uff0cText \u4e0d\u4f1a\u6c34\u5e73\u5c45\u4e2d\uff0c\u5982\u679c\u4f60\u5728 Row , Column , Box \u8fd9\u4e9b Composable \u91cc\u9762\u60f3\u8981\u5b9e\u73b0\u5c45\u4e2d\u7684\u6548\u679c\uff0c\u4f60\u53ef\u4ee5\u5728 Text \u5916\u56f4\u5199\u4e00\u4e2a Box , Row , Column \u7b49 \u50cf\u8fd9\u6837\uff1a Column { Text ( \"123\" ) Text ( \"456\" ) Box ( modifier = Modifier . fillMaxWidth (), contentAlignment = Alignment . Center ) { Text ( \"789\" ) } } \u6c34\u5e73\u9760\u5de6\uff1a Alignment.Start \u6c34\u5e73\u9760\u53f3\uff1a Alignment.End \u5982\u679c\u4f60\u7684 Column \u6709 Modifier.fillMaxWidth() \u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 Text \u91cc\u9762\u5199 Modifier.align(Alignment.CenterHorizontally) 12. \u66f4\u591a Text \u53c2\u6570\u8be6\u60c5 Text \u4e00\u4e9b\u7528\u6cd5","title":"Text"},{"location":"elements/text/#1-style","text":"style \u53c2\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u914d\u7f6e\u6587\u672c\u7684\u884c\u9ad8\uff0c\u989c\u8272\uff0c\u7c97\u4f53\u7b49\u8bbe\u7f6e Compose \u4e2d\u5185\u7f6e\u7684 theme \u5df2\u7ecf\u4e3a\u6211\u4eec\u51c6\u5907\u4e86\u4e00\u4e9b\u8bbe\u8ba1, \u4ece h1 \u5230 overline @Composable fun TextDemo () { Column { Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u6807\u9898\" , style = MaterialTheme . typography . h6 ) Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u6211\u662f\u5185\u5bb9\" , style = MaterialTheme . typography . body2 ) } }","title":"1. style \u53c2\u6570"},{"location":"elements/text/#_1","text":"@Composable fun TextDemo () { Column ( modifier = Modifier . fillMaxWidth (), horizontalAlignment = Alignment . CenterHorizontally ) { Text ( text = \"\u4f60\u597d\u964c\u751f\u4eba\" , style = TextStyle ( fontWeight = FontWeight . W900 , //\u8bbe\u7f6e\u5b57\u4f53\u7c97\u7ec6 fontSize = 20. sp , letterSpacing = 7. sp ) ) } }","title":"\u6587\u5b57\u95f4\u8ddd"},{"location":"elements/text/#2-maxlines","text":"\u4f7f\u7528 maxLines \u53c2\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5c06\u6587\u672c\u9650\u5236\u5728\u6307\u5b9a\u7684\u884c\u6570\u4e4b\u95f4\uff0c\u5982\u679c\u6587\u672c\u8db3\u591f\u77ed\u5219\u4e0d\u4f1a\u751f\u6548\uff0c\u5982\u679c\u6587\u672c\u8d85\u8fc7 maxLines \u6240\u89c4\u5b9a\u7684\u884c\u6570\uff0c\u5219\u4f1a\u8fdb\u884c\u622a\u65ad @Composable fun TextDemo () { Column { Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u6807\u9898\uff0c\u4e0d\u662f\u5f88\u957f\uff0c\u56e0\u4e3a\u6211\u60f3\u4e0d\u51fa\u5176\u4ed6\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u6807\u9898\u4e86\" , style = MaterialTheme . typography . h6 , maxLines = 1 , ) Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u6211\u662f\u5185\u5bb9\" , style = MaterialTheme . typography . body2 ) } }","title":"2. maxLines \u53c2\u6570"},{"location":"elements/text/#overflow","text":"\u4f7f\u7528 overflow \u53c2\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u6ea2\u51fa\u7684\u89c6\u89c9\u6548\u679c @Composable fun TextDemo () { Column { Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u6807\u9898\uff0c\u4e0d\u662f\u5f88\u957f\uff0c\u56e0\u4e3a\u6211\u60f3\u4e0d\u51fa\u5176\u4ed6\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u6807\u9898\u4e86\" , style = MaterialTheme . typography . h6 , maxLines = 1 , overflow = TextOverflow . Ellipsis ) Text ( text = \"\u4f60\u597d\u5440\u964c\u751f\u4eba\uff0c\u6211\u662f\u5185\u5bb9\" , style = MaterialTheme . typography . body2 ) } }","title":"overflow \u5904\u7406\u6ea2\u51fa"},{"location":"elements/text/#3-textalign","text":"\u5f53\u6211\u4eec\u5728 Text \u4e2d\u8bbe\u7f6e\u4e86 fillMaxWidth() \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a Text \u7684\u5bf9\u9f50\u65b9\u5f0f @Composable fun TextDemo () { Column { Text ( text = \"\u6bcf\u5929\u6478\u9c7c\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Left ) Text ( text = \"\u8fd9\u597d\u5417\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Center ) Text ( text = \"\u8fd9\u975e\u5e38\u7684\u597d\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Right ) } } \u6ce8\u610f \u9700\u8981\u6ce8\u610f\u533a\u5206\u7684\u662f\uff0c TextAlign \u8bbe\u7f6e\u7684\u662f\u6587\u672c\u7684\u5bf9\u9f50\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u4f4d\u7f6e\u65b9\u5411 \u5982\u679c\u9700\u8981\u5b9e\u73b0 Text \u7ec4\u4ef6\u5c45\u4e2d\uff0c\u6216\u8005\u6c34\u5e73\u4f4d\u7f6e\u4e2d\u5176\u4ed6\u65b9\u5411\uff0c\u8bf7\u53c2\u8003 \u8fd9\u91cc","title":"3. textAlign \u53c2\u6570"},{"location":"elements/text/#4-lineheight","text":"\u4f7f\u7528 lineHeight \u53c2\u6570\u53ef\u4ee5\u8ba9\u6211\u4eec\u6307\u5b9a Text \u4e2d\u6bcf\u884c\u7684\u884c\u9ad8\u95f4\u8ddd Column { Text ( text = \"\u4e24\u9762\u5305\u5939\u829d\u58eb\" . repeat ( 15 ), ) Spacer ( Modifier . padding ( vertical = 15. dp )) Text ( text = \"\u4e24\u9762\u5305\u5939\u829d\u58eb\" . repeat ( 15 ), lineHeight = 30. sp ) }","title":"4. lineHeight \u53c2\u6570"},{"location":"elements/text/#5-fontfamily","text":"\u4f7f\u7528 fontFamily \u53c2\u6570\u53ef\u4ee5\u8ba9\u6211\u4eec\u81ea\u5b9a\u4e49\u5b57\u4f53\uff0c\u5b83\u7684\u8c03\u7528\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a Column { Text ( \"Hello World\" , fontFamily = FontFamily . Serif ) Text ( \"Hello World\" , fontFamily = FontFamily . SansSerif ) } \u4f60\u4e5f\u53ef\u4ee5\u52a0\u8f7d res/font \u4e0b\u7684\u5b57\u4f53\u3002 \u521b\u5efa\u4e00\u4e2a font \u6587\u4ef6\u5939\u53ef\u4ee5\u53f3\u952e res \u6587\u4ef6\u5939\uff0c\u9009\u62e9 Android Resource Directory -> \u9009\u62e9 font Text ( text = \"\u5728\u670b\u53cb\u5bb6\u5ea6\u8fc7\u7684\u4e00\u5929\uff0c\u6211\u4eec\u7545\u8c08\u4e86\u8bb8\u591a\u7f8e\u597d\u7684\u4e8b\u60c5\uff0c\u7531\u8877\u7684\u5e86\u5e78\u5927\u5bb6\u4f3c\u4e4e\u5bf9\u672a\u6765\u6709\u4e86\u66f4\u597d\u7684\u671f\u5f85\" , fontFamily = FontFamily ( Font ( R . font . pingfang , FontWeight . W700 ) ) )","title":"5. fontFamily \u53c2\u6570"},{"location":"elements/text/#6-text","text":"\u6709\u7684\u65f6\u5019\u4e5f\u8bb8\u60a8\u9700\u8981\u5c06\u6587\u672c\u5f53\u4f5c\u6309\u94ae\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6dfb\u52a0 Modifier.clickable \u5373\u53ef \u4ee3\u7801\u5982\u4e0b\uff1a @Composable fun TextDemo () { Text ( text = \"\u786e\u8ba4\u7f16\u8f91\" , modifier = Modifier . clickable ( onClick = { // TODO }, ) ) }","title":"6. \u53ef\u70b9\u51fb\u7684 Text"},{"location":"elements/text/#_2","text":"\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c clickable \u6709\u81ea\u5e26\u7684\u6ce2\u7eb9\u6548\u679c\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u53d6\u6d88\u7684\u8bdd\uff0c\u53ea\u9700\u8981\u6dfb\u52a0\u4e24\u4e2a\u53c2\u6570\u5373\u53ef\uff1a @Composable fun TextDemo () { // \u83b7\u53d6 context val context = LocalContext . current Text ( text = \"\u786e\u8ba4\u7f16\u8f91\" , modifier = Modifier . clickable ( onClick = { // \u901a\u77e5\u4e8b\u4ef6 Toast . makeText ( context , \"\u4f60\u70b9\u51fb\u4e86\u6b64\u6587\u672c\" , Toast . LENGTH_LONG ). show () }, indication = null , interactionSource = MutableInteractionSource () ) ) } \u6548\u679c\u5982\u4e0b\uff1a","title":"\u53d6\u6d88\u70b9\u51fb\u6ce2\u7eb9"},{"location":"elements/text/#7","text":"\u5982\u679c\u6211\u4eec\u60f3\u8ba9\u4e00\u4e2a Text \u8bed\u53e5\u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u6837\u5f0f\uff0c\u6bd4\u5982\u7c97\u4f53\u63d0\u9192\uff0c\u7279\u6b8a\u989c\u8272 \u5219\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5230 AnnotatedString AnnotatedString \u662f\u4e00\u4e2a\u6570\u636e\u7c7b\uff0c\u5176\u4e2d\u5305\u542b\u4e86\uff1a \u4e00\u4e2a Text \u7684\u503c \u4e00\u4e2a SpanStyleRange \u7684 List \uff0c\u7b49\u540c\u4e8e\u4f4d\u7f6e\u8303\u56f4\u5728\u6587\u5b57\u503c\u5185\u7684\u5185\u5d4c\u6837\u5f0f \u4e00\u4e2a ParagraphStyleRange \u7684 List \uff0c\u7528\u4e8e\u6307\u5b9a\u6587\u5b57\u5bf9\u9f50\u3001\u6587\u5b57\u65b9\u5411\u3001\u884c\u9ad8\u548c\u6587\u5b57\u7f29\u8fdb\u6837\u5f0f inline fun < R : Any > AnnotatedString . Builder . withStyle ( style : SpanStyle , block : AnnotatedString . Builder .() -> crossinline R ): R \u4e00\u4e2a\u7b80\u5355\u7684\u4ee3\u7801\u6f14\u793a\uff1a @Composable fun TextDemo () { Column ( modifier = Modifier . fillMaxWidth (), horizontalAlignment = Alignment . CenterHorizontally ) { Text ( buildAnnotatedString { append ( \"\u4f60\u73b0\u5728\u89c2\u770b\u7684\u7ae0\u8282\u662f \" ) withStyle ( style = SpanStyle ( fontWeight = FontWeight . W900 )) { append ( \"Text\" ) } } ) } } \u6548\u679c\u5982\u4e0b\uff1a","title":"7. \u7279\u5b9a\u7684\u6587\u5b57\u663e\u793a"},{"location":"elements/text/#8-clickabletext","text":"\u5728\u7b2c #6 \u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u53ef\u4ee5\u901a\u8fc7 AnnotatedString \u6765\u5b8c\u6210\u5728\u4e00\u4e2a Text \u4e2d\u7ed9\u4e0d\u540c\u7684\u6587\u5b57\u5e94\u7528\u4e0d\u540c\u7684\u6837\u5f0f \u5728\u7b2c #5 \u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u53ef\u4ee5\u901a\u8fc7 Modifier.Clickable() \u6765\u5b8c\u6210\u68c0\u6d4b Text \u7684\u70b9\u51fb \u4f46\u662f Modifier.Clickable() \u65e0\u6cd5\u68c0\u6d4b Text \u4e2d\u7684\u90e8\u5206\u70b9\u51fb\uff0c\u90a3\u5982\u679c\u6211\u4eec\u9700\u8981\u68c0\u6d4b\u4e00\u4e2a Text \u4e2d\u7684\u90e8\u5206\u70b9\u51fb\u4e8b\u4ef6\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5c31\u50cf\u6211\u4eec\u7ecf\u5e38\u5728 App \u5e95\u4e0b\u770b\u5230\u7684\u7528\u6237\u534f\u8bae\u7b49 \u5176\u5b9e\u5f88\u7b80\u5355\uff0c Compose \u4e5f\u7ed9\u6211\u4eec\u51c6\u5907\u4e86 ClickableText \uff0c\u6765\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5427\uff01 val text = buildAnnotatedString { append ( \"\u52fe\u9009\u5373\u4ee3\u8868\u540c\u610f\" ) withStyle ( style = SpanStyle ( color = Color ( 0 xFF0E9FF2 ), fontWeight = FontWeight . Bold ) ) { append ( \"\u7528\u6237\u534f\u8bae\" ) } } ClickableText ( text = text , onClick = { offset -> Log . d ( TAG , \"Hi\uff0c\u4f60\u6309\u5230\u4e86\u7b2c $ offset \u4f4d\u7684\u6587\u5b57\" ) } ) \u4f46\u662f...\u600e\u4e48\u624d\u80fd\u68c0\u6d4b \u7528\u6237\u534f\u8bae \u8fd9\u56db\u4e2a\u5b57\u7b26\u7684\u70b9\u51fb\u4e8b\u4ef6\u5462\uff1f \u4e5f\u4e0d\u7528\u6015\uff0c Compose \u8fd8\u5728 buildAnnotatedString \u548c ClickableText \u4e2d\u5f15\u5165\u4e86\u76f8\u5e94\u7684\u65b9\u6cd5 \u5148\u6765\u770b\u770b\u4ee3\u7801\u5427\uff01 val annotatedText = buildAnnotatedString { append ( \"\u52fe\u9009\u5373\u4ee3\u8868\u540c\u610f\" ) pushStringAnnotation ( tag = \"tag\" , annotation = \"\u4e00\u4e2a\u7528\u6237\u534f\u8bae\u5566\u5566\u5566\uff0c\u5185\u5bb9\u5185\u5bb9\" ) withStyle ( style = SpanStyle ( color = Color ( 0 xFF0E9FF2 ), fontWeight = FontWeight . Bold ) ) { append ( \"\u7528\u6237\u534f\u8bae\" ) } pop () } ClickableText ( text = annotatedText , onClick = { offset -> annotatedText . getStringAnnotations ( tag = \"tag\" , start = offset , end = offset ). firstOrNull () ?. let { annotation -> Log . d ( TAG , \"\u4f60\u5df2\u7ecf\u70b9\u5230 ${ annotation . item } \u5566\" ) } } ) \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d \u591a\u4e86\u4e00\u4e2a pushStringAnnotation() \u65b9\u6cd5\uff0c\u5b83\u4f1a\u5c06\u7ed9\u5b9a\u7684\u6ce8\u91ca\u9644\u52a0\u5230\u4efb\u4f55\u9644\u52a0\u7684\u6587\u672c\u4e0a\uff0c\u76f4\u5230\u76f8\u5e94\u7684 pop \u88ab\u8c03\u7528 getStringAnnotations() \u65b9\u6cd5\u662f\u67e5\u8be2\u9644\u52a0\u5728\u8fd9\u4e2a AnnotatedString \u4e0a\u7684\u5b57\u7b26\u4e32\u6ce8\u91ca\u3002\u6ce8\u91ca\u662f\u9644\u52a0\u5728 AnnotatedString \u4e0a\u7684\u5143\u6570\u636e\uff0c\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d \"tag\" \u662f\u9644\u52a0\u5728\u67d0\u4e2a\u8303\u56f4\u4e0a\u7684\u5b57\u7b26\u4e32\u5143\u6570\u636e\u3002\u6ce8\u91ca\u4e5f\u4e0e\u6837\u5f0f\u4e00\u8d77\u5b58\u50a8\u5728 Range \u4e2d","title":"8. \u6587\u5b57\u8d85\u94fe\u63a5\uff1f\uff08ClickableText\uff09"},{"location":"elements/text/#_3","text":"\u90a3\u4e48\uff0c\u4f60\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u81ea\u5b9a\u4e49 Text \u4e2d\u7684\u6837\u5f0f\u548c\u70b9\u51fb\u4e8b\u4ef6\uff0c\u6765\u5c1d\u8bd5\u505a\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u6548\u679c\uff1f \u5b9e\u73b0\u7684\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u6765\u67e5\u770b Mkdocs Github","title":"\u5c0f\u8bd5\u725b\u5200"},{"location":"elements/text/#9","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b Text \u5e76\u4e0d\u80fd\u8fdb\u884c\u590d\u5236\u7b49\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e SelectionContainer \u6765\u5305\u88c5 Text @Composable fun TextDemo () { SelectionContainer { Column { Text ( text = \"\u6bcf\u5929\u6478\u9c7c\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Left ) Text ( text = \"\u8fd9\u597d\u5417\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Center ) Text ( text = \"\u8fd9\u975e\u5e38\u7684\u597d\" , modifier = Modifier . fillMaxWidth (), textAlign = TextAlign . Right ) } } }","title":"9. \u6587\u5b57\u590d\u5236"},{"location":"elements/text/#10","text":"\u6587\u5b57\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u6765\u786e\u5b9a\u6587\u5b57\u7684\u5f3a\u8c03\u7a0b\u5ea6\uff0c\u4ee5\u7a81\u51fa\u91cd\u70b9\u5e76\u4f53\u73b0\u51fa\u89c6\u89c9\u4e0a\u7684\u5c42\u6b21\u611f\u3002 Material Design \u5efa\u8bae\u91c7\u7528\u4e0d\u540c\u7684\u4e0d\u900f\u660e\u5ea6\u6765\u4f20\u8fbe\u8fd9\u4e9b\u4e0d\u540c\u7684\u91cd\u8981\u7a0b\u5ea6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 LocalContentAlpha \u5b9e\u73b0\u6b64\u529f\u80fd\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4e3a\u6b64 CompositionLocal \u63d0\u4f9b\u4e00\u4e2a\u503c\u6765\u4e3a\u5c42\u6b21\u7ed3\u6784\u6307\u5b9a\u5185\u5bb9 Alpha \u503c\u3002\uff08 CompositionLocal \u662f\u4e00\u4e2a\u7528\u4e8e\u9690\u5f0f\u7684\u4f20\u9012\u53c2\u6570\u7684\u7ec4\u4ef6\uff0c\u540e\u7eed\u4f1a\u8bb2\u5230\uff09 // \u5c06\u5185\u90e8 Text \u7ec4\u4ef6\u7684 alpha \u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a\u9ad8 // \u6ce8\u610f: MaterialTheme \u5df2\u7ecf\u9ed8\u8ba4\u5c06\u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a high CompositionLocalProvider ( LocalContentAlpha provides ContentAlpha . high ) { Text ( \"\u8fd9\u91cc\u662fhigh\u5f3a\u8c03\u6548\u679c\" ) } // \u5c06\u5185\u90e8 Text \u7ec4\u4ef6\u7684 alpha \u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a\u4e2d CompositionLocalProvider ( LocalContentAlpha provides ContentAlpha . medium ) { Text ( \"\u8fd9\u91cc\u662fmedium\u5f3a\u8c03\u6548\u679c\" ) } // \u5c06\u5185\u90e8 Text \u7ec4\u4ef6\u7684 alpha \u5f3a\u8c03\u7a0b\u5ea6\u8bbe\u7f6e\u4e3a\u7981\u7528 CompositionLocalProvider ( LocalContentAlpha provides ContentAlpha . disabled ) { Icon ( \"\u8fd9\u91cc\u662f\u7981\u7528\u540e\u7684\u6548\u679c\" ) } \u8fd9\u662f\u8fd0\u884c\u6548\u679c: \u8fd9\u5f20\u56fe\u53ef\u4ee5\u5f88\u597d\u7684\u8bf4\u660e\u8fd9\u4e2a\u6548\u679c","title":"10. \u6587\u5b57\u5f3a\u8c03\u6548\u679c"},{"location":"elements/text/#11","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cText \u4e0d\u4f1a\u6c34\u5e73\u5c45\u4e2d\uff0c\u5982\u679c\u4f60\u5728 Row , Column , Box \u8fd9\u4e9b Composable \u91cc\u9762\u60f3\u8981\u5b9e\u73b0\u5c45\u4e2d\u7684\u6548\u679c\uff0c\u4f60\u53ef\u4ee5\u5728 Text \u5916\u56f4\u5199\u4e00\u4e2a Box , Row , Column \u7b49 \u50cf\u8fd9\u6837\uff1a Column { Text ( \"123\" ) Text ( \"456\" ) Box ( modifier = Modifier . fillMaxWidth (), contentAlignment = Alignment . Center ) { Text ( \"789\" ) } } \u6c34\u5e73\u9760\u5de6\uff1a Alignment.Start \u6c34\u5e73\u9760\u53f3\uff1a Alignment.End \u5982\u679c\u4f60\u7684 Column \u6709 Modifier.fillMaxWidth() \u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 Text \u91cc\u9762\u5199 Modifier.align(Alignment.CenterHorizontally)","title":"11. \u6587\u5b57\u6c34\u5e73\u4f4d\u7f6e"},{"location":"elements/text/#12","text":"Text \u53c2\u6570\u8be6\u60c5 Text \u4e00\u4e9b\u7528\u6cd5","title":"12. \u66f4\u591a"},{"location":"elements/textfield/","text":"TextField @Composable fun TextField ( value : String , onValueChange : ( String ) -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , readOnly : Boolean = false , textStyle : TextStyle = LocalTextStyle . current , label : @Composable (() -> Unit ) ? = null , placeholder : @Composable (() -> Unit ) ? = null , leadingIcon : @Composable (() -> Unit ) ? = null , trailingIcon : @Composable (() -> Unit ) ? = null , isError : Boolean = false , visualTransformation : VisualTransformation = VisualTransformation . None , keyboardOptions : KeyboardOptions = KeyboardOptions . Default , keyboardActions : KeyboardActions = KeyboardActions (), singleLine : Boolean = false , maxLines : Int = Int . MAX_VALUE , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, shape : Shape = MaterialTheme . shapes . small . copy ( bottomEnd = ZeroCornerSize , bottomStart = ZeroCornerSize ), colors : TextFieldColors = TextFieldDefaults . textFieldColors () ) Material Design filled text field Filled TextField \u6bd4 Outlined TextField \u6709\u66f4\u591a\u7684\u89c6\u89c9\u6548\u679c\uff0c\u53ef\u4ee5\u8ba9\u5b83\u4eec\u5728\u88ab\u5176\u4ed6\u5185\u5bb9\u548c\u7ec4\u4ef6\u5305\u56f4\u65f6\u663e\u5f97\u66f4\u52a0\u7a81\u51fa\u3002 \u6ce8\u610f Filled TextField \u548c Outlined TextField \u90fd\u662f\u6309\u7167 Material Design \u6765\u8bbe\u8ba1\u7684\uff0c\u6240\u4ee5\u91cc\u9762\u7684\u4e00\u4e9b\u95f4\u8ddd\u662f\u56fa\u5b9a\u7684\uff0c\u5f53\u4f60\u4f7f\u7528 Modifier.size() \u7b49\u4e4b\u7c7b\u7684\u65b9\u6cd5\u5c1d\u8bd5\u53bb\u4fee\u6539\u5b83\u5f88\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u7684\u6548\u679c TextField ( value = text , onValueChange = { text = it }, modifier = Modifier . height ( 20. dp ) ) \u5982\u679c\u4f60\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2a TextField \u7684\u9ad8\u5ea6\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u81ea\u5b9a\u4e49\u6548\u679c\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 BasicTextField \u4e00\u4e2a\u7b80\u5355\u7684 TextField \u4f7f\u7528\u7684\u4f8b\u5b50\u662f\u8fd9\u6837\u7684\uff1a import androidx.compose.runtime.* @Composable fun TextFieldDemo () { var text by remember { mutableStateOf ( \"\" )} TextField ( value = text , onValueChange = { text = it } ) } 1. singleLine \u53c2\u6570 \u4f7f\u7528 singleLine \u53c2\u6570\u53ef\u4ee5\u5c06 TextField \u8bbe\u7f6e\u6210\u53ea\u6709\u4e00\u884c \u8bbe\u7f6e\u4e86 singleLine \u518d\u8bbe\u7f6e maxLines \u5c06\u65e0\u6548 @Composable fun TextFieldDemo () { var text by remember { mutableStateOf ( \"\" )} TextField ( value = text , onValueChange = { text = it }, singleLine = true ) } 2. label \u53c2\u6570 label \u6807\u7b7e\u53ef\u4ee5\u8fd0\u7528\u5728 TextField \u4e2d\uff0c\u5f53\u805a\u7126\u7684\u65f6\u5019\u4f1a\u6539\u53d8\u5b57\u4f53\u5927\u5c0f @Composable fun TextFieldDemo () { var text by remember { mutableStateOf ( \"\" )} Column ( modifier = Modifier . fillMaxWidth (), horizontalAlignment = Alignment . CenterHorizontally ) { TextField ( value = text , onValueChange = { text = it }, singleLine = true , label = { Text ( \"\u90ae\u7bb1\" ) } ) } } 3. leadingIcon \u53c2\u6570 leadingIcon \u53c2\u6570\u53ef\u4ee5\u5728 TextField \u524d\u9762\u5e03\u7f6e lambda \u8868\u8fbe\u5f0f\u6240\u63a5\u6536\u5230\u7684\u4e1c\u897f TextField ( value = text , onValueChange = { text = it }, leadingIcon = { Icon ( Icons . Filled . Search , null ) }, ) \u867d\u7136\u540d\u5b57\u4e0a\u53eb\u505a leadingIcon \uff0c\u4f46\u662f leadingIcon \u63a5\u6536\u6765\u81ea\u4e00\u4e2a @Composable \u51fd\u6570\u7684 lambda \u8868\u8fbe\u5f0f\uff0c \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u91cc\u9762\u586b\u5165 Text \u51fd\u6570 TextField ( value = text , onValueChange = { text = it }, leadingIcon = { Text ( \"\u8054\u7cfb\u4eba\" ) }, ) 4. trailingIcon \u53c2\u6570 trailingIcon \u53c2\u6570\u53ef\u4ee5\u5728 TextField \u5c3e\u90e8\u5e03\u7f6e lambda \u8868\u8fbe\u5f0f\u6240\u63a5\u6536\u5230\u7684\u4e1c\u897f TextField ( value = text , onValueChange = { text = it }, trailingIcon = { Text ( \"@163.com\" ) }, ) trailingIcon = { IconButton ( onClick = { }){ Icon ( Icons . Filled . Send , null ) } }, 5. Color \u53c2\u6570 @Composable fun textFieldColors ( // \u8f93\u5165\u7684\u6587\u5b57\u989c\u8272 textColor : Color = LocalContentColor . current . copy ( LocalContentAlpha . current ), // \u7981\u7528 TextField \u65f6\uff0c\u5df2\u6709\u7684\u6587\u5b57\u989c\u8272 disabledTextColor : Color = textColor . copy ( ContentAlpha . disabled ), // \u8f93\u5165\u6846\u7684\u80cc\u666f\u989c\u8272\uff0c\u5f53\u8bbe\u7f6e\u4e3a Color.Transparent \u65f6\uff0c\u5c06\u900f\u660e backgroundColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = BackgroundOpacity ), // \u8f93\u5165\u6846\u7684\u5149\u6807\u989c\u8272 cursorColor : Color = MaterialTheme . colors . primary , // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6\uff0c\u5149\u6807\u7684\u989c\u8272 errorCursorColor : Color = MaterialTheme . colors . error , // \u5f53\u8f93\u5165\u6846\u5904\u4e8e\u7126\u70b9\u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 focusedIndicatorColor : Color = MaterialTheme . colors . primary . copy ( alpha = ContentAlpha . high ), // \u5f53\u8f93\u5165\u6846\u4e0d\u5904\u4e8e\u7126\u70b9\u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 unfocusedIndicatorColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = UnfocusedIndicatorLineOpacity ), // \u7981\u7528 TextField \u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 disabledIndicatorColor : Color = unfocusedIndicatorColor . copy ( alpha = ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 errorIndicatorColor : Color = MaterialTheme . colors . error , // TextField \u8f93\u5165\u6846\u524d\u5934\u7684\u989c\u8272 leadingIconColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = IconOpacity ), // \u7981\u7528 TextField \u65f6 TextField \u8f93\u5165\u6846\u524d\u5934\u7684\u989c\u8272 disabledLeadingIconColor : Color = leadingIconColor . copy ( alpha = ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6 TextField \u8f93\u5165\u6846\u524d\u5934\u7684\u989c\u8272 errorLeadingIconColor : Color = leadingIconColor , // TextField \u8f93\u5165\u6846\u5c3e\u90e8\u7684\u989c\u8272 trailingIconColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = IconOpacity ), // \u7981\u7528 TextField \u65f6 TextField \u8f93\u5165\u6846\u5c3e\u90e8\u7684\u989c\u8272 disabledTrailingIconColor : Color = trailingIconColor . copy ( alpha = ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6 TextField \u8f93\u5165\u6846\u5c3e\u90e8\u7684\u989c\u8272 errorTrailingIconColor : Color = MaterialTheme . colors . error , // \u5f53\u8f93\u5165\u6846\u5904\u4e8e\u7126\u70b9\u65f6\uff0cLabel \u7684\u989c\u8272 focusedLabelColor : Color = MaterialTheme . colors . primary . copy ( alpha = ContentAlpha . high ), // \u5f53\u8f93\u5165\u6846\u4e0d\u5904\u4e8e\u7126\u70b9\u65f6\uff0cLabel \u7684\u989c\u8272 unfocusedLabelColor : Color = MaterialTheme . colors . onSurface . copy ( ContentAlpha . medium ), // \u7981\u7528 TextField \u65f6\uff0cLabel \u7684\u989c\u8272 disabledLabelColor : Color = unfocusedLabelColor . copy ( ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6\uff0cLabel \u7684\u989c\u8272 errorLabelColor : Color = MaterialTheme . colors . error , // Placeholder \u7684\u989c\u8272 placeholderColor : Color = MaterialTheme . colors . onSurface . copy ( ContentAlpha . medium ), // \u7981\u7528 TextField \u65f6\uff0cplaceholder \u7684\u989c\u8272 disabledPlaceholderColor : Color = placeholderColor . copy ( ContentAlpha . disabled ) ) \u8c03\u7528\u65b9\u6cd5 TextField ( value = text , onValueChange = { text = it }, leadingIcon = { Icon ( Icons . Filled . Search , null ) }, colors = TextFieldDefaults . textFieldColors ( textColor = Color ( 0 xFF0079D3 ), backgroundColor = Color . Transparent ) ) \u5728\u4f60\u4f7f\u7528 IDE \u667a\u80fd\u8865\u5168\u7684\u65f6\u5019\u53ef\u80fd\u9047\u5230\u8fd9\u79cd\u60c5\u51b5 \u89e3\u51b3\u65b9\u6cd5\u5982\u4e0b\uff0c\u624b\u52a8\u6253\u5b8c\u51fd\u6570\u540d 6. visualTransformation \u53c2\u6570 visualTransformation \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5e94\u7528\u8f93\u5165\u6846\u7684\u663e\u793a\u6a21\u5f0f var text by remember { mutableStateOf ( \"\" )} var passwordHidden by remember { mutableStateOf ( false )} TextField ( value = text , onValueChange = { text = it }, trailingIcon = { IconButton ( onClick = { passwordHidden = ! passwordHidden } ){ Icon ( painterResource ( id = R . drawable . visibility ), null ) } }, label = { Text ( \"\u5bc6\u7801\" ) }, visualTransformation = if ( passwordHidden ) PasswordVisualTransformation () else VisualTransformation . None ) BasicTextField @Composable fun BasicTextField ( value : String , onValueChange : ( String ) -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , readOnly : Boolean = false , textStyle : TextStyle = TextStyle . Default , keyboardOptions : KeyboardOptions = KeyboardOptions . Default , keyboardActions : KeyboardActions = KeyboardActions . Default , singleLine : Boolean = false , maxLines : Int = Int . MAX_VALUE , visualTransformation : VisualTransformation = VisualTransformation . None , onTextLayout : ( TextLayoutResult ) -> Unit = {}, interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, cursorBrush : Brush = SolidColor ( Color . Black ), decorationBox : ( innerTextField : () -> Unit ) -> Unit = @Composable { innerTextField -> innerTextField () } ): @Composable Unit \u4f7f\u7528 BasicTextField \u53ef\u4ee5\u8ba9\u4f60\u62e5\u6709\u66f4\u9ad8\u7684\u81ea\u5b9a\u4e49\u6548\u679c 1. \u7b80\u5355\u4f7f\u7528 \u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u4f8b\u5b50\u5982\u4e0b\uff1a var text by remember { mutableStateOf ( \"\" ) } Box ( modifier = Modifier . fillMaxSize () . background ( Color ( 0 xFFD3D3D3 )), contentAlignment = Alignment . Center ) { BasicTextField ( value = text , onValueChange = { text = it }, modifier = Modifier . background ( Color . White , CircleShape ) . height ( 35. dp ) . fillMaxWidth (), decorationBox = { innerTextField -> Row ( verticalAlignment = Alignment . CenterVertically , modifier = Modifier . padding ( horizontal = 10. dp ) ) { IconButton ( onClick = { } ) { Icon ( painterResource ( id = R . drawable . mood ), null ) } Box ( modifier = Modifier . weight ( 1f ), contentAlignment = Alignment . CenterStart ) { innerTextField () } IconButton ( onClick = { }, ) { Icon ( Icons . Filled . Send , null ) } } } ) } \u5728 BasicTextField \u4e2d\u7684 decorationBox \u53c2\u6570\u662f\u4e00\u4e2a\u5141\u8bb8\u5728 TextField \u5468\u56f4\u6dfb\u52a0\u4fee\u9970\u7684 @Composable lambda \u4f60\u53ef\u4ee5\u5b9e\u73b0\uff1a \u56fe\u6807\uff0c\u5360\u4f4d\u7b26\uff0c\u5e2e\u52a9\u6d88\u606f\uff0c\u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002 \u53ef\u4ee5\u8ba9\u4f60\u76f8\u5bf9\u4e8e\u4f60\u4fee\u9970\u7684\u4f4d\u7f6e\u6765\u63a7\u5236\u5185\u90e8\u7684 TextField \u3002 \u4e3a\u4e86\u53ef\u4ee5\u8ba9\u4f60\u76f8\u5bf9\u4e8e\u4f60\u4fee\u9970\u7684\u4f4d\u7f6e\u6765\u63a7\u5236\u5185\u90e8\u7684 TextField \uff0c TextField \u7684\u5b9e\u73b0\u5c06\u4f20\u5165\u4e00\u4e2a\u7531\u6846\u67b6\u63a7\u5236\u7684 @Composable \u53c2\u6570 innerTextField \u4f20\u9012\u7ed9\u60a8\u63d0\u4f9b\u7684 decorationBox lambda \uff0c\u4f60\u9700\u8981\u51c6\u786e\u5730\u8c03\u7528\u4e00\u6b21\u5b83 2. \u5176\u4ed6\u6548\u679c \u4ee3\u7801\u67e5\u770b\uff1a Mkdocs Github \u66f4\u591a TextField \u53c2\u6570\u8be6\u60c5 BasicTextField \u53c2\u6570\u8be6\u60c5","title":"TextField"},{"location":"elements/textfield/#textfield","text":"@Composable fun TextField ( value : String , onValueChange : ( String ) -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , readOnly : Boolean = false , textStyle : TextStyle = LocalTextStyle . current , label : @Composable (() -> Unit ) ? = null , placeholder : @Composable (() -> Unit ) ? = null , leadingIcon : @Composable (() -> Unit ) ? = null , trailingIcon : @Composable (() -> Unit ) ? = null , isError : Boolean = false , visualTransformation : VisualTransformation = VisualTransformation . None , keyboardOptions : KeyboardOptions = KeyboardOptions . Default , keyboardActions : KeyboardActions = KeyboardActions (), singleLine : Boolean = false , maxLines : Int = Int . MAX_VALUE , interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, shape : Shape = MaterialTheme . shapes . small . copy ( bottomEnd = ZeroCornerSize , bottomStart = ZeroCornerSize ), colors : TextFieldColors = TextFieldDefaults . textFieldColors () ) Material Design filled text field Filled TextField \u6bd4 Outlined TextField \u6709\u66f4\u591a\u7684\u89c6\u89c9\u6548\u679c\uff0c\u53ef\u4ee5\u8ba9\u5b83\u4eec\u5728\u88ab\u5176\u4ed6\u5185\u5bb9\u548c\u7ec4\u4ef6\u5305\u56f4\u65f6\u663e\u5f97\u66f4\u52a0\u7a81\u51fa\u3002 \u6ce8\u610f Filled TextField \u548c Outlined TextField \u90fd\u662f\u6309\u7167 Material Design \u6765\u8bbe\u8ba1\u7684\uff0c\u6240\u4ee5\u91cc\u9762\u7684\u4e00\u4e9b\u95f4\u8ddd\u662f\u56fa\u5b9a\u7684\uff0c\u5f53\u4f60\u4f7f\u7528 Modifier.size() \u7b49\u4e4b\u7c7b\u7684\u65b9\u6cd5\u5c1d\u8bd5\u53bb\u4fee\u6539\u5b83\u5f88\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u7684\u6548\u679c TextField ( value = text , onValueChange = { text = it }, modifier = Modifier . height ( 20. dp ) ) \u5982\u679c\u4f60\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2a TextField \u7684\u9ad8\u5ea6\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u81ea\u5b9a\u4e49\u6548\u679c\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 BasicTextField \u4e00\u4e2a\u7b80\u5355\u7684 TextField \u4f7f\u7528\u7684\u4f8b\u5b50\u662f\u8fd9\u6837\u7684\uff1a import androidx.compose.runtime.* @Composable fun TextFieldDemo () { var text by remember { mutableStateOf ( \"\" )} TextField ( value = text , onValueChange = { text = it } ) }","title":"TextField"},{"location":"elements/textfield/#1-singleline","text":"\u4f7f\u7528 singleLine \u53c2\u6570\u53ef\u4ee5\u5c06 TextField \u8bbe\u7f6e\u6210\u53ea\u6709\u4e00\u884c \u8bbe\u7f6e\u4e86 singleLine \u518d\u8bbe\u7f6e maxLines \u5c06\u65e0\u6548 @Composable fun TextFieldDemo () { var text by remember { mutableStateOf ( \"\" )} TextField ( value = text , onValueChange = { text = it }, singleLine = true ) }","title":"1. singleLine \u53c2\u6570"},{"location":"elements/textfield/#2-label","text":"label \u6807\u7b7e\u53ef\u4ee5\u8fd0\u7528\u5728 TextField \u4e2d\uff0c\u5f53\u805a\u7126\u7684\u65f6\u5019\u4f1a\u6539\u53d8\u5b57\u4f53\u5927\u5c0f @Composable fun TextFieldDemo () { var text by remember { mutableStateOf ( \"\" )} Column ( modifier = Modifier . fillMaxWidth (), horizontalAlignment = Alignment . CenterHorizontally ) { TextField ( value = text , onValueChange = { text = it }, singleLine = true , label = { Text ( \"\u90ae\u7bb1\" ) } ) } }","title":"2. label \u53c2\u6570"},{"location":"elements/textfield/#3-leadingicon","text":"leadingIcon \u53c2\u6570\u53ef\u4ee5\u5728 TextField \u524d\u9762\u5e03\u7f6e lambda \u8868\u8fbe\u5f0f\u6240\u63a5\u6536\u5230\u7684\u4e1c\u897f TextField ( value = text , onValueChange = { text = it }, leadingIcon = { Icon ( Icons . Filled . Search , null ) }, ) \u867d\u7136\u540d\u5b57\u4e0a\u53eb\u505a leadingIcon \uff0c\u4f46\u662f leadingIcon \u63a5\u6536\u6765\u81ea\u4e00\u4e2a @Composable \u51fd\u6570\u7684 lambda \u8868\u8fbe\u5f0f\uff0c \u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u91cc\u9762\u586b\u5165 Text \u51fd\u6570 TextField ( value = text , onValueChange = { text = it }, leadingIcon = { Text ( \"\u8054\u7cfb\u4eba\" ) }, )","title":"3. leadingIcon \u53c2\u6570"},{"location":"elements/textfield/#4-trailingicon","text":"trailingIcon \u53c2\u6570\u53ef\u4ee5\u5728 TextField \u5c3e\u90e8\u5e03\u7f6e lambda \u8868\u8fbe\u5f0f\u6240\u63a5\u6536\u5230\u7684\u4e1c\u897f TextField ( value = text , onValueChange = { text = it }, trailingIcon = { Text ( \"@163.com\" ) }, ) trailingIcon = { IconButton ( onClick = { }){ Icon ( Icons . Filled . Send , null ) } },","title":"4. trailingIcon \u53c2\u6570"},{"location":"elements/textfield/#5-color","text":"@Composable fun textFieldColors ( // \u8f93\u5165\u7684\u6587\u5b57\u989c\u8272 textColor : Color = LocalContentColor . current . copy ( LocalContentAlpha . current ), // \u7981\u7528 TextField \u65f6\uff0c\u5df2\u6709\u7684\u6587\u5b57\u989c\u8272 disabledTextColor : Color = textColor . copy ( ContentAlpha . disabled ), // \u8f93\u5165\u6846\u7684\u80cc\u666f\u989c\u8272\uff0c\u5f53\u8bbe\u7f6e\u4e3a Color.Transparent \u65f6\uff0c\u5c06\u900f\u660e backgroundColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = BackgroundOpacity ), // \u8f93\u5165\u6846\u7684\u5149\u6807\u989c\u8272 cursorColor : Color = MaterialTheme . colors . primary , // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6\uff0c\u5149\u6807\u7684\u989c\u8272 errorCursorColor : Color = MaterialTheme . colors . error , // \u5f53\u8f93\u5165\u6846\u5904\u4e8e\u7126\u70b9\u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 focusedIndicatorColor : Color = MaterialTheme . colors . primary . copy ( alpha = ContentAlpha . high ), // \u5f53\u8f93\u5165\u6846\u4e0d\u5904\u4e8e\u7126\u70b9\u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 unfocusedIndicatorColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = UnfocusedIndicatorLineOpacity ), // \u7981\u7528 TextField \u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 disabledIndicatorColor : Color = unfocusedIndicatorColor . copy ( alpha = ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6\uff0c\u5e95\u90e8\u6307\u793a\u5668\u7684\u989c\u8272 errorIndicatorColor : Color = MaterialTheme . colors . error , // TextField \u8f93\u5165\u6846\u524d\u5934\u7684\u989c\u8272 leadingIconColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = IconOpacity ), // \u7981\u7528 TextField \u65f6 TextField \u8f93\u5165\u6846\u524d\u5934\u7684\u989c\u8272 disabledLeadingIconColor : Color = leadingIconColor . copy ( alpha = ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6 TextField \u8f93\u5165\u6846\u524d\u5934\u7684\u989c\u8272 errorLeadingIconColor : Color = leadingIconColor , // TextField \u8f93\u5165\u6846\u5c3e\u90e8\u7684\u989c\u8272 trailingIconColor : Color = MaterialTheme . colors . onSurface . copy ( alpha = IconOpacity ), // \u7981\u7528 TextField \u65f6 TextField \u8f93\u5165\u6846\u5c3e\u90e8\u7684\u989c\u8272 disabledTrailingIconColor : Color = trailingIconColor . copy ( alpha = ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6 TextField \u8f93\u5165\u6846\u5c3e\u90e8\u7684\u989c\u8272 errorTrailingIconColor : Color = MaterialTheme . colors . error , // \u5f53\u8f93\u5165\u6846\u5904\u4e8e\u7126\u70b9\u65f6\uff0cLabel \u7684\u989c\u8272 focusedLabelColor : Color = MaterialTheme . colors . primary . copy ( alpha = ContentAlpha . high ), // \u5f53\u8f93\u5165\u6846\u4e0d\u5904\u4e8e\u7126\u70b9\u65f6\uff0cLabel \u7684\u989c\u8272 unfocusedLabelColor : Color = MaterialTheme . colors . onSurface . copy ( ContentAlpha . medium ), // \u7981\u7528 TextField \u65f6\uff0cLabel \u7684\u989c\u8272 disabledLabelColor : Color = unfocusedLabelColor . copy ( ContentAlpha . disabled ), // \u5f53 TextField \u7684 isError \u53c2\u6570\u4e3a true \u65f6\uff0cLabel \u7684\u989c\u8272 errorLabelColor : Color = MaterialTheme . colors . error , // Placeholder \u7684\u989c\u8272 placeholderColor : Color = MaterialTheme . colors . onSurface . copy ( ContentAlpha . medium ), // \u7981\u7528 TextField \u65f6\uff0cplaceholder \u7684\u989c\u8272 disabledPlaceholderColor : Color = placeholderColor . copy ( ContentAlpha . disabled ) ) \u8c03\u7528\u65b9\u6cd5 TextField ( value = text , onValueChange = { text = it }, leadingIcon = { Icon ( Icons . Filled . Search , null ) }, colors = TextFieldDefaults . textFieldColors ( textColor = Color ( 0 xFF0079D3 ), backgroundColor = Color . Transparent ) ) \u5728\u4f60\u4f7f\u7528 IDE \u667a\u80fd\u8865\u5168\u7684\u65f6\u5019\u53ef\u80fd\u9047\u5230\u8fd9\u79cd\u60c5\u51b5 \u89e3\u51b3\u65b9\u6cd5\u5982\u4e0b\uff0c\u624b\u52a8\u6253\u5b8c\u51fd\u6570\u540d","title":"5. Color \u53c2\u6570"},{"location":"elements/textfield/#6-visualtransformation","text":"visualTransformation \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5e94\u7528\u8f93\u5165\u6846\u7684\u663e\u793a\u6a21\u5f0f var text by remember { mutableStateOf ( \"\" )} var passwordHidden by remember { mutableStateOf ( false )} TextField ( value = text , onValueChange = { text = it }, trailingIcon = { IconButton ( onClick = { passwordHidden = ! passwordHidden } ){ Icon ( painterResource ( id = R . drawable . visibility ), null ) } }, label = { Text ( \"\u5bc6\u7801\" ) }, visualTransformation = if ( passwordHidden ) PasswordVisualTransformation () else VisualTransformation . None )","title":"6. visualTransformation \u53c2\u6570"},{"location":"elements/textfield/#basictextfield","text":"@Composable fun BasicTextField ( value : String , onValueChange : ( String ) -> Unit , modifier : Modifier = Modifier , enabled : Boolean = true , readOnly : Boolean = false , textStyle : TextStyle = TextStyle . Default , keyboardOptions : KeyboardOptions = KeyboardOptions . Default , keyboardActions : KeyboardActions = KeyboardActions . Default , singleLine : Boolean = false , maxLines : Int = Int . MAX_VALUE , visualTransformation : VisualTransformation = VisualTransformation . None , onTextLayout : ( TextLayoutResult ) -> Unit = {}, interactionSource : MutableInteractionSource = remember { MutableInteractionSource () }, cursorBrush : Brush = SolidColor ( Color . Black ), decorationBox : ( innerTextField : () -> Unit ) -> Unit = @Composable { innerTextField -> innerTextField () } ): @Composable Unit \u4f7f\u7528 BasicTextField \u53ef\u4ee5\u8ba9\u4f60\u62e5\u6709\u66f4\u9ad8\u7684\u81ea\u5b9a\u4e49\u6548\u679c","title":"BasicTextField"},{"location":"elements/textfield/#1","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u4f8b\u5b50\u5982\u4e0b\uff1a var text by remember { mutableStateOf ( \"\" ) } Box ( modifier = Modifier . fillMaxSize () . background ( Color ( 0 xFFD3D3D3 )), contentAlignment = Alignment . Center ) { BasicTextField ( value = text , onValueChange = { text = it }, modifier = Modifier . background ( Color . White , CircleShape ) . height ( 35. dp ) . fillMaxWidth (), decorationBox = { innerTextField -> Row ( verticalAlignment = Alignment . CenterVertically , modifier = Modifier . padding ( horizontal = 10. dp ) ) { IconButton ( onClick = { } ) { Icon ( painterResource ( id = R . drawable . mood ), null ) } Box ( modifier = Modifier . weight ( 1f ), contentAlignment = Alignment . CenterStart ) { innerTextField () } IconButton ( onClick = { }, ) { Icon ( Icons . Filled . Send , null ) } } } ) } \u5728 BasicTextField \u4e2d\u7684 decorationBox \u53c2\u6570\u662f\u4e00\u4e2a\u5141\u8bb8\u5728 TextField \u5468\u56f4\u6dfb\u52a0\u4fee\u9970\u7684 @Composable lambda \u4f60\u53ef\u4ee5\u5b9e\u73b0\uff1a \u56fe\u6807\uff0c\u5360\u4f4d\u7b26\uff0c\u5e2e\u52a9\u6d88\u606f\uff0c\u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002 \u53ef\u4ee5\u8ba9\u4f60\u76f8\u5bf9\u4e8e\u4f60\u4fee\u9970\u7684\u4f4d\u7f6e\u6765\u63a7\u5236\u5185\u90e8\u7684 TextField \u3002 \u4e3a\u4e86\u53ef\u4ee5\u8ba9\u4f60\u76f8\u5bf9\u4e8e\u4f60\u4fee\u9970\u7684\u4f4d\u7f6e\u6765\u63a7\u5236\u5185\u90e8\u7684 TextField \uff0c TextField \u7684\u5b9e\u73b0\u5c06\u4f20\u5165\u4e00\u4e2a\u7531\u6846\u67b6\u63a7\u5236\u7684 @Composable \u53c2\u6570 innerTextField \u4f20\u9012\u7ed9\u60a8\u63d0\u4f9b\u7684 decorationBox lambda \uff0c\u4f60\u9700\u8981\u51c6\u786e\u5730\u8c03\u7528\u4e00\u6b21\u5b83","title":"1. \u7b80\u5355\u4f7f\u7528"},{"location":"elements/textfield/#2","text":"\u4ee3\u7801\u67e5\u770b\uff1a Mkdocs Github","title":"2. \u5176\u4ed6\u6548\u679c"},{"location":"elements/textfield/#_1","text":"TextField \u53c2\u6570\u8be6\u60c5 BasicTextField \u53c2\u6570\u8be6\u60c5","title":"\u66f4\u591a"},{"location":"layout/bottomnavigation/","text":"@Composable fun BottomNavigation ( modifier : Modifier = Modifier , backgroundColor : Color = MaterialTheme . colors . primarySurface , contentColor : Color = contentColorFor ( backgroundColor ), elevation : Dp = BottomNavigationDefaults . Elevation , content : RowScope .() -> Unit ): @Composable Unit Material Design bottom navigation Bottom navigation bars \u5141\u8bb8\u5728\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u5730\u4e4b\u95f4\u79fb\u52a8\u3002 BottomNavigation \u5e94\u8be5\u5305\u542b\u591a\u4e2a BottomNavigationItems \u9879\uff0c\u6bcf\u4e2a\u5bfc\u822a\u9879\u4ee3\u8868\u4e00\u4e2a\u5355\u4e00\u7684\u76ee\u7684\u5730\u3002 \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u548c Scaffold \u642d\u914d\u7684\u793a\u4f8b\u4ee3\u7801\uff1a @Composable fun ScaffoldDemo (){ var selectedItem by remember { mutableStateOf ( 0 ) } val items = listOf ( \"\u4e3b\u9875\" , \"\u6211\u559c\u6b22\u7684\" , \"\u8bbe\u7f6e\" ) Scaffold ( topBar = { TopAppBar ( title = { Text ( \"\u4e3b\u9875\" ) }, navigationIcon = { IconButton ( onClick = { }) { Icon ( Icons . Filled . ArrowBack , null ) } } ) }, bottomBar = { BottomNavigation { items . forEachIndexed { index , item -> BottomNavigationItem ( icon = { Icon ( Icons . Filled . Favorite , contentDescription = null ) }, label = { Text ( item ) }, selected = selectedItem == index , onClick = { selectedItem = index } ) } } } ){ } } \u8fd9\u6837\u4e00\u4e2a\u57fa\u672c\u7684 Bottom navigation bars \u680f\u6211\u4eec\u5c31\u5b9e\u73b0\u5566\uff0c\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f \u6211\u4eec\u53ef\u4ee5\u7a0d\u5fae\u4fee\u6539\u4e00\u70b9\u4ee3\u7801\uff0c\u8ba9\u5bfc\u822a\u680f\u53d8\u6210\u4e09\u4e2a\u4e0d\u540c\u7684\u56fe\u6807\u6309\u94ae \u5c06 BottomNavigationItem \u7684\u4ee3\u7801\u4fee\u6539\u6210\u4ee5\u4e0b BottomNavigationItem ( icon = { when ( index ){ 0 -> Icon ( Icons . Filled . Home , contentDescription = null ) 1 -> Icon ( Icons . Filled . Favorite , contentDescription = null ) else -> Icon ( Icons . Filled . Settings , contentDescription = null ) } }, label = { Text ( item ) }, selected = selectedItem == index , onClick = { selectedItem = index } ) \u81ea\u5b9a\u4e49 BottomNavigation \u680f \u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49 BottomNavigation \u680f\u7684\u6f14\u793a \u5b9e\u73b0\u7684\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u6765\u67e5\u770b Mkdocs Github \u66f4\u591a BottomNavigation \u8be6\u60c5","title":"BottomNavigation"},{"location":"layout/bottomnavigation/#bottomnavigation","text":"\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49 BottomNavigation \u680f\u7684\u6f14\u793a \u5b9e\u73b0\u7684\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u6765\u67e5\u770b Mkdocs Github","title":"\u81ea\u5b9a\u4e49 BottomNavigation \u680f"},{"location":"layout/bottomnavigation/#_1","text":"BottomNavigation \u8be6\u60c5","title":"\u66f4\u591a"},{"location":"layout/column/","text":"1. \u6982\u8ff0 \u4e00\u79cd\u754c\u9762\u7684 Composable \uff0c\u5b83\u53ef\u4ee5\u8ba9\u91cc\u9762\u7684\u5b50\u9879\u6309\u5782\u76f4\u987a\u5e8f\u6392\u5217\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4ee5\u6c34\u5e73\u987a\u5e8f\u6765\u5b89\u6392\u91cc\u9762\u5b50\u9879\u7684 Composable\uff0c\u53ef\u4ee5\u67e5\u770b Row \uff0c\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Column \u91cc\u9762\u7684\u5b50\u9879\u662f\u4e0d\u4f1a\u6eda\u52a8\u7684\u3002 \u53c2\u89c1 Modifier.verticalScroll \u6765\u5b9e\u73b0\u8fd9\u4e2a\u884c\u4e3a\u3002 \u5bf9\u4e8e\u4ec5\u7ec4\u5408\u548c\u5e03\u7f6e\u5f53\u524d\u53ef\u89c1\u9879\u76ee\u7684\u5782\u76f4\u53ef\u6eda\u52a8\u5217\u8868\uff0c\u53ef\u4ee5\u53c2\u89c1 LazyColumn \u3002 Column \u80fd\u591f\u6839\u636e\u4f7f\u7528 ColumnScope.weight \u4fee\u6539\u5668\u63d0\u4f9b\u7684\u6743\u91cd\u6765\u5206\u914d\u5b50\u9879\u7684\u9ad8\u5ea6\u3002\u5982\u679c\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u9879\u6ca1\u6709\u88ab\u63d0\u4f9b\u6743\u91cd\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u88ab\u8981\u6c42\u63d0\u4f9b\u4e00\u4e2a\u9996\u9009\u7684\u9ad8\u5ea6\uff0c\u7136\u540e\u518d\u6839\u636e\u5269\u4f59\u7684\u53ef\u7528\u7a7a\u95f4\u6309\u6bd4\u4f8b\u8ba1\u7b97\u6709\u6743\u91cd\u7684\u5b50\u9879\u7684\u5c3a\u5bf8\u3002 \u5f53\u5b83\u7684\u5b50\u9879\u90fd\u6ca1\u6709\u6743\u91cd\u65f6\uff0c\u4e00\u4e2a Column \u5c06\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4ee5\u9002\u914d\u5b83\u7684\u5b50\u9879\u4e00\u4e2a\u4e00\u4e2a\u5730\u53e0\u52a0\u3002\u4e3a\u4e86\u6539\u53d8 Column \u7684\u9ad8\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528 Modifier.requiredHeight \u4fee\u6539\u5668\u3002 \u4f8b\u5982\uff0c\u60f3\u8ba9\u5b83\u586b\u6ee1\u6240\u6709\u53ef\u7528\u7684\u9ad8\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528 Modifier.fillMaxHeight \u3002\u5982\u679c\u4e00\u4e2a Column \u7684\u81f3\u5c11\u4e00\u4e2a\u5b50\u9879\u6709\u4e00\u4e2a\u6743\u91cd\uff0c Column \u5c06\u586b\u6ee1\u53ef\u7528\u7684\u9ad8\u5ea6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 Modifier.fillMaxHeight \u3002\u5982\u679c Column \u7684\u5927\u5c0f\u5e94\u8be5\u88ab\u9650\u5236\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528 Modifier.requiredHeight \u6216 Modifier.requiredSize \u3002 \u5f53 Column \u7684\u5c3a\u5bf8\u5927\u4e8e\u5b83\u7684\u5b50\u9879\u7684\u603b\u548c\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5782\u76f4\u7684 Arrangement \u6765\u5b9a\u4e49 Column \u5185\u5b50\u9879\u7684\u5b9a\u4f4d\u3002\u53ef\u7528\u7684\u5b9a\u4f4d\u884c\u4e3a\u53c2\u89c1 Arrangement \uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528 Arrangement \u7684\u6784\u9020\u51fd\u6570\u6765\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6392\u5217\u3002 \u4f7f\u7528\u793a\u4f8b\uff1a Column { // \u6ca1\u6709\u6743\u91cd\u7684\u5b50\u9879\u5c06\u4f1a\u6709\u6307\u5b9a\u7684\u5c3a\u5bf8 Box ( Modifier . size ( 40. dp , 80. dp ). background ( Color . Magenta )) // \u6709\u6743\u91cd\uff0c\u8fd9\u4e2a\u5b50\u9879\u5c06\u4f1a\u5360\u7528\u5269\u4f59\u9ad8\u5ea6\u7684\u4e00\u534a Box ( Modifier . width ( 40. dp ). weight ( 1f ). background ( Color . Yellow )) // \u6709\u6743\u91cd\uff0c\u4f46\u662f fill \u53c2\u6570\u662f false\uff0c\u8fd9\u4e2a\u5b50\u9879\u5c06\u4f1a\u6700\u591a\u5360\u7528\u5269\u4f59\u9ad8\u5ea6\u7684\u4e00\u534a // \u56e0\u6b64\uff0c\u5982\u679c\u6307\u5b9a\u7684\u9ad8\u5ea6\u8f83\u5927\uff0c\u5b83\u5c06\u4f1a\u5360\u7528 80 dp\uff08\u5b83\u7684\u9996\u9009\u9ad8\u5ea6\uff09 Box ( Modifier . size ( 40. dp , 80. dp ) . weight ( 1f , fill = false ) . background ( Color . Green ) ) } \u518d\u6765\u770b\u770b\u7b2c\u4e09\u4e2a\u5b50\u9879\u7684 fill \u53c2\u6570\u4e3a true \uff08\u9ed8\u8ba4\uff09\u65f6\u5019\u7684\u60c5\u51b5\u5427\uff0c Column { Box ( Modifier . size ( 40. dp , 80. dp ). background ( Color . Magenta )) Box ( Modifier . width ( 40. dp ). weight ( 1f ). background ( Color . Yellow )) Box ( Modifier . size ( 40. dp , 80. dp ) . weight ( 1f ) . background ( Color . Green ) ) }","title":"Column"},{"location":"layout/column/#1","text":"\u4e00\u79cd\u754c\u9762\u7684 Composable \uff0c\u5b83\u53ef\u4ee5\u8ba9\u91cc\u9762\u7684\u5b50\u9879\u6309\u5782\u76f4\u987a\u5e8f\u6392\u5217\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4ee5\u6c34\u5e73\u987a\u5e8f\u6765\u5b89\u6392\u91cc\u9762\u5b50\u9879\u7684 Composable\uff0c\u53ef\u4ee5\u67e5\u770b Row \uff0c\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Column \u91cc\u9762\u7684\u5b50\u9879\u662f\u4e0d\u4f1a\u6eda\u52a8\u7684\u3002 \u53c2\u89c1 Modifier.verticalScroll \u6765\u5b9e\u73b0\u8fd9\u4e2a\u884c\u4e3a\u3002 \u5bf9\u4e8e\u4ec5\u7ec4\u5408\u548c\u5e03\u7f6e\u5f53\u524d\u53ef\u89c1\u9879\u76ee\u7684\u5782\u76f4\u53ef\u6eda\u52a8\u5217\u8868\uff0c\u53ef\u4ee5\u53c2\u89c1 LazyColumn \u3002 Column \u80fd\u591f\u6839\u636e\u4f7f\u7528 ColumnScope.weight \u4fee\u6539\u5668\u63d0\u4f9b\u7684\u6743\u91cd\u6765\u5206\u914d\u5b50\u9879\u7684\u9ad8\u5ea6\u3002\u5982\u679c\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u9879\u6ca1\u6709\u88ab\u63d0\u4f9b\u6743\u91cd\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u88ab\u8981\u6c42\u63d0\u4f9b\u4e00\u4e2a\u9996\u9009\u7684\u9ad8\u5ea6\uff0c\u7136\u540e\u518d\u6839\u636e\u5269\u4f59\u7684\u53ef\u7528\u7a7a\u95f4\u6309\u6bd4\u4f8b\u8ba1\u7b97\u6709\u6743\u91cd\u7684\u5b50\u9879\u7684\u5c3a\u5bf8\u3002 \u5f53\u5b83\u7684\u5b50\u9879\u90fd\u6ca1\u6709\u6743\u91cd\u65f6\uff0c\u4e00\u4e2a Column \u5c06\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4ee5\u9002\u914d\u5b83\u7684\u5b50\u9879\u4e00\u4e2a\u4e00\u4e2a\u5730\u53e0\u52a0\u3002\u4e3a\u4e86\u6539\u53d8 Column \u7684\u9ad8\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528 Modifier.requiredHeight \u4fee\u6539\u5668\u3002 \u4f8b\u5982\uff0c\u60f3\u8ba9\u5b83\u586b\u6ee1\u6240\u6709\u53ef\u7528\u7684\u9ad8\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528 Modifier.fillMaxHeight \u3002\u5982\u679c\u4e00\u4e2a Column \u7684\u81f3\u5c11\u4e00\u4e2a\u5b50\u9879\u6709\u4e00\u4e2a\u6743\u91cd\uff0c Column \u5c06\u586b\u6ee1\u53ef\u7528\u7684\u9ad8\u5ea6\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 Modifier.fillMaxHeight \u3002\u5982\u679c Column \u7684\u5927\u5c0f\u5e94\u8be5\u88ab\u9650\u5236\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528 Modifier.requiredHeight \u6216 Modifier.requiredSize \u3002 \u5f53 Column \u7684\u5c3a\u5bf8\u5927\u4e8e\u5b83\u7684\u5b50\u9879\u7684\u603b\u548c\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u5782\u76f4\u7684 Arrangement \u6765\u5b9a\u4e49 Column \u5185\u5b50\u9879\u7684\u5b9a\u4f4d\u3002\u53ef\u7528\u7684\u5b9a\u4f4d\u884c\u4e3a\u53c2\u89c1 Arrangement \uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528 Arrangement \u7684\u6784\u9020\u51fd\u6570\u6765\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6392\u5217\u3002 \u4f7f\u7528\u793a\u4f8b\uff1a Column { // \u6ca1\u6709\u6743\u91cd\u7684\u5b50\u9879\u5c06\u4f1a\u6709\u6307\u5b9a\u7684\u5c3a\u5bf8 Box ( Modifier . size ( 40. dp , 80. dp ). background ( Color . Magenta )) // \u6709\u6743\u91cd\uff0c\u8fd9\u4e2a\u5b50\u9879\u5c06\u4f1a\u5360\u7528\u5269\u4f59\u9ad8\u5ea6\u7684\u4e00\u534a Box ( Modifier . width ( 40. dp ). weight ( 1f ). background ( Color . Yellow )) // \u6709\u6743\u91cd\uff0c\u4f46\u662f fill \u53c2\u6570\u662f false\uff0c\u8fd9\u4e2a\u5b50\u9879\u5c06\u4f1a\u6700\u591a\u5360\u7528\u5269\u4f59\u9ad8\u5ea6\u7684\u4e00\u534a // \u56e0\u6b64\uff0c\u5982\u679c\u6307\u5b9a\u7684\u9ad8\u5ea6\u8f83\u5927\uff0c\u5b83\u5c06\u4f1a\u5360\u7528 80 dp\uff08\u5b83\u7684\u9996\u9009\u9ad8\u5ea6\uff09 Box ( Modifier . size ( 40. dp , 80. dp ) . weight ( 1f , fill = false ) . background ( Color . Green ) ) } \u518d\u6765\u770b\u770b\u7b2c\u4e09\u4e2a\u5b50\u9879\u7684 fill \u53c2\u6570\u4e3a true \uff08\u9ed8\u8ba4\uff09\u65f6\u5019\u7684\u60c5\u51b5\u5427\uff0c Column { Box ( Modifier . size ( 40. dp , 80. dp ). background ( Color . Magenta )) Box ( Modifier . width ( 40. dp ). weight ( 1f ). background ( Color . Yellow )) Box ( Modifier . size ( 40. dp , 80. dp ) . weight ( 1f ) . background ( Color . Green ) ) }","title":"1. \u6982\u8ff0"},{"location":"layout/custom_layout/","text":"\u6982\u8ff0 Compose \u5df2\u7ecf\u5185\u7f6e\u4e86\u8bb8\u591a\u7ec4\u4ef6\uff0c\u8bf8\u5982 Column\uff0cRow\uff0cBox \u7b49\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u7ec4\u5408\u8fd9\u4e9b\u5df2\u6709\u7684\u7ec4\u4ef6\u6765\u5b9a\u5236\u81ea\u5df1\u7684\u4e13\u5c5e\u7ec4\u4ef6\u3002 \u5c31\u50cf\u5728\u4f20\u7edfView\u7cfb\u7edf\u4e2d\uff0c\u5f53 LinearLayout \u7b49\u57fa\u7840\u5e03\u5c40\u65e0\u6cd5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 measure \u4e0e layout \u6765\u8fbe\u6210\u4f60\u7684\u671f\u671b\u3002Compose \u6cbf\u7528\u4e86\u8fd9\u4e00\u7406\u5ff5\uff0c\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\u5982\u679c Compose \u5185\u7f6e\u7ec4\u4ef6\u53ef\u80fd\u65e0\u6cd5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u5b9a\u5236\u6d4b\u91cf\u4e0e\u5e03\u5c40\u8fc7\u7a0b\u6765\u5b8c\u6210\u9700\u6c42\u3002\u4e8b\u5b9e\u4e0a\uff0cCompose \u5185\u7f6e\u7ec4\u4ef6\u4e5f\u662f\u901a\u8fc7\u5b9a\u5236 Layout \u6765\u8fbe\u6210\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u5c01\u88c5\u3002 \u5728\u5b66\u4e60\u5982\u4f55\u5b9a\u5236 Layout \u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3\u4e0b Compose \u7684\u5e03\u5c40\u539f\u7406\u3002 Compose \u5e03\u5c40\u539f\u7406 composable \u88ab\u8c03\u7528\u65f6\u4f1a\u5c06\u81ea\u8eab\u5305\u542b\u7684UI\u5143\u7d20\u6dfb\u52a0\u5230UI\u6811\u4e2d\u5e76\u5728\u5c4f\u5e55\u4e0a\u88ab\u6e32\u67d3\u51fa\u6765\u3002\u6bcf\u4e2a UI \u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u7236\u5143\u7d20\uff0c\u53ef\u80fd\u4f1a\u5305\u542b\u96f6\u81f3\u591a\u4e2a\u5b50\u5143\u7d20\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u76f8\u5bf9\u5176\u7236\u5143\u7d20\u7684\u5185\u90e8\u4f4d\u7f6e\u548c\u5c3a\u5bf8\u3002 \u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u88ab\u8981\u6c42\u6839\u636e\u7236\u5143\u7d20\u7684\u7ea6\u675f\u6765\u8fdb\u884c\u81ea\u6211\u6d4b\u91cf(\u7c7b\u4f3c\u4f20\u7edf View \u4e2d\u7684 MeasureSpec )\uff0c\u7ea6\u675f\u4e2d\u5305\u542b\u4e86\u7236\u5143\u7d20\u5141\u8bb8\u5b50\u5143\u7d20\u7684\u6700\u5927\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u548c\u6700\u5c0f\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\uff0c\u5f53\u7236\u5143\u7d20\u60f3\u8981\u5f3a\u5236\u5b50\u5143\u7d20\u5bbd\u9ad8\u4e3a\u56fa\u5b9a\u503c\u65f6\uff0c\u5176\u5bf9\u5e94\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u5c31\u662f\u76f8\u540c\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u5305\u542b\u591a\u4e2a\u5b50\u5143\u7d20\u7684UI\u5143\u7d20\uff0c\u9700\u8981\u6d4b\u91cf\u6bcf\u4e00\u4e2a\u5b50\u5143\u7d20\u4ece\u800c\u786e\u5b9a\u5f53\u524dUI\u5143\u7d20\u81ea\u8eab\u7684\u5927\u5c0f\u3002\u5e76\u4e14\u5728\u6bcf\u4e2a\u5b50\u5143\u7d20\u81ea\u6211\u6d4b\u91cf\u540e\uff0c\u5f53\u524dUI\u5143\u7d20\u53ef\u4ee5\u6839\u636e\u5176\u6240\u9700\u8981\u7684\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8fdb\u884c\u5728\u81ea\u5df1\u5185\u90e8\u8fdb\u884c\u653e\u7f6e Compose UI \u4e0d\u5141\u8bb8\u591a\u6b21\u6d4b\u91cf \uff0c\u5f53\u524dUI\u5143\u7d20\u7684\u6bcf\u4e00\u4e2a\u5b50\u5143\u7d20\u5747\u4e0d\u80fd\u88ab\u91cd\u590d\u8fdb\u884c\u6d4b\u91cf\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f \u6bcf\u4e2a\u5b50\u5143\u7d20\u53ea\u5141\u8bb8\u88ab\u6d4b\u91cf\u4e00\u6b21 \u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4ec0\u4e48\uff1f\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\u3002\u5728\u4f20\u7edf View \u7cfb\u7edf\u4e2d\u4e00\u4e2a UI \u5143\u7d20\u5141\u8bb8\u591a\u6b21\u6d4b\u91cf\u5b50\u5143\u7d20\uff0c\u6211\u4eec\u5047\u8bbe\u5bf9\u5b50\u5143\u7d20\u6d4b\u91cf\u4e24\u6b21\uff0c\u800c\u8be5\u5b50\u5143\u7d20\u53ef\u80fd\u53c8\u5bf9\u5176\u5b50\u5143\u7d20\u53c8\u6d4b\u91cf\u4e86\u4e24\u6b21\uff0c\u603b\u4f53\u4e0a\u5f53\u524d UI \u5143\u7d20\u91cd\u65b0\u6d4b\u91cf\u4e00\u6b21\uff0c\u5219\u5b59\u5b50\u5143\u7d20\u5c31\u9700\u8981\u6d4b\u91cf\u56db\u6b21\uff0c\u6d4b\u91cf\u6b21\u6570\u4f1a\u968f\u7740\u6df1\u5ea6\u800c\u6307\u6570\u7ea7\u4e0a\u5347\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u90a3\u4e48\u4e00\u6b21\u5e03\u5c40\u6574\u9897 UI \u6811\u90fd\u9700\u8981\u505a\u5927\u91cf\u7684\u5de5\u4f5c\uff0c\u5f88\u96be\u4fdd\u6301\u5e94\u7528\u7a0b\u5e8f\u7684\u826f\u597d\u6027\u80fd\u3002 \u4e3a\u907f\u514d\u4f20\u7edf View \u7cfb\u7edf\u6d4b\u91cf\u5e03\u5c40\u7684\u6027\u80fd\u9677\u9631\uff0cCompose \u9650\u5236\u4e86\u6bcf\u4e2a\u5b50\u5143\u7d20\u7684\u6d4b\u91cf\u6b21\u6570\uff0c\u53ef\u4ee5\u9ad8\u6548\u5904\u7406\u6df1\u5ea6\u6bd4\u8f83\u5927\u7684 UI \u6811(\u6781\u7aef\u60c5\u51b5\u662f\u9000\u5316\u6210\u94fe\u8868\u7684\u6811\u5f62\u7ed3\u6784)\u3002\u4f46\u662f\u5728\u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u591a\u6b21\u6d4b\u91cf\u5b50\u5143\u7d20\u662f\u6709\u610f\u4e49\u7684\uff0c\u6211\u4eec\u662f\u9700\u8981\u83b7\u53d6\u5230\u5b50\u5143\u7d20\u591a\u6b21\u6d4b\u91cf\u7684\u4fe1\u606f\u7684\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u6709\u529e\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u8ba8\u8bba\u3002 \u4f7f\u7528 Layout Modifier \u4f7f\u7528 Modifier.layout() \u624b\u52a8\u63a7\u5236\u5143\u7d20\u7684\u6d4b\u91cf\u548c\u5e03\u5c40\u3002\u901a\u5e38 layout \u4fee\u9970\u7b26\u7684\u4f7f\u7528\u65b9\u6cd5\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 fun Modifier . customLayoutModifier (...) = Modifier . layout { measurable , constraints -> ... }) \u5f53\u4f7f\u7528 layout \u4fee\u9970\u7b26\u65f6\uff0c\u4f60\u4f20\u5165\u7684\u56de\u8c03 lambda \u9700\u8981\u5305\u542b\u4e24\u4e2a\u53c2\u6570\uff1ameasurable\u3001constraints measurable\uff1a\u5b50\u5143\u7d20\u7684\u6d4b\u91cf\u53e5\u67c4\uff0c\u901a\u8fc7\u63d0\u4f9b\u7684api\u5b8c\u6210\u6d4b\u91cf\u4e0e\u5e03\u5c40\u8fc7\u7a0b constraints: \u5b50\u5143\u7d20\u7684\u6d4b\u91cf\u7ea6\u675f\uff0c\u5305\u62ec\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u3002 Layout Modifier \u4f7f\u7528\u793a\u4f8b \u6709\u65f6\u4f60\u60f3\u5728\u5c4f\u5e55\u4e0a\u5c55\u793a\u4e00\u6bb5\u6587\u672c\u4fe1\u606f\uff0c\u901a\u5e38\u4f60\u4f1a\u4f7f\u7528\u5230 Compose \u5185\u7f6e\u7684 Text \u7ec4\u4ef6\u3002\u5355\u5355\u663e\u793a\u6587\u672c\u662f\u4e0d\u591f\u7684\uff0c\u4f60\u5e0c\u671b\u6307\u5b9a Text \u9876\u90e8\u5230\u6587\u672c\u57fa\u7ebf\u7684\u9ad8\u5ea6\uff0c\u8ba9\u6587\u672c\u770b\u7684\u66f4\u81ea\u7136\u4e00\u4e9b\u3002\u4f7f\u7528\u5185\u7f6e\u7684 padding \u4fee\u9970\u7b26\u662f\u65e0\u6cd5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\u7684\uff0c\u4ed6\u53ea\u80fd\u6307\u5b9a Text \u9876\u90e8\u5230\u6587\u672c\u9876\u90e8\u7684\u9ad8\u5ea6\uff0c\u6b64\u65f6\u4f60\u5c31\u9700\u8981\u4f7f\u7528\u5230 layout \u4fee\u9970\u7b26\u4e86\u3002 \u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a firstBaselineToTop \u4fee\u9970\u7b26 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> ... } \u6b63\u5982\u6211\u4eec\u5728 Compose \u5e03\u5c40\u539f\u7406\u4e2d\u6240\u63d0\u5230\u7684\uff0c \u6bcf\u4e2a\u5b50\u5143\u7d20\u53ea\u5141\u8bb8\u88ab\u6d4b\u91cf\u4e00\u6b21 \u3002 \u901a\u8fc7\u4f7f\u7528 measurable.measure(constraints) \u5b8c\u6210\u5b50\u5143\u7d20\u7684\u6d4b\u91cf\uff0c\u5982\u679c\u5c06 lambda \u7684 constraints \u76f4\u63a5\u4f20\u5165\u5219\u610f\u5473\u7740\uff1a\u4f60\u5c06\u7236\u5143\u7d20\u7ed9\u5f53\u524d\u5143\u7d20\u7684\u9650\u5236\u76f4\u63a5\u63d0\u4f9b\u4e86\u5f53\u524d\u5143\u7d20\u7684\u5b50\u5143\u7d20\uff0c\u81ea\u8eab\u6ca1\u6709\u589e\u52a0\u4efb\u4f55\u989d\u5916\u7684\u9650\u5236\u3002\u5b50\u5143\u7d20\u6d4b\u91cf\u7684\u7ed3\u679c\u88ab\u5305\u88c5\u5728\u4e00\u4e2a Placeable \u5b9e\u4f8b\u4e2d\uff0c\u53ef\u901a\u8fc7\u8be5 Placeable \u5b9e\u4f8b\u83b7\u53d6\u5b50\u5143\u7d20\u6d4b\u91cf\u7ed3\u679c\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5f53\u524d Text \u5143\u7d20\u4e5f\u4e0d\u5bf9\u5b50\u5143\u7d20\u8fdb\u884c\u989d\u5916\u9650\u5236\u3002 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> val placeable = measurable . measure ( constraints ) ... } \u73b0\u5728\u5b50\u5143\u7d20\u5df2\u7ecf\u5b8c\u6210\u4e86\u6d4b\u91cf\u6d41\u7a0b\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u7684\u6253\u7b97\u5e76\u901a\u8fc7 layout(width, height) \u65b9\u6cd5\u5bf9\u5f53\u524d\u5143\u7d20\u7684\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8fdb\u884c\u6307\u5b9a\u3002\u5e76\u5c06\u5b50\u5143\u7d20\u7684\u5e03\u5c40\u6d41\u7a0b\u5199\u5165\u5728 layout(width, height) \u7684 lambda \u53c2\u6570\u4e2d\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5f53\u524d Text \u5143\u7d20\u7684\u5bbd\u5ea6\u5219\u662f\u6587\u672c\u5bbd\u5ea6\uff0c\u800c\u9ad8\u5ea6\u5219\u662f\u6211\u4eec\u6307\u5b9a\u7684 Text \u9876\u90e8\u5230\u6587\u672c\u57fa\u7ebf\u9ad8\u5ea6\u4e0e\u6587\u672c\u57fa\u7ebf\u5230 Text \u5e95\u90e8\u7684\u9ad8\u5ea6\u4e4b\u548c\u3002 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> val placeable = measurable . measure ( constraints ) check ( placeable [ FirstBaseline ] != AlignmentLine . Unspecified ) val firstBaseline = placeable [ FirstBaseline ] val placeableY = firstBaselineToTop . roundToPx () - firstBaseline val height = placeable . height + placeableY layout ( placeable . width , height ) { ... } } \u73b0\u5728\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 placeable.placeRelative(x, y) \u6765\u5b8c\u6210\u5b50\u5143\u7d20\u7684\u5e03\u5c40\u6d41\u7a0b\uff0c\u8fd9\u662f\u5fc5\u8981\u7684\u3002 placeRelative \u4f1a\u6839\u636e\u5f53\u524d layoutDirection \u81ea\u52a8\u8c03\u6574\u5b50\u5143\u7d20\u7684\u4f4d\u7f6e\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u5f53\u524d\u5b50\u5143\u7d20\u7684\u6a2a\u5411\u5750\u6807\u76f8\u5bf9\u5f53\u524d\u5143\u7d20\u4e3a\u96f6\uff0c\u800c\u7eb5\u5411\u5750\u6807\u5219\u4e3a Text \u7ec4\u4ef6\u9876\u90e8\u5230\u6587\u672c\u9876\u90e8\u7684\u8ddd\u79bb\u3002 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> ... val placeableY = firstBaselineToTop . roundToPx () - firstBaseline val height = placeable . height + placeableY layout ( placeable . width , height ) { placeable . placeRelative ( 0 , placeableY ) } } \u4e3a\u9884\u89c8\u5e03\u5c40\u7ed3\u679c\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u9884\u89c8\u89c6\u56fe\u3002 @Preview @Composable fun TextWithPaddingToBaselinePreview () { LayoutsCodelabTheme { Text ( \"Hi there!\" , Modifier . firstBaselineToTop ( 24. dp )) } } @Preview @Composable fun TextWithNormalPaddingPreview () { LayoutsCodelabTheme { Text ( \"Hi there!\" , Modifier . padding ( top = 24. dp )) } } \u9884\u89c8\u6548\u679c \u4f7f\u7528 Layout Composable Layout Modifier \u4f1a\u5c06\u5f53\u524d\u5143\u7d20\u7684\u6240\u6709\u5b50\u5143\u7d20\u89c6\u4f5c\u4e3a\u6574\u4f53\u8fdb\u884c\u7edf\u4e00\u7684\u6d4b\u91cf\u4e0e\u5e03\u5c40\uff0c\u591a\u9002\u7528\u4e8e\u7edf\u4e00\u5904\u7406\u7684\u573a\u666f\u3002\u7136\u800c\u6211\u4eec\u6709\u65f6\u662f\u9700\u8981\u7cbe\u7ec6\u5316\u6d4b\u91cf\u5e03\u5c40\u6bcf\u4e00\u4e2a\u5b50\u7ec4\u4ef6\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u8fdb\u884c\u5b8c\u5168\u7684\u81ea\u5b9a\u4e49 Layout\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u4f20\u7edf View \u7cfb\u7edf\u4e2d\u5b9a\u5236 View \u4e0e ViewGroup \u6d4b\u91cf\u5e03\u5c40\u6d41\u7a0b\u7684\u533a\u522b\u3002\u5bf9\u4e8e\u5b9a\u5236 \u201cViewGroup\u201d \u7684\u573a\u666f\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 Layout Composable \u4e86\u3002\u9996\u5148\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a Layout Composable\u3002 @Composable fun CustomLayout ( modifier : Modifier = Modifier , // custom layout attributes content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> // measure and position children given constraints logic here } } \u53ef\u4ee5\u770b\u5230\uff0cLayout \u9700\u8981\u586b\u5199\u4e09\u4e2a\u53c2\u6570\uff1amodifier\uff0ccontent\uff0cmeasurePolicy modifier \uff1a\u7531\u5916\u90e8\u4f20\u5165\u7684\u4fee\u9970\u7b26\uff0c\u4f1a\u51b3\u5b9a\u8be5 UI \u5143\u7d20\u7684 constraints content \uff1a\u5728 content \u4e2d\u58f0\u660e\u6240\u6709\u5b50\u5143\u7d20\u4fe1\u606f measurePolicy \uff1a\u9ed8\u8ba4\u573a\u666f\u4e0b\u53ea\u5b9e\u73b0 measure \u5373\u53ef\uff0c\u4e0a\u9762\u793a\u4f8b\u4e2d\u6700\u540e\u4f20\u5165\u7684 lambda \u5c31\u662f measure \u7684\u5b9e\u73b0\u3002\u5f53\u4f60\u60f3\u8981\u4e3a\u4f60\u7684 Layout Composable \u9002\u914d Intrinsics \u65f6(\u5b98\u65b9\u4e2d\u6587\u7ffb\u8bd1\u4e3a\u56fa\u6709\u7279\u6027\u6d4b\u91cf)\uff0c\u5219\u9700\u8981\u91cd\u5199 minIntrinsicWidth \u3001 minIntrinsicHeight \u3001 maxIntrinsicWidth \u3001 maxIntrinsicHeight \u65b9\u6cd5\uff0c\u6709\u5173\u4e8e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u6587\u7ae0\u540e\u7eed\u4f1a\u66f4\u65b0\uff0c\u8bf7\u6301\u7eed\u5173\u6ce8\u3002 Layout Composable \u4f7f\u7528\u793a\u4f8b \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Layout Composable \u5b9a\u5236\u4e00\u4e2a\u81ea\u5df1\u4e13\u5c5e\u7684 Column\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u58f0\u660e\u8fd9\u4e2a Composable\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> // measure and position children given constraints logic here } } \u548c Layout Modifier \u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6240\u6709\u5b50\u7ec4\u4ef6\u8fdb\u884c\u4e00\u6b21\u6d4b\u91cf\u3002 \u5207\u8bb0\uff0c\u6bcf\u4e2a\u5b50\u5143\u7d20\u53ea\u5141\u8bb8\u88ab\u6d4b\u91cf\u4e00\u6b21 \u3002 \u4e0e Layout Modifier \u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u91cc\u7684 measurables \u662f\u4e00\u4e2a List\uff0c\u800c Layout Modifier \u5219\u53ea\u662f\u4e00\u4e2a measurable\uff0c\u56e0\u4e3a\u4ed6\u5c06\u6240\u6709\u5b50\u5143\u7d20\u770b\u4f5c\u4e86\u4e00\u4e2a\u6574\u4f53\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u4ecd\u7136\u4e0d\u5bf9\u5b50\u5143\u7d20\u8fdb\u884c\u989d\u5916\u9650\u5236\uff0c\u6700\u7ec8\u5c06\u6bcf\u6b21\u6d4b\u91cf\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 placeables \u8fd9\u4e2a List \u4e2d\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> val placeables = measurables . map { measurable -> // Measure each child measurable . measure ( constraints ) } } } \u73b0\u5728\u5728\u5c06\u8fd9\u4e9b\u5b50\u5143\u7d20\u5e03\u5c40\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5f53\u524d\u5b9a\u5236 column \u6240\u5e94\u8be5\u5360\u7528\u7684\u5c4f\u5e55\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u3002\u8fd9\u6837\u4e3a\u4e86\u51fa\u4e8e\u7b80\u5355\u8003\u8651\uff0c\u9009\u62e9\u5c06\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a\u5176\u7236\u5143\u7d20\u6240\u5141\u8bb8\u7684\u6700\u5927\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6\u3002\u4e0e Layout Modifier \u4e00\u6837\u901a\u8fc7 layout(width, height) \u65b9\u6cd5\u5bf9\u5f53\u524d\u5143\u7d20\u7684\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8fdb\u884c\u6307\u5b9a\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> ... layout ( constraints . maxWidth , constraints . maxHeight ) { // Place children } } } \u5177\u4f53\u5b50\u5143\u7d20\u7684\u5e03\u5c40\u4e5f\u4e0e Layout Modifier \u662f\u76f8\u540c\u7684\u3002\u4f5c\u4e3a Column \u662f\u9700\u8981\u5c06\u5b50\u5143\u7d20\u8fdb\u884c\u5782\u76f4\u6392\u5217\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ec5\u9700\u6307\u5b9a\u6bcf\u4e00\u4e2a\u5b50\u5143\u7d20\u7684\u9876\u90e8\u76f8\u5bf9\u4f4d\u7f6e\u5373\u53ef\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> val placeables = measurables . map { measurable -> measurable . measure ( constraints ) } var yPosition = 0 layout ( constraints . maxWidth , constraints . maxHeight ) { placeables . forEach { placeable -> placeable . placeRelative ( x = 0 , y = yPosition ) yPosition += placeable . height } } } } \u4e3a\u9884\u89c8\u5e03\u5c40\u7ed3\u679c\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u9884\u89c8\u89c6\u56fe\uff0c\u521b\u5efa\u81ea\u5df1\u5b9a\u5236\u7684 Column\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5b50\u5143\u7d20\u3002 @Composable fun BodyContent ( modifier : Modifier = Modifier ) { MyOwnColumn ( modifier . padding ( 8. dp )) { Text ( \"MyOwnColumn\" ) Text ( \"places items\" ) Text ( \"vertically.\" ) Text ( \"We've done it by hand!\" ) } } \u9884\u89c8\u6548\u679c","title":"\u81ea\u5b9a\u4e49\u5e03\u5c40"},{"location":"layout/custom_layout/#_1","text":"Compose \u5df2\u7ecf\u5185\u7f6e\u4e86\u8bb8\u591a\u7ec4\u4ef6\uff0c\u8bf8\u5982 Column\uff0cRow\uff0cBox \u7b49\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u7ec4\u5408\u8fd9\u4e9b\u5df2\u6709\u7684\u7ec4\u4ef6\u6765\u5b9a\u5236\u81ea\u5df1\u7684\u4e13\u5c5e\u7ec4\u4ef6\u3002 \u5c31\u50cf\u5728\u4f20\u7edfView\u7cfb\u7edf\u4e2d\uff0c\u5f53 LinearLayout \u7b49\u57fa\u7840\u5e03\u5c40\u65e0\u6cd5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 measure \u4e0e layout \u6765\u8fbe\u6210\u4f60\u7684\u671f\u671b\u3002Compose \u6cbf\u7528\u4e86\u8fd9\u4e00\u7406\u5ff5\uff0c\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\u5982\u679c Compose \u5185\u7f6e\u7ec4\u4ef6\u53ef\u80fd\u65e0\u6cd5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u5b9a\u5236\u6d4b\u91cf\u4e0e\u5e03\u5c40\u8fc7\u7a0b\u6765\u5b8c\u6210\u9700\u6c42\u3002\u4e8b\u5b9e\u4e0a\uff0cCompose \u5185\u7f6e\u7ec4\u4ef6\u4e5f\u662f\u901a\u8fc7\u5b9a\u5236 Layout \u6765\u8fbe\u6210\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u5c01\u88c5\u3002 \u5728\u5b66\u4e60\u5982\u4f55\u5b9a\u5236 Layout \u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3\u4e0b Compose \u7684\u5e03\u5c40\u539f\u7406\u3002","title":"\u6982\u8ff0"},{"location":"layout/custom_layout/#compose","text":"composable \u88ab\u8c03\u7528\u65f6\u4f1a\u5c06\u81ea\u8eab\u5305\u542b\u7684UI\u5143\u7d20\u6dfb\u52a0\u5230UI\u6811\u4e2d\u5e76\u5728\u5c4f\u5e55\u4e0a\u88ab\u6e32\u67d3\u51fa\u6765\u3002\u6bcf\u4e2a UI \u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u7236\u5143\u7d20\uff0c\u53ef\u80fd\u4f1a\u5305\u542b\u96f6\u81f3\u591a\u4e2a\u5b50\u5143\u7d20\u3002\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u76f8\u5bf9\u5176\u7236\u5143\u7d20\u7684\u5185\u90e8\u4f4d\u7f6e\u548c\u5c3a\u5bf8\u3002 \u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u88ab\u8981\u6c42\u6839\u636e\u7236\u5143\u7d20\u7684\u7ea6\u675f\u6765\u8fdb\u884c\u81ea\u6211\u6d4b\u91cf(\u7c7b\u4f3c\u4f20\u7edf View \u4e2d\u7684 MeasureSpec )\uff0c\u7ea6\u675f\u4e2d\u5305\u542b\u4e86\u7236\u5143\u7d20\u5141\u8bb8\u5b50\u5143\u7d20\u7684\u6700\u5927\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u548c\u6700\u5c0f\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\uff0c\u5f53\u7236\u5143\u7d20\u60f3\u8981\u5f3a\u5236\u5b50\u5143\u7d20\u5bbd\u9ad8\u4e3a\u56fa\u5b9a\u503c\u65f6\uff0c\u5176\u5bf9\u5e94\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u5c31\u662f\u76f8\u540c\u7684\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u5305\u542b\u591a\u4e2a\u5b50\u5143\u7d20\u7684UI\u5143\u7d20\uff0c\u9700\u8981\u6d4b\u91cf\u6bcf\u4e00\u4e2a\u5b50\u5143\u7d20\u4ece\u800c\u786e\u5b9a\u5f53\u524dUI\u5143\u7d20\u81ea\u8eab\u7684\u5927\u5c0f\u3002\u5e76\u4e14\u5728\u6bcf\u4e2a\u5b50\u5143\u7d20\u81ea\u6211\u6d4b\u91cf\u540e\uff0c\u5f53\u524dUI\u5143\u7d20\u53ef\u4ee5\u6839\u636e\u5176\u6240\u9700\u8981\u7684\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8fdb\u884c\u5728\u81ea\u5df1\u5185\u90e8\u8fdb\u884c\u653e\u7f6e Compose UI \u4e0d\u5141\u8bb8\u591a\u6b21\u6d4b\u91cf \uff0c\u5f53\u524dUI\u5143\u7d20\u7684\u6bcf\u4e00\u4e2a\u5b50\u5143\u7d20\u5747\u4e0d\u80fd\u88ab\u91cd\u590d\u8fdb\u884c\u6d4b\u91cf\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f \u6bcf\u4e2a\u5b50\u5143\u7d20\u53ea\u5141\u8bb8\u88ab\u6d4b\u91cf\u4e00\u6b21 \u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4ec0\u4e48\uff1f\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\u3002\u5728\u4f20\u7edf View \u7cfb\u7edf\u4e2d\u4e00\u4e2a UI \u5143\u7d20\u5141\u8bb8\u591a\u6b21\u6d4b\u91cf\u5b50\u5143\u7d20\uff0c\u6211\u4eec\u5047\u8bbe\u5bf9\u5b50\u5143\u7d20\u6d4b\u91cf\u4e24\u6b21\uff0c\u800c\u8be5\u5b50\u5143\u7d20\u53ef\u80fd\u53c8\u5bf9\u5176\u5b50\u5143\u7d20\u53c8\u6d4b\u91cf\u4e86\u4e24\u6b21\uff0c\u603b\u4f53\u4e0a\u5f53\u524d UI \u5143\u7d20\u91cd\u65b0\u6d4b\u91cf\u4e00\u6b21\uff0c\u5219\u5b59\u5b50\u5143\u7d20\u5c31\u9700\u8981\u6d4b\u91cf\u56db\u6b21\uff0c\u6d4b\u91cf\u6b21\u6570\u4f1a\u968f\u7740\u6df1\u5ea6\u800c\u6307\u6570\u7ea7\u4e0a\u5347\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u90a3\u4e48\u4e00\u6b21\u5e03\u5c40\u6574\u9897 UI \u6811\u90fd\u9700\u8981\u505a\u5927\u91cf\u7684\u5de5\u4f5c\uff0c\u5f88\u96be\u4fdd\u6301\u5e94\u7528\u7a0b\u5e8f\u7684\u826f\u597d\u6027\u80fd\u3002 \u4e3a\u907f\u514d\u4f20\u7edf View \u7cfb\u7edf\u6d4b\u91cf\u5e03\u5c40\u7684\u6027\u80fd\u9677\u9631\uff0cCompose \u9650\u5236\u4e86\u6bcf\u4e2a\u5b50\u5143\u7d20\u7684\u6d4b\u91cf\u6b21\u6570\uff0c\u53ef\u4ee5\u9ad8\u6548\u5904\u7406\u6df1\u5ea6\u6bd4\u8f83\u5927\u7684 UI \u6811(\u6781\u7aef\u60c5\u51b5\u662f\u9000\u5316\u6210\u94fe\u8868\u7684\u6811\u5f62\u7ed3\u6784)\u3002\u4f46\u662f\u5728\u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u591a\u6b21\u6d4b\u91cf\u5b50\u5143\u7d20\u662f\u6709\u610f\u4e49\u7684\uff0c\u6211\u4eec\u662f\u9700\u8981\u83b7\u53d6\u5230\u5b50\u5143\u7d20\u591a\u6b21\u6d4b\u91cf\u7684\u4fe1\u606f\u7684\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u6709\u529e\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u8ba8\u8bba\u3002","title":"Compose \u5e03\u5c40\u539f\u7406"},{"location":"layout/custom_layout/#layout-modifier","text":"\u4f7f\u7528 Modifier.layout() \u624b\u52a8\u63a7\u5236\u5143\u7d20\u7684\u6d4b\u91cf\u548c\u5e03\u5c40\u3002\u901a\u5e38 layout \u4fee\u9970\u7b26\u7684\u4f7f\u7528\u65b9\u6cd5\u50cf\u4e0b\u9762\u8fd9\u6837\u3002 fun Modifier . customLayoutModifier (...) = Modifier . layout { measurable , constraints -> ... }) \u5f53\u4f7f\u7528 layout \u4fee\u9970\u7b26\u65f6\uff0c\u4f60\u4f20\u5165\u7684\u56de\u8c03 lambda \u9700\u8981\u5305\u542b\u4e24\u4e2a\u53c2\u6570\uff1ameasurable\u3001constraints measurable\uff1a\u5b50\u5143\u7d20\u7684\u6d4b\u91cf\u53e5\u67c4\uff0c\u901a\u8fc7\u63d0\u4f9b\u7684api\u5b8c\u6210\u6d4b\u91cf\u4e0e\u5e03\u5c40\u8fc7\u7a0b constraints: \u5b50\u5143\u7d20\u7684\u6d4b\u91cf\u7ea6\u675f\uff0c\u5305\u62ec\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u3002","title":"\u4f7f\u7528 Layout Modifier"},{"location":"layout/custom_layout/#layout-modifier_1","text":"\u6709\u65f6\u4f60\u60f3\u5728\u5c4f\u5e55\u4e0a\u5c55\u793a\u4e00\u6bb5\u6587\u672c\u4fe1\u606f\uff0c\u901a\u5e38\u4f60\u4f1a\u4f7f\u7528\u5230 Compose \u5185\u7f6e\u7684 Text \u7ec4\u4ef6\u3002\u5355\u5355\u663e\u793a\u6587\u672c\u662f\u4e0d\u591f\u7684\uff0c\u4f60\u5e0c\u671b\u6307\u5b9a Text \u9876\u90e8\u5230\u6587\u672c\u57fa\u7ebf\u7684\u9ad8\u5ea6\uff0c\u8ba9\u6587\u672c\u770b\u7684\u66f4\u81ea\u7136\u4e00\u4e9b\u3002\u4f7f\u7528\u5185\u7f6e\u7684 padding \u4fee\u9970\u7b26\u662f\u65e0\u6cd5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\u7684\uff0c\u4ed6\u53ea\u80fd\u6307\u5b9a Text \u9876\u90e8\u5230\u6587\u672c\u9876\u90e8\u7684\u9ad8\u5ea6\uff0c\u6b64\u65f6\u4f60\u5c31\u9700\u8981\u4f7f\u7528\u5230 layout \u4fee\u9970\u7b26\u4e86\u3002 \u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a firstBaselineToTop \u4fee\u9970\u7b26 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> ... } \u6b63\u5982\u6211\u4eec\u5728 Compose \u5e03\u5c40\u539f\u7406\u4e2d\u6240\u63d0\u5230\u7684\uff0c \u6bcf\u4e2a\u5b50\u5143\u7d20\u53ea\u5141\u8bb8\u88ab\u6d4b\u91cf\u4e00\u6b21 \u3002 \u901a\u8fc7\u4f7f\u7528 measurable.measure(constraints) \u5b8c\u6210\u5b50\u5143\u7d20\u7684\u6d4b\u91cf\uff0c\u5982\u679c\u5c06 lambda \u7684 constraints \u76f4\u63a5\u4f20\u5165\u5219\u610f\u5473\u7740\uff1a\u4f60\u5c06\u7236\u5143\u7d20\u7ed9\u5f53\u524d\u5143\u7d20\u7684\u9650\u5236\u76f4\u63a5\u63d0\u4f9b\u4e86\u5f53\u524d\u5143\u7d20\u7684\u5b50\u5143\u7d20\uff0c\u81ea\u8eab\u6ca1\u6709\u589e\u52a0\u4efb\u4f55\u989d\u5916\u7684\u9650\u5236\u3002\u5b50\u5143\u7d20\u6d4b\u91cf\u7684\u7ed3\u679c\u88ab\u5305\u88c5\u5728\u4e00\u4e2a Placeable \u5b9e\u4f8b\u4e2d\uff0c\u53ef\u901a\u8fc7\u8be5 Placeable \u5b9e\u4f8b\u83b7\u53d6\u5b50\u5143\u7d20\u6d4b\u91cf\u7ed3\u679c\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5f53\u524d Text \u5143\u7d20\u4e5f\u4e0d\u5bf9\u5b50\u5143\u7d20\u8fdb\u884c\u989d\u5916\u9650\u5236\u3002 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> val placeable = measurable . measure ( constraints ) ... } \u73b0\u5728\u5b50\u5143\u7d20\u5df2\u7ecf\u5b8c\u6210\u4e86\u6d4b\u91cf\u6d41\u7a0b\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5f53\u524d\u5143\u7d20\u7684\u6253\u7b97\u5e76\u901a\u8fc7 layout(width, height) \u65b9\u6cd5\u5bf9\u5f53\u524d\u5143\u7d20\u7684\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8fdb\u884c\u6307\u5b9a\u3002\u5e76\u5c06\u5b50\u5143\u7d20\u7684\u5e03\u5c40\u6d41\u7a0b\u5199\u5165\u5728 layout(width, height) \u7684 lambda \u53c2\u6570\u4e2d\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5f53\u524d Text \u5143\u7d20\u7684\u5bbd\u5ea6\u5219\u662f\u6587\u672c\u5bbd\u5ea6\uff0c\u800c\u9ad8\u5ea6\u5219\u662f\u6211\u4eec\u6307\u5b9a\u7684 Text \u9876\u90e8\u5230\u6587\u672c\u57fa\u7ebf\u9ad8\u5ea6\u4e0e\u6587\u672c\u57fa\u7ebf\u5230 Text \u5e95\u90e8\u7684\u9ad8\u5ea6\u4e4b\u548c\u3002 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> val placeable = measurable . measure ( constraints ) check ( placeable [ FirstBaseline ] != AlignmentLine . Unspecified ) val firstBaseline = placeable [ FirstBaseline ] val placeableY = firstBaselineToTop . roundToPx () - firstBaseline val height = placeable . height + placeableY layout ( placeable . width , height ) { ... } } \u73b0\u5728\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 placeable.placeRelative(x, y) \u6765\u5b8c\u6210\u5b50\u5143\u7d20\u7684\u5e03\u5c40\u6d41\u7a0b\uff0c\u8fd9\u662f\u5fc5\u8981\u7684\u3002 placeRelative \u4f1a\u6839\u636e\u5f53\u524d layoutDirection \u81ea\u52a8\u8c03\u6574\u5b50\u5143\u7d20\u7684\u4f4d\u7f6e\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u5f53\u524d\u5b50\u5143\u7d20\u7684\u6a2a\u5411\u5750\u6807\u76f8\u5bf9\u5f53\u524d\u5143\u7d20\u4e3a\u96f6\uff0c\u800c\u7eb5\u5411\u5750\u6807\u5219\u4e3a Text \u7ec4\u4ef6\u9876\u90e8\u5230\u6587\u672c\u9876\u90e8\u7684\u8ddd\u79bb\u3002 fun Modifier . firstBaselineToTop ( firstBaselineToTop : Dp ) = Modifier . layout { measurable , constraints -> ... val placeableY = firstBaselineToTop . roundToPx () - firstBaseline val height = placeable . height + placeableY layout ( placeable . width , height ) { placeable . placeRelative ( 0 , placeableY ) } } \u4e3a\u9884\u89c8\u5e03\u5c40\u7ed3\u679c\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u9884\u89c8\u89c6\u56fe\u3002 @Preview @Composable fun TextWithPaddingToBaselinePreview () { LayoutsCodelabTheme { Text ( \"Hi there!\" , Modifier . firstBaselineToTop ( 24. dp )) } } @Preview @Composable fun TextWithNormalPaddingPreview () { LayoutsCodelabTheme { Text ( \"Hi there!\" , Modifier . padding ( top = 24. dp )) } } \u9884\u89c8\u6548\u679c","title":"Layout Modifier \u4f7f\u7528\u793a\u4f8b"},{"location":"layout/custom_layout/#layout-composable","text":"Layout Modifier \u4f1a\u5c06\u5f53\u524d\u5143\u7d20\u7684\u6240\u6709\u5b50\u5143\u7d20\u89c6\u4f5c\u4e3a\u6574\u4f53\u8fdb\u884c\u7edf\u4e00\u7684\u6d4b\u91cf\u4e0e\u5e03\u5c40\uff0c\u591a\u9002\u7528\u4e8e\u7edf\u4e00\u5904\u7406\u7684\u573a\u666f\u3002\u7136\u800c\u6211\u4eec\u6709\u65f6\u662f\u9700\u8981\u7cbe\u7ec6\u5316\u6d4b\u91cf\u5e03\u5c40\u6bcf\u4e00\u4e2a\u5b50\u7ec4\u4ef6\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u8fdb\u884c\u5b8c\u5168\u7684\u81ea\u5b9a\u4e49 Layout\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u4f20\u7edf View \u7cfb\u7edf\u4e2d\u5b9a\u5236 View \u4e0e ViewGroup \u6d4b\u91cf\u5e03\u5c40\u6d41\u7a0b\u7684\u533a\u522b\u3002\u5bf9\u4e8e\u5b9a\u5236 \u201cViewGroup\u201d \u7684\u573a\u666f\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528 Layout Composable \u4e86\u3002\u9996\u5148\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a Layout Composable\u3002 @Composable fun CustomLayout ( modifier : Modifier = Modifier , // custom layout attributes content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> // measure and position children given constraints logic here } } \u53ef\u4ee5\u770b\u5230\uff0cLayout \u9700\u8981\u586b\u5199\u4e09\u4e2a\u53c2\u6570\uff1amodifier\uff0ccontent\uff0cmeasurePolicy modifier \uff1a\u7531\u5916\u90e8\u4f20\u5165\u7684\u4fee\u9970\u7b26\uff0c\u4f1a\u51b3\u5b9a\u8be5 UI \u5143\u7d20\u7684 constraints content \uff1a\u5728 content \u4e2d\u58f0\u660e\u6240\u6709\u5b50\u5143\u7d20\u4fe1\u606f measurePolicy \uff1a\u9ed8\u8ba4\u573a\u666f\u4e0b\u53ea\u5b9e\u73b0 measure \u5373\u53ef\uff0c\u4e0a\u9762\u793a\u4f8b\u4e2d\u6700\u540e\u4f20\u5165\u7684 lambda \u5c31\u662f measure \u7684\u5b9e\u73b0\u3002\u5f53\u4f60\u60f3\u8981\u4e3a\u4f60\u7684 Layout Composable \u9002\u914d Intrinsics \u65f6(\u5b98\u65b9\u4e2d\u6587\u7ffb\u8bd1\u4e3a\u56fa\u6709\u7279\u6027\u6d4b\u91cf)\uff0c\u5219\u9700\u8981\u91cd\u5199 minIntrinsicWidth \u3001 minIntrinsicHeight \u3001 maxIntrinsicWidth \u3001 maxIntrinsicHeight \u65b9\u6cd5\uff0c\u6709\u5173\u4e8e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u6587\u7ae0\u540e\u7eed\u4f1a\u66f4\u65b0\uff0c\u8bf7\u6301\u7eed\u5173\u6ce8\u3002","title":"\u4f7f\u7528 Layout Composable"},{"location":"layout/custom_layout/#layout-composable_1","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Layout Composable \u5b9a\u5236\u4e00\u4e2a\u81ea\u5df1\u4e13\u5c5e\u7684 Column\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u58f0\u660e\u8fd9\u4e2a Composable\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> // measure and position children given constraints logic here } } \u548c Layout Modifier \u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6240\u6709\u5b50\u7ec4\u4ef6\u8fdb\u884c\u4e00\u6b21\u6d4b\u91cf\u3002 \u5207\u8bb0\uff0c\u6bcf\u4e2a\u5b50\u5143\u7d20\u53ea\u5141\u8bb8\u88ab\u6d4b\u91cf\u4e00\u6b21 \u3002 \u4e0e Layout Modifier \u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u91cc\u7684 measurables \u662f\u4e00\u4e2a List\uff0c\u800c Layout Modifier \u5219\u53ea\u662f\u4e00\u4e2a measurable\uff0c\u56e0\u4e3a\u4ed6\u5c06\u6240\u6709\u5b50\u5143\u7d20\u770b\u4f5c\u4e86\u4e00\u4e2a\u6574\u4f53\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u4ecd\u7136\u4e0d\u5bf9\u5b50\u5143\u7d20\u8fdb\u884c\u989d\u5916\u9650\u5236\uff0c\u6700\u7ec8\u5c06\u6bcf\u6b21\u6d4b\u91cf\u7684\u7ed3\u679c\u4fdd\u5b58\u5230 placeables \u8fd9\u4e2a List \u4e2d\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> val placeables = measurables . map { measurable -> // Measure each child measurable . measure ( constraints ) } } } \u73b0\u5728\u5728\u5c06\u8fd9\u4e9b\u5b50\u5143\u7d20\u5e03\u5c40\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5f53\u524d\u5b9a\u5236 column \u6240\u5e94\u8be5\u5360\u7528\u7684\u5c4f\u5e55\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u3002\u8fd9\u6837\u4e3a\u4e86\u51fa\u4e8e\u7b80\u5355\u8003\u8651\uff0c\u9009\u62e9\u5c06\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a\u5176\u7236\u5143\u7d20\u6240\u5141\u8bb8\u7684\u6700\u5927\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6\u3002\u4e0e Layout Modifier \u4e00\u6837\u901a\u8fc7 layout(width, height) \u65b9\u6cd5\u5bf9\u5f53\u524d\u5143\u7d20\u7684\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u8fdb\u884c\u6307\u5b9a\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> ... layout ( constraints . maxWidth , constraints . maxHeight ) { // Place children } } } \u5177\u4f53\u5b50\u5143\u7d20\u7684\u5e03\u5c40\u4e5f\u4e0e Layout Modifier \u662f\u76f8\u540c\u7684\u3002\u4f5c\u4e3a Column \u662f\u9700\u8981\u5c06\u5b50\u5143\u7d20\u8fdb\u884c\u5782\u76f4\u6392\u5217\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ec5\u9700\u6307\u5b9a\u6bcf\u4e00\u4e2a\u5b50\u5143\u7d20\u7684\u9876\u90e8\u76f8\u5bf9\u4f4d\u7f6e\u5373\u53ef\u3002 @Composable fun MyOwnColumn ( modifier : Modifier = Modifier , content : @Composable () -> Unit ) { Layout ( modifier = modifier , content = content ) { measurables , constraints -> val placeables = measurables . map { measurable -> measurable . measure ( constraints ) } var yPosition = 0 layout ( constraints . maxWidth , constraints . maxHeight ) { placeables . forEach { placeable -> placeable . placeRelative ( x = 0 , y = yPosition ) yPosition += placeable . height } } } } \u4e3a\u9884\u89c8\u5e03\u5c40\u7ed3\u679c\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u9884\u89c8\u89c6\u56fe\uff0c\u521b\u5efa\u81ea\u5df1\u5b9a\u5236\u7684 Column\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5b50\u5143\u7d20\u3002 @Composable fun BodyContent ( modifier : Modifier = Modifier ) { MyOwnColumn ( modifier . padding ( 8. dp )) { Text ( \"MyOwnColumn\" ) Text ( \"places items\" ) Text ( \"vertically.\" ) Text ( \"We've done it by hand!\" ) } } \u9884\u89c8\u6548\u679c","title":"Layout Composable \u4f7f\u7528\u793a\u4f8b"},{"location":"layout/intrinsic/","text":"\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u662f\u4ec0\u4e48 \u5728 \u81ea\u5b9a\u4e49Layout \u4e2d\u6211\u4eec\u63d0\u5230 Compose \u5e03\u5c40\u539f\u7406\uff0cCompose \u4e2d\u7684\u6bcf\u4e2a UI \u7ec4\u4ef6\u662f\u4e0d\u5141\u8bb8\u591a\u6b21\u8fdb\u884c\u6d4b\u91cf\u7684\uff0c\u591a\u6b21\u6d4b\u91cf\u5728\u8fd0\u884c\u65f6\u4f1a\u629b\u5f02\u5e38\uff0c\u7981\u6b62\u591a\u6b21\u6d4b\u91cf\u7684\u597d\u5904\u662f\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u4f46\u5728\u5f88\u591a\u573a\u666f\u4e2d\u591a\u6b21\u6d4b\u91cf\u5b50 UI \u7ec4\u4ef6\u662f\u6709\u610f\u4e49\u7684\u3002\u5728 Jetpack Compose \u4ee3\u7801\u5b9e\u9a8c\u5ba4\u4e2d\u5c31\u63d0\u4f9b\u4e86\u8fd9\u6837\u4e00\u79cd\u573a\u666f\uff0c\u6211\u4eec\u5e0c\u671b\u4e2d\u95f4\u5206\u5272\u7ebf\u9ad8\u5ea6\u4e0e\u4e24\u8fb9\u6587\u6848\u9ad8\u7684\u4e00\u8fb9\u4fdd\u6301\u76f8\u7b49\u3002 \u4e3a\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\uff0c\u5b98\u65b9\u6240\u63d0\u4f9b\u7684\u8bbe\u8ba1\u65b9\u6848\u662f\u5e0c\u671b\u7236\u7ec4\u4ef6\u53ef\u4ee5\u9884\u5148\u83b7\u53d6\u5230\u4e24\u8fb9\u7684\u6587\u6848\u7ec4\u4ef6\u9ad8\u5ea6\u4fe1\u606f\uff0c\u7136\u540e\u8ba1\u7b97\u4e24\u8fb9\u9ad8\u5ea6\u7684\u6700\u5927\u503c\u5373\u53ef\u786e\u5b9a\u5f53\u524d\u7236\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u503c\uff0c\u6b64\u65f6\u4ec5\u9700\u5c06\u5206\u5272\u7ebf\u9ad8\u5ea6\u503c\u94fa\u6ee1\u6574\u4e2a\u7236\u7ec4\u4ef6\u5373\u53ef\u3002 \u4e3a\u4e86\u5b9e\u73b0\u7236\u7ec4\u4ef6\u9884\u5148\u83b7\u53d6\u6587\u6848\u7ec4\u4ef6\u9ad8\u5ea6\u4fe1\u606f\u4ece\u800c\u786e\u5b9a\u81ea\u8eab\u7684\u9ad8\u5ea6\u4fe1\u606f\uff0cCompose \u4e3a\u5f00\u53d1\u8005\u4eec\u63d0\u4f9b\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u673a\u5236\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u5728\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u6b63\u5f0f\u6d4b\u91cf\u524d\u80fd\u83b7\u53d6\u5230\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u7684\u5bbd\u9ad8\u7b49\u4fe1\u606f\u3002 \u5728\u57fa\u7840\u7ec4\u4ef6\u4e2d\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf \u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u524d\u63d0\u662f\u5f53\u524d\u4f5c\u7528\u7684 Layout \u9700\u8981\u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u76ee\u524d\u8bb8\u591a\u57fa\u7840\u7ec4\u4ef6\u5df2\u7ecf\u5b8c\u6210\u5bf9\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u9002\u914d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u5728\u4e0a\u9762\u6240\u63d0\u5230\u7684\u4f8b\u5b50\u4e2d\u7236\u7ec4\u4ef6\u6240\u63d0\u4f9b\u7684\u80fd\u529b\u4f7f\u7528\u57fa\u7840\u7ec4\u4ef6\u4e2d\u7684 Row \u7ec4\u4ef6\u5373\u53ef\u627f\u62c5\uff0c\u6211\u4eec\u4ec5\u9700\u4e3a Row \u7ec4\u4ef6\u9ad8\u5ea6\u8bbe\u7f6e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u5373\u53ef\u3002\u6211\u4eec\u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \u5373\u53ef\u4e3a\u9ad8\u5ea6\u8bbe\u7f6e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u3002 @Composable fun TwoTexts ( modifier : Modifier = Modifier , text1 : String , text2 : String ) { Row ( modifier = modifier . height ( IntrinsicSize . Min )) { // I'm here Text ( modifier = Modifier . weight ( 1f ) . padding ( start = 4. dp ) . wrapContentWidth ( Alignment . Start ), text = text1 ) Divider ( color = Color . Black , modifier = Modifier . fillMaxHeight (). width ( 1. dp )) Text ( modifier = Modifier . weight ( 1f ) . padding ( end = 4. dp ) . wrapContentWidth ( Alignment . End ), text = text2 ) } } @Preview @Composable fun TwoTextsPreview () { LayoutsCodelabTheme { Surface { TwoTexts ( text1 = \"Hi\" , text2 = \"there\" ) } } } \u901a\u8fc7\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u5373\u53ef\u5b8c\u6210\u4e0a\u9762\u6240\u8ff0\u573a\u666f\u7684\u9700\u6c42\uff0c\u5c55\u793a\u6548\u679c\u5982\u56fe\u6240\u793a\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u6211\u4eec\u7684 Modifier \u4ec5\u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \u4e3a\u9ad8\u5ea6\u8bbe\u7f6e\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5bbd\u5ea6\u7684\u8bbe\u7f6e\u3002\u6b64\u65f6\u6240\u8868\u8fbe\u7684\u610f\u601d\u662f\uff0c\u5f53\u5bbd\u5ea6\u4e0d\u9650\u65f6\u901a\u8fc7\u5b50\u7ec4\u4ef6\u9884\u5148\u6d4b\u91cf\u7684\u5bbd\u9ad8\u4fe1\u606f\u6240\u80fd\u8ba1\u7b97\u7684\u9ad8\u5ea6\u6700\u5c11\u53ef\u4ee5\u662f\u591a\u5c11\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u8fdb\u884c\u5bbd\u5ea6\u7684\u8bbe\u7f6e\uff0c\u5f53\u5bbd\u5ea6\u53d7\u9650\u65f6\u901a\u8fc7\u5b50\u7ec4\u4ef6\u9884\u5148\u6d4b\u91cf\u7684\u5bbd\u9ad8\u4fe1\u606f\u6240\u80fd\u8ba1\u7b97\u7684\u9ad8\u5ea6\u6700\u5c11\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u53ef\u80fd\u4f60\u4e0d\u80fd\u7406\u89e3\u5bbd\u5ea6\u53d7\u9650\u53ef\u80fd\u5f71\u54cd\u9ad8\u5ea6\u8fd9\u4ef6\u4e8b\uff0c\u5176\u5b9e\u6211\u4eec\u5e38\u7528\u7684 Text \u7ec4\u4ef6\u5f53\u5bbd\u5ea6\u6536\u5230\u4e0d\u540c\u9650\u5236\u65f6\uff0c\u5176\u9ad8\u5ea6\u5c31\u662f\u4e0d\u4e00\u6837\u7684\u3002 Column ( Modifier . fillMaxSize ()) { Box ( Modifier . width ( 50. dp ). background ( Color . Red )) { Text ( text = \"Jetpack Compose is an excellent development tool\" ) } Box ( Modifier . width ( 100. dp ). background ( Color . Yellow )) { Text ( text = \"Jetpack Compose is an excellent development tool\" ) } } \u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879\uff1a \u4f60\u53ea\u80fd\u5bf9\u5df2\u7ecf\u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u80fd\u529b\u7684\u7ec4\u4ef6\u4f7f\u7528 IntrinsicSize.Min \u6216 IntrinsicSize.Max \uff0c\u5426\u5219\u7a0b\u5e8f\u4f1a\u8fd0\u884c\u65f6\u629b\u51fa\u5f02\u5e38\u800c\u5d29\u6e83\u3002\u5bf9\u4e8e\u6240\u6709\u81ea\u5b9a\u4e49 Layout \u7684\u5f00\u53d1\u8005\u6765\u8bf4\u5982\u679c\u652f\u6301\u4f7f\u7528\u8005\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u5219\u5fc5\u987b\u8981\u8fdb\u884c\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u9002\u914d\u5de5\u4f5c\u3002 \u4e3a\u81ea\u5b9a\u4e49 Layout \u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \u5373\u53ef\u4ea4\u7ed9 Row \u7ec4\u4ef6\u6839\u636e\u5b50\u7ec4\u4ef6\u7684\u4fe1\u606f\u8fdb\u884c\u8ba1\u7b97\u4ece\u800c\u786e\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u9ad8\u5ea6\u3002\u7136\u800c\u4e4b\u524d\u4ed6\u662f\u5982\u4f55\u64cd\u4f5c\u7684\uff0c\u5bf9\u4e8e\u5f00\u53d1\u8005\u800c\u8a00\u662f\u5b8c\u5168\u672a\u77e5\u7684\u3002\u6240\u4ee5\u672c\u6587\u5c06\u7ee7\u7eed\u6df1\u5165\u4e0b\u53bb\uff0c\u901a\u8fc7\u4e00\u4e2a\u81ea\u5b9a\u4e49 Layout \u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u8fc7\u7a0b\u6765\u6478\u6e05\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u6574\u4e2a\u6d41\u7a0b\u3002 \u91cd\u5199 MeasurePolicy \u56fa\u6709\u7279\u6027\u6d4b\u91cf\u76f8\u5173\u65b9\u6cd5 \u5bf9\u4e8e\u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684 Layout\uff0c\u6211\u4eec\u9700\u8981\u5bf9 MeasurePolicy \u4e0b\u7684\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u65b9\u6cd5\u8fdb\u884c\u91cd\u5199\u3002\u8fd8\u8bb0\u5f97 MeasurePolicy \u662f\u8c01\u5417\uff1f\u6ca1\u9519\u4ed6\u5c31\u662f\u6211\u4eec\u5728\u81ea\u5b9a\u4e49 Layout \u4e2d\u4f20\u5165\u7684\u6700\u540e\u7684 lambda SAM \u8f6c\u6362\u7684\u5b9e\u4f8b\u7c7b\u578b\u3002 @Composable inline fun Layout ( content : @Composable () -> Unit , modifier : Modifier = Modifier , measurePolicy : MeasurePolicy ) \u5bf9\u4e8e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u9002\u914d\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u9700\u6c42\u91cd\u5199\u4ee5\u4e0b\u56db\u4e2a\u65b9\u6cd5\u3002 \u4f7f\u7528 Modifier.width(IntrinsicSize.Max) \uff0c\u5219\u4f1a\u8c03\u7528 maxIntrinsicWidth \u65b9\u6cd5 \u4f7f\u7528 Modifier.width(IntrinsicSize.Min) \uff0c\u5219\u4f1a\u8c03\u7528 minIntrinsicWidth \u65b9\u6cd5 \u4f7f\u7528 Modifier.height(IntrinsicSize.Max) \uff0c\u5219\u4f1a\u8c03\u7528 maxIntrinsicHeight \u65b9\u6cd5 \u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \uff0c\u5219\u4f1a\u8c03\u7528 minIntrinsicHeight \u65b9\u6cd5 \u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879\uff1a \u5982\u679c\u54ea\u4e2a Modifier \u4f7f\u7528\u4e86, \u4f46\u5176\u5bf9\u5e94\u65b9\u6cd5\u6ca1\u6709\u91cd\u5199\u4ecd\u4f1a\u5d29\u6e83\u3002 \u5728 Layout \u58f0\u660e\u65f6\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u4f7f\u7528 SAM \u5f62\u5f0f\u4e86\uff0c\u800c\u662f\u8981\u89c4\u89c4\u77e9\u77e9\u5b9e\u73b0 MeasurePolicy @Composable fun IntrinsicRow ( modifier : Modifier , content : @Composable () -> Unit ){ Layout ( content = content , modifier = modifier , measurePolicy = object : MeasurePolicy { override fun MeasureScope . measure ( measurables : List < Measurable > , constraints : Constraints ): MeasureResult { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . minIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . maxIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . maxIntrinsicWidth ( measurables : List < IntrinsicMeasurable > , height : Int ): Int { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . minIntrinsicWidth ( measurables : List < IntrinsicMeasurable > , height : Int ): Int { TODO ( \"Not yet implemented\" ) } } ) } \u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\u4ec5\u4f7f\u7528\u4e86 Modifier.height(IntrinsicSize.Min) \uff0c\u51fa\u4e8e\u7b80\u5355\u8003\u8651\u4ec5\u91cd\u5199\u4e86 minIntrinsicHeight \u4ee5\u4f5c\u793a\u4f8b\u3002 minIntrinsicHeight \u4e0e maxIntrinsicHeight \u6709\u76f8\u540c\u7684\u4e24\u4e2a\u53c2\u6570 measurables \u4e0e width measurables \uff1a\u7c7b\u4f3c\u4e8e measure \u65b9\u6cd5\u7684 measurables\uff0c\u7528\u4e8e\u83b7\u53d6\u5b50\u7ec4\u4ef6\u7684\u5bbd\u9ad8\u4fe1\u606f\u3002 width \uff1a\u7236\u7ec4\u4ef6\u6240\u80fd\u63d0\u4f9b\u7684\u6700\u5927\u5bbd\u5ea6\uff08\u65e0\u8bba\u6b64\u65f6\u662f minIntrinsicHeight \u8fd8\u662f maxIntrinsicHeight \uff09 Modifier . widthIn ( 100. dp , 200. dp ) //\u5728\u6b64\u573a\u666f\u4e0bminIntrinsicHeight\u7684\u53c2\u6570width\u503c\u4e3a200.dp\u5bf9\u5e94\u7684px . height ( IntrinsicSize . Max ) \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528 maxIntrinsicHeight \u5373\u53ef\u83b7\u53d6\u5230\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u5728\u7ed9\u5b9a\u5bbd\u5ea6\u4e0b\u80fd\u591f\u4fdd\u8bc1\u6b63\u786e\u5c55\u793a\u7684\u6700\u5c0f\u9ad8\u5ea6\uff0c\u8fd9\u4e2a\u6b63\u786e\u5c55\u793a\u7684\u9ad8\u5ea6\u662f\u7531\u5b50\u7ec4\u4ef6\u6765\u4fdd\u8bc1\u7684\u3002\u518d\u5f97\u5230\u6240\u6709\u5b50\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u5373\u53ef\u8ba1\u7b97\u6700\u5927\u9ad8\u5ea6\u503c\uff0c\u6b64\u503c\u5c06\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7236\u7ec4\u4ef6\uff08\u4e5f\u5c31\u662f\u5f53\u524d\u81ea\u5b9a\u4e49Layout\uff09\u7684\u56fa\u5b9a\u9ad8\u5ea6\u3002 override fun IntrinsicMeasureScope . minIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { var maxHeight = 0 measurables . forEach { maxHeight = it . minIntrinsicHeight ( width ). coerceAtLeast ( maxHeight ) } return maxHeight } \u5728 Layout measure \u4e2d\u9002\u914d \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6240\u6709\u4f7f\u7528\u7684 Composable \u58f0\u660e\u51fa\u6765\u3002 IntrinsicRow ( modifier = Modifier . fillMaxWidth () . height ( IntrinsicSize . Min ) ) { Text ( text = \"Left\" , Modifier . wrapContentWidth ( Alignment . Start ). layoutId ( \"main\" )) Divider ( color = Color . Black , modifier = Modifier . width ( 4. dp ) . fillMaxHeight () . layoutId ( \"devider\" ) ) Text ( text = \"Right\" , Modifier . wrapContentWidth ( Alignment . End ). layoutId ( \"main\" )) } \u6b64\u65f6\uff0c\u7531\u4e8e\u58f0\u660e\u4e86 Modifier.fillMaxWidth() \uff0c\u5bfc\u81f4\u6211\u4eec\u81ea\u5b9a\u4e49 Layout \u5bbd\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u53c8\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u6b64\u65f6\u6211\u4eec\u81ea\u5b9a\u4e49 Layout \u7684\u9ad8\u5ea6\u4e5f\u662f\u56fa\u5b9a\u7684\u3002\u5177\u4f53\u8868\u73b0\u4e3a constraints \u53c2\u6570\u4e2d minWidth \u4e0e maxWidth \u76f8\u7b49\uff08\u5bbd\u5ea6\u56fa\u5b9a\uff09\uff0cminHeight \u4e0e maxHeight \u76f8\u7b49\uff08\u9ad8\u5ea6\u56fa\u5b9a\uff09\u3002 \u800c\u6211\u4eec\u5e0c\u671b Devider \u6d4b\u91cf\u7684\u5bbd\u5ea6\u4e0d\u5e94\u662f\u56fa\u5b9a\u4e0e\u7236\u7ec4\u4ef6\u76f8\u540c\uff0c\u800c\u662f\u8981\u6839\u636e\u5176\u81ea\u8eab\u58f0\u660e\u7684\u5bbd\u5ea6\uff0c\u4e5f\u5c31\u662f Modifier.width(4.dp) \uff0c\u6240\u4ee5\u6211\u4eec\u5bf9 Devider \u6d4b\u91cf\u4f7f\u7528\u7684 constraints \u8fdb\u884c\u4e86\u4fee\u6539\u3002\u5c06\u5176\u6700\u5c0f\u503c\u8bbe\u7f6e\u4e3a\u96f6\u3002 @Composable fun IntrinsicRow ( modifier : Modifier , content : @Composable () -> Unit ){ Layout ( content = content , modifier = modifier , measurePolicy = object : MeasurePolicy { override fun MeasureScope . measure ( measurables : List < Measurable > , constraints : Constraints ): MeasureResult { var devideConstraints = constraints . copy ( minWidth = 0 ) var mainPlaceables = measurables . filter { it . layoutId == \"main\" }. map { it . measure ( constraints ) } var devidePlaceable = measurables . first { it . layoutId == \"devider\" }. measure ( devideConstraints ) var midPos = constraints . maxWidth / 2 return layout ( constraints . maxWidth , constraints . maxHeight ) { mainPlaceables . forEach { it . placeRelative ( 0 , 0 ) } devidePlaceable . placeRelative ( midPos , 0 ) } } override fun IntrinsicMeasureScope . minIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { var maxHeight = 0 measurables . forEach { maxHeight = it . maxIntrinsicHeight ( width ). coerceAtLeast ( maxHeight ) } return maxHeight } } ) } \u6700\u7ec8\u6548\u679c\u5982\u4e0b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49 Layout \u9002\u914d\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u80fd\u529b\u3002 \u5bf9\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u601d\u8003 \u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u672c\u8d28\u5c31\u662f\u7236\u7ec4\u4ef6\u53ef\u5728\u6b63\u5f0f\u6d4b\u91cf\u5e03\u5c40\u524d\u9884\u5148\u83b7\u53d6\u5230\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u5bbd\u9ad8\u4fe1\u606f\u540e\u901a\u8fc7\u8ba1\u7b97\u6765\u786e\u5b9a\u81ea\u8eab\u7684\u56fa\u5b9a\u5bbd\u5ea6\u6216\u9ad8\u5ea6\uff0c\u4ece\u800c\u95f4\u63a5\u5f71\u54cd\u5230\u5176\u4e2d\u5305\u542b\u7684\u90e8\u5206\u5b50\u7ec4\u4ef6\u5e03\u5c40\u4fe1\u606f\u3002\u4e5f\u5c31\u662f\u8bf4\u5b50\u7ec4\u4ef6\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u5bbd\u9ad8\u4fe1\u606f\u4ece\u800c\u786e\u5b9a\u7236\u7ec4\u4ef6\u7684\u5bbd\u5ea6\u6216\u9ad8\u5ea6\uff0c\u4ece\u800c\u5f71\u54cd\u5176\u4ed6\u5b50\u7ec4\u4ef6\u5e03\u5c40\u3002\u5728\u6211\u4eec\u4f7f\u7528\u7684\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u6587\u6848\u5b50\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u786e\u5b9a\u4e86\u7236\u7ec4\u4ef6\u7684\u56fa\u5b9a\u9ad8\u5ea6\uff0c\u4ece\u800c\u95f4\u63a5\u786e\u5b9a\u4e86\u5206\u5272\u7ebf\u7684\u9ad8\u5ea6\u3002\u6b64\u65f6\u5b50\u7ec4\u4ef6\u8981\u901a\u8fc7\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u8fd9\u79cd\u65b9\u5f0f\uff0c\u901a\u8fc7\u7236\u7ec4\u4ef6\u800c\u5bf9\u5176\u4ed6\u5b50\u7ec4\u4ef6\u4ea7\u751f\u5f71\u54cd\uff0c\u7136\u800c\u5728\u6709\u4e9b\u573a\u666f\u4e0b\u6211\u4eec\u4e0d\u5e0c\u671b\u7236\u7ec4\u4ef6\u53c2\u4e0e\u5176\u4e2d\uff0c\u800c\u5e0c\u671b\u5b50\u7ec4\u4ef6\u95f4\u901a\u8fc7\u6d4b\u91cf\u7684\u5148\u540e\u987a\u5e8f\u76f4\u63a5\u76f8\u4e92\u5f71\u54cd\uff0cCompose \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 SubcomposeLayout \u6765\u5904\u7406\u8fd9\u7c7b\u5b50\u7ec4\u4ef6\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u7684\u573a\u666f\u3002\u7531\u4e8e\u672c\u6587\u7bc7\u5e45\u6709\u9650\uff0c\u6709\u5173\u4e8e SubcomposeLayout \u5185\u5bb9\u540e\u7eed\u4f1a\u7ee7\u7eed\u66f4\u65b0\uff0c\u8bf7\u6301\u7eed\u5173\u6ce8\u3002","title":"\u56fa\u6709\u7279\u6027\u6d4b\u91cf"},{"location":"layout/intrinsic/#_1","text":"\u5728 \u81ea\u5b9a\u4e49Layout \u4e2d\u6211\u4eec\u63d0\u5230 Compose \u5e03\u5c40\u539f\u7406\uff0cCompose \u4e2d\u7684\u6bcf\u4e2a UI \u7ec4\u4ef6\u662f\u4e0d\u5141\u8bb8\u591a\u6b21\u8fdb\u884c\u6d4b\u91cf\u7684\uff0c\u591a\u6b21\u6d4b\u91cf\u5728\u8fd0\u884c\u65f6\u4f1a\u629b\u5f02\u5e38\uff0c\u7981\u6b62\u591a\u6b21\u6d4b\u91cf\u7684\u597d\u5904\u662f\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u4f46\u5728\u5f88\u591a\u573a\u666f\u4e2d\u591a\u6b21\u6d4b\u91cf\u5b50 UI \u7ec4\u4ef6\u662f\u6709\u610f\u4e49\u7684\u3002\u5728 Jetpack Compose \u4ee3\u7801\u5b9e\u9a8c\u5ba4\u4e2d\u5c31\u63d0\u4f9b\u4e86\u8fd9\u6837\u4e00\u79cd\u573a\u666f\uff0c\u6211\u4eec\u5e0c\u671b\u4e2d\u95f4\u5206\u5272\u7ebf\u9ad8\u5ea6\u4e0e\u4e24\u8fb9\u6587\u6848\u9ad8\u7684\u4e00\u8fb9\u4fdd\u6301\u76f8\u7b49\u3002 \u4e3a\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\uff0c\u5b98\u65b9\u6240\u63d0\u4f9b\u7684\u8bbe\u8ba1\u65b9\u6848\u662f\u5e0c\u671b\u7236\u7ec4\u4ef6\u53ef\u4ee5\u9884\u5148\u83b7\u53d6\u5230\u4e24\u8fb9\u7684\u6587\u6848\u7ec4\u4ef6\u9ad8\u5ea6\u4fe1\u606f\uff0c\u7136\u540e\u8ba1\u7b97\u4e24\u8fb9\u9ad8\u5ea6\u7684\u6700\u5927\u503c\u5373\u53ef\u786e\u5b9a\u5f53\u524d\u7236\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u503c\uff0c\u6b64\u65f6\u4ec5\u9700\u5c06\u5206\u5272\u7ebf\u9ad8\u5ea6\u503c\u94fa\u6ee1\u6574\u4e2a\u7236\u7ec4\u4ef6\u5373\u53ef\u3002 \u4e3a\u4e86\u5b9e\u73b0\u7236\u7ec4\u4ef6\u9884\u5148\u83b7\u53d6\u6587\u6848\u7ec4\u4ef6\u9ad8\u5ea6\u4fe1\u606f\u4ece\u800c\u786e\u5b9a\u81ea\u8eab\u7684\u9ad8\u5ea6\u4fe1\u606f\uff0cCompose \u4e3a\u5f00\u53d1\u8005\u4eec\u63d0\u4f9b\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u673a\u5236\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u5728\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u6b63\u5f0f\u6d4b\u91cf\u524d\u80fd\u83b7\u53d6\u5230\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u7684\u5bbd\u9ad8\u7b49\u4fe1\u606f\u3002","title":"\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u662f\u4ec0\u4e48"},{"location":"layout/intrinsic/#_2","text":"\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u524d\u63d0\u662f\u5f53\u524d\u4f5c\u7528\u7684 Layout \u9700\u8981\u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u76ee\u524d\u8bb8\u591a\u57fa\u7840\u7ec4\u4ef6\u5df2\u7ecf\u5b8c\u6210\u5bf9\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u9002\u914d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u5728\u4e0a\u9762\u6240\u63d0\u5230\u7684\u4f8b\u5b50\u4e2d\u7236\u7ec4\u4ef6\u6240\u63d0\u4f9b\u7684\u80fd\u529b\u4f7f\u7528\u57fa\u7840\u7ec4\u4ef6\u4e2d\u7684 Row \u7ec4\u4ef6\u5373\u53ef\u627f\u62c5\uff0c\u6211\u4eec\u4ec5\u9700\u4e3a Row \u7ec4\u4ef6\u9ad8\u5ea6\u8bbe\u7f6e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u5373\u53ef\u3002\u6211\u4eec\u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \u5373\u53ef\u4e3a\u9ad8\u5ea6\u8bbe\u7f6e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u3002 @Composable fun TwoTexts ( modifier : Modifier = Modifier , text1 : String , text2 : String ) { Row ( modifier = modifier . height ( IntrinsicSize . Min )) { // I'm here Text ( modifier = Modifier . weight ( 1f ) . padding ( start = 4. dp ) . wrapContentWidth ( Alignment . Start ), text = text1 ) Divider ( color = Color . Black , modifier = Modifier . fillMaxHeight (). width ( 1. dp )) Text ( modifier = Modifier . weight ( 1f ) . padding ( end = 4. dp ) . wrapContentWidth ( Alignment . End ), text = text2 ) } } @Preview @Composable fun TwoTextsPreview () { LayoutsCodelabTheme { Surface { TwoTexts ( text1 = \"Hi\" , text2 = \"there\" ) } } } \u901a\u8fc7\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u5373\u53ef\u5b8c\u6210\u4e0a\u9762\u6240\u8ff0\u573a\u666f\u7684\u9700\u6c42\uff0c\u5c55\u793a\u6548\u679c\u5982\u56fe\u6240\u793a\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u6211\u4eec\u7684 Modifier \u4ec5\u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \u4e3a\u9ad8\u5ea6\u8bbe\u7f6e\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5bbd\u5ea6\u7684\u8bbe\u7f6e\u3002\u6b64\u65f6\u6240\u8868\u8fbe\u7684\u610f\u601d\u662f\uff0c\u5f53\u5bbd\u5ea6\u4e0d\u9650\u65f6\u901a\u8fc7\u5b50\u7ec4\u4ef6\u9884\u5148\u6d4b\u91cf\u7684\u5bbd\u9ad8\u4fe1\u606f\u6240\u80fd\u8ba1\u7b97\u7684\u9ad8\u5ea6\u6700\u5c11\u53ef\u4ee5\u662f\u591a\u5c11\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u8fdb\u884c\u5bbd\u5ea6\u7684\u8bbe\u7f6e\uff0c\u5f53\u5bbd\u5ea6\u53d7\u9650\u65f6\u901a\u8fc7\u5b50\u7ec4\u4ef6\u9884\u5148\u6d4b\u91cf\u7684\u5bbd\u9ad8\u4fe1\u606f\u6240\u80fd\u8ba1\u7b97\u7684\u9ad8\u5ea6\u6700\u5c11\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u53ef\u80fd\u4f60\u4e0d\u80fd\u7406\u89e3\u5bbd\u5ea6\u53d7\u9650\u53ef\u80fd\u5f71\u54cd\u9ad8\u5ea6\u8fd9\u4ef6\u4e8b\uff0c\u5176\u5b9e\u6211\u4eec\u5e38\u7528\u7684 Text \u7ec4\u4ef6\u5f53\u5bbd\u5ea6\u6536\u5230\u4e0d\u540c\u9650\u5236\u65f6\uff0c\u5176\u9ad8\u5ea6\u5c31\u662f\u4e0d\u4e00\u6837\u7684\u3002 Column ( Modifier . fillMaxSize ()) { Box ( Modifier . width ( 50. dp ). background ( Color . Red )) { Text ( text = \"Jetpack Compose is an excellent development tool\" ) } Box ( Modifier . width ( 100. dp ). background ( Color . Yellow )) { Text ( text = \"Jetpack Compose is an excellent development tool\" ) } } \u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879\uff1a \u4f60\u53ea\u80fd\u5bf9\u5df2\u7ecf\u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u80fd\u529b\u7684\u7ec4\u4ef6\u4f7f\u7528 IntrinsicSize.Min \u6216 IntrinsicSize.Max \uff0c\u5426\u5219\u7a0b\u5e8f\u4f1a\u8fd0\u884c\u65f6\u629b\u51fa\u5f02\u5e38\u800c\u5d29\u6e83\u3002\u5bf9\u4e8e\u6240\u6709\u81ea\u5b9a\u4e49 Layout \u7684\u5f00\u53d1\u8005\u6765\u8bf4\u5982\u679c\u652f\u6301\u4f7f\u7528\u8005\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u5219\u5fc5\u987b\u8981\u8fdb\u884c\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u9002\u914d\u5de5\u4f5c\u3002","title":"\u5728\u57fa\u7840\u7ec4\u4ef6\u4e2d\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf"},{"location":"layout/intrinsic/#layout","text":"\u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \u5373\u53ef\u4ea4\u7ed9 Row \u7ec4\u4ef6\u6839\u636e\u5b50\u7ec4\u4ef6\u7684\u4fe1\u606f\u8fdb\u884c\u8ba1\u7b97\u4ece\u800c\u786e\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u9ad8\u5ea6\u3002\u7136\u800c\u4e4b\u524d\u4ed6\u662f\u5982\u4f55\u64cd\u4f5c\u7684\uff0c\u5bf9\u4e8e\u5f00\u53d1\u8005\u800c\u8a00\u662f\u5b8c\u5168\u672a\u77e5\u7684\u3002\u6240\u4ee5\u672c\u6587\u5c06\u7ee7\u7eed\u6df1\u5165\u4e0b\u53bb\uff0c\u901a\u8fc7\u4e00\u4e2a\u81ea\u5b9a\u4e49 Layout \u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u8fc7\u7a0b\u6765\u6478\u6e05\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u6574\u4e2a\u6d41\u7a0b\u3002","title":"\u4e3a\u81ea\u5b9a\u4e49 Layout \u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf"},{"location":"layout/intrinsic/#measurepolicy","text":"\u5bf9\u4e8e\u9002\u914d\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684 Layout\uff0c\u6211\u4eec\u9700\u8981\u5bf9 MeasurePolicy \u4e0b\u7684\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u65b9\u6cd5\u8fdb\u884c\u91cd\u5199\u3002\u8fd8\u8bb0\u5f97 MeasurePolicy \u662f\u8c01\u5417\uff1f\u6ca1\u9519\u4ed6\u5c31\u662f\u6211\u4eec\u5728\u81ea\u5b9a\u4e49 Layout \u4e2d\u4f20\u5165\u7684\u6700\u540e\u7684 lambda SAM \u8f6c\u6362\u7684\u5b9e\u4f8b\u7c7b\u578b\u3002 @Composable inline fun Layout ( content : @Composable () -> Unit , modifier : Modifier = Modifier , measurePolicy : MeasurePolicy ) \u5bf9\u4e8e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u9002\u914d\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u9700\u6c42\u91cd\u5199\u4ee5\u4e0b\u56db\u4e2a\u65b9\u6cd5\u3002 \u4f7f\u7528 Modifier.width(IntrinsicSize.Max) \uff0c\u5219\u4f1a\u8c03\u7528 maxIntrinsicWidth \u65b9\u6cd5 \u4f7f\u7528 Modifier.width(IntrinsicSize.Min) \uff0c\u5219\u4f1a\u8c03\u7528 minIntrinsicWidth \u65b9\u6cd5 \u4f7f\u7528 Modifier.height(IntrinsicSize.Max) \uff0c\u5219\u4f1a\u8c03\u7528 maxIntrinsicHeight \u65b9\u6cd5 \u4f7f\u7528 Modifier.height(IntrinsicSize.Min) \uff0c\u5219\u4f1a\u8c03\u7528 minIntrinsicHeight \u65b9\u6cd5 \u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879\uff1a \u5982\u679c\u54ea\u4e2a Modifier \u4f7f\u7528\u4e86, \u4f46\u5176\u5bf9\u5e94\u65b9\u6cd5\u6ca1\u6709\u91cd\u5199\u4ecd\u4f1a\u5d29\u6e83\u3002 \u5728 Layout \u58f0\u660e\u65f6\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u4f7f\u7528 SAM \u5f62\u5f0f\u4e86\uff0c\u800c\u662f\u8981\u89c4\u89c4\u77e9\u77e9\u5b9e\u73b0 MeasurePolicy @Composable fun IntrinsicRow ( modifier : Modifier , content : @Composable () -> Unit ){ Layout ( content = content , modifier = modifier , measurePolicy = object : MeasurePolicy { override fun MeasureScope . measure ( measurables : List < Measurable > , constraints : Constraints ): MeasureResult { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . minIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . maxIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . maxIntrinsicWidth ( measurables : List < IntrinsicMeasurable > , height : Int ): Int { TODO ( \"Not yet implemented\" ) } override fun IntrinsicMeasureScope . minIntrinsicWidth ( measurables : List < IntrinsicMeasurable > , height : Int ): Int { TODO ( \"Not yet implemented\" ) } } ) } \u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\u4ec5\u4f7f\u7528\u4e86 Modifier.height(IntrinsicSize.Min) \uff0c\u51fa\u4e8e\u7b80\u5355\u8003\u8651\u4ec5\u91cd\u5199\u4e86 minIntrinsicHeight \u4ee5\u4f5c\u793a\u4f8b\u3002 minIntrinsicHeight \u4e0e maxIntrinsicHeight \u6709\u76f8\u540c\u7684\u4e24\u4e2a\u53c2\u6570 measurables \u4e0e width measurables \uff1a\u7c7b\u4f3c\u4e8e measure \u65b9\u6cd5\u7684 measurables\uff0c\u7528\u4e8e\u83b7\u53d6\u5b50\u7ec4\u4ef6\u7684\u5bbd\u9ad8\u4fe1\u606f\u3002 width \uff1a\u7236\u7ec4\u4ef6\u6240\u80fd\u63d0\u4f9b\u7684\u6700\u5927\u5bbd\u5ea6\uff08\u65e0\u8bba\u6b64\u65f6\u662f minIntrinsicHeight \u8fd8\u662f maxIntrinsicHeight \uff09 Modifier . widthIn ( 100. dp , 200. dp ) //\u5728\u6b64\u573a\u666f\u4e0bminIntrinsicHeight\u7684\u53c2\u6570width\u503c\u4e3a200.dp\u5bf9\u5e94\u7684px . height ( IntrinsicSize . Max ) \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528 maxIntrinsicHeight \u5373\u53ef\u83b7\u53d6\u5230\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u5728\u7ed9\u5b9a\u5bbd\u5ea6\u4e0b\u80fd\u591f\u4fdd\u8bc1\u6b63\u786e\u5c55\u793a\u7684\u6700\u5c0f\u9ad8\u5ea6\uff0c\u8fd9\u4e2a\u6b63\u786e\u5c55\u793a\u7684\u9ad8\u5ea6\u662f\u7531\u5b50\u7ec4\u4ef6\u6765\u4fdd\u8bc1\u7684\u3002\u518d\u5f97\u5230\u6240\u6709\u5b50\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u5373\u53ef\u8ba1\u7b97\u6700\u5927\u9ad8\u5ea6\u503c\uff0c\u6b64\u503c\u5c06\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7236\u7ec4\u4ef6\uff08\u4e5f\u5c31\u662f\u5f53\u524d\u81ea\u5b9a\u4e49Layout\uff09\u7684\u56fa\u5b9a\u9ad8\u5ea6\u3002 override fun IntrinsicMeasureScope . minIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { var maxHeight = 0 measurables . forEach { maxHeight = it . minIntrinsicHeight ( width ). coerceAtLeast ( maxHeight ) } return maxHeight }","title":"\u91cd\u5199 MeasurePolicy \u56fa\u6709\u7279\u6027\u6d4b\u91cf\u76f8\u5173\u65b9\u6cd5"},{"location":"layout/intrinsic/#layout-measure","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6240\u6709\u4f7f\u7528\u7684 Composable \u58f0\u660e\u51fa\u6765\u3002 IntrinsicRow ( modifier = Modifier . fillMaxWidth () . height ( IntrinsicSize . Min ) ) { Text ( text = \"Left\" , Modifier . wrapContentWidth ( Alignment . Start ). layoutId ( \"main\" )) Divider ( color = Color . Black , modifier = Modifier . width ( 4. dp ) . fillMaxHeight () . layoutId ( \"devider\" ) ) Text ( text = \"Right\" , Modifier . wrapContentWidth ( Alignment . End ). layoutId ( \"main\" )) } \u6b64\u65f6\uff0c\u7531\u4e8e\u58f0\u660e\u4e86 Modifier.fillMaxWidth() \uff0c\u5bfc\u81f4\u6211\u4eec\u81ea\u5b9a\u4e49 Layout \u5bbd\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u53c8\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\uff0c\u6b64\u65f6\u6211\u4eec\u81ea\u5b9a\u4e49 Layout \u7684\u9ad8\u5ea6\u4e5f\u662f\u56fa\u5b9a\u7684\u3002\u5177\u4f53\u8868\u73b0\u4e3a constraints \u53c2\u6570\u4e2d minWidth \u4e0e maxWidth \u76f8\u7b49\uff08\u5bbd\u5ea6\u56fa\u5b9a\uff09\uff0cminHeight \u4e0e maxHeight \u76f8\u7b49\uff08\u9ad8\u5ea6\u56fa\u5b9a\uff09\u3002 \u800c\u6211\u4eec\u5e0c\u671b Devider \u6d4b\u91cf\u7684\u5bbd\u5ea6\u4e0d\u5e94\u662f\u56fa\u5b9a\u4e0e\u7236\u7ec4\u4ef6\u76f8\u540c\uff0c\u800c\u662f\u8981\u6839\u636e\u5176\u81ea\u8eab\u58f0\u660e\u7684\u5bbd\u5ea6\uff0c\u4e5f\u5c31\u662f Modifier.width(4.dp) \uff0c\u6240\u4ee5\u6211\u4eec\u5bf9 Devider \u6d4b\u91cf\u4f7f\u7528\u7684 constraints \u8fdb\u884c\u4e86\u4fee\u6539\u3002\u5c06\u5176\u6700\u5c0f\u503c\u8bbe\u7f6e\u4e3a\u96f6\u3002 @Composable fun IntrinsicRow ( modifier : Modifier , content : @Composable () -> Unit ){ Layout ( content = content , modifier = modifier , measurePolicy = object : MeasurePolicy { override fun MeasureScope . measure ( measurables : List < Measurable > , constraints : Constraints ): MeasureResult { var devideConstraints = constraints . copy ( minWidth = 0 ) var mainPlaceables = measurables . filter { it . layoutId == \"main\" }. map { it . measure ( constraints ) } var devidePlaceable = measurables . first { it . layoutId == \"devider\" }. measure ( devideConstraints ) var midPos = constraints . maxWidth / 2 return layout ( constraints . maxWidth , constraints . maxHeight ) { mainPlaceables . forEach { it . placeRelative ( 0 , 0 ) } devidePlaceable . placeRelative ( midPos , 0 ) } } override fun IntrinsicMeasureScope . minIntrinsicHeight ( measurables : List < IntrinsicMeasurable > , width : Int ): Int { var maxHeight = 0 measurables . forEach { maxHeight = it . maxIntrinsicHeight ( width ). coerceAtLeast ( maxHeight ) } return maxHeight } } ) } \u6700\u7ec8\u6548\u679c\u5982\u4e0b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49 Layout \u9002\u914d\u4e86\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u80fd\u529b\u3002","title":"\u5728 Layout measure \u4e2d\u9002\u914d"},{"location":"layout/intrinsic/#_3","text":"\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u672c\u8d28\u5c31\u662f\u7236\u7ec4\u4ef6\u53ef\u5728\u6b63\u5f0f\u6d4b\u91cf\u5e03\u5c40\u524d\u9884\u5148\u83b7\u53d6\u5230\u6bcf\u4e2a\u5b50\u7ec4\u4ef6\u5bbd\u9ad8\u4fe1\u606f\u540e\u901a\u8fc7\u8ba1\u7b97\u6765\u786e\u5b9a\u81ea\u8eab\u7684\u56fa\u5b9a\u5bbd\u5ea6\u6216\u9ad8\u5ea6\uff0c\u4ece\u800c\u95f4\u63a5\u5f71\u54cd\u5230\u5176\u4e2d\u5305\u542b\u7684\u90e8\u5206\u5b50\u7ec4\u4ef6\u5e03\u5c40\u4fe1\u606f\u3002\u4e5f\u5c31\u662f\u8bf4\u5b50\u7ec4\u4ef6\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u5bbd\u9ad8\u4fe1\u606f\u4ece\u800c\u786e\u5b9a\u7236\u7ec4\u4ef6\u7684\u5bbd\u5ea6\u6216\u9ad8\u5ea6\uff0c\u4ece\u800c\u5f71\u54cd\u5176\u4ed6\u5b50\u7ec4\u4ef6\u5e03\u5c40\u3002\u5728\u6211\u4eec\u4f7f\u7528\u7684\u65b9\u6848\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u6587\u6848\u5b50\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u786e\u5b9a\u4e86\u7236\u7ec4\u4ef6\u7684\u56fa\u5b9a\u9ad8\u5ea6\uff0c\u4ece\u800c\u95f4\u63a5\u786e\u5b9a\u4e86\u5206\u5272\u7ebf\u7684\u9ad8\u5ea6\u3002\u6b64\u65f6\u5b50\u7ec4\u4ef6\u8981\u901a\u8fc7\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u8fd9\u79cd\u65b9\u5f0f\uff0c\u901a\u8fc7\u7236\u7ec4\u4ef6\u800c\u5bf9\u5176\u4ed6\u5b50\u7ec4\u4ef6\u4ea7\u751f\u5f71\u54cd\uff0c\u7136\u800c\u5728\u6709\u4e9b\u573a\u666f\u4e0b\u6211\u4eec\u4e0d\u5e0c\u671b\u7236\u7ec4\u4ef6\u53c2\u4e0e\u5176\u4e2d\uff0c\u800c\u5e0c\u671b\u5b50\u7ec4\u4ef6\u95f4\u901a\u8fc7\u6d4b\u91cf\u7684\u5148\u540e\u987a\u5e8f\u76f4\u63a5\u76f8\u4e92\u5f71\u54cd\uff0cCompose \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 SubcomposeLayout \u6765\u5904\u7406\u8fd9\u7c7b\u5b50\u7ec4\u4ef6\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u7684\u573a\u666f\u3002\u7531\u4e8e\u672c\u6587\u7bc7\u5e45\u6709\u9650\uff0c\u6709\u5173\u4e8e SubcomposeLayout \u5185\u5bb9\u540e\u7eed\u4f1a\u7ee7\u7eed\u66f4\u65b0\uff0c\u8bf7\u6301\u7eed\u5173\u6ce8\u3002","title":"\u5bf9\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u601d\u8003"},{"location":"layout/modalbottomsheetlayout/","text":"@Composable @ExperimentalMaterialApi fun ModalBottomSheetLayout ( sheetContent : @Composable ColumnScope .() -> Unit , modifier : Modifier = Modifier , sheetState : ModalBottomSheetState = rememberModalBottomSheetState ( ModalBottomSheetValue . Hidden ), sheetShape : Shape = MaterialTheme . shapes . large , sheetElevation : Dp = ModalBottomSheetDefaults . Elevation , sheetBackgroundColor : Color = MaterialTheme . colors . surface , sheetContentColor : Color = contentColorFor ( sheetBackgroundColor ), scrimColor : Color = ModalBottomSheetDefaults . scrimColor , content : @Composable () -> Unit ) 1. ModalBottomSheetLayout \u6982\u8ff0 ModalBottomSheetLayout \u5448\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u9009\u62e9\uff0c\u540c\u65f6\u963b\u6b62\u4e86\u4e0e\u5c4f\u5e55\u5176\u4ed6\u90e8\u5206\u7684\u4e92\u52a8\u3002 \u5b83\u4eec\u662f\u79fb\u52a8\u7aef\u4e0a\u5185\u5d4c\u5f0f\u83dc\u5355\u548c\u7b80\u5355\u5bf9\u8bdd\u6846\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u4e3a\u5185\u5bb9\u3001\u56fe\u6807\u548c\u64cd\u4f5c\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u7a7a\u95f4 ModalSheetLayout \u603b\u5171\u6709\u4e09\u79cd\u72b6\u6001\uff1a Hidden HalfExpanded Expanded \u4e00\u4e2a\u7b80\u5355\u7684 ModalBottomSheetLayout \u7684\u4f8b\u5b50\u662f\u8fd9\u6837\u7684\uff1a val state = rememberModalBottomSheetState ( ModalBottomSheetValue . Hidden ) val scope = rememberCoroutineScope () ModalBottomSheetLayout ( sheetState = state , sheetContent = { Column { ListItem ( text = { Text ( \"\u9009\u62e9\u5206\u4eab\u5230\u54ea\u91cc\u5427~\" )}) ListItem ( text = { Text ( \"github\" )}, icon = { Surface ( shape = CircleShape , color = Color ( 0 xFF181717 ) ) { Icon ( painterResource ( R . drawable . github ), null , tint = Color . White , modifier = Modifier . padding ( 4. dp ) ) } }, modifier = Modifier . clickable { }) ListItem ( text = { Text ( \"\u5fae\u4fe1\" )}, icon = { Surface ( shape = CircleShape , color = Color ( 0 xFF07C160 ) ) { Icon ( painterResource ( R . drawable . wechat ), null , tint = Color . White , modifier = Modifier . padding ( 4. dp ) ) } }, modifier = Modifier . clickable { }) } } ) { Column ( modifier = Modifier . fillMaxSize () . padding ( 16. dp ), horizontalAlignment = Alignment . CenterHorizontally ) { Button ( onClick = { scope . launch { state . show () } }) { Text ( \"\u70b9\u6211\u5c55\u5f00\" ) } } } \u6ce8\u610f \u76ee\u524d\u4f7f\u7528 ModalBottomSheetLayout \u9700\u8981\u6807\u660e @ExperimentalMaterialApi 2. \u6536\u56de ModalBottomSheet \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c ModalBottomSheet \u65e0\u6cd5\u81ea\u52a8\u5904\u7406\u6309\u4e0b\u8fd4\u56de\u952e\u5c31\u6536\u8d77\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528 BackHandler \u6765\u5904\u7406 \u5728 ModalBottomSheet \u540e\u6dfb\u52a0\u4ee3\u7801\uff1a BackHandler ( enabled = ( state . currentValue == ModalBottomSheetValue . HalfExpanded || state . currentValue == ModalBottomSheetValue . Expanded ), onBack = { scope . launch { state . hide () } } ) 3. \u8bbe\u7f6e\u52a8\u753b\u65f6\u95f4 ModalSheetLayout \u9ed8\u8ba4\u7528 state.show() \u6216\u8005 state.hidden() \u6765\u5f39\u51fa\u548c\u6536\u56de \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u81ea\u5b9a\u4e49\u52a8\u753b\u65f6\u95f4 state . animateTo ( ModalBottomSheetValue . Hidden , tween ( 1000 )) \u5f39\u51fa\u540c\u7406 4. \u66f4\u591a ModalBottomSheet \u53c2\u6570\u8be6\u60c5","title":"ModalBottomSheetLayout"},{"location":"layout/modalbottomsheetlayout/#1-modalbottomsheetlayout","text":"ModalBottomSheetLayout \u5448\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u9009\u62e9\uff0c\u540c\u65f6\u963b\u6b62\u4e86\u4e0e\u5c4f\u5e55\u5176\u4ed6\u90e8\u5206\u7684\u4e92\u52a8\u3002 \u5b83\u4eec\u662f\u79fb\u52a8\u7aef\u4e0a\u5185\u5d4c\u5f0f\u83dc\u5355\u548c\u7b80\u5355\u5bf9\u8bdd\u6846\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u4e3a\u5185\u5bb9\u3001\u56fe\u6807\u548c\u64cd\u4f5c\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u7a7a\u95f4 ModalSheetLayout \u603b\u5171\u6709\u4e09\u79cd\u72b6\u6001\uff1a Hidden HalfExpanded Expanded \u4e00\u4e2a\u7b80\u5355\u7684 ModalBottomSheetLayout \u7684\u4f8b\u5b50\u662f\u8fd9\u6837\u7684\uff1a val state = rememberModalBottomSheetState ( ModalBottomSheetValue . Hidden ) val scope = rememberCoroutineScope () ModalBottomSheetLayout ( sheetState = state , sheetContent = { Column { ListItem ( text = { Text ( \"\u9009\u62e9\u5206\u4eab\u5230\u54ea\u91cc\u5427~\" )}) ListItem ( text = { Text ( \"github\" )}, icon = { Surface ( shape = CircleShape , color = Color ( 0 xFF181717 ) ) { Icon ( painterResource ( R . drawable . github ), null , tint = Color . White , modifier = Modifier . padding ( 4. dp ) ) } }, modifier = Modifier . clickable { }) ListItem ( text = { Text ( \"\u5fae\u4fe1\" )}, icon = { Surface ( shape = CircleShape , color = Color ( 0 xFF07C160 ) ) { Icon ( painterResource ( R . drawable . wechat ), null , tint = Color . White , modifier = Modifier . padding ( 4. dp ) ) } }, modifier = Modifier . clickable { }) } } ) { Column ( modifier = Modifier . fillMaxSize () . padding ( 16. dp ), horizontalAlignment = Alignment . CenterHorizontally ) { Button ( onClick = { scope . launch { state . show () } }) { Text ( \"\u70b9\u6211\u5c55\u5f00\" ) } } } \u6ce8\u610f \u76ee\u524d\u4f7f\u7528 ModalBottomSheetLayout \u9700\u8981\u6807\u660e @ExperimentalMaterialApi","title":"1. ModalBottomSheetLayout \u6982\u8ff0"},{"location":"layout/modalbottomsheetlayout/#2-modalbottomsheet","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c ModalBottomSheet \u65e0\u6cd5\u81ea\u52a8\u5904\u7406\u6309\u4e0b\u8fd4\u56de\u952e\u5c31\u6536\u8d77\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528 BackHandler \u6765\u5904\u7406 \u5728 ModalBottomSheet \u540e\u6dfb\u52a0\u4ee3\u7801\uff1a BackHandler ( enabled = ( state . currentValue == ModalBottomSheetValue . HalfExpanded || state . currentValue == ModalBottomSheetValue . Expanded ), onBack = { scope . launch { state . hide () } } )","title":"2. \u6536\u56de ModalBottomSheet"},{"location":"layout/modalbottomsheetlayout/#3","text":"ModalSheetLayout \u9ed8\u8ba4\u7528 state.show() \u6216\u8005 state.hidden() \u6765\u5f39\u51fa\u548c\u6536\u56de \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u81ea\u5b9a\u4e49\u52a8\u753b\u65f6\u95f4 state . animateTo ( ModalBottomSheetValue . Hidden , tween ( 1000 )) \u5f39\u51fa\u540c\u7406","title":"3. \u8bbe\u7f6e\u52a8\u753b\u65f6\u95f4"},{"location":"layout/modalbottomsheetlayout/#4","text":"ModalBottomSheet \u53c2\u6570\u8be6\u60c5","title":"4. \u66f4\u591a"},{"location":"layout/row/","text":"@Composable inline fun Row ( modifier : Modifier = Modifier , horizontalArrangement : Arrangement . Horizontal = Arrangement . Start , verticalAlignment : Alignment . Vertical = Alignment . Top , content : RowScope .() -> Unit ): Unit Row \u4f1a\u5c06\u91cc\u9762\u7684\u5b50\u9879\u653e\u5728\u4e00\u4e2a\u6c34\u5e73\u7684\u5e8f\u5217\u4e2d Row \u5e03\u5c40\u80fd\u591f\u6839\u636e\u4f7f\u7528 RowScope.weight \u4fee\u6539\u5668\u63d0\u4f9b\u7684\u6743\u91cd\u6765\u5206\u914d\u91cc\u9762\u5b50\u9879\u7684\u5bbd\u5ea6 \u5982\u679c\u4e00\u4e2a\u5b50\u9879\u6ca1\u6709\u63d0\u4f9b\u6743\u91cd\u7684\u8bdd\uff0c\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u5b50\u9879\u9ed8\u8ba4\u7684\u5bbd\u5ea6\uff0c\u518d\u6839\u636e\u5176\u4ed6\u5269\u4f59\u6709\u6743\u91cd\u7684\u5b50\u9879\u8ba1\u7b97\u5269\u4f59\u7684\u7a7a\u95f4 @Composable fun RowDemo () { Row { Box ( Modifier . size ( 40. dp ). background ( Color . Magenta )) Box ( Modifier . size ( 40. dp ). weight ( 1f ). background ( Color . Yellow )) Box ( Modifier . size ( 40. dp ) . weight ( 1f ) . background ( Color . Green ) ) } } Row { Box ( Modifier . size ( 40. dp ). background ( Color . Magenta )) Box ( Modifier . size ( 40. dp ). background ( Color . Yellow )) Box ( Modifier . size ( 40. dp ). background ( Color . Green )) } \u800c\u5982\u679c Row \u91cc\u9762\u7684\u5b50\u9879\u90fd\u6ca1\u6709\u8bbe\u7f6e weight \u7684\u8bdd\uff0c\u5c06\u4f1a\u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u4f7f\u91cc\u9762\u7684\u5b50\u9879\u7d27\u8d34\u5728\u4e00\u8d77 \u4e5f\u5c31\u662f\u6709\u70b9\u50cf xml \u4e2d\u7684 wrap_content \u5c5e\u6027","title":"Row"},{"location":"layout/scaffold/","text":"@Composable fun Scaffold ( modifier : Modifier = Modifier , scaffoldState : ScaffoldState = rememberScaffoldState (), topBar : @Composable () -> Unit = {}, bottomBar : @Composable () -> Unit = {}, snackbarHost : @Composable ( SnackbarHostState ) -> Unit = { SnackbarHost ( it ) }, floatingActionButton : @Composable () -> Unit = {}, floatingActionButtonPosition : FabPosition = FabPosition . End , isFloatingActionButtonDocked : Boolean = false , drawerContent : @Composable ( ColumnScope .() -> Unit ) ? = null , drawerGesturesEnabled : Boolean = true , drawerShape : Shape = MaterialTheme . shapes . large , drawerElevation : Dp = DrawerDefaults . Elevation , drawerBackgroundColor : Color = MaterialTheme . colors . surface , drawerContentColor : Color = contentColorFor ( drawerBackgroundColor ), drawerScrimColor : Color = DrawerDefaults . scrimColor , backgroundColor : Color = MaterialTheme . colors . background , contentColor : Color = contentColorFor ( backgroundColor ), content : @Composable ( PaddingValues ) -> Unit ) 1. \u6982\u8ff0 Scaffold \u5b9e\u73b0\u4e86 Material Design \u7684\u57fa\u672c\u89c6\u56fe\u754c\u9762\u7ed3\u6784 \u5982\u4ee5\u4e0b\u7684\u4fa7\u8fb9\u5e94\u7528\u680f\u3001\u5e95\u90e8\u5bfc\u822a\u680f\u3001\u5bfc\u822a\u680f\u7b49\u6548\u679c Scaffold \u4e2d\u7684 topBar \u3001 bottomBar \u53c2\u6570\u4ec5\u4ec5\u53ea\u662f\u5e2e\u52a9\u6211\u4eec\u5b9a\u4f4d\u5e03\u5c40\u7684\u4f4d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u7ecf\u5e38\u770b\u5230\u5b83\u4eec\u548c TopAppBar \u3001 BottomNavigation \u3001 BottomAppBar \u6765\u4e00\u8d77\u642d\u914d\u4f7f\u7528 2. \u7b80\u5355\u7684\u793a\u4f8b \u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528 Scaffold \u6765\u521b\u5efa\u7b80\u5355\u754c\u9762\u7684\u4f8b\u5b50 \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u67e5\u770b\u5b8c\u6574\u7684\u4ee3\u7801\uff1a Gist Github 3. \u5e38\u7528\u642d\u914d\u7684\u65b9\u6cd5 \u65b9\u6cd5 \u529f\u80fd TopAppBar \u9876\u90e8\u5bfc\u822a\u680f BottomNavigation \u5e95\u90e8\u5bfc\u822a\u680f \u9664\u6b64\u4e4b\u5916\uff0c\u4f60\u5f53\u7136\u4e5f\u80fd\u81ea\u5df1\u5199\u4e00\u4e2a Composable \u51fd\u6570\u6765\u4f20\u9012\u7ed9 Scaffold \u4e2d\u7684 topBar \u3001 bottomBar \u53c2\u6570\u7b49","title":"Scaffold"},{"location":"layout/scaffold/#1","text":"Scaffold \u5b9e\u73b0\u4e86 Material Design \u7684\u57fa\u672c\u89c6\u56fe\u754c\u9762\u7ed3\u6784 \u5982\u4ee5\u4e0b\u7684\u4fa7\u8fb9\u5e94\u7528\u680f\u3001\u5e95\u90e8\u5bfc\u822a\u680f\u3001\u5bfc\u822a\u680f\u7b49\u6548\u679c Scaffold \u4e2d\u7684 topBar \u3001 bottomBar \u53c2\u6570\u4ec5\u4ec5\u53ea\u662f\u5e2e\u52a9\u6211\u4eec\u5b9a\u4f4d\u5e03\u5c40\u7684\u4f4d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u7ecf\u5e38\u770b\u5230\u5b83\u4eec\u548c TopAppBar \u3001 BottomNavigation \u3001 BottomAppBar \u6765\u4e00\u8d77\u642d\u914d\u4f7f\u7528","title":"1. \u6982\u8ff0"},{"location":"layout/scaffold/#2","text":"\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528 Scaffold \u6765\u521b\u5efa\u7b80\u5355\u754c\u9762\u7684\u4f8b\u5b50 \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u67e5\u770b\u5b8c\u6574\u7684\u4ee3\u7801\uff1a Gist Github","title":"2. \u7b80\u5355\u7684\u793a\u4f8b"},{"location":"layout/scaffold/#3","text":"\u65b9\u6cd5 \u529f\u80fd TopAppBar \u9876\u90e8\u5bfc\u822a\u680f BottomNavigation \u5e95\u90e8\u5bfc\u822a\u680f \u9664\u6b64\u4e4b\u5916\uff0c\u4f60\u5f53\u7136\u4e5f\u80fd\u81ea\u5df1\u5199\u4e00\u4e2a Composable \u51fd\u6570\u6765\u4f20\u9012\u7ed9 Scaffold \u4e2d\u7684 topBar \u3001 bottomBar \u53c2\u6570\u7b49","title":"3. \u5e38\u7528\u642d\u914d\u7684\u65b9\u6cd5"},{"location":"layout/spacer/","text":"@Composable fun Spacer ( modifier : Modifier ): @Composable Unit Spacer \u80fd\u591f\u63d0\u4f9b\u4e00\u4e2a\u7a7a\u767d\u7684\u5e03\u5c40\uff0c\u53ef\u4ee5\u4f7f\u7528 Modifier.width , Modifier.height \u548c Modifier.size \u6765\u586b\u5145 import androidx.compose.foundation.layout.Box import androidx.compose.foundation.background import androidx.compose.foundation.layout.Row import androidx.compose.foundation.layout.Spacer import androidx.compose.foundation.layout.size import androidx.compose.foundation.layout.width Row { Box ( Modifier . size ( 100. dp ). background ( Color . Red )) Spacer ( Modifier . width ( 20. dp )) Box ( Modifier . size ( 100. dp ). background ( Color . Magenta )) Spacer ( Modifier . weight ( 1f )) Box ( Modifier . size ( 100. dp ). background ( Color . Black )) }","title":"Spacer"},{"location":"layout/subcomposelayout/","text":"SubcomposeLayout \u662f\u4ec0\u4e48\uff1f \u524d\u9762\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u90e8\u5206\u6211\u4eec\u6240\u63d0\u5230\u8fc7\uff0c\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u672c\u8d28\u5176\u5b9e\u5c31\u662f\u5b50\u7ec4\u4ef6\u901a\u8fc7\u7236\u7ec4\u4ef6\u5bf9\u5176\u4ed6\u5b50\u7ec4\u4ef6\u4ea7\u751f\u5f71\u54cd\uff0c\u7136\u800c\u5728\u6709\u4e9b\u573a\u666f\u4e0b\u6211\u4eec\u4e0d\u5e0c\u671b\u7236\u7ec4\u4ef6\u53c2\u4e0e\u5176\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u81ea\u5b9a\u4e49\u5b50\u7ec4\u4ef6\u95f4\u6d4b\u91cf\u987a\u5e8f\u4ece\u800c\u76f8\u4e92\u5f71\u54cd\uff0cCompose\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 SubcomposeLayout \u6765\u5904\u7406\u8fd9\u7c7b\u5b50\u7ec4\u4ef6\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u7684\u573a\u666f\u3002 SubcomposeLayout \u4f7f\u7528\u793a\u4f8b \u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u524d\u9762\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u4e2d\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u8bbe\u8ba1\u65b9\u6848\u7684\u4e0d\u540c\u53ef\u4ee5\u5f88\u6e05\u6670\u7684\u770b\u51fa\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u4e0e SubcomposeLayout \u7684\u533a\u522b\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5148\u6d4b\u91cf\u4e24\u4fa7\u6587\u672c\u7684\u9ad8\u5ea6\uff0c\u5e76\u8ba1\u7b97\u51fa Divider \u5e94\u5360\u6709\u7684\u9ad8\u5ea6\u7136\u540e\u4e3a Divider \u6307\u5b9a\u9ad8\u5ea6\u540e\u518d\u8fdb\u884c\u6d4b\u91cf\uff0c\u4ece\u800c\u8fbe\u5230\u8bbe\u8ba1\u8981\u6c42\u3002\u4e0e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u7236\u7ec4\u4ef6\u662f\u6ca1\u6709\u53c2\u4e0e\u7684\u3002 \u63a5\u4e0b\u91cc\uff0c\u6211\u4eec\u6765\u770b\u770b SubComposeLayout \u7ec4\u4ef6\u8be5\u5982\u4f55\u4f7f\u7528\u3002 @Composable fun SubcomposeLayout ( modifier : Modifier = Modifier , measurePolicy : SubcomposeMeasureScope .( Constraints ) -> MeasureResult ) \u5176\u5b9e SubComposeLayout \u548c Layout \u7ec4\u4ef6\u7528\u6cd5\u5dee\u4e0d\u591a\u3002\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65f6\u9700\u8981\u4f20\u5165\u4e00\u4e2a SubcomposeMeasureScope \u7c7b\u578b Lambda\uff0c\u6253\u5f00\u63a5\u53e3\u58f0\u660e\u53ef\u4ee5\u770b\u5230\u5176\u4e2d\u4ec5\u6709\u4e00\u4e2a subcompose API\u3002 interface SubcomposeMeasureScope : MeasureScope { fun subcompose ( slotId : Any? , content : @Composable () -> Unit ): List < Measurable > } subcompose \u53ef\u4ee5\u5c06\u4efb\u4f55 Composable \u7ec4\u4ef6\u5185\u6240\u6709 LayoutNode \u8f6c\u5316\u4e3a\u4e00\u7cfb\u5217 Measurable \u6d4b\u91cf\u53e5\u67c4\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u5728\u6211\u4eec\u7684\u793a\u4f8b\u573a\u666f\u4e2d\u8be5\u5982\u4f55\u4f7f\u7528\u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5f85\u6d4b\u91cf\u7684\u7ec4\u4ef6\u5206\u4e3a\u6587\u5b57\u7ec4\u4ef6\u548c\u5206\u9694\u7b26\u7ec4\u4ef6\u4e24\u90e8\u5206\u3002\u7531\u4e8e\u6211\u4eec\u7684\u5206\u9694\u7b26\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u662f\u4f9d\u8d56\u4e8e\u6587\u5b57\u7ec4\u4ef6\u7684\uff0c\u6240\u4ee5\u58f0\u660e\u5206\u9694\u7b26\u7ec4\u4ef6\u65f6\u6211\u4eec\u4f20\u5165\u4e00\u4e2a Int \u503c\u4f5c\u4e3a\u6d4b\u91cf\u9ad8\u5ea6\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a Composable\u3002 @Composable fun SubcomposeRow ( modifier : Modifier , text : @Composable () -> Unit , divider : @Composable ( Int ) -> Unit // \u4f20\u5165\u9ad8\u5ea6 ){ SubcomposeLayout ( modifier = modifier ) { constraints -> ... } } \u6211\u4eec\u9996\u5148\u53ef\u4ee5\u4f7f\u7528 subcompose \u6765\u5148\u6d4b\u91cf text Composable \u4e2d\u7684\u6240\u6709 LayoutNode\u3002\u5e76\u6839\u636e\u6d4b\u91cf\u7ed3\u679c\u8ba1\u7b97\u51fa\u6700\u5927\u9ad8\u5ea6\u3002 SubcomposeLayout ( modifier = modifier ) { constraints -> var maxHeight = 0 var placeables = subcompose ( \"text\" , text ). map { var placeable = it . measure ( constraints ) maxHeight = placeable . height . coerceAtLeast ( maxHeight ) placeable } ... } \u65e2\u7136\u8ba1\u7b97\u5f97\u5230\u4e86\u6587\u672c\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u53ef\u4ee5\u5c06\u9ad8\u5ea6\u53ea\u4f20\u5165\u5206\u9694\u7b26\u7ec4\u4ef6\u4e2d\u5e76\u8fdb\u884c\u6d4b\u91cf\u4e86\u3002 SubcomposeLayout ( modifier = modifier ) { constraints -> ... var dividerPlaceable = subcompose ( \"divider\" ) { divider ( maxHeight ) }. map { it . measure ( constraints . copy ( minWidth = 0 )) } assert ( dividerPlaceable . size == 1 , { \"DividerScope Error!\" }) ... } \u503c\u5f97\u6ce8\u610f\uff0c\u6d4b\u91cf divider \u7ec4\u4ef6\u65f6\u6211\u4eec\u5c06 minWidth \u8bbe\u7f6e\u4e3a\u96f6\uff0c\u8fd9\u662f\u7531\u4e8e constraints \u5e03\u5c40\u7ea6\u675f\u4e2d\u5bbd\u5ea6\u53ef\u80fd\u662f\u56fa\u5b9a\u7684\uff0c\u5982\u679c\u4e0d\u4fee\u6539\u7684\u8bdd\uff0cdivider \u7ec4\u4ef6\u5bbd\u5ea6\u9ed8\u8ba4\u4f1a\u4e0e\u6574\u4e2a\u7ec4\u4ef6\u5bbd\u5ea6\u76f8\u540c\u3002\u63a5\u4e0b\u6765\u5206\u522b\u5bf9\u6587\u5b57\u7ec4\u4ef6\u548c\u5206\u9694\u7b26\u7ec4\u4ef6\u8fdb\u884c\u5e03\u5c40\u5c31\u53ef\u4ee5\u4e86\u3002 SubcomposeLayout(modifier = modifier) { constraints-> ... layout(constraints.maxWidth, constraints.maxHeight){ placeables.forEach { it.placeRelative(0, 0) } dividerPlaceable.forEach { it.placeRelative(midPos, 0) } } } \u4f7f\u7528\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6587\u672c\u7ec4\u4ef6\u548c\u5206\u9694\u7b26\u7ec4\u4ef6\u5206\u5f00\u4f20\u5165\u5230\u6211\u4eec\u5b9a\u5236\u7684 SubcomposeRow \u7ec4\u4ef6\u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002 SubcomposeRow( modifier = Modifier .fillMaxWidth(), text = { Text(text = \"Left\", Modifier.wrapContentWidth(Alignment.Start)) Text(text = \"Right\", Modifier.wrapContentWidth(Alignment.End)) } ) { var heightPx = with( LocalDensity.current) { it.toDp() } Divider( color = Color.Black, modifier = Modifier .width(4.dp) .height(heightPx) ) } \u6700\u7ec8\u6548\u679c\u4e0e\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u5b8c\u5168\u76f8\u540c\u3002","title":"SubcomposeLayout"},{"location":"layout/subcomposelayout/#subcomposelayout","text":"\u524d\u9762\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u90e8\u5206\u6211\u4eec\u6240\u63d0\u5230\u8fc7\uff0c\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u7684\u672c\u8d28\u5176\u5b9e\u5c31\u662f\u5b50\u7ec4\u4ef6\u901a\u8fc7\u7236\u7ec4\u4ef6\u5bf9\u5176\u4ed6\u5b50\u7ec4\u4ef6\u4ea7\u751f\u5f71\u54cd\uff0c\u7136\u800c\u5728\u6709\u4e9b\u573a\u666f\u4e0b\u6211\u4eec\u4e0d\u5e0c\u671b\u7236\u7ec4\u4ef6\u53c2\u4e0e\u5176\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u81ea\u5b9a\u4e49\u5b50\u7ec4\u4ef6\u95f4\u6d4b\u91cf\u987a\u5e8f\u4ece\u800c\u76f8\u4e92\u5f71\u54cd\uff0cCompose\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 SubcomposeLayout \u6765\u5904\u7406\u8fd9\u7c7b\u5b50\u7ec4\u4ef6\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u7684\u573a\u666f\u3002","title":"SubcomposeLayout \u662f\u4ec0\u4e48\uff1f"},{"location":"layout/subcomposelayout/#subcomposelayout_1","text":"\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u524d\u9762\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u4e2d\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u8bbe\u8ba1\u65b9\u6848\u7684\u4e0d\u540c\u53ef\u4ee5\u5f88\u6e05\u6670\u7684\u770b\u51fa\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u4e0e SubcomposeLayout \u7684\u533a\u522b\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5148\u6d4b\u91cf\u4e24\u4fa7\u6587\u672c\u7684\u9ad8\u5ea6\uff0c\u5e76\u8ba1\u7b97\u51fa Divider \u5e94\u5360\u6709\u7684\u9ad8\u5ea6\u7136\u540e\u4e3a Divider \u6307\u5b9a\u9ad8\u5ea6\u540e\u518d\u8fdb\u884c\u6d4b\u91cf\uff0c\u4ece\u800c\u8fbe\u5230\u8bbe\u8ba1\u8981\u6c42\u3002\u4e0e\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u7236\u7ec4\u4ef6\u662f\u6ca1\u6709\u53c2\u4e0e\u7684\u3002 \u63a5\u4e0b\u91cc\uff0c\u6211\u4eec\u6765\u770b\u770b SubComposeLayout \u7ec4\u4ef6\u8be5\u5982\u4f55\u4f7f\u7528\u3002 @Composable fun SubcomposeLayout ( modifier : Modifier = Modifier , measurePolicy : SubcomposeMeasureScope .( Constraints ) -> MeasureResult ) \u5176\u5b9e SubComposeLayout \u548c Layout \u7ec4\u4ef6\u7528\u6cd5\u5dee\u4e0d\u591a\u3002\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65f6\u9700\u8981\u4f20\u5165\u4e00\u4e2a SubcomposeMeasureScope \u7c7b\u578b Lambda\uff0c\u6253\u5f00\u63a5\u53e3\u58f0\u660e\u53ef\u4ee5\u770b\u5230\u5176\u4e2d\u4ec5\u6709\u4e00\u4e2a subcompose API\u3002 interface SubcomposeMeasureScope : MeasureScope { fun subcompose ( slotId : Any? , content : @Composable () -> Unit ): List < Measurable > } subcompose \u53ef\u4ee5\u5c06\u4efb\u4f55 Composable \u7ec4\u4ef6\u5185\u6240\u6709 LayoutNode \u8f6c\u5316\u4e3a\u4e00\u7cfb\u5217 Measurable \u6d4b\u91cf\u53e5\u67c4\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u5728\u6211\u4eec\u7684\u793a\u4f8b\u573a\u666f\u4e2d\u8be5\u5982\u4f55\u4f7f\u7528\u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5f85\u6d4b\u91cf\u7684\u7ec4\u4ef6\u5206\u4e3a\u6587\u5b57\u7ec4\u4ef6\u548c\u5206\u9694\u7b26\u7ec4\u4ef6\u4e24\u90e8\u5206\u3002\u7531\u4e8e\u6211\u4eec\u7684\u5206\u9694\u7b26\u7ec4\u4ef6\u7684\u9ad8\u5ea6\u662f\u4f9d\u8d56\u4e8e\u6587\u5b57\u7ec4\u4ef6\u7684\uff0c\u6240\u4ee5\u58f0\u660e\u5206\u9694\u7b26\u7ec4\u4ef6\u65f6\u6211\u4eec\u4f20\u5165\u4e00\u4e2a Int \u503c\u4f5c\u4e3a\u6d4b\u91cf\u9ad8\u5ea6\u3002 \u9996\u5148\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a Composable\u3002 @Composable fun SubcomposeRow ( modifier : Modifier , text : @Composable () -> Unit , divider : @Composable ( Int ) -> Unit // \u4f20\u5165\u9ad8\u5ea6 ){ SubcomposeLayout ( modifier = modifier ) { constraints -> ... } } \u6211\u4eec\u9996\u5148\u53ef\u4ee5\u4f7f\u7528 subcompose \u6765\u5148\u6d4b\u91cf text Composable \u4e2d\u7684\u6240\u6709 LayoutNode\u3002\u5e76\u6839\u636e\u6d4b\u91cf\u7ed3\u679c\u8ba1\u7b97\u51fa\u6700\u5927\u9ad8\u5ea6\u3002 SubcomposeLayout ( modifier = modifier ) { constraints -> var maxHeight = 0 var placeables = subcompose ( \"text\" , text ). map { var placeable = it . measure ( constraints ) maxHeight = placeable . height . coerceAtLeast ( maxHeight ) placeable } ... } \u65e2\u7136\u8ba1\u7b97\u5f97\u5230\u4e86\u6587\u672c\u7684\u6700\u5927\u9ad8\u5ea6\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u53ef\u4ee5\u5c06\u9ad8\u5ea6\u53ea\u4f20\u5165\u5206\u9694\u7b26\u7ec4\u4ef6\u4e2d\u5e76\u8fdb\u884c\u6d4b\u91cf\u4e86\u3002 SubcomposeLayout ( modifier = modifier ) { constraints -> ... var dividerPlaceable = subcompose ( \"divider\" ) { divider ( maxHeight ) }. map { it . measure ( constraints . copy ( minWidth = 0 )) } assert ( dividerPlaceable . size == 1 , { \"DividerScope Error!\" }) ... } \u503c\u5f97\u6ce8\u610f\uff0c\u6d4b\u91cf divider \u7ec4\u4ef6\u65f6\u6211\u4eec\u5c06 minWidth \u8bbe\u7f6e\u4e3a\u96f6\uff0c\u8fd9\u662f\u7531\u4e8e constraints \u5e03\u5c40\u7ea6\u675f\u4e2d\u5bbd\u5ea6\u53ef\u80fd\u662f\u56fa\u5b9a\u7684\uff0c\u5982\u679c\u4e0d\u4fee\u6539\u7684\u8bdd\uff0cdivider \u7ec4\u4ef6\u5bbd\u5ea6\u9ed8\u8ba4\u4f1a\u4e0e\u6574\u4e2a\u7ec4\u4ef6\u5bbd\u5ea6\u76f8\u540c\u3002\u63a5\u4e0b\u6765\u5206\u522b\u5bf9\u6587\u5b57\u7ec4\u4ef6\u548c\u5206\u9694\u7b26\u7ec4\u4ef6\u8fdb\u884c\u5e03\u5c40\u5c31\u53ef\u4ee5\u4e86\u3002 SubcomposeLayout(modifier = modifier) { constraints-> ... layout(constraints.maxWidth, constraints.maxHeight){ placeables.forEach { it.placeRelative(0, 0) } dividerPlaceable.forEach { it.placeRelative(midPos, 0) } } } \u4f7f\u7528\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6587\u672c\u7ec4\u4ef6\u548c\u5206\u9694\u7b26\u7ec4\u4ef6\u5206\u5f00\u4f20\u5165\u5230\u6211\u4eec\u5b9a\u5236\u7684 SubcomposeRow \u7ec4\u4ef6\u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002 SubcomposeRow( modifier = Modifier .fillMaxWidth(), text = { Text(text = \"Left\", Modifier.wrapContentWidth(Alignment.Start)) Text(text = \"Right\", Modifier.wrapContentWidth(Alignment.End)) } ) { var heightPx = with( LocalDensity.current) { it.toDp() } Divider( color = Color.Black, modifier = Modifier .width(4.dp) .height(heightPx) ) } \u6700\u7ec8\u6548\u679c\u4e0e\u4f7f\u7528\u56fa\u6709\u7279\u6027\u6d4b\u91cf\u5b8c\u5168\u76f8\u540c\u3002","title":"SubcomposeLayout \u4f7f\u7528\u793a\u4f8b"},{"location":"layout/topappbar/","text":"@Composable fun TopAppBar ( title : @Composable () -> Unit , modifier : Modifier = Modifier , navigationIcon : @Composable (() -> Unit ) ? = null , actions : @Composable RowScope .() -> Unit = {}, backgroundColor : Color = MaterialTheme . colors . primarySurface , contentColor : Color = contentColorFor ( backgroundColor ), elevation : Dp = AppBarDefaults . TopAppBarElevation ) \u7b80\u5355\u4f7f\u7528\uff1a @Composable fun ScaffoldDemo (){ Scaffold ( topBar = { TopAppBar ( title = { Text ( \"\u4e3b\u9875\" ) }, navigationIcon = { IconButton ( onClick = { } //do something ) { Icon ( Icons . Filled . ArrowBack , null ) } } ) }, ) { } } \u8fd8\u53ef\u4ee5\u8bbe\u7f6e TopAppBar \u4e2d\u7684 actions \u53c2\u6570 @Composable fun ScaffoldDemo (){ Scaffold ( topBar = { TopAppBar ( title = { Text ( \"\u4e3b\u9875\" ) }, navigationIcon = { IconButton ( onClick = { } //do something ) { Icon ( Icons . Filled . ArrowBack , null ) } }, actions = { IconButton ( onClick = { } //do something ) { Icon ( Icons . Filled . Search , null ) } IconButton ( onClick = { } //do something ) { Icon ( Icons . Filled . MoreVert , null ) } } ) }, ) { } } \u5b83\u4f1a\u5c06\u91cc\u9762\u7684\u5185\u5bb9\u4ee5 Row \u7684\u65b9\u5f0f\u6765\u6392\u5217","title":"TopAppBar"},{"location":"modifier/introduction/","text":"\u5173\u4e8e Modifier \u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u6253\u7b97\u5c06\u5927\u90e8\u5206\u7684\u65b9\u6cd5\u4ecb\u7ecd\u51fa\u6765\u65b9\u4fbf\u67e5\u9605\u5927\u5bb6\u67e5\u9605 1. Modifier.fillMaxSize() \u9ed8\u8ba4\u5c06\u5f53\u524d\u7684 @Composable \u586b\u6ee1\u6574\u4e2a\u7236\u5e03\u5c40 \u5f53\u8c03\u7528 Modifier.fillMaxSize(0.5f) \u65f6\u5219\u586b\u6ee1\u4e00\u534a @Stable @Suppress ( \"ModifierInspectorInfo\" ) fun Modifier . fillMaxSize ( /*@FloatRange(from = 0.0, to = 1.0)*/ fraction : Float = 1f ) = this . then ( if ( fraction == 1f ) FillWholeMaxSize else createFillSizeModifier ( fraction )) 2. Modifier.size() \u8bbe\u7f6e\u5f53\u524d @Composable \u7684\u5927\u5c0f @Stable fun Modifier . size ( size : Dp ) = this . then ( SizeModifier ( minWidth = size , maxWidth = size , minHeight = size , maxHeight = size , enforceIncoming = true , inspectorInfo = debugInspectorInfo { name = \"size\" value = size } ) ) @Stable fun Modifier . size ( width : Dp , height : Dp ) = this . then ( SizeModifier ( minWidth = width , maxWidth = width , minHeight = height , maxHeight = height , enforceIncoming = true , inspectorInfo = debugInspectorInfo { name = \"size\" properties [ \"width\" ] = width properties [ \"height\" ] = height } ) )","title":"\u65b9\u6cd5\u4ecb\u7ecd"},{"location":"modifier/introduction/#1-modifierfillmaxsize","text":"\u9ed8\u8ba4\u5c06\u5f53\u524d\u7684 @Composable \u586b\u6ee1\u6574\u4e2a\u7236\u5e03\u5c40 \u5f53\u8c03\u7528 Modifier.fillMaxSize(0.5f) \u65f6\u5219\u586b\u6ee1\u4e00\u534a @Stable @Suppress ( \"ModifierInspectorInfo\" ) fun Modifier . fillMaxSize ( /*@FloatRange(from = 0.0, to = 1.0)*/ fraction : Float = 1f ) = this . then ( if ( fraction == 1f ) FillWholeMaxSize else createFillSizeModifier ( fraction ))","title":"1. Modifier.fillMaxSize()"},{"location":"modifier/introduction/#2-modifiersize","text":"\u8bbe\u7f6e\u5f53\u524d @Composable \u7684\u5927\u5c0f @Stable fun Modifier . size ( size : Dp ) = this . then ( SizeModifier ( minWidth = size , maxWidth = size , minHeight = size , maxHeight = size , enforceIncoming = true , inspectorInfo = debugInspectorInfo { name = \"size\" value = size } ) ) @Stable fun Modifier . size ( width : Dp , height : Dp ) = this . then ( SizeModifier ( minWidth = width , maxWidth = width , minHeight = height , maxHeight = height , enforceIncoming = true , inspectorInfo = debugInspectorInfo { name = \"size\" properties [ \"width\" ] = width properties [ \"height\" ] = height } ) )","title":"2. Modifier.size()"},{"location":"modifier/overview/","text":"Modifier Modifier , \u987e\u540d\u601d\u4e49\u5c31\u662f\u4e00\u4e2a\u4fee\u9970\u5668\uff0c\u7528\u4e8e\u4fee\u6539\u7ec4\u4ef6\u7684\u6837\u5f0f\u3002\u6bcf\u4e2a Compose \u7ec4\u4ef6\u90fd\u4f1a\u63d0\u4f9b\u4e00\u4e2a Modifier \u53c2\u6570\u7528\u4e8e\u4fee\u6539\u6837\u5f0f\u3002 \u57fa\u7840\u7528\u6cd5 Modifier \u672c\u8eab\u53ea\u5b9e\u73b0\u4e86\u51e0\u4e2a\u51fd\u6570\u7528\u4e8e\u8fde\u63a5\u591a\u4e2a\u4fee\u9970\u5668\uff0c\u5927\u591a\u6570\u4fee\u9970\u65b9\u6cd5\u90fd\u662f\u901a\u8fc7 Kotlin \u6269\u5c55\u51fd\u6570 \u5b9e\u73b0\u7684\u3002 \u4f8b\u5982 size() \u8fd9\u4e2a\u4fee\u9970\u51fd\u6570\uff0c\u5176\u5b9e\u6765\u81ea androidx.compose.foundation.layout \u5305\u4e0b\u7684 Size.kt \u3002\u540c\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u51fd\u6570\u6765\u5411 Modifier \u6dfb\u52a0\u4f60\u81ea\u5df1\u7684\u4fee\u9970\u65b9\u6cd5\u3002 \u4ee5\u4e0b\u4e3a\u5e38\u7528\u7684\u4fee\u9970\u65b9\u6cd5: // \u4fee\u6539\u63a7\u4ef6\u5927\u5c0f\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5bbd\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u9ad8\u5ea6 size ( width : Dp , height : Dp ) // \u5355\u72ec\u4fee\u6539\u63a7\u4ef6\u5bbd\u5ea6 width ( width : Dp ) // \u5355\u72ec\u4fee\u6539\u63a7\u4ef6\u9ad8\u5ea6 height ( height : Dp ) // \u9650\u5236\u63a7\u4ef6\u7684\u5bbd\u5ea6\u5728\u4e00\u5b9a\u8303\u56f4\u5185 widthIn ( min : Dp , max : Dp ) // \u9650\u5236\u63a7\u4ef6\u9ad8\u5ea6\u5728\u4e00\u5b9a\u8303\u56f4\u5185 heightIn ( min : Dp , max : Dp ) // \u4f7f\u5f97\u63a7\u4ef6\u7684\u5bbd\u5ea6\u9002\u5e94\u7236\u5e03\u5c40\u5927\u5c0f fillMaxWidth () // \u4f7f\u5f97\u63a7\u4ef6\u7684\u9ad8\u5ea6\u9002\u5e94\u7236\u5e03\u5c40\u5927\u5c0f fillMaxHeight () // \u4f7f\u5f97\u63a7\u4ef6\u6839\u636e\u5185\u90e8\u7684\u7ec4\u4ef6\u81ea\u9002\u5e94\u5185\u5bb9\u5927\u5c0f wrapContentSize () \u4fee\u9970\u65b9\u6cd5\u8fd8\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002 \u53ef\u4ee5\u4f7f\u7528 Android Studio \u81ea\u52a8\u8865\u5168\u6216\u8005\u67e5\u770b\u5b98\u65b9\u6587\u6863\u6765\u67e5\u627e\u66f4\u591a\u4fee\u9970\u51fd\u6570\u3002 \u4fee\u9970\u4f18\u5148\u7ea7 \u4fee\u9970\u65b9\u6cd5\u76f4\u63a5\u662f\u5b58\u5728\u5148\u540e\u987a\u5e8f\u7684\uff0c\u4e0d\u540c\u7684\u8c03\u7528\u987a\u5e8f\u4f1a\u5bfc\u81f4\u4e0d\u4e00\u6837\u7684\u6548\u679c\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a @Composable fun UI (){ Card ( modifier = Modifier . clickable { } . padding ( 16. dp ) ) { Box ( modifier = Modifier . padding ( 20. dp )){ Text ( text = \"\u6211\u5df2\u7ecf\u6012\u4e0d\u53ef\u904f\u4e86\" ) } } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c clickable{} \u5728 padding() \u4e4b\u524d \u8c03\u7528\uff0c\u56e0\u6b64 Card \u5916\u95f4\u8ddd\u7684\u90e8\u5206\u4e5f\u662f\u53ef\u4ee5\u88ab\u70b9\u51fb\u5230\u7684\u3002 \u53cd\u8f6c\u4e00\u4e0b\uff0c\u5982\u679c clickable{} \u5728 padding() \u4e4b\u540e \u88ab\u8c03\u7528\uff0c\u90a3\u4e48 Card \u7684\u5916\u95f4\u8ddd\u90e8\u5206\u5c31\u4e0d\u80fd\u70b9\u51fb\u4e86\uff0c\u53ea\u80fd\u70b9\u51fb Card \u672c\u8eab\u3002 \u4e3a\u4ec0\u4e48\u5462? (\u6316\u6e90\u7801\u65f6\u95f4~) \u76f4\u63a5\u67e5\u770b\u8fd9\u4e9b \u4fee\u9970\u65b9\u6cd5 \u7684\u6e90\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u89c1\u4ed6\u4eec\u662f\u8fd9\u6837\u5b9e\u73b0\u7684: fun Modifier . padding ( all : Dp ) = this . then ( PaddingModifier ( start = all , top = all , end = all , bottom = all , rtlAware = true , inspectorInfo = debugInspectorInfo { name = \"padding\" value = all } ) ) \u663e\u800c\u6613\u89c1\uff0c\u8fd9\u662f\u4e00\u4e2aModifier\u7684\u6269\u5c55\u51fd\u6570\u3002 \u5b83\u8c03\u7528\u4e86 Modifier \u7684 then() \u51fd\u6570\uff0c\u800c\u8fd9\u4e2a then() \u9700\u8981\u63a5\u6536\u4e00\u4e2aModifier\u5bf9\u8c61\uff0c\u800c\u8fd9\u4e2aPaddingModifier\u7684\u6700\u7ec8\u7236\u7c7b\uff0c\u5c31\u662f Modifier \u3002 \u90a3 then() \u51fd\u6570\u5e72\u4e86\u4ec0\u4e48\u5462? \u7ee7\u7eed\u770b\u6e90\u7801: infix fun then ( other : Modifier ): Modifier = if ( other === Modifier ) this else CombinedModifier ( this , other ) \u5f88\u663e\u7136\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a CombinedModifier \u5bf9\u8c61\uff0c\u800c CombinedModifier \u4e5f\u662f\u7ee7\u627f\u81ea Modifier \u7c7b\u7684: class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier { override fun < R > foldIn ( initial : R , operation : ( R , Modifier . Element ) -> R ): R = inner . foldIn ( outer . foldIn ( initial , operation ), operation ) override fun < R > foldOut ( initial : R , operation : ( Modifier . Element , R ) -> R ): R = outer . foldOut ( inner . foldOut ( initial , operation ), operation ) override fun any ( predicate : ( Modifier . Element ) -> Boolean ): Boolean = outer . any ( predicate ) || inner . any ( predicate ) override fun all ( predicate : ( Modifier . Element ) -> Boolean ): Boolean = outer . all ( predicate ) && inner . all ( predicate ) override fun equals ( other : Any? ): Boolean = other is CombinedModifier && outer == other . outer && inner == other . inner override fun hashCode (): Int = outer . hashCode () + 31 * inner . hashCode () override fun toString () = \"[\" + foldIn ( \"\" ) { acc , element -> if ( acc . isEmpty ()) element . toString () else \" $ acc , $ element \" } + \"]\" } \u8fd9\u4e2a CombinedModifier \u6301\u6709\u4e86\u6211\u4eec\u65b0\u589e\u7684\u4fee\u9970\u5668\u548c\u539f\u6709\u7684\u4fee\u9970\u5668\uff0c\u5e76\u4e14\u5c06\u5176\u7ec4\u5408\u4e3a\u4e00\u4e2a\u65b0\u7684 Modifier \u3002 \u53ef\u4ee5\u770b\u5230\uff0c Modifier \u7684\u5b9e\u73b0\u975e\u5e38\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u94fe\u8868\uff0c\u5f53\u6211\u4eec\u7ed9\u4e00\u4e2a\u7ec4\u4ef6\u6dfb\u52a0\u4e00\u4e2a\u4fee\u9970\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a CombinedModifier \u5c06 \u65e7\u7684\u548c\u65b0\u7684Modifier\u7ec4\u5408\u5728\u4e00\u8d77 \uff0c\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684 Modifier \u3002 \u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u8c03\u7528\u4fee\u9970\u51fd\u6570\u4e3a\u4ec0\u4e48\u4f1a\u6709\u987a\u5e8f\u95ee\u9898\uff0c\u4fee\u9970\u51fd\u6570\u5e76\u4e0d\u662f\u7b80\u5355\u4fee\u6539\u4e86\u67d0\u4e2a\u7ec4\u4ef6\u5185\u90e8\u7684\u53c2\u6570\uff0c\u800c\u662f\u7ed9\u8fd9\u4e2a\u7ec4\u4ef6 \u5957\u4e0a\u4e86\u4e00\u5c42\u53c8\u4e00\u5c42\u7684\u4fee\u9970\u5668 \u3002 \u7528\u6cd5\u793a\u8303 \u6765\u5199\u4e00\u4e2a\u53ef\u4ee5\u88ab\u70b9\u51fb\u7684\u5361\u7247\u5427, \u8ba9\u8fd9\u4e2a\u5361\u7247\u5bbd\u5ea6\u6700\u5927\uff0c\u9ad8\u5ea6100dp, \u5e76\u4e14\u5916\u8fb9\u8ddd16.dp\uff0c\u9634\u5f71\u6df1\u5ea68.dp\u5427 @Composable fun CardExample (){ Card ( modifier = Modifier . fillMaxWidth () . height ( 100. dp ) . padding ( 16. dp ) . clickable { /* \u4e0d\u505a\u4efb\u4f55\u4e8b */ }, elevation = 8. dp ) { // \u5185\u90e8\u6ca1\u6709\u7ec4\u4ef6 } } \u8fd0\u884c\u6548\u679c:","title":"\u6982\u8ff0"},{"location":"modifier/overview/#modifier","text":"Modifier , \u987e\u540d\u601d\u4e49\u5c31\u662f\u4e00\u4e2a\u4fee\u9970\u5668\uff0c\u7528\u4e8e\u4fee\u6539\u7ec4\u4ef6\u7684\u6837\u5f0f\u3002\u6bcf\u4e2a Compose \u7ec4\u4ef6\u90fd\u4f1a\u63d0\u4f9b\u4e00\u4e2a Modifier \u53c2\u6570\u7528\u4e8e\u4fee\u6539\u6837\u5f0f\u3002","title":"Modifier"},{"location":"modifier/overview/#_1","text":"Modifier \u672c\u8eab\u53ea\u5b9e\u73b0\u4e86\u51e0\u4e2a\u51fd\u6570\u7528\u4e8e\u8fde\u63a5\u591a\u4e2a\u4fee\u9970\u5668\uff0c\u5927\u591a\u6570\u4fee\u9970\u65b9\u6cd5\u90fd\u662f\u901a\u8fc7 Kotlin \u6269\u5c55\u51fd\u6570 \u5b9e\u73b0\u7684\u3002 \u4f8b\u5982 size() \u8fd9\u4e2a\u4fee\u9970\u51fd\u6570\uff0c\u5176\u5b9e\u6765\u81ea androidx.compose.foundation.layout \u5305\u4e0b\u7684 Size.kt \u3002\u540c\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55\u51fd\u6570\u6765\u5411 Modifier \u6dfb\u52a0\u4f60\u81ea\u5df1\u7684\u4fee\u9970\u65b9\u6cd5\u3002 \u4ee5\u4e0b\u4e3a\u5e38\u7528\u7684\u4fee\u9970\u65b9\u6cd5: // \u4fee\u6539\u63a7\u4ef6\u5927\u5c0f\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5bbd\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u9ad8\u5ea6 size ( width : Dp , height : Dp ) // \u5355\u72ec\u4fee\u6539\u63a7\u4ef6\u5bbd\u5ea6 width ( width : Dp ) // \u5355\u72ec\u4fee\u6539\u63a7\u4ef6\u9ad8\u5ea6 height ( height : Dp ) // \u9650\u5236\u63a7\u4ef6\u7684\u5bbd\u5ea6\u5728\u4e00\u5b9a\u8303\u56f4\u5185 widthIn ( min : Dp , max : Dp ) // \u9650\u5236\u63a7\u4ef6\u9ad8\u5ea6\u5728\u4e00\u5b9a\u8303\u56f4\u5185 heightIn ( min : Dp , max : Dp ) // \u4f7f\u5f97\u63a7\u4ef6\u7684\u5bbd\u5ea6\u9002\u5e94\u7236\u5e03\u5c40\u5927\u5c0f fillMaxWidth () // \u4f7f\u5f97\u63a7\u4ef6\u7684\u9ad8\u5ea6\u9002\u5e94\u7236\u5e03\u5c40\u5927\u5c0f fillMaxHeight () // \u4f7f\u5f97\u63a7\u4ef6\u6839\u636e\u5185\u90e8\u7684\u7ec4\u4ef6\u81ea\u9002\u5e94\u5185\u5bb9\u5927\u5c0f wrapContentSize () \u4fee\u9970\u65b9\u6cd5\u8fd8\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002 \u53ef\u4ee5\u4f7f\u7528 Android Studio \u81ea\u52a8\u8865\u5168\u6216\u8005\u67e5\u770b\u5b98\u65b9\u6587\u6863\u6765\u67e5\u627e\u66f4\u591a\u4fee\u9970\u51fd\u6570\u3002","title":"\u57fa\u7840\u7528\u6cd5"},{"location":"modifier/overview/#_2","text":"\u4fee\u9970\u65b9\u6cd5\u76f4\u63a5\u662f\u5b58\u5728\u5148\u540e\u987a\u5e8f\u7684\uff0c\u4e0d\u540c\u7684\u8c03\u7528\u987a\u5e8f\u4f1a\u5bfc\u81f4\u4e0d\u4e00\u6837\u7684\u6548\u679c\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a @Composable fun UI (){ Card ( modifier = Modifier . clickable { } . padding ( 16. dp ) ) { Box ( modifier = Modifier . padding ( 20. dp )){ Text ( text = \"\u6211\u5df2\u7ecf\u6012\u4e0d\u53ef\u904f\u4e86\" ) } } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c clickable{} \u5728 padding() \u4e4b\u524d \u8c03\u7528\uff0c\u56e0\u6b64 Card \u5916\u95f4\u8ddd\u7684\u90e8\u5206\u4e5f\u662f\u53ef\u4ee5\u88ab\u70b9\u51fb\u5230\u7684\u3002 \u53cd\u8f6c\u4e00\u4e0b\uff0c\u5982\u679c clickable{} \u5728 padding() \u4e4b\u540e \u88ab\u8c03\u7528\uff0c\u90a3\u4e48 Card \u7684\u5916\u95f4\u8ddd\u90e8\u5206\u5c31\u4e0d\u80fd\u70b9\u51fb\u4e86\uff0c\u53ea\u80fd\u70b9\u51fb Card \u672c\u8eab\u3002 \u4e3a\u4ec0\u4e48\u5462? (\u6316\u6e90\u7801\u65f6\u95f4~) \u76f4\u63a5\u67e5\u770b\u8fd9\u4e9b \u4fee\u9970\u65b9\u6cd5 \u7684\u6e90\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u89c1\u4ed6\u4eec\u662f\u8fd9\u6837\u5b9e\u73b0\u7684: fun Modifier . padding ( all : Dp ) = this . then ( PaddingModifier ( start = all , top = all , end = all , bottom = all , rtlAware = true , inspectorInfo = debugInspectorInfo { name = \"padding\" value = all } ) ) \u663e\u800c\u6613\u89c1\uff0c\u8fd9\u662f\u4e00\u4e2aModifier\u7684\u6269\u5c55\u51fd\u6570\u3002 \u5b83\u8c03\u7528\u4e86 Modifier \u7684 then() \u51fd\u6570\uff0c\u800c\u8fd9\u4e2a then() \u9700\u8981\u63a5\u6536\u4e00\u4e2aModifier\u5bf9\u8c61\uff0c\u800c\u8fd9\u4e2aPaddingModifier\u7684\u6700\u7ec8\u7236\u7c7b\uff0c\u5c31\u662f Modifier \u3002 \u90a3 then() \u51fd\u6570\u5e72\u4e86\u4ec0\u4e48\u5462? \u7ee7\u7eed\u770b\u6e90\u7801: infix fun then ( other : Modifier ): Modifier = if ( other === Modifier ) this else CombinedModifier ( this , other ) \u5f88\u663e\u7136\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a CombinedModifier \u5bf9\u8c61\uff0c\u800c CombinedModifier \u4e5f\u662f\u7ee7\u627f\u81ea Modifier \u7c7b\u7684: class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier { override fun < R > foldIn ( initial : R , operation : ( R , Modifier . Element ) -> R ): R = inner . foldIn ( outer . foldIn ( initial , operation ), operation ) override fun < R > foldOut ( initial : R , operation : ( Modifier . Element , R ) -> R ): R = outer . foldOut ( inner . foldOut ( initial , operation ), operation ) override fun any ( predicate : ( Modifier . Element ) -> Boolean ): Boolean = outer . any ( predicate ) || inner . any ( predicate ) override fun all ( predicate : ( Modifier . Element ) -> Boolean ): Boolean = outer . all ( predicate ) && inner . all ( predicate ) override fun equals ( other : Any? ): Boolean = other is CombinedModifier && outer == other . outer && inner == other . inner override fun hashCode (): Int = outer . hashCode () + 31 * inner . hashCode () override fun toString () = \"[\" + foldIn ( \"\" ) { acc , element -> if ( acc . isEmpty ()) element . toString () else \" $ acc , $ element \" } + \"]\" } \u8fd9\u4e2a CombinedModifier \u6301\u6709\u4e86\u6211\u4eec\u65b0\u589e\u7684\u4fee\u9970\u5668\u548c\u539f\u6709\u7684\u4fee\u9970\u5668\uff0c\u5e76\u4e14\u5c06\u5176\u7ec4\u5408\u4e3a\u4e00\u4e2a\u65b0\u7684 Modifier \u3002 \u53ef\u4ee5\u770b\u5230\uff0c Modifier \u7684\u5b9e\u73b0\u975e\u5e38\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u94fe\u8868\uff0c\u5f53\u6211\u4eec\u7ed9\u4e00\u4e2a\u7ec4\u4ef6\u6dfb\u52a0\u4e00\u4e2a\u4fee\u9970\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a CombinedModifier \u5c06 \u65e7\u7684\u548c\u65b0\u7684Modifier\u7ec4\u5408\u5728\u4e00\u8d77 \uff0c\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684 Modifier \u3002 \u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u8c03\u7528\u4fee\u9970\u51fd\u6570\u4e3a\u4ec0\u4e48\u4f1a\u6709\u987a\u5e8f\u95ee\u9898\uff0c\u4fee\u9970\u51fd\u6570\u5e76\u4e0d\u662f\u7b80\u5355\u4fee\u6539\u4e86\u67d0\u4e2a\u7ec4\u4ef6\u5185\u90e8\u7684\u53c2\u6570\uff0c\u800c\u662f\u7ed9\u8fd9\u4e2a\u7ec4\u4ef6 \u5957\u4e0a\u4e86\u4e00\u5c42\u53c8\u4e00\u5c42\u7684\u4fee\u9970\u5668 \u3002","title":"\u4fee\u9970\u4f18\u5148\u7ea7"},{"location":"modifier/overview/#_3","text":"\u6765\u5199\u4e00\u4e2a\u53ef\u4ee5\u88ab\u70b9\u51fb\u7684\u5361\u7247\u5427, \u8ba9\u8fd9\u4e2a\u5361\u7247\u5bbd\u5ea6\u6700\u5927\uff0c\u9ad8\u5ea6100dp, \u5e76\u4e14\u5916\u8fb9\u8ddd16.dp\uff0c\u9634\u5f71\u6df1\u5ea68.dp\u5427 @Composable fun CardExample (){ Card ( modifier = Modifier . fillMaxWidth () . height ( 100. dp ) . padding ( 16. dp ) . clickable { /* \u4e0d\u505a\u4efb\u4f55\u4e8b */ }, elevation = 8. dp ) { // \u5185\u90e8\u6ca1\u6709\u7ec4\u4ef6 } } \u8fd0\u884c\u6548\u679c:","title":"\u7528\u6cd5\u793a\u8303"},{"location":"open-source-project/compose-douban/","text":"\u524d\u8a00 Compose \u6b63\u5f0f\u53d1\u5e03\u4e5f\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u611f\u89c9\u8981\u4e0a\u624b\u8fd8\u662f\u5f97\u5b9e\u6218\u4e00\u6ce2\u3002 \u6240\u4ee5\u501f\u7740\u7a7a\u95f2\u65f6\u95f4\uff0c\u53c2\u7167\u8c46\u74e3\u699c\u5355\u9875\u9762\u7684\u8bbe\u8ba1\uff0c\u5f00\u53d1\u4e86\u51e0\u4e2a Compose \u7248\u7684\u8c46\u74e3\u699c\u5355\u9875\u9762 UI \u6548\u679c\u8fd8\u662f\u633a\u597d\u770b\u7684\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star : Compose \u4eff\u8c46\u74e3\u699c\u5355\u5ba2\u6237\u7aef \u6548\u679c\u56fe \u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe \u7279\u6027 \u5728\u9879\u76ee\u4e2d\u4e3b\u8981\u7528\u5230\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff0c\u4ee5\u7f8e\u5316 UI \u53ca\u4f53\u9a8c 1. \u652f\u6301\u8bbe\u7f6e\u6c89\u6d78\u5f0f\u72b6\u6001\u680f\u53ca\u72b6\u6001\u680f\u989c\u8272 2. \u652f\u6301\u6c34\u5e73\u65b9\u5411\u6eda\u52a8\uff0c\u7ad6\u76f4\u65b9\u5411\u6eda\u52a8\u7b49\u591a\u79cd UI \u6548\u679c 3. \u652f\u6301\u7ed9 Image \u8bbe\u7f6e\u6e10\u53d8\u6ee4\u955c\uff0c\u4ee5\u7f8e\u5316\u663e\u793a\u6548\u679c 4. \u652f\u6301\u6807\u9898\u4e0e\u5217\u8868\u9875\u8054\u52a8 5. \u901a\u8fc7 Paging \u652f\u6301\u4e86\u5206\u9875\u52a0\u8f7d \u4e3b\u8981\u5b9e\u73b0 \u5177\u4f53\u6e90\u7801\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u4e3b\u8981\u529f\u80fd\u7684\u5b9e\u73b0 \u6c89\u6d78\u5f0f\u72b6\u6001\u680f\u8bbe\u7f6e \u72b6\u6001\u680f\u4e3b\u8981\u662f\u901a\u8fc7 accompanist-insets \u53ca accompanist-systemuicontroller \u5e93\u8bbe\u7f6e\u7684 accompanist \u4e0a\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5e38\u7528\u7684\uff0c\u5982\u72b6\u6001\u680f\uff0c\u6743\u9650\uff0c FlowLayout , ViewPager \u7b49 Compose \u5e93 \u5982\u679c\u6709\u65f6\u4f60\u53d1\u73b0\u57fa\u7840\u5e93\u91cc\u6ca1\u6709\u76f8\u5e94\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53bb\u8fd9\u91cc\u67e5\u627e\u4e0b \u8bbe\u7f6e\u72b6\u6001\u680f\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65 1. \u8bbe\u7f6e\u6c89\u6d78\u65f6\u72b6\u6001\u680f 2. \u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6 3. \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272 override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) // 1. \u8bbe\u7f6e\u72b6\u6001\u680f\u6c89\u6d78\u5f0f WindowCompat . setDecorFitsSystemWindows ( window , false ) setContent { BD_ToolTheme { // \u52a0\u5165ProvideWindowInsets ProvideWindowInsets { // 2. \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272 rememberSystemUiController (). setStatusBarColor ( Color . Transparent , darkIcons = MaterialTheme . colors . isLight ) Column { // 3. \u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6\u5e76\u8bbe\u7f6e\u5360\u4f4d Spacer ( modifier = Modifier . statusBarsHeight () . fillMaxWidth ()) Text ( text = \"\u9996\u9875\\r\\n\u9996\u98751\\r\\n\u9996\u98752\\r\\n\u9996\u98753\" ) } } } } } \u901a\u8fc7\u4ee5\u4e0a\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u7b80\u5355\u7684\u5b9e\u73b0\u6c89\u6d78\u72b6\u6001\u680f\u7684\u8bbe\u7f6e Image \u8bbe\u7f6e\u6e10\u53d8\u6ee4\u955c \u8c46\u74e3\u699c\u5355\u9875\u9762\u90fd\u7ed9 Image \u8bbe\u7f6e\u4e86\u6e10\u53d8\u6ee4\u955c\uff0c\u4ee5\u7f8e\u5316 UI \u6548\u679c \u5176\u5b9e\u5b9e\u73b0\u8d77\u6765\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u7ed9 Image \u524d\u6dfb\u52a0\u4e00\u5c42\u6e10\u53d8\u7684\u8499\u5c42\u5373\u53ef @Composable fun TopRankItem ( item : HomeTopRank ) { Box ( modifier = Modifier . size ( 180. dp , 220. dp ) . padding ( 8. dp ) . clip ( RoundedCornerShape ( 10. dp )) ) { // 1. \u56fe\u7247 Image ( painter = rememberCoilPainter ( request = item . imgUrl ), contentDescription = null , contentScale = ContentScale . Crop , modifier = Modifier . fillMaxSize () ) Column ( modifier = Modifier . fillMaxSize () // \u6e10\u53d8\u6ee4\u955c . background ( brush = Brush . linearGradient ( colors = listOf ( Color ( item . startColor ), Color ( item . endColor )), start = Offset ( 0f , Float . POSITIVE_INFINITY ), end = Offset ( Float . POSITIVE_INFINITY , 0f ) ) ) . padding ( 8. dp ) ) { //\u5185\u5bb9 } } } \u5982\u4e0a\u6240\u793a\uff0c\u4f7f\u7528 Box \u5e03\u5c40\uff0c\u7ed9\u524d\u666f\u8bbe\u7f6e\u4e00\u4e2a\u4ece\u5de6\u4e0b\u5230\u53f3\u4e0a\u6e10\u53d8\u7684\u80cc\u666f\u5373\u53ef \u6807\u9898\u4e0e\u5217\u8868\u8054\u52a8 \u5177\u4f53\u6548\u679c\u53ef\u89c1\u4e0a\u9762\u7684\u52a8\u56fe\uff0c\u5373\u5728\u5217\u8868\u6eda\u52a8\u65f6\u6807\u9898\u4f1a\u6709\u4e00\u4e2a\u6e10\u73b0\u6e10\u9690\u6548\u679c \u8fd9\u4e2a\u6548\u679c\u5176\u5b9e\u6211\u4eec\u5728 Android View \u4f53\u7cfb\u4e2d\u4e5f\u5f88\u5e38\u89c1\uff0c\u4e3b\u8981\u601d\u8def\u4e5f\u5f88\u7b80\u5355: 1. \u76d1\u542c\u5217\u8868\u6eda\u52a8\uff0c\u83b7\u53d6\u5217\u8868\u6eda\u52a8 offset 2. \u6839\u636e\u5217\u8868\u6eda\u52a8 offset \u8bbe\u7f6e Header \u6548\u679c,\u5982\u80cc\u666f\u6216\u8005\u9ad8\u5ea6\u53d8\u5316\u7b49 @Composable fun RankScreen ( viewModel : RankViewModel = RankViewModel ()) { val scrollState = rememberLazyListState () Box { // 1. \u76d1\u542c\u5217\u8868 LazyColumn ( state = scrollState ) { //\u5217\u8868\u5185\u5bb9 } RankHeader ( scrollState ) } } @Composable fun RankHeader ( scrollState : LazyListState ) { val target = LocalDensity . current . run { 200. dp . toPx () } // 2. \u6839\u636e\u5217\u8868\u504f\u79fb\u91cf\u8ba1\u7b97\u6bd4\u4f8b val scrollPercent : Float = if ( scrollState . firstVisibleItemIndex > 0 ) { 1f } else { scrollState . firstVisibleItemScrollOffset / target } val activity = LocalContext . current as Activity val backgroundColor = Color ( 0 xFF7F6351 ) Column () { Spacer ( modifier = Modifier . fillMaxWidth () . statusBarsHeight () // 3. \u6839\u636e\u6bd4\u4f8b\u8bbe\u7f6eHeader\u7684alpha\uff0c\u4ee5\u5b9e\u73b0\u6e10\u53d8\u6548\u679c . alpha ( scrollPercent ) . background ( backgroundColor ) ) //.... } } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u6709\u4e09\u6b65\uff1a 1. \u76d1\u542c\u5217\u8868 2. \u6839\u636e\u5217\u8868\u504f\u79fb\u91cf\u8ba1\u7b97\u6bd4\u4f8b 3. \u6839\u636e\u6bd4\u4f8b\u8bbe\u7f6e Header \u7684 alpha \uff0c\u4ee5\u5b9e\u73b0\u6e10\u53d8\u6548\u679c \u5229\u7528 Paging \u5b9e\u73b0\u5206\u9875 \u76ee\u524d Pagin3 \u5df2\u7ecf\u652f\u6301\u4e86 Compose \uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 Paging \u8f7b\u677e\u5b9e\u73b0\u5206\u9875\u6548\u679c \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a 1. \u5728 ViewModel \u4e2d\u8bbe\u7f6e\u6570\u636e\u6e90 2. \u5728\u9875\u9762\u4e2d\u76d1\u542c Paging \u6570\u636e 3. \u6839\u636e\u52a0\u8f7d\u72b6\u6001\u8bbe\u7f6e\u52a0\u8f7d\u66f4\u591a footr \u72b6\u6001 //1. \u8bbe\u7f6e\u6570\u636e\u6e90 class RankViewModel : ViewModel () { val rankItems : Flow < PagingData < RankDetail >> = Pager ( PagingConfig ( pageSize = 10 , prefetchDistance = 1 )) { MovieSource () }. flow } @Composable fun RankScreen ( viewModel : RankViewModel = RankViewModel ()) { val lazyMovieItems = viewModel . rankItems . collectAsLazyPagingItems () Box { LazyColumn ( state = scrollState ) { // 2. \u5728\u9875\u9762\u4e2d\u76d1\u542cpaging items ( lazyMovieItems ) { it ?. let { RankListItem ( it ) } } // 3. \u6839\u636epaging\u72b6\u6001\u8bbe\u7f6e\u52a0\u8f7d\u66f4\u591afooter\u72b6\u6001\u7b49 lazyMovieItems . apply { when ( loadState . append ) { is LoadState . Loading -> { item { LoadingItem () } } } } } } } \u901a\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u7b80\u5355\u65b9\u4fbf\u5730\u5b9e\u73b0\u5206\u9875\u4e86 \u603b\u7ed3 \u9879\u76ee\u5730\u5740 ComposeDouban \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~ \u53c2\u8003\u8d44\u6599 Android Jetpack Compose \u6c89\u6d78\u5f0f/\u900f\u660e\u72b6\u6001\u680f Collapsing Toolbar made easy with Compose Infinite Lists With Paging 3 in Jetpack Compose","title":"Compose \u4eff\u8c46\u74e3\u699c\u5355\u5ba2\u6237\u7aef"},{"location":"open-source-project/compose-douban/#_1","text":"Compose \u6b63\u5f0f\u53d1\u5e03\u4e5f\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u611f\u89c9\u8981\u4e0a\u624b\u8fd8\u662f\u5f97\u5b9e\u6218\u4e00\u6ce2\u3002 \u6240\u4ee5\u501f\u7740\u7a7a\u95f2\u65f6\u95f4\uff0c\u53c2\u7167\u8c46\u74e3\u699c\u5355\u9875\u9762\u7684\u8bbe\u8ba1\uff0c\u5f00\u53d1\u4e86\u51e0\u4e2a Compose \u7248\u7684\u8c46\u74e3\u699c\u5355\u9875\u9762 UI \u6548\u679c\u8fd8\u662f\u633a\u597d\u770b\u7684\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star : Compose \u4eff\u8c46\u74e3\u699c\u5355\u5ba2\u6237\u7aef","title":"\u524d\u8a00"},{"location":"open-source-project/compose-douban/#_2","text":"\u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe","title":"\u6548\u679c\u56fe"},{"location":"open-source-project/compose-douban/#_3","text":"\u5728\u9879\u76ee\u4e2d\u4e3b\u8981\u7528\u5230\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff0c\u4ee5\u7f8e\u5316 UI \u53ca\u4f53\u9a8c 1. \u652f\u6301\u8bbe\u7f6e\u6c89\u6d78\u5f0f\u72b6\u6001\u680f\u53ca\u72b6\u6001\u680f\u989c\u8272 2. \u652f\u6301\u6c34\u5e73\u65b9\u5411\u6eda\u52a8\uff0c\u7ad6\u76f4\u65b9\u5411\u6eda\u52a8\u7b49\u591a\u79cd UI \u6548\u679c 3. \u652f\u6301\u7ed9 Image \u8bbe\u7f6e\u6e10\u53d8\u6ee4\u955c\uff0c\u4ee5\u7f8e\u5316\u663e\u793a\u6548\u679c 4. \u652f\u6301\u6807\u9898\u4e0e\u5217\u8868\u9875\u8054\u52a8 5. \u901a\u8fc7 Paging \u652f\u6301\u4e86\u5206\u9875\u52a0\u8f7d","title":"\u7279\u6027"},{"location":"open-source-project/compose-douban/#_4","text":"\u5177\u4f53\u6e90\u7801\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u4e3b\u8981\u529f\u80fd\u7684\u5b9e\u73b0","title":"\u4e3b\u8981\u5b9e\u73b0"},{"location":"open-source-project/compose-douban/#_5","text":"\u72b6\u6001\u680f\u4e3b\u8981\u662f\u901a\u8fc7 accompanist-insets \u53ca accompanist-systemuicontroller \u5e93\u8bbe\u7f6e\u7684 accompanist \u4e0a\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5e38\u7528\u7684\uff0c\u5982\u72b6\u6001\u680f\uff0c\u6743\u9650\uff0c FlowLayout , ViewPager \u7b49 Compose \u5e93 \u5982\u679c\u6709\u65f6\u4f60\u53d1\u73b0\u57fa\u7840\u5e93\u91cc\u6ca1\u6709\u76f8\u5e94\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53bb\u8fd9\u91cc\u67e5\u627e\u4e0b \u8bbe\u7f6e\u72b6\u6001\u680f\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65 1. \u8bbe\u7f6e\u6c89\u6d78\u65f6\u72b6\u6001\u680f 2. \u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6 3. \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272 override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) // 1. \u8bbe\u7f6e\u72b6\u6001\u680f\u6c89\u6d78\u5f0f WindowCompat . setDecorFitsSystemWindows ( window , false ) setContent { BD_ToolTheme { // \u52a0\u5165ProvideWindowInsets ProvideWindowInsets { // 2. \u8bbe\u7f6e\u72b6\u6001\u680f\u989c\u8272 rememberSystemUiController (). setStatusBarColor ( Color . Transparent , darkIcons = MaterialTheme . colors . isLight ) Column { // 3. \u83b7\u53d6\u72b6\u6001\u680f\u9ad8\u5ea6\u5e76\u8bbe\u7f6e\u5360\u4f4d Spacer ( modifier = Modifier . statusBarsHeight () . fillMaxWidth ()) Text ( text = \"\u9996\u9875\\r\\n\u9996\u98751\\r\\n\u9996\u98752\\r\\n\u9996\u98753\" ) } } } } } \u901a\u8fc7\u4ee5\u4e0a\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u7b80\u5355\u7684\u5b9e\u73b0\u6c89\u6d78\u72b6\u6001\u680f\u7684\u8bbe\u7f6e","title":"\u6c89\u6d78\u5f0f\u72b6\u6001\u680f\u8bbe\u7f6e"},{"location":"open-source-project/compose-douban/#image","text":"\u8c46\u74e3\u699c\u5355\u9875\u9762\u90fd\u7ed9 Image \u8bbe\u7f6e\u4e86\u6e10\u53d8\u6ee4\u955c\uff0c\u4ee5\u7f8e\u5316 UI \u6548\u679c \u5176\u5b9e\u5b9e\u73b0\u8d77\u6765\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u7ed9 Image \u524d\u6dfb\u52a0\u4e00\u5c42\u6e10\u53d8\u7684\u8499\u5c42\u5373\u53ef @Composable fun TopRankItem ( item : HomeTopRank ) { Box ( modifier = Modifier . size ( 180. dp , 220. dp ) . padding ( 8. dp ) . clip ( RoundedCornerShape ( 10. dp )) ) { // 1. \u56fe\u7247 Image ( painter = rememberCoilPainter ( request = item . imgUrl ), contentDescription = null , contentScale = ContentScale . Crop , modifier = Modifier . fillMaxSize () ) Column ( modifier = Modifier . fillMaxSize () // \u6e10\u53d8\u6ee4\u955c . background ( brush = Brush . linearGradient ( colors = listOf ( Color ( item . startColor ), Color ( item . endColor )), start = Offset ( 0f , Float . POSITIVE_INFINITY ), end = Offset ( Float . POSITIVE_INFINITY , 0f ) ) ) . padding ( 8. dp ) ) { //\u5185\u5bb9 } } } \u5982\u4e0a\u6240\u793a\uff0c\u4f7f\u7528 Box \u5e03\u5c40\uff0c\u7ed9\u524d\u666f\u8bbe\u7f6e\u4e00\u4e2a\u4ece\u5de6\u4e0b\u5230\u53f3\u4e0a\u6e10\u53d8\u7684\u80cc\u666f\u5373\u53ef","title":"Image \u8bbe\u7f6e\u6e10\u53d8\u6ee4\u955c"},{"location":"open-source-project/compose-douban/#_6","text":"\u5177\u4f53\u6548\u679c\u53ef\u89c1\u4e0a\u9762\u7684\u52a8\u56fe\uff0c\u5373\u5728\u5217\u8868\u6eda\u52a8\u65f6\u6807\u9898\u4f1a\u6709\u4e00\u4e2a\u6e10\u73b0\u6e10\u9690\u6548\u679c \u8fd9\u4e2a\u6548\u679c\u5176\u5b9e\u6211\u4eec\u5728 Android View \u4f53\u7cfb\u4e2d\u4e5f\u5f88\u5e38\u89c1\uff0c\u4e3b\u8981\u601d\u8def\u4e5f\u5f88\u7b80\u5355: 1. \u76d1\u542c\u5217\u8868\u6eda\u52a8\uff0c\u83b7\u53d6\u5217\u8868\u6eda\u52a8 offset 2. \u6839\u636e\u5217\u8868\u6eda\u52a8 offset \u8bbe\u7f6e Header \u6548\u679c,\u5982\u80cc\u666f\u6216\u8005\u9ad8\u5ea6\u53d8\u5316\u7b49 @Composable fun RankScreen ( viewModel : RankViewModel = RankViewModel ()) { val scrollState = rememberLazyListState () Box { // 1. \u76d1\u542c\u5217\u8868 LazyColumn ( state = scrollState ) { //\u5217\u8868\u5185\u5bb9 } RankHeader ( scrollState ) } } @Composable fun RankHeader ( scrollState : LazyListState ) { val target = LocalDensity . current . run { 200. dp . toPx () } // 2. \u6839\u636e\u5217\u8868\u504f\u79fb\u91cf\u8ba1\u7b97\u6bd4\u4f8b val scrollPercent : Float = if ( scrollState . firstVisibleItemIndex > 0 ) { 1f } else { scrollState . firstVisibleItemScrollOffset / target } val activity = LocalContext . current as Activity val backgroundColor = Color ( 0 xFF7F6351 ) Column () { Spacer ( modifier = Modifier . fillMaxWidth () . statusBarsHeight () // 3. \u6839\u636e\u6bd4\u4f8b\u8bbe\u7f6eHeader\u7684alpha\uff0c\u4ee5\u5b9e\u73b0\u6e10\u53d8\u6548\u679c . alpha ( scrollPercent ) . background ( backgroundColor ) ) //.... } } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u6709\u4e09\u6b65\uff1a 1. \u76d1\u542c\u5217\u8868 2. \u6839\u636e\u5217\u8868\u504f\u79fb\u91cf\u8ba1\u7b97\u6bd4\u4f8b 3. \u6839\u636e\u6bd4\u4f8b\u8bbe\u7f6e Header \u7684 alpha \uff0c\u4ee5\u5b9e\u73b0\u6e10\u53d8\u6548\u679c","title":"\u6807\u9898\u4e0e\u5217\u8868\u8054\u52a8"},{"location":"open-source-project/compose-douban/#paging","text":"\u76ee\u524d Pagin3 \u5df2\u7ecf\u652f\u6301\u4e86 Compose \uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 Paging \u8f7b\u677e\u5b9e\u73b0\u5206\u9875\u6548\u679c \u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a 1. \u5728 ViewModel \u4e2d\u8bbe\u7f6e\u6570\u636e\u6e90 2. \u5728\u9875\u9762\u4e2d\u76d1\u542c Paging \u6570\u636e 3. \u6839\u636e\u52a0\u8f7d\u72b6\u6001\u8bbe\u7f6e\u52a0\u8f7d\u66f4\u591a footr \u72b6\u6001 //1. \u8bbe\u7f6e\u6570\u636e\u6e90 class RankViewModel : ViewModel () { val rankItems : Flow < PagingData < RankDetail >> = Pager ( PagingConfig ( pageSize = 10 , prefetchDistance = 1 )) { MovieSource () }. flow } @Composable fun RankScreen ( viewModel : RankViewModel = RankViewModel ()) { val lazyMovieItems = viewModel . rankItems . collectAsLazyPagingItems () Box { LazyColumn ( state = scrollState ) { // 2. \u5728\u9875\u9762\u4e2d\u76d1\u542cpaging items ( lazyMovieItems ) { it ?. let { RankListItem ( it ) } } // 3. \u6839\u636epaging\u72b6\u6001\u8bbe\u7f6e\u52a0\u8f7d\u66f4\u591afooter\u72b6\u6001\u7b49 lazyMovieItems . apply { when ( loadState . append ) { is LoadState . Loading -> { item { LoadingItem () } } } } } } } \u901a\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u7b80\u5355\u65b9\u4fbf\u5730\u5b9e\u73b0\u5206\u9875\u4e86","title":"\u5229\u7528 Paging \u5b9e\u73b0\u5206\u9875"},{"location":"open-source-project/compose-douban/#_7","text":"","title":"\u603b\u7ed3"},{"location":"open-source-project/compose-douban/#_8","text":"ComposeDouban \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~","title":"\u9879\u76ee\u5730\u5740"},{"location":"open-source-project/compose-douban/#_9","text":"Android Jetpack Compose \u6c89\u6d78\u5f0f/\u900f\u660e\u72b6\u6001\u680f Collapsing Toolbar made easy with Compose Infinite Lists With Paging 3 in Jetpack Compose","title":"\u53c2\u8003\u8d44\u6599"},{"location":"open-source-project/compose-gmusic/","text":"GMusic-Compose-Samples \u524d\u8a00 \u5728\u5b66\u4e60\u4e86 Jetpack Compose \u540e\uff0c\u4f5c\u4e3a\u65b0\u4eba\u7684\u7b2c\u4e00\u4e2a\u5b9e\u6218\u9879\u76ee\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u672c\u5730\u97f3\u4e50\u64ad\u653e\u5668 \u9879\u76ee\u771f\u673a\u56fe \u4e3b\u8981\u5b9e\u73b0 \u5173\u4e8e\u8bfb\u53d6\u672c\u5730\u97f3\u4e50\u6587\u4ef6\u4ee5\u53ca\u63a7\u5236\u64ad\u653e\u7b49\u64cd\u4f5c\u5728\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8d58\u8ff0,\u53ef\u4ee5\u53c2\u8003\u6e90\u4ee3\u7801\u4e2d\u7684 mainVM.kt \u5185\u7684\u5185\u5bb9,\u8fd9\u91cc\u4e3b\u8981\u8bb2\u754c\u9762\u7684\u5b9e\u73b0 \u641c\u7d22\u6846\u7684\u5b9e\u73b0 @ExperimentalAnimationApi @Composable fun MainActSV ( vm : MainViewModel = viewModel () ) { // \u641c\u7d22\u6846\u53ef\u89c1\u6027 val visible by vm . expanded . observeAsState ( false ) // \u5f85\u641c\u7d22\u7684\u6b4c\u66f2 var targetSong by rememberSaveable { mutableStateOf ( \"\" ) } AnimatedVisibility ( visible = visible ) { Surface ( Modifier . fillMaxWidth (), elevation = 8. dp ) { Row ( modifier = Modifier . fillMaxWidth ()) { TextField ( value = targetSong , onValueChange = { targetSong = it vm . searchSong ( it ) }, label = { Text ( \"\u8bf7\u8f93\u5165\u6b4c\u66f2\u540d\" ) }, modifier = Modifier . fillMaxWidth (), keyboardOptions = KeyboardOptions ( keyboardType = KeyboardType . Text , imeAction = ImeAction . Search ), leadingIcon = { Icon ( Icons . Filled . Search , \"\u641c\u7d22\" ) }, ) } } } } \u6b4c\u66f2\u5217\u8868\u5e03\u5c40 @RequiresApi ( Build . VERSION_CODES . R ) @Composable fun LocalMusicRVItem ( localMusicBean : LocalMusicBean , vm : MainViewModel = viewModel ()) { Column ( modifier = Modifier . clickable { vm . playMusicInMusicBean ( localMusicBean ) } . height ( IntrinsicSize . Min )) { Text ( localMusicBean . song , modifier = Modifier . padding ( 5. dp ), style = TextStyle ( fontWeight = FontWeight . Bold , fontSize = 20. sp , letterSpacing = 0.15 . sp , color = song_tv_color ), maxLines = 1 ) Row { Text ( localMusicBean . singer , modifier = Modifier . padding ( 5. dp ) . wrapContentWidth ( Alignment . Start ) //\u4f5c\u8005\u540d\u5728\u5de6\u4fa7 . weight ( 1f ), style = TextStyle ( color = song_tv_color ) ) Text ( localMusicBean . duration , modifier = Modifier . padding ( 5. dp ) . wrapContentWidth ( Alignment . End ) //\u65f6\u95f4\u5728\u53f3\u4fa7 . weight ( 1f ), style = TextStyle ( color = song_tv_color ) ) } } } \u5e95\u90e8\u63a7\u5236\u680f\u7684\u5b9e\u73b0 @RequiresApi ( Build . VERSION_CODES . R ) @Composable fun BottomControlLayout () { val localMusicBean : LocalMusicBean by viewModel . localMusicBean . observeAsState ( LocalMusicBean ()) Row ( modifier = Modifier . fillMaxWidth () . height ( IntrinsicSize . Min ) . defaultMinSize ( 0. dp , 80. dp ) . background ( bottom_layout_main_bg_color ), verticalAlignment = Alignment . CenterVertically ) { // \u6b4c\u66f2\u56fe\u6807 Box ( Modifier . weight ( 1f ), contentAlignment = Alignment . Center ) { Image ( painter = painterResource ( id = R . drawable . user ), contentDescription = \"\u6b4c\u66f2\u56fe\u6807\" , modifier = Modifier . clip ( CircleShape ) . size ( 60. dp ) . wrapContentWidth ( Alignment . CenterHorizontally ) ) } // \u6b4c\u66f2\u4fe1\u606f Column ( Modifier . fillMaxWidth (). weight ( 2f )) { Text ( localMusicBean . song , style = TextStyle ( color = Color . White )) Text ( localMusicBean . singer , style = TextStyle ( color = Color . White )) } Row ( Modifier . fillMaxWidth () . wrapContentWidth ( Alignment . CenterHorizontally ) . weight ( 2f ), verticalAlignment = Alignment . CenterVertically , //\u8bbe\u7f6e\u5782\u76f4\u65b9\u5411\u5bf9\u9f50 horizontalArrangement = Arrangement . spacedBy ( 10. dp ) //\u8bbe\u7f6e\u5b50\u9879\u7684\u95f4\u8ddd ) { val isPlaying by viewModel . isPlaying . observeAsState ( false ) // \u4e0a\u4e00\u9996\u6309\u94ae Image ( painter = painterResource ( id = R . drawable . ic_last ), contentDescription = \"\u4e0a\u4e00\u9996\" , modifier = Modifier . clickable { viewModel . playLastMusic () } . size ( 30. dp ) ) // \u64ad\u653e\u6682\u505c\u6309\u94ae Image ( painter = if ( isPlaying ) { painterResource ( id = R . drawable . ic_pause ) } else { painterResource ( id = R . drawable . ic_play ) }, contentDescription = \"\u64ad\u653e\u6216\u8005\u6682\u505c\" , modifier = Modifier . clickable { viewModel . playCurrentMusic () } . size ( 40. dp ) ) // \u4e0b\u4e00\u9996\u6309\u94ae Image ( painter = painterResource ( id = R . drawable . ic_next ), contentDescription = \"\u4e0b\u4e00\u9996\" , modifier = Modifier . clickable { viewModel . playNextMusic () } . size ( 30. dp ) ) } } } \u6b4c\u66f2\u5217\u8868 @Composable fun MainActRV ( modifier : Modifier = Modifier , vm : MainViewModel = viewModel () ) { val targetSong by vm . targetSong . observeAsState ( ArrayList < LocalMusicBean > ()) LazyColumn ( modifier = modifier . background ( Color ( 0 xFFdcdde1 ))) { items ( items = targetSong ){ LocalMusicRVItem ( localMusicBean = it ) } } } \u9879\u76ee\u5730\u5740 GMusic-Compose-Samples \u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9,\u6b22\u8fce\u70b9\u8d5e\ud83d\udc4d,Star\u2b50,\u6536\u85cf\ud83d\ude0d,\u5982\u679c\u6709\u6539\u8fdb\u610f\u89c1\u8fd8\u53ef\u4ee5\u63d0\u4ea4 issue \u5916\u90e8\u4f9d\u8d56 PermissionX An open source Android library that makes handling runtime permissions extremely easy Android Jetpack Compose \u6c89\u6d78\u5f0f/\u900f\u660e\u72b6\u6001\u680f ProvideWindowInsets SystemUiController","title":"Compose \u4e00\u6b3e\u7b80\u6613\u7684\u97f3\u4e50\u64ad\u653e\u8f6f\u4ef6"},{"location":"open-source-project/compose-gmusic/#gmusic-compose-samples","text":"","title":"GMusic-Compose-Samples"},{"location":"open-source-project/compose-gmusic/#_1","text":"\u5728\u5b66\u4e60\u4e86 Jetpack Compose \u540e\uff0c\u4f5c\u4e3a\u65b0\u4eba\u7684\u7b2c\u4e00\u4e2a\u5b9e\u6218\u9879\u76ee\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u672c\u5730\u97f3\u4e50\u64ad\u653e\u5668","title":"\u524d\u8a00"},{"location":"open-source-project/compose-gmusic/#_2","text":"","title":"\u9879\u76ee\u771f\u673a\u56fe"},{"location":"open-source-project/compose-gmusic/#_3","text":"\u5173\u4e8e\u8bfb\u53d6\u672c\u5730\u97f3\u4e50\u6587\u4ef6\u4ee5\u53ca\u63a7\u5236\u64ad\u653e\u7b49\u64cd\u4f5c\u5728\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8d58\u8ff0,\u53ef\u4ee5\u53c2\u8003\u6e90\u4ee3\u7801\u4e2d\u7684 mainVM.kt \u5185\u7684\u5185\u5bb9,\u8fd9\u91cc\u4e3b\u8981\u8bb2\u754c\u9762\u7684\u5b9e\u73b0","title":"\u4e3b\u8981\u5b9e\u73b0"},{"location":"open-source-project/compose-gmusic/#_4","text":"@ExperimentalAnimationApi @Composable fun MainActSV ( vm : MainViewModel = viewModel () ) { // \u641c\u7d22\u6846\u53ef\u89c1\u6027 val visible by vm . expanded . observeAsState ( false ) // \u5f85\u641c\u7d22\u7684\u6b4c\u66f2 var targetSong by rememberSaveable { mutableStateOf ( \"\" ) } AnimatedVisibility ( visible = visible ) { Surface ( Modifier . fillMaxWidth (), elevation = 8. dp ) { Row ( modifier = Modifier . fillMaxWidth ()) { TextField ( value = targetSong , onValueChange = { targetSong = it vm . searchSong ( it ) }, label = { Text ( \"\u8bf7\u8f93\u5165\u6b4c\u66f2\u540d\" ) }, modifier = Modifier . fillMaxWidth (), keyboardOptions = KeyboardOptions ( keyboardType = KeyboardType . Text , imeAction = ImeAction . Search ), leadingIcon = { Icon ( Icons . Filled . Search , \"\u641c\u7d22\" ) }, ) } } } }","title":"\u641c\u7d22\u6846\u7684\u5b9e\u73b0"},{"location":"open-source-project/compose-gmusic/#_5","text":"@RequiresApi ( Build . VERSION_CODES . R ) @Composable fun LocalMusicRVItem ( localMusicBean : LocalMusicBean , vm : MainViewModel = viewModel ()) { Column ( modifier = Modifier . clickable { vm . playMusicInMusicBean ( localMusicBean ) } . height ( IntrinsicSize . Min )) { Text ( localMusicBean . song , modifier = Modifier . padding ( 5. dp ), style = TextStyle ( fontWeight = FontWeight . Bold , fontSize = 20. sp , letterSpacing = 0.15 . sp , color = song_tv_color ), maxLines = 1 ) Row { Text ( localMusicBean . singer , modifier = Modifier . padding ( 5. dp ) . wrapContentWidth ( Alignment . Start ) //\u4f5c\u8005\u540d\u5728\u5de6\u4fa7 . weight ( 1f ), style = TextStyle ( color = song_tv_color ) ) Text ( localMusicBean . duration , modifier = Modifier . padding ( 5. dp ) . wrapContentWidth ( Alignment . End ) //\u65f6\u95f4\u5728\u53f3\u4fa7 . weight ( 1f ), style = TextStyle ( color = song_tv_color ) ) } } }","title":"\u6b4c\u66f2\u5217\u8868\u5e03\u5c40"},{"location":"open-source-project/compose-gmusic/#_6","text":"@RequiresApi ( Build . VERSION_CODES . R ) @Composable fun BottomControlLayout () { val localMusicBean : LocalMusicBean by viewModel . localMusicBean . observeAsState ( LocalMusicBean ()) Row ( modifier = Modifier . fillMaxWidth () . height ( IntrinsicSize . Min ) . defaultMinSize ( 0. dp , 80. dp ) . background ( bottom_layout_main_bg_color ), verticalAlignment = Alignment . CenterVertically ) { // \u6b4c\u66f2\u56fe\u6807 Box ( Modifier . weight ( 1f ), contentAlignment = Alignment . Center ) { Image ( painter = painterResource ( id = R . drawable . user ), contentDescription = \"\u6b4c\u66f2\u56fe\u6807\" , modifier = Modifier . clip ( CircleShape ) . size ( 60. dp ) . wrapContentWidth ( Alignment . CenterHorizontally ) ) } // \u6b4c\u66f2\u4fe1\u606f Column ( Modifier . fillMaxWidth (). weight ( 2f )) { Text ( localMusicBean . song , style = TextStyle ( color = Color . White )) Text ( localMusicBean . singer , style = TextStyle ( color = Color . White )) } Row ( Modifier . fillMaxWidth () . wrapContentWidth ( Alignment . CenterHorizontally ) . weight ( 2f ), verticalAlignment = Alignment . CenterVertically , //\u8bbe\u7f6e\u5782\u76f4\u65b9\u5411\u5bf9\u9f50 horizontalArrangement = Arrangement . spacedBy ( 10. dp ) //\u8bbe\u7f6e\u5b50\u9879\u7684\u95f4\u8ddd ) { val isPlaying by viewModel . isPlaying . observeAsState ( false ) // \u4e0a\u4e00\u9996\u6309\u94ae Image ( painter = painterResource ( id = R . drawable . ic_last ), contentDescription = \"\u4e0a\u4e00\u9996\" , modifier = Modifier . clickable { viewModel . playLastMusic () } . size ( 30. dp ) ) // \u64ad\u653e\u6682\u505c\u6309\u94ae Image ( painter = if ( isPlaying ) { painterResource ( id = R . drawable . ic_pause ) } else { painterResource ( id = R . drawable . ic_play ) }, contentDescription = \"\u64ad\u653e\u6216\u8005\u6682\u505c\" , modifier = Modifier . clickable { viewModel . playCurrentMusic () } . size ( 40. dp ) ) // \u4e0b\u4e00\u9996\u6309\u94ae Image ( painter = painterResource ( id = R . drawable . ic_next ), contentDescription = \"\u4e0b\u4e00\u9996\" , modifier = Modifier . clickable { viewModel . playNextMusic () } . size ( 30. dp ) ) } } }","title":"\u5e95\u90e8\u63a7\u5236\u680f\u7684\u5b9e\u73b0"},{"location":"open-source-project/compose-gmusic/#_7","text":"@Composable fun MainActRV ( modifier : Modifier = Modifier , vm : MainViewModel = viewModel () ) { val targetSong by vm . targetSong . observeAsState ( ArrayList < LocalMusicBean > ()) LazyColumn ( modifier = modifier . background ( Color ( 0 xFFdcdde1 ))) { items ( items = targetSong ){ LocalMusicRVItem ( localMusicBean = it ) } } }","title":"\u6b4c\u66f2\u5217\u8868"},{"location":"open-source-project/compose-gmusic/#_8","text":"GMusic-Compose-Samples \u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9,\u6b22\u8fce\u70b9\u8d5e\ud83d\udc4d,Star\u2b50,\u6536\u85cf\ud83d\ude0d,\u5982\u679c\u6709\u6539\u8fdb\u610f\u89c1\u8fd8\u53ef\u4ee5\u63d0\u4ea4 issue","title":"\u9879\u76ee\u5730\u5740"},{"location":"open-source-project/compose-gmusic/#_9","text":"","title":"\u5916\u90e8\u4f9d\u8d56"},{"location":"open-source-project/compose-gmusic/#permissionx","text":"An open source Android library that makes handling runtime permissions extremely easy","title":"PermissionX"},{"location":"open-source-project/compose-gmusic/#android-jetpack-compose-providewindowinsets-systemuicontroller","text":"","title":"Android Jetpack Compose \u6c89\u6d78\u5f0f/\u900f\u660e\u72b6\u6001\u680f ProvideWindowInsets SystemUiController"},{"location":"open-source-project/compose-moon-animation/","text":"\u6548\u679c\u56fe \u4eba\u6709\u60b2\u6b22\u79bb\u5408\uff0c\u6708\u6709\u9634\u6674\u5706\u7f3a\uff0c\u6b64\u4e8b\u53e4\u96be\u5168\u3002 \u4f46\u613f\u4eba\u957f\u4e45\uff0c\u5343\u91cc\u5171\u5a75\u5a1f\u3002 \u6070\u9022\u4e2d\u79cb\u4f73\u8282\uff0c\u6211\u4eec\u4eca\u5929\u5c31\u4f7f\u7528 Compose \u6765\u5b9e\u73b0\u4e00\u4e0b\u6708\u76f8\u53d8\u5316\u52a8\u753b\u5427~ \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star : Compose \u5b9e\u73b0\u6708\u4eae\u9634\u6674\u5706\u7f3a\u52a8\u753b \u4e3b\u8981\u601d\u8def \u6ee1\u5929\u7e41\u661f \u4e3a\u4e86\u5b9e\u73b0\u6708\u76f8\u52a8\u753b\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e00\u4e2a\u80cc\u666f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u597d\u770b\u7684\u661f\u7a7a\uff0c\u6700\u597d\u8fd8\u6709\u95ea\u70c1\u7684\u6548\u679c \u4e3a\u4e3a\u5b9e\u73b0\u661f\u7a7a\u80cc\u666f\uff0c\u6211\u4eec\u9700\u8981\u505a\u4ee5\u4e0b\u51e0\u4ef6\u4e8b 1. \u7ed8\u5236\u80cc\u666f 2. \u751f\u6210\u51e0\u5341\u4e2a\u661f\u661f\uff0c\u5728\u80cc\u666f\u4e0a\u968f\u673a\u5206\u5e03 3. \u901a\u8fc7 scale \u4e0e alpha \u52a8\u753b\uff0c\u5b9e\u73b0\u6bcf\u4e2a\u661f\u661f\u7684\u95ea\u70c1\u6548\u679c \u6211\u4eec\u4e00\u8d77\u6765\u770b\u4e0b\u4ee3\u7801 @Composable fun Stars ( starNum : Int ) { BoxWithConstraints ( modifier = Modifier . fillMaxSize ()) { val list = remember { mutableStateListOf < Star > () } LaunchedEffect ( true ) { for ( i in 0. . starNum ) { delay ( 100L ) //\u6dfb\u52a0\u661f\u661f\uff0c\u5b83\u4eec\u7684\u4f4d\u7f6e\u5728\u5c4f\u5e55\u4e0a\u968f\u673a list . add ( Star ( maxWidth . value * density , maxHeight . value * density )) } } list . forEach { Star ( it ) } } } @Composable fun Star ( star : Star ) { var progress : Float by remember { mutableStateOf ( 0f ) } val infiniteTransition = rememberInfiniteTransition () .... star . updateStar ( progress ) // \u901a\u8fc7\u52a8\u753b\u66f4\u65b0progress,\u4ece\u800c\u66f4\u65b0star\u7684\u5c5e\u6027\u503c Canvas ( modifier = Modifier . wrapContentSize ()) { scale ( star . scale , Offset ( star . x , star . y )) { // \u7f29\u653e\u52a8\u753b drawCircle ( star . starColor , star . radius , center = Offset ( star . x , star . y ), alpha = star . alpha // alpha\u52a8\u753b ) } } } \u6708\u76f8\u53d8\u5316 \u6708\u76f8\uff0c\u5929\u6587\u5b66\u672f\u8bed\u3002\uff08 phase of the moon \uff09\u662f\u5929\u6587\u5b66\u4e2d\u5bf9\u4e8e\u5730\u7403\u4e0a\u770b\u5230\u7684\u6708\u7403\u88ab\u592a\u9633\u7167\u660e\u90e8\u5206\u7684\u79f0\u547c\u3002\u968f\u7740\u6708\u4eae\u6bcf\u5929\u5728\u661f\u7a7a\u4e2d\u81ea\u4e1c\u5411\u897f\u79fb\u52a8\u4e00\u5927\u6bb5\u8ddd\u79bb\uff0c\u5b83\u7684\u5f62\u72b6\u4e5f\u5728\u4e0d\u65ad\u5730\u53d8\u5316\u7740\uff0c\u8fd9\u5c31\u662f\u6708\u4eae\u4f4d\u76f8\u53d8\u5316\uff0c\u53eb\u505a\u6708\u76f8\u3002 \u5b83\u7684\u53d8\u5316\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a \u6bcf\u4e2a\u9636\u6bb5\u90fd\u6709\u5404\u81ea\u7684\u540d\u5b57\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u6708\u76f8\u53d8\u5316\u8fc7\u7a0b\u8fd8\u662f\u6709\u4e9b\u590d\u6742\u7684\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e2a\u6548\u679c\u5462\uff1f \u601d\u8def\u5206\u6790 \u4e3a\u4e86\u5b9e\u73b0\u6708\u76f8\u53d8\u5316,\u9996\u5148\u6211\u4eec\u9700\u8981\u753b\u4e00\u4e2a\u5706\uff0c\u4ee3\u8868\u6708\u4eae\uff0c\u6700\u7ec8\u7684\u6ee1\u6708\u5176\u5b9e\u5c31\u662f\u8fd9\u6837\uff0c\u6bd4\u8f83\u7b80\u5355 \u6709\u4e86\u6ee1\u6708\uff0c\u5982\u4f55\u5728\u5b83\u7684\u57fa\u7840\u4e0a\uff0c\u753b\u51fa\u5176\u5b83\u7684\u6708\u76f8\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u6765\u5b9e\u73b0 \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u5b9a\u4e49\u7684\u662f\uff0c\u5f53\u4e24\u4e2a\u56fe\u50cf\u5408\u6210\u65f6\uff0c\u56fe\u50cf\u6700\u7ec8\u7684\u5c55\u793a\u65b9\u5f0f\u3002\u5728 Androd \u4e2d\uff0c\u6709\u76f8\u5e94\u7684 API \u63a5\u53e3\u6765\u652f\u6301\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\uff0c\u5373 Xfermode . \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u4e3b\u8981\u6709\u4ee5\u4e0b16\u79cd,\u4ee5\u4e0b\u8fd9\u5f20\u56fe\u7247\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5f62\u8c61\u5730\u8bf4\u660e\u4e86\u56fe\u50cf\u6df7\u5408\u7684\u4f5c\u7528\uff0c\u4e24\u4e2a\u56fe\u5f62\u4e00\u5706\u4e00\u65b9\u901a\u8fc7\u4e00\u5b9a\u7684\u8ba1\u7b97\u4ea7\u751f\u4e0d\u540c\u7684\u7ec4\u5408\u6548\u679c\uff0c\u5177\u4f53\u5982\u4e0b \u6211\u4eec\u4e3a\u4e86\u5b9e\u73b0\u6708\u76f8\u52a8\u753b\uff0c\u4e3b\u8981\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u4e24\u79cd\u6df7\u5408\u6a21\u5f0f - DST_OUT :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u4e0d\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u76ee\u6807\u56fe\u50cf\u3011\uff0c\u5728\u76f8\u4ea4\u7684\u5730\u65b9\u6839\u636e\u6e90\u56fe\u50cf\u7684 alpha \u8fdb\u884c\u8fc7\u6ee4\uff0c\u6e90\u56fe\u50cf\u5b8c\u5168\u4e0d\u900f\u660e\u5219\u5b8c\u5168\u8fc7\u6ee4\uff0c\u5b8c\u5168\u900f\u660e\u5219\u4e0d\u8fc7\u6ee4 - DST_OVER :\u5c06\u76ee\u6807\u56fe\u50cf\u653e\u5728\u6e90\u56fe\u50cf\u4e0a\u65b9 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u56fe\u5f62\u6df7\u5408\u6a21\u5f0f\uff0c\u90a3\u4e48\u9700\u8981\u5728\u6ee1\u6708\u4e0a\u753b\u4ec0\u4e48\u624d\u80fd\u5b9e\u73b0\u5176\u5b83\u6548\u679c\u5462? \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6ee1\u6708\u4e0a\u653e\u4e00\u4e2a\u534a\u5706 + \u4e00\u4e2a\u692d\u5706\u6765\u5b9e\u73b0 1. \u5982\u4e0a\u6240\u793a\uff0c\u692d\u5706\u4e0a\u6c34\u5e73\u7684\u7ebf\u53eb\u957f\u8f74\uff0c\u7ad6\u76f4\u7684\u7ebf\u53eb\u77ed\u8f74 2. \u77ed\u8f74\u4e0d\u53d8\uff0c\u957f\u8f74\u534a\u5f84\u4ece0\u5230\u6ee1\u6708\u534a\u5f84\u53d1\u751f\u53d8\u5316\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u534a\u5706\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u6708\u76f8 3. \u6bd4\u5982\u4e3a\u4e86\u753b\u4e0a\u86fe\u7709\u6708\uff0c\u53ef\u4ee5\u901a\u8fc7\u5de6\u534a\u8fb9\u753b\u534a\u5706\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u692d\u5706\uff0c\u4e24\u90fd\u90fd\u4f7f\u7528 DST_OVER \u6df7\u5408\u6a21\u5f0f\u6765\u5b9e\u73b0\uff0c\u5c31\u5b9e\u73b0\u4e86\u5b83\u4eec\u4e24\u7684\u5e76\u96c6\uff0c\u7136\u540e\u8986\u76d6\u5728\u4e0b\u5c42\u6ee1\u6708\u4e0a\uff0c\u5c31\u5b9e\u73b0\u4e86\u4e0a\u86fe\u7709\u6708 4. \u4e3a\u4e86\u753b\u6e10\u76c8\u51f8\u6708,\u5219\u540c\u6837\u5c31\u5de6\u534a\u8fb9\u4ee5 DST_OVER \u753b\u534a\u5706,\u518d\u4ee5 DST_OUT \u753b\u692d\u5706\uff0c\u5c31\u53ea\u5269\u4e0b\u534a\u5706\u4e0e\u692d\u5706\u4e0d\u76f8\u4ea4\u7684\u90e8\u5206\uff0c\u518d\u4e0e\u4e0b\u5c42\u7684\u6ee1\u6708\u6df7\u5408\uff0c\u5c31\u5b9e\u73b0\u4e86\u6e10\u76c8\u51f8\u6708 \u8fd9\u6837\u8bf4\u53ef\u80fd\u8fd8\u662f\u6bd4\u8f83\u62bd\u8c61\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4e0b\u8f7d\u6e90\u7801\u8be6\u7ec6\u4e86\u89e3\u4e0b \u6e90\u7801\u5b9e\u73b0 //\u6708\u4eae\u52a8\u753b\u63a7\u4ef6 @Composable fun Moon ( modifier : Modifier ) { var progress : Float by remember { mutableStateOf ( 0f ) } BoxWithConstraints ( modifier = modifier ) { Canvas ( modifier = Modifier . size ( canvasSize ) . align ( Alignment . TopCenter ) ) { drawMoonCircle ( this , progress ) drawIntoCanvas { it . withSaveLayer ( Rect ( 0f , 0f , size . width , size . height ), paint = Paint ()) { if ( progress != 1f ) { //\u5fc5\u987b\u5148\u753b\u534a\u5706\uff0c\u518d\u753b\u692d\u5706 drawMoonArc ( this , it , paint , progress ) drawMoonOval ( this , it , paint , progress ) } } } } } } // 1.\u9996\u5148\u753b\u4e00\u4e2a\u6ee1\u6708 private fun drawMoonCircle ( scope : DrawScope , progress : Float ) { //.... drawCircle ( Color ( 0 xfff9dc60 )) } // 3. \u753b\u534a\u5706 private fun drawMoonArc ( scope : DrawScope , canvas : Canvas , paint : Paint , progress : Float ) { val sweepAngle = when { //\u4ece\u65b0\u6708\u5230\u6ee1\u6708\u5728\u4e00\u8fb9\u753b\u534a\u5706\uff0c\u4ece\u6ee1\u6708\u56de\u5230\u65b0\u6708\u5219\u5728\u53e6\u4e00\u8fb9\u753b\u534a\u5706 progress <= 0.5f -> 180f progress <= 1f -> 180f progress <= 1.5f -> - 180f else -> - 180f } paint . blendMode = BlendMode . DstOver //\u534a\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u59cb\u7ec8\u662fDstOver scope . run { canvas . drawArc ( Rect ( 0f , 0f , size . width , size . height ), 90f , sweepAngle , false , paint ) } } // 2. \u753b\u692d\u5706 private fun drawMoonOval ( scope : DrawScope , canvas : Canvas , paint : Paint , progress : Float ) { val blendMode = when { //\u692d\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e0b progress <= 0.5f -> BlendMode . DstOver progress <= 1f -> BlendMode . DstOut progress <= 1.5f -> BlendMode . DstOut else -> BlendMode . DstOver } paint . blendMode = blendMode scope . run { canvas . drawOval ( Rect ( offset = topLeft , size = Size ( horizontalAxis , verticalAxis )), //\u692d\u5706\u7684\u957f\u8f74\u4f1a\u968f\u7740\u52a8\u753b\u53d8\u5316 paint = paint ) } } \u5982\u4e0a\u6240\u793a: 1. \u4e3b\u8981\u5c31\u662f3\u4e2a\u6b65\u9aa4\uff0c\u753b\u6ee1\u6708\uff0c\u518d\u753b\u534a\u5706\uff0c\u518d\u753b\u692d\u5706 2. \u534a\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u59cb\u7ec8\u662f DstOver ,\u800c\u692d\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5b83\u4eec\u7684\u989c\u8272\u90fd\u662f\u9ed1\u8272\u3002 3. \u53ef\u4ee5\u770b\u5230\u534a\u5706\u4e0e\u692d\u5706\u65b0\u5efa\u4e86\u4e00\u4e2a Layer \uff0c\u6df7\u5408\u6a21\u5f0f\u7684\u53d8\u5316\uff0c\u8868\u793a\u7684\u5c31\u662f\u6700\u540e\u5269\u4e0b\u7684\u662f\u5b83\u4eec\u7684\u5e76\u96c6\uff0c\u8fd8\u662f Dst \u4e0d\u76f8\u4ea4\u7684\u90e8\u5206\uff0c\u6700\u540e\u8986\u76d6\u5230\u6ee1\u6708\u4e0a\uff0c\u6240\u4ee5\u5fc5\u987b\u5148\u753b\u534a\u5706 4. \u968f\u7740\u52a8\u753b\u7684\u53d8\u5316\uff0c\u692d\u5706\u7684\u957f\u8f74\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u6708\u76f8 \u8bd7\u6b4c\u6253\u5b57\u673a\u6548\u679c \u4e0a\u9762\u5176\u5b9e\u5df2\u7ecf\u505a\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u6211\u4eec\u6700\u540e\u518d\u6dfb\u52a0\u4e00\u4e9b\u8bd7\u6b4c\uff0c\u5e76\u4e3a\u5b83\u4eec\u6dfb\u52a0\u6253\u5b57\u673a\u6548\u679c @Composable fun PoetryColumn ( list : List < Char > , offsetX : Float = 0f , offsetY : Float = 0f ) { val targetList = remember { mutableStateListOf < Char > () } LaunchedEffect ( list ) { targetList . clear () list . forEach { delay ( 500 ) //\u901a\u8fc7\u5728LaunchedEffect\u4e2ddelay\u5b9e\u73b0\u52a8\u753b\u6548\u679c targetList . add ( it ) } } //\u5c06 Jetpack Compose \u73af\u5883\u7684 Paint \u5bf9\u8c61\u8f6c\u6362\u4e3a\u539f\u751f\u7684 Paint \u5bf9\u8c61 val textPaint = Paint (). asFrameworkPaint (). apply { //... } Canvas ( modifier = Modifier . wrapContentSize ()) { drawIntoCanvas { for ( i in targetList . indices ) { it . nativeCanvas . drawText ( list [ i ] . toString (), x , y , textPaint ) y += delta // \u66f4\u65b0\u6587\u5b57y\u8f74\u4f4d\u7f6e } } } } \u5982\u4e0a\u6240\u793a\uff0c\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355 1. \u901a\u8fc7\u5728 LaunchedEffect \u4e2d\u8c03\u7528\u6302\u8d77\u51fd\u6570\uff0c\u6765\u5b9e\u73b0\u52a8\u753b\u6548\u679c 2. \u4e3a\u4e86\u5b9e\u73b0\u7ad6\u76f4\u65b9\u5411\u7684\u6587\u5b57\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Paint \u6765\u7ed8\u5236 Text \uff0c\u800c\u4e0d\u80fd\u4f7f\u7528 Text \u7ec4\u4ef6 3. Compose \u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u76f4\u63a5\u7ed8\u5236 Text \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8c03\u7528 asFrameworkPaint \u5c06\u5176\u8f6c\u5316\u4e3a\u539f\u751f\u7684 Paint \u603b\u7ed3 \u901a\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u6211\u4eec\u5c31\u901a\u8fc7 Compose \u5b9e\u73b0\u4e86\u6708\u76f8\u9634\u6674\u5706\u7f3a+\u661f\u7a7a\u95ea\u8000+\u8bd7\u6b4c\u6253\u5b57\u673a\u7684\u52a8\u753b\u6548\u679c \u5f00\u53d1\u8d77\u6765\u8ddf Android \u81ea\u5b9a\u4e49\u7ed8\u5236\u5176\u5b9e\u5e76\u6ca1\u6709\u591a\u5927\u5dee\u522b\uff0c\u4ee3\u7801\u91cf\u56e0\u4e3a Compose \u5f3a\u5927\u7684 API \u4e0e\u58f0\u660e\u5f0f\u7279\u70b9\u53ef\u80fd\u8fd8\u6709\u6240\u51cf\u5c11 \u5728\u6211\u770b\u6765\uff0c Compose \u5df2\u7ecf\u76f8\u5f53\u6210\u719f\u4e86\uff0c\u800c\u4e14\u5c06\u662f Android UI \u7684\u672a\u6765~ \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~ \u53c2\u8003\u8d44\u6599 \u8e6d\u4e2d\u79cb\u70ed\u5ea6\u6765\u4e86~Android \u81ea\u5b9a\u4e49View\u2014\u2014\u6708\u6709\u9634\u6674\u5706\u7f3a \u300c\u5bd2\u8349\u7684\u4e2d\u79cb\u732e\u793c\ud83e\udd6e\uff0c\u5b9e\u73b030s\u524d\u7aef\u521b\u610f\u52a8\u753b\u300d\u966a\u4f60\u770b\u65e5\u843d\u548c\u6708\u5347\uff5c\u4e0e\u4f60\u8d4f\u661f\u7a7a\u548c\u8bd7\u6b4c \u9879\u76ee\u5730\u5740 Compose \u5b9e\u73b0\u6708\u4eae\u9634\u6674\u5706\u7f3a\u52a8\u753b","title":"Compose \u5b9e\u73b0\u6708\u4eae\u9634\u6674\u5706\u7f3a\u52a8\u753b"},{"location":"open-source-project/compose-moon-animation/#_1","text":"\u4eba\u6709\u60b2\u6b22\u79bb\u5408\uff0c\u6708\u6709\u9634\u6674\u5706\u7f3a\uff0c\u6b64\u4e8b\u53e4\u96be\u5168\u3002 \u4f46\u613f\u4eba\u957f\u4e45\uff0c\u5343\u91cc\u5171\u5a75\u5a1f\u3002 \u6070\u9022\u4e2d\u79cb\u4f73\u8282\uff0c\u6211\u4eec\u4eca\u5929\u5c31\u4f7f\u7528 Compose \u6765\u5b9e\u73b0\u4e00\u4e0b\u6708\u76f8\u53d8\u5316\u52a8\u753b\u5427~ \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star : Compose \u5b9e\u73b0\u6708\u4eae\u9634\u6674\u5706\u7f3a\u52a8\u753b","title":"\u6548\u679c\u56fe"},{"location":"open-source-project/compose-moon-animation/#_2","text":"","title":"\u4e3b\u8981\u601d\u8def"},{"location":"open-source-project/compose-moon-animation/#_3","text":"\u4e3a\u4e86\u5b9e\u73b0\u6708\u76f8\u52a8\u753b\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e00\u4e2a\u80cc\u666f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u597d\u770b\u7684\u661f\u7a7a\uff0c\u6700\u597d\u8fd8\u6709\u95ea\u70c1\u7684\u6548\u679c \u4e3a\u4e3a\u5b9e\u73b0\u661f\u7a7a\u80cc\u666f\uff0c\u6211\u4eec\u9700\u8981\u505a\u4ee5\u4e0b\u51e0\u4ef6\u4e8b 1. \u7ed8\u5236\u80cc\u666f 2. \u751f\u6210\u51e0\u5341\u4e2a\u661f\u661f\uff0c\u5728\u80cc\u666f\u4e0a\u968f\u673a\u5206\u5e03 3. \u901a\u8fc7 scale \u4e0e alpha \u52a8\u753b\uff0c\u5b9e\u73b0\u6bcf\u4e2a\u661f\u661f\u7684\u95ea\u70c1\u6548\u679c \u6211\u4eec\u4e00\u8d77\u6765\u770b\u4e0b\u4ee3\u7801 @Composable fun Stars ( starNum : Int ) { BoxWithConstraints ( modifier = Modifier . fillMaxSize ()) { val list = remember { mutableStateListOf < Star > () } LaunchedEffect ( true ) { for ( i in 0. . starNum ) { delay ( 100L ) //\u6dfb\u52a0\u661f\u661f\uff0c\u5b83\u4eec\u7684\u4f4d\u7f6e\u5728\u5c4f\u5e55\u4e0a\u968f\u673a list . add ( Star ( maxWidth . value * density , maxHeight . value * density )) } } list . forEach { Star ( it ) } } } @Composable fun Star ( star : Star ) { var progress : Float by remember { mutableStateOf ( 0f ) } val infiniteTransition = rememberInfiniteTransition () .... star . updateStar ( progress ) // \u901a\u8fc7\u52a8\u753b\u66f4\u65b0progress,\u4ece\u800c\u66f4\u65b0star\u7684\u5c5e\u6027\u503c Canvas ( modifier = Modifier . wrapContentSize ()) { scale ( star . scale , Offset ( star . x , star . y )) { // \u7f29\u653e\u52a8\u753b drawCircle ( star . starColor , star . radius , center = Offset ( star . x , star . y ), alpha = star . alpha // alpha\u52a8\u753b ) } } }","title":"\u6ee1\u5929\u7e41\u661f"},{"location":"open-source-project/compose-moon-animation/#_4","text":"\u6708\u76f8\uff0c\u5929\u6587\u5b66\u672f\u8bed\u3002\uff08 phase of the moon \uff09\u662f\u5929\u6587\u5b66\u4e2d\u5bf9\u4e8e\u5730\u7403\u4e0a\u770b\u5230\u7684\u6708\u7403\u88ab\u592a\u9633\u7167\u660e\u90e8\u5206\u7684\u79f0\u547c\u3002\u968f\u7740\u6708\u4eae\u6bcf\u5929\u5728\u661f\u7a7a\u4e2d\u81ea\u4e1c\u5411\u897f\u79fb\u52a8\u4e00\u5927\u6bb5\u8ddd\u79bb\uff0c\u5b83\u7684\u5f62\u72b6\u4e5f\u5728\u4e0d\u65ad\u5730\u53d8\u5316\u7740\uff0c\u8fd9\u5c31\u662f\u6708\u4eae\u4f4d\u76f8\u53d8\u5316\uff0c\u53eb\u505a\u6708\u76f8\u3002 \u5b83\u7684\u53d8\u5316\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a \u6bcf\u4e2a\u9636\u6bb5\u90fd\u6709\u5404\u81ea\u7684\u540d\u5b57\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u53ef\u4ee5\u770b\u51fa\uff0c\u6708\u76f8\u53d8\u5316\u8fc7\u7a0b\u8fd8\u662f\u6709\u4e9b\u590d\u6742\u7684\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e2a\u6548\u679c\u5462\uff1f","title":"\u6708\u76f8\u53d8\u5316"},{"location":"open-source-project/compose-moon-animation/#_5","text":"\u4e3a\u4e86\u5b9e\u73b0\u6708\u76f8\u53d8\u5316,\u9996\u5148\u6211\u4eec\u9700\u8981\u753b\u4e00\u4e2a\u5706\uff0c\u4ee3\u8868\u6708\u4eae\uff0c\u6700\u7ec8\u7684\u6ee1\u6708\u5176\u5b9e\u5c31\u662f\u8fd9\u6837\uff0c\u6bd4\u8f83\u7b80\u5355 \u6709\u4e86\u6ee1\u6708\uff0c\u5982\u4f55\u5728\u5b83\u7684\u57fa\u7840\u4e0a\uff0c\u753b\u51fa\u5176\u5b83\u7684\u6708\u76f8\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u6765\u5b9e\u73b0 \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u5b9a\u4e49\u7684\u662f\uff0c\u5f53\u4e24\u4e2a\u56fe\u50cf\u5408\u6210\u65f6\uff0c\u56fe\u50cf\u6700\u7ec8\u7684\u5c55\u793a\u65b9\u5f0f\u3002\u5728 Androd \u4e2d\uff0c\u6709\u76f8\u5e94\u7684 API \u63a5\u53e3\u6765\u652f\u6301\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\uff0c\u5373 Xfermode . \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u4e3b\u8981\u6709\u4ee5\u4e0b16\u79cd,\u4ee5\u4e0b\u8fd9\u5f20\u56fe\u7247\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5f62\u8c61\u5730\u8bf4\u660e\u4e86\u56fe\u50cf\u6df7\u5408\u7684\u4f5c\u7528\uff0c\u4e24\u4e2a\u56fe\u5f62\u4e00\u5706\u4e00\u65b9\u901a\u8fc7\u4e00\u5b9a\u7684\u8ba1\u7b97\u4ea7\u751f\u4e0d\u540c\u7684\u7ec4\u5408\u6548\u679c\uff0c\u5177\u4f53\u5982\u4e0b \u6211\u4eec\u4e3a\u4e86\u5b9e\u73b0\u6708\u76f8\u52a8\u753b\uff0c\u4e3b\u8981\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u4e24\u79cd\u6df7\u5408\u6a21\u5f0f - DST_OUT :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u4e0d\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u76ee\u6807\u56fe\u50cf\u3011\uff0c\u5728\u76f8\u4ea4\u7684\u5730\u65b9\u6839\u636e\u6e90\u56fe\u50cf\u7684 alpha \u8fdb\u884c\u8fc7\u6ee4\uff0c\u6e90\u56fe\u50cf\u5b8c\u5168\u4e0d\u900f\u660e\u5219\u5b8c\u5168\u8fc7\u6ee4\uff0c\u5b8c\u5168\u900f\u660e\u5219\u4e0d\u8fc7\u6ee4 - DST_OVER :\u5c06\u76ee\u6807\u56fe\u50cf\u653e\u5728\u6e90\u56fe\u50cf\u4e0a\u65b9 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u56fe\u5f62\u6df7\u5408\u6a21\u5f0f\uff0c\u90a3\u4e48\u9700\u8981\u5728\u6ee1\u6708\u4e0a\u753b\u4ec0\u4e48\u624d\u80fd\u5b9e\u73b0\u5176\u5b83\u6548\u679c\u5462? \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6ee1\u6708\u4e0a\u653e\u4e00\u4e2a\u534a\u5706 + \u4e00\u4e2a\u692d\u5706\u6765\u5b9e\u73b0 1. \u5982\u4e0a\u6240\u793a\uff0c\u692d\u5706\u4e0a\u6c34\u5e73\u7684\u7ebf\u53eb\u957f\u8f74\uff0c\u7ad6\u76f4\u7684\u7ebf\u53eb\u77ed\u8f74 2. \u77ed\u8f74\u4e0d\u53d8\uff0c\u957f\u8f74\u534a\u5f84\u4ece0\u5230\u6ee1\u6708\u534a\u5f84\u53d1\u751f\u53d8\u5316\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u534a\u5706\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u6708\u76f8 3. \u6bd4\u5982\u4e3a\u4e86\u753b\u4e0a\u86fe\u7709\u6708\uff0c\u53ef\u4ee5\u901a\u8fc7\u5de6\u534a\u8fb9\u753b\u534a\u5706\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u692d\u5706\uff0c\u4e24\u90fd\u90fd\u4f7f\u7528 DST_OVER \u6df7\u5408\u6a21\u5f0f\u6765\u5b9e\u73b0\uff0c\u5c31\u5b9e\u73b0\u4e86\u5b83\u4eec\u4e24\u7684\u5e76\u96c6\uff0c\u7136\u540e\u8986\u76d6\u5728\u4e0b\u5c42\u6ee1\u6708\u4e0a\uff0c\u5c31\u5b9e\u73b0\u4e86\u4e0a\u86fe\u7709\u6708 4. \u4e3a\u4e86\u753b\u6e10\u76c8\u51f8\u6708,\u5219\u540c\u6837\u5c31\u5de6\u534a\u8fb9\u4ee5 DST_OVER \u753b\u534a\u5706,\u518d\u4ee5 DST_OUT \u753b\u692d\u5706\uff0c\u5c31\u53ea\u5269\u4e0b\u534a\u5706\u4e0e\u692d\u5706\u4e0d\u76f8\u4ea4\u7684\u90e8\u5206\uff0c\u518d\u4e0e\u4e0b\u5c42\u7684\u6ee1\u6708\u6df7\u5408\uff0c\u5c31\u5b9e\u73b0\u4e86\u6e10\u76c8\u51f8\u6708 \u8fd9\u6837\u8bf4\u53ef\u80fd\u8fd8\u662f\u6bd4\u8f83\u62bd\u8c61\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4e0b\u8f7d\u6e90\u7801\u8be6\u7ec6\u4e86\u89e3\u4e0b","title":"\u601d\u8def\u5206\u6790"},{"location":"open-source-project/compose-moon-animation/#_6","text":"//\u6708\u4eae\u52a8\u753b\u63a7\u4ef6 @Composable fun Moon ( modifier : Modifier ) { var progress : Float by remember { mutableStateOf ( 0f ) } BoxWithConstraints ( modifier = modifier ) { Canvas ( modifier = Modifier . size ( canvasSize ) . align ( Alignment . TopCenter ) ) { drawMoonCircle ( this , progress ) drawIntoCanvas { it . withSaveLayer ( Rect ( 0f , 0f , size . width , size . height ), paint = Paint ()) { if ( progress != 1f ) { //\u5fc5\u987b\u5148\u753b\u534a\u5706\uff0c\u518d\u753b\u692d\u5706 drawMoonArc ( this , it , paint , progress ) drawMoonOval ( this , it , paint , progress ) } } } } } } // 1.\u9996\u5148\u753b\u4e00\u4e2a\u6ee1\u6708 private fun drawMoonCircle ( scope : DrawScope , progress : Float ) { //.... drawCircle ( Color ( 0 xfff9dc60 )) } // 3. \u753b\u534a\u5706 private fun drawMoonArc ( scope : DrawScope , canvas : Canvas , paint : Paint , progress : Float ) { val sweepAngle = when { //\u4ece\u65b0\u6708\u5230\u6ee1\u6708\u5728\u4e00\u8fb9\u753b\u534a\u5706\uff0c\u4ece\u6ee1\u6708\u56de\u5230\u65b0\u6708\u5219\u5728\u53e6\u4e00\u8fb9\u753b\u534a\u5706 progress <= 0.5f -> 180f progress <= 1f -> 180f progress <= 1.5f -> - 180f else -> - 180f } paint . blendMode = BlendMode . DstOver //\u534a\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u59cb\u7ec8\u662fDstOver scope . run { canvas . drawArc ( Rect ( 0f , 0f , size . width , size . height ), 90f , sweepAngle , false , paint ) } } // 2. \u753b\u692d\u5706 private fun drawMoonOval ( scope : DrawScope , canvas : Canvas , paint : Paint , progress : Float ) { val blendMode = when { //\u692d\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e0b progress <= 0.5f -> BlendMode . DstOver progress <= 1f -> BlendMode . DstOut progress <= 1.5f -> BlendMode . DstOut else -> BlendMode . DstOver } paint . blendMode = blendMode scope . run { canvas . drawOval ( Rect ( offset = topLeft , size = Size ( horizontalAxis , verticalAxis )), //\u692d\u5706\u7684\u957f\u8f74\u4f1a\u968f\u7740\u52a8\u753b\u53d8\u5316 paint = paint ) } } \u5982\u4e0a\u6240\u793a: 1. \u4e3b\u8981\u5c31\u662f3\u4e2a\u6b65\u9aa4\uff0c\u753b\u6ee1\u6708\uff0c\u518d\u753b\u534a\u5706\uff0c\u518d\u753b\u692d\u5706 2. \u534a\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u59cb\u7ec8\u662f DstOver ,\u800c\u692d\u5706\u7684\u6df7\u5408\u6a21\u5f0f\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5b83\u4eec\u7684\u989c\u8272\u90fd\u662f\u9ed1\u8272\u3002 3. \u53ef\u4ee5\u770b\u5230\u534a\u5706\u4e0e\u692d\u5706\u65b0\u5efa\u4e86\u4e00\u4e2a Layer \uff0c\u6df7\u5408\u6a21\u5f0f\u7684\u53d8\u5316\uff0c\u8868\u793a\u7684\u5c31\u662f\u6700\u540e\u5269\u4e0b\u7684\u662f\u5b83\u4eec\u7684\u5e76\u96c6\uff0c\u8fd8\u662f Dst \u4e0d\u76f8\u4ea4\u7684\u90e8\u5206\uff0c\u6700\u540e\u8986\u76d6\u5230\u6ee1\u6708\u4e0a\uff0c\u6240\u4ee5\u5fc5\u987b\u5148\u753b\u534a\u5706 4. \u968f\u7740\u52a8\u753b\u7684\u53d8\u5316\uff0c\u692d\u5706\u7684\u957f\u8f74\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u6708\u76f8","title":"\u6e90\u7801\u5b9e\u73b0"},{"location":"open-source-project/compose-moon-animation/#_7","text":"\u4e0a\u9762\u5176\u5b9e\u5df2\u7ecf\u505a\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u6211\u4eec\u6700\u540e\u518d\u6dfb\u52a0\u4e00\u4e9b\u8bd7\u6b4c\uff0c\u5e76\u4e3a\u5b83\u4eec\u6dfb\u52a0\u6253\u5b57\u673a\u6548\u679c @Composable fun PoetryColumn ( list : List < Char > , offsetX : Float = 0f , offsetY : Float = 0f ) { val targetList = remember { mutableStateListOf < Char > () } LaunchedEffect ( list ) { targetList . clear () list . forEach { delay ( 500 ) //\u901a\u8fc7\u5728LaunchedEffect\u4e2ddelay\u5b9e\u73b0\u52a8\u753b\u6548\u679c targetList . add ( it ) } } //\u5c06 Jetpack Compose \u73af\u5883\u7684 Paint \u5bf9\u8c61\u8f6c\u6362\u4e3a\u539f\u751f\u7684 Paint \u5bf9\u8c61 val textPaint = Paint (). asFrameworkPaint (). apply { //... } Canvas ( modifier = Modifier . wrapContentSize ()) { drawIntoCanvas { for ( i in targetList . indices ) { it . nativeCanvas . drawText ( list [ i ] . toString (), x , y , textPaint ) y += delta // \u66f4\u65b0\u6587\u5b57y\u8f74\u4f4d\u7f6e } } } } \u5982\u4e0a\u6240\u793a\uff0c\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355 1. \u901a\u8fc7\u5728 LaunchedEffect \u4e2d\u8c03\u7528\u6302\u8d77\u51fd\u6570\uff0c\u6765\u5b9e\u73b0\u52a8\u753b\u6548\u679c 2. \u4e3a\u4e86\u5b9e\u73b0\u7ad6\u76f4\u65b9\u5411\u7684\u6587\u5b57\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Paint \u6765\u7ed8\u5236 Text \uff0c\u800c\u4e0d\u80fd\u4f7f\u7528 Text \u7ec4\u4ef6 3. Compose \u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u76f4\u63a5\u7ed8\u5236 Text \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8c03\u7528 asFrameworkPaint \u5c06\u5176\u8f6c\u5316\u4e3a\u539f\u751f\u7684 Paint","title":"\u8bd7\u6b4c\u6253\u5b57\u673a\u6548\u679c"},{"location":"open-source-project/compose-moon-animation/#_8","text":"\u901a\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u6211\u4eec\u5c31\u901a\u8fc7 Compose \u5b9e\u73b0\u4e86\u6708\u76f8\u9634\u6674\u5706\u7f3a+\u661f\u7a7a\u95ea\u8000+\u8bd7\u6b4c\u6253\u5b57\u673a\u7684\u52a8\u753b\u6548\u679c \u5f00\u53d1\u8d77\u6765\u8ddf Android \u81ea\u5b9a\u4e49\u7ed8\u5236\u5176\u5b9e\u5e76\u6ca1\u6709\u591a\u5927\u5dee\u522b\uff0c\u4ee3\u7801\u91cf\u56e0\u4e3a Compose \u5f3a\u5927\u7684 API \u4e0e\u58f0\u660e\u5f0f\u7279\u70b9\u53ef\u80fd\u8fd8\u6709\u6240\u51cf\u5c11 \u5728\u6211\u770b\u6765\uff0c Compose \u5df2\u7ecf\u76f8\u5f53\u6210\u719f\u4e86\uff0c\u800c\u4e14\u5c06\u662f Android UI \u7684\u672a\u6765~ \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~","title":"\u603b\u7ed3"},{"location":"open-source-project/compose-moon-animation/#_9","text":"\u8e6d\u4e2d\u79cb\u70ed\u5ea6\u6765\u4e86~Android \u81ea\u5b9a\u4e49View\u2014\u2014\u6708\u6709\u9634\u6674\u5706\u7f3a \u300c\u5bd2\u8349\u7684\u4e2d\u79cb\u732e\u793c\ud83e\udd6e\uff0c\u5b9e\u73b030s\u524d\u7aef\u521b\u610f\u52a8\u753b\u300d\u966a\u4f60\u770b\u65e5\u843d\u548c\u6708\u5347\uff5c\u4e0e\u4f60\u8d4f\u661f\u7a7a\u548c\u8bd7\u6b4c","title":"\u53c2\u8003\u8d44\u6599"},{"location":"open-source-project/compose-moon-animation/#_10","text":"Compose \u5b9e\u73b0\u6708\u4eae\u9634\u6674\u5706\u7f3a\u52a8\u753b","title":"\u9879\u76ee\u5730\u5740"},{"location":"open-source-project/compose-scrollable-appbar/","text":"Compose \u4f38\u7f29ToolBar\u7684\u5b9e\u73b0 \u6548\u679c\u56fe \u5f53\u5217\u8868\u5411\u4e0a\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0a\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0a\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0a\u6ed1\u52a8 \u5f53\u5217\u8868\u5411\u4e0b\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0b\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0b\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0b\u6ed1\u52a8 \u4e3b\u8981\u601d\u8def \u5e03\u5c40\u9884\u89c8 \u4f38\u7f29\u524d\u5e03\u5c40 \u4f38\u7f29\u540e\u5e03\u5c40 \u5b9e\u73b0\u8fc7\u7a0b \u5e03\u5c40\u5b9e\u73b0 \u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\u4e24\u4e2a\u5c3a\u5bf8\u53d8\u91cf // \u5e94\u7528\u680f\u9ad8\u5ea6 private val toolBarHeight = 56. dp // \u5bfc\u822a\u56fe\u6807\u5927\u5c0f private val navigationIconSize = 50. dp \u6211\u4eec\u91c7\u7528 Box \u4f5c\u4e3a\u6839\u5e03\u5c40\uff0c\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u90e8\u5206\uff0c\u80cc\u666f\u56fe\u7247\uff0c\u9876\u90e8\u7684 ToolBar \u4ee5\u53ca\u4e0b\u9762\u7684 Title \u90e8\u5206\uff0c\u5176\u5b9e\u73b0\u5982\u4e0b //\u6574\u4f53\u5e03\u5c40\u5b9e\u73b0 Box ( modifier = Modifier . height ( scrollableAppBarHeight ) //scrollableAppBarHeight \u4e3a\u9ad8\u5ea6\u53c2\u6570,\u4e3a\u5916\u90e8\u83b7\u53d6 . fillMaxWidth () ) { Image ( painter = painterResource ( id = backgroundImageId ), contentDescription = \"background\" , contentScale = ContentScale . FillBounds ) // \u81ea\u5b9a\u4e49\u5e94\u7528\u680f Row ( modifier = modifier . height ( toolBarHeight ) //\u8bbe\u7f6e\u9ad8\u5ea6\u4e3atoolBarHeight . fillMaxWidth (), verticalAlignment = Alignment . CenterVertically //\u8bbe\u7f6e\u5782\u76f4\u65b9\u5411\u4e3a\u5c45\u4e2d\u5bf9\u9f50 ) { // \u5bfc\u822a\u56fe\u6807 Box ( modifier = Modifier . size ( navigationIconSize ), contentAlignment = Alignment . Center ) { navigationIcon () } } // title\u5b9a\u4e49 Box ( modifier = Modifier . height ( toolBarHeight ) //\u548cToolBar\u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ), contentAlignment = Alignment . CenterStart ) { Text ( text = title , color = Color . White , modifier = Modifier . padding ( start = 20. dp ). matchParentSize (), // \u4f7f\u7528 matchParentSize \u4fee\u9970\u7b26\u4fdd\u8bc1\u4e0d\u5f71\u54cd\u7236 Box\u5c3a\u5bf8 fontSize = 20. sp ) } } \u6211\u4eec\u4e3b\u8981\u8bb2\u89e3 title \u90e8\u5206 // title \u5b9a\u4e49 Box ( modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ), contentAlignment = Alignment . CenterStart ) { Text ( text = title , color = Color . White , modifier = Modifier . padding ( start = 20. dp ). matchParentSize (), // \u4f7f\u7528 matchParentSize \u4fee\u9970\u7b26\u4fdd\u8bc1\u4e0d\u5f71\u54cd\u7236 Box\u5c3a\u5bf8 fontSize = 20. sp ) } \u9996\u5148\u4e3a\u4e86\u4fdd\u8bc1 title \u90e8\u5206\u5728\u5b8c\u5168\u6536\u7f29\u540e\u9ad8\u5ea6\u548c toolBar \u90e8\u5206\u4e00\u81f4\uff0c\u6211\u4eec\u8bbe\u7f6e Box \u5e03\u5c40\u9ad8\u5ea6\u4e3a toolBarHeight modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () \u7136\u540e\u5b9a\u4e49 Box \u5728\u6839\u5e03\u5c40\u91cc\u9762\u7684\u5bf9\u9f50\u65b9\u5f0f\u4e3a Alignment.BottomStart modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ) \u4e4b\u6240\u4ee5\u8fd9\u6837\u8bbe\u7f6e\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf\u4f38\u7f29\u524d\u548c\u4f38\u7f29\u540e\u7684\u9884\u89c8\u56fe\u53ef\u4ee5\u77e5\u9053\u5982\u679c\u4fdd\u8bc1\u6b64\u90e8\u5206\u662f \u5e95\u90e8\u5de6\u8fb9 \u5bf9\u9f50\uff0c\u90a3\u4e48\u5728\u6839\u5e03\u5c40\u5411\u4e0a\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4fbf\u53ef\u4ee5\u53ea\u5173\u5fc3\u6b64\u90e8\u5206\u5728 \u6c34\u5e73\u65b9\u5411 \u7684\u4f4d\u79fb\u5373\u53ef \u63a5\u7740\u8bbe\u7f6e\u6587\u672c\u90e8\u5206\u7684\u5bf9\u9f50\u65b9\u5f0f,\u4fdd\u8bc1 title \u662f\u5c45\u4e2d\u9760\u5de6\u5bf9\u9f50\u7684 contentAlignment = Alignment . CenterStart \u4f4d\u79fb\u5b9e\u73b0 \u9996\u5148\uff0c\u6211\u4eec\u8981\u660e\u786e ScrollableAppBar \u6700\u5927\u5411\u4e0a\u504f\u79fb\u91cf\u7b49\u4e8e\u5176 \u5b9a\u4e49\u7684\u9ad8\u5ea6 \u548c \u6536\u7f29\u540e\u7684\u9ad8\u5ea6 \u7684\u5dee\u503c\uff0c\u5373: // \u5e94\u7528\u680f\u6700\u5927\u5411\u4e0a\u504f\u79fb\u91cf val maxOffsetHeightPx = with ( LocalDensity . current ) { scrollableAppBarHeight . roundToPx (). toFloat () - toolBarHeight . roundToPx (). toFloat () } \u5176\u6b21\uff0c title \u90e8\u5206\u5728 \u6c34\u5e73\u65b9\u5411 \u7684\u4f4d\u79fb\u8ddd\u79bb\u5176\u5b9e\u5c31\u662f\u5bfc\u822a\u56fe\u6807\u7684\u5bbd\u5ea6\uff0c\u5373: // Title \u504f\u79fb\u91cf\u53c2\u8003\u503c val titleOffsetWidthReferenceValue = with ( LocalDensity . current ) { navigationIconSize . roundToPx (). toFloat () } \u540c\u65f6\u9700\u8981\u5b9a\u4e49\u4ece\u5916\u90e8\u83b7\u53d6\u5230\u7684\u504f\u79fb\u91cf val toolbarOffsetHeightPx : MutableState < Float > //\u5411\u4e0a\u504f\u79fb\u91cf \u6700\u5916\u5c42\u5e03\u5c40\u4f4d\u79fb\u5b9a\u4e49 \u4e3a\u6839\u5e03\u5c40\u6dfb\u52a0\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u4f4d\u79fb @Composable fun ScrollableAppBar ( modifier : Modifier = Modifier , title : String = stringResource ( id = R . string . app_name ), //\u9ed8\u8ba4\u4e3a\u5e94\u7528\u540d navigationIcon : @Composable () -> Unit , //\u5bfc\u822a\u56fe\u6807 @DrawableRes backgroundImageId : Int , // \u80cc\u666f\u56fe\u7247 scrollableAppBarHeight : Dp , //\u5b9a\u4e49\u7684 ScrollableAppBar \u9ad8\u5ea6 toolbarOffsetHeightPx : MutableState < Float > //\u5411\u4e0a\u504f\u79fb\u91cf ) { Box ( modifier = Modifier . height ( scrollableAppBarHeight ) . offset { IntOffset ( x = 0 , y = toolbarOffsetHeightPx . value . roundToInt () //\u8bbe\u7f6e\u504f\u79fb\u91cf ) } . fillMaxWidth () ) { .... // \u80cc\u666f\u56fe\u7b49\u5185\u5bb9 } } toolBar \u5782\u76f4\u65b9\u5411\u4f4d\u7f6e\u4e0d\u53d8\u7684\u5b9e\u73b0 \u8bbe\u7f6e\u548c\u7236\u5e03\u5c40\u76f8\u53cd\u7684\u4f4d\u79fb\u91cf\u4fdd\u8bc1 toolBar \u5904\u4e8e\u539f\u4f4d\u7f6e\uff0c\u5373\uff1a // \u81ea\u5b9a\u4e49\u5e94\u7528\u680f Row ( modifier = modifier . offset { IntOffset ( x = 0 , y = - toolbarOffsetHeightPx . value . roundToInt () //\u4fdd\u8bc1\u5e94\u7528\u680f\u662f\u59cb\u7ec8\u4e0d\u52a8\u7684 ) } . height ( toolBarHeight ) . fillMaxWidth (), verticalAlignment = Alignment . CenterVertically ) { ... // \u5bfc\u822a\u56fe\u6807 } title \u6c34\u5e73\u4f4d\u79fb\u7684\u5b9e\u73b0 \u4e3a\u4e86\u4fdd\u8bc1 title \u5747\u5300\u5411\u53f3\u4f4d\u79fb\uff0c\u7528\u6839\u5e03\u5c40\u6b64\u65f6\u5411\u4e0a\u4f4d\u79fb\u91cf\u548c\u6700\u5927\u4f4d\u79fb\u91cf\u7684\u5546\u518d\u4e58\u4ee5\u6c34\u5e73\u65b9\u5411\u4e0a\u7684\u603b\u4f4d\u79fb\u5373\u53ef\uff1a // title \u90e8\u5206 Box ( modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ) . offset { IntOffset ( // \u6309\u7167\u6839\u5e03\u5c40\u5411\u4e0a\u7684\u4f4d\u79fb\u91cf\u6210\u6bd4\u4f8b\u7684\u5411\u53f3\u4f4d\u79fb Title x = - (( toolbarOffsetHeightPx . value / maxOffsetHeightPx ) * titleOffsetWidthReferenceValue ). roundToInt (), y = 0 ) }, contentAlignment = Alignment . CenterStart ) { ... //title \u90e8\u5206 } \u9879\u76ee\u5730\u5740 ScrollableAppBar \u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9,\u6b22\u8fce\u70b9\u8d5e\ud83d\udc4d,Star\u2b50,\u6536\u85cf\ud83d\ude0d,\u5982\u679c\u6709\u6539\u8fdb\u610f\u89c1\u8fd8\u53ef\u4ee5\u63d0\u4ea4 issue","title":"Compose \u4f38\u7f29 ToolBar \u7684\u5b9e\u73b0"},{"location":"open-source-project/compose-scrollable-appbar/#compose-toolbar","text":"","title":"Compose \u4f38\u7f29ToolBar\u7684\u5b9e\u73b0"},{"location":"open-source-project/compose-scrollable-appbar/#_1","text":"\u5f53\u5217\u8868\u5411\u4e0a\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0a\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0a\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0a\u6ed1\u52a8 \u5f53\u5217\u8868\u5411\u4e0b\u79fb\u52a8\u65f6\uff0c\u4f1a\u5148\u5e26\u52a8 ToolBar \u5411\u4e0b\u4f4d\u79fb\uff0c\u7b49 ToolBar \u5411\u4e0b\u79fb\u52a8\u5230\u6700\u5927\u4f4d\u79fb\u91cf\u65f6\u5217\u8868\u5411\u4e0b\u6ed1\u52a8","title":"\u6548\u679c\u56fe"},{"location":"open-source-project/compose-scrollable-appbar/#_2","text":"","title":"\u4e3b\u8981\u601d\u8def"},{"location":"open-source-project/compose-scrollable-appbar/#_3","text":"\u4f38\u7f29\u524d\u5e03\u5c40 \u4f38\u7f29\u540e\u5e03\u5c40","title":"\u5e03\u5c40\u9884\u89c8"},{"location":"open-source-project/compose-scrollable-appbar/#_4","text":"","title":"\u5b9e\u73b0\u8fc7\u7a0b"},{"location":"open-source-project/compose-scrollable-appbar/#_5","text":"\u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\u4e24\u4e2a\u5c3a\u5bf8\u53d8\u91cf // \u5e94\u7528\u680f\u9ad8\u5ea6 private val toolBarHeight = 56. dp // \u5bfc\u822a\u56fe\u6807\u5927\u5c0f private val navigationIconSize = 50. dp \u6211\u4eec\u91c7\u7528 Box \u4f5c\u4e3a\u6839\u5e03\u5c40\uff0c\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u90e8\u5206\uff0c\u80cc\u666f\u56fe\u7247\uff0c\u9876\u90e8\u7684 ToolBar \u4ee5\u53ca\u4e0b\u9762\u7684 Title \u90e8\u5206\uff0c\u5176\u5b9e\u73b0\u5982\u4e0b //\u6574\u4f53\u5e03\u5c40\u5b9e\u73b0 Box ( modifier = Modifier . height ( scrollableAppBarHeight ) //scrollableAppBarHeight \u4e3a\u9ad8\u5ea6\u53c2\u6570,\u4e3a\u5916\u90e8\u83b7\u53d6 . fillMaxWidth () ) { Image ( painter = painterResource ( id = backgroundImageId ), contentDescription = \"background\" , contentScale = ContentScale . FillBounds ) // \u81ea\u5b9a\u4e49\u5e94\u7528\u680f Row ( modifier = modifier . height ( toolBarHeight ) //\u8bbe\u7f6e\u9ad8\u5ea6\u4e3atoolBarHeight . fillMaxWidth (), verticalAlignment = Alignment . CenterVertically //\u8bbe\u7f6e\u5782\u76f4\u65b9\u5411\u4e3a\u5c45\u4e2d\u5bf9\u9f50 ) { // \u5bfc\u822a\u56fe\u6807 Box ( modifier = Modifier . size ( navigationIconSize ), contentAlignment = Alignment . Center ) { navigationIcon () } } // title\u5b9a\u4e49 Box ( modifier = Modifier . height ( toolBarHeight ) //\u548cToolBar\u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ), contentAlignment = Alignment . CenterStart ) { Text ( text = title , color = Color . White , modifier = Modifier . padding ( start = 20. dp ). matchParentSize (), // \u4f7f\u7528 matchParentSize \u4fee\u9970\u7b26\u4fdd\u8bc1\u4e0d\u5f71\u54cd\u7236 Box\u5c3a\u5bf8 fontSize = 20. sp ) } } \u6211\u4eec\u4e3b\u8981\u8bb2\u89e3 title \u90e8\u5206 // title \u5b9a\u4e49 Box ( modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ), contentAlignment = Alignment . CenterStart ) { Text ( text = title , color = Color . White , modifier = Modifier . padding ( start = 20. dp ). matchParentSize (), // \u4f7f\u7528 matchParentSize \u4fee\u9970\u7b26\u4fdd\u8bc1\u4e0d\u5f71\u54cd\u7236 Box\u5c3a\u5bf8 fontSize = 20. sp ) } \u9996\u5148\u4e3a\u4e86\u4fdd\u8bc1 title \u90e8\u5206\u5728\u5b8c\u5168\u6536\u7f29\u540e\u9ad8\u5ea6\u548c toolBar \u90e8\u5206\u4e00\u81f4\uff0c\u6211\u4eec\u8bbe\u7f6e Box \u5e03\u5c40\u9ad8\u5ea6\u4e3a toolBarHeight modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () \u7136\u540e\u5b9a\u4e49 Box \u5728\u6839\u5e03\u5c40\u91cc\u9762\u7684\u5bf9\u9f50\u65b9\u5f0f\u4e3a Alignment.BottomStart modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ) \u4e4b\u6240\u4ee5\u8fd9\u6837\u8bbe\u7f6e\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf\u4f38\u7f29\u524d\u548c\u4f38\u7f29\u540e\u7684\u9884\u89c8\u56fe\u53ef\u4ee5\u77e5\u9053\u5982\u679c\u4fdd\u8bc1\u6b64\u90e8\u5206\u662f \u5e95\u90e8\u5de6\u8fb9 \u5bf9\u9f50\uff0c\u90a3\u4e48\u5728\u6839\u5e03\u5c40\u5411\u4e0a\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4fbf\u53ef\u4ee5\u53ea\u5173\u5fc3\u6b64\u90e8\u5206\u5728 \u6c34\u5e73\u65b9\u5411 \u7684\u4f4d\u79fb\u5373\u53ef \u63a5\u7740\u8bbe\u7f6e\u6587\u672c\u90e8\u5206\u7684\u5bf9\u9f50\u65b9\u5f0f,\u4fdd\u8bc1 title \u662f\u5c45\u4e2d\u9760\u5de6\u5bf9\u9f50\u7684 contentAlignment = Alignment . CenterStart","title":"\u5e03\u5c40\u5b9e\u73b0"},{"location":"open-source-project/compose-scrollable-appbar/#_6","text":"\u9996\u5148\uff0c\u6211\u4eec\u8981\u660e\u786e ScrollableAppBar \u6700\u5927\u5411\u4e0a\u504f\u79fb\u91cf\u7b49\u4e8e\u5176 \u5b9a\u4e49\u7684\u9ad8\u5ea6 \u548c \u6536\u7f29\u540e\u7684\u9ad8\u5ea6 \u7684\u5dee\u503c\uff0c\u5373: // \u5e94\u7528\u680f\u6700\u5927\u5411\u4e0a\u504f\u79fb\u91cf val maxOffsetHeightPx = with ( LocalDensity . current ) { scrollableAppBarHeight . roundToPx (). toFloat () - toolBarHeight . roundToPx (). toFloat () } \u5176\u6b21\uff0c title \u90e8\u5206\u5728 \u6c34\u5e73\u65b9\u5411 \u7684\u4f4d\u79fb\u8ddd\u79bb\u5176\u5b9e\u5c31\u662f\u5bfc\u822a\u56fe\u6807\u7684\u5bbd\u5ea6\uff0c\u5373: // Title \u504f\u79fb\u91cf\u53c2\u8003\u503c val titleOffsetWidthReferenceValue = with ( LocalDensity . current ) { navigationIconSize . roundToPx (). toFloat () } \u540c\u65f6\u9700\u8981\u5b9a\u4e49\u4ece\u5916\u90e8\u83b7\u53d6\u5230\u7684\u504f\u79fb\u91cf val toolbarOffsetHeightPx : MutableState < Float > //\u5411\u4e0a\u504f\u79fb\u91cf","title":"\u4f4d\u79fb\u5b9e\u73b0"},{"location":"open-source-project/compose-scrollable-appbar/#_7","text":"\u4e3a\u6839\u5e03\u5c40\u6dfb\u52a0\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u4f4d\u79fb @Composable fun ScrollableAppBar ( modifier : Modifier = Modifier , title : String = stringResource ( id = R . string . app_name ), //\u9ed8\u8ba4\u4e3a\u5e94\u7528\u540d navigationIcon : @Composable () -> Unit , //\u5bfc\u822a\u56fe\u6807 @DrawableRes backgroundImageId : Int , // \u80cc\u666f\u56fe\u7247 scrollableAppBarHeight : Dp , //\u5b9a\u4e49\u7684 ScrollableAppBar \u9ad8\u5ea6 toolbarOffsetHeightPx : MutableState < Float > //\u5411\u4e0a\u504f\u79fb\u91cf ) { Box ( modifier = Modifier . height ( scrollableAppBarHeight ) . offset { IntOffset ( x = 0 , y = toolbarOffsetHeightPx . value . roundToInt () //\u8bbe\u7f6e\u504f\u79fb\u91cf ) } . fillMaxWidth () ) { .... // \u80cc\u666f\u56fe\u7b49\u5185\u5bb9 } }","title":"\u6700\u5916\u5c42\u5e03\u5c40\u4f4d\u79fb\u5b9a\u4e49"},{"location":"open-source-project/compose-scrollable-appbar/#toolbar","text":"\u8bbe\u7f6e\u548c\u7236\u5e03\u5c40\u76f8\u53cd\u7684\u4f4d\u79fb\u91cf\u4fdd\u8bc1 toolBar \u5904\u4e8e\u539f\u4f4d\u7f6e\uff0c\u5373\uff1a // \u81ea\u5b9a\u4e49\u5e94\u7528\u680f Row ( modifier = modifier . offset { IntOffset ( x = 0 , y = - toolbarOffsetHeightPx . value . roundToInt () //\u4fdd\u8bc1\u5e94\u7528\u680f\u662f\u59cb\u7ec8\u4e0d\u52a8\u7684 ) } . height ( toolBarHeight ) . fillMaxWidth (), verticalAlignment = Alignment . CenterVertically ) { ... // \u5bfc\u822a\u56fe\u6807 }","title":"toolBar \u5782\u76f4\u65b9\u5411\u4f4d\u7f6e\u4e0d\u53d8\u7684\u5b9e\u73b0"},{"location":"open-source-project/compose-scrollable-appbar/#title","text":"\u4e3a\u4e86\u4fdd\u8bc1 title \u5747\u5300\u5411\u53f3\u4f4d\u79fb\uff0c\u7528\u6839\u5e03\u5c40\u6b64\u65f6\u5411\u4e0a\u4f4d\u79fb\u91cf\u548c\u6700\u5927\u4f4d\u79fb\u91cf\u7684\u5546\u518d\u4e58\u4ee5\u6c34\u5e73\u65b9\u5411\u4e0a\u7684\u603b\u4f4d\u79fb\u5373\u53ef\uff1a // title \u90e8\u5206 Box ( modifier = Modifier . height ( toolBarHeight ) //\u548c ToolBar \u540c\u9ad8 . fillMaxWidth () . align ( Alignment . BottomStart ) . offset { IntOffset ( // \u6309\u7167\u6839\u5e03\u5c40\u5411\u4e0a\u7684\u4f4d\u79fb\u91cf\u6210\u6bd4\u4f8b\u7684\u5411\u53f3\u4f4d\u79fb Title x = - (( toolbarOffsetHeightPx . value / maxOffsetHeightPx ) * titleOffsetWidthReferenceValue ). roundToInt (), y = 0 ) }, contentAlignment = Alignment . CenterStart ) { ... //title \u90e8\u5206 }","title":"title \u6c34\u5e73\u4f4d\u79fb\u7684\u5b9e\u73b0"},{"location":"open-source-project/compose-scrollable-appbar/#_8","text":"ScrollableAppBar \u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9,\u6b22\u8fce\u70b9\u8d5e\ud83d\udc4d,Star\u2b50,\u6536\u85cf\ud83d\ude0d,\u5982\u679c\u6709\u6539\u8fdb\u610f\u89c1\u8fd8\u53ef\u4ee5\u63d0\u4ea4 issue","title":"\u9879\u76ee\u5730\u5740"},{"location":"open-source-project/compose-spring-handwriting/","text":"\u524d\u8a00 \u53c8\u662f\u4e00\u5e74\u65b0\u6625\uff0c\u5728\u8fd9\u91cc\u5148\u7ed9\u5927\u5bb6\u62dc\u4e2a\u65e9\u5e74\u4e86\u3002\u6bcf\u9022\u6625\u8282\uff0c\u5199\u6625\u8054\u8d34\u6625\u8054\u90fd\u662f\u4e00\u9879\u5fc5\u4e0d\u53ef\u5c11\u7684\u6d3b\u52a8\u3002\u672c\u6b21\u4e3b\u8981\u4f7f\u7528 Compose \uff0c\u5b9e\u73b0\u624b\u5199\u6625\u8054\u7684\u6548\u679c\u3002\u5982\u679c\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u4e2a\u8d5e\u6216\u8005\u8bc4\u8bba\u9f13\u52b1\u4e00\u4e0b~ \u7206\u7af9\u58f0\u4e2d\u4e00\u5c81\u9664 \u6625\u98ce\u9001\u6696\u5165\u5c60\u82cf \u5343\u95e8\u4e07\u6237\u66c8\u66c8\u65e5 \u603b\u628a\u65b0\u6843\u6362\u65e7\u7b26 \u6548\u679c\u56fe \u751f\u6210\u7684\u6625\u8054 \u4e3b\u8981\u601d\u8def \u4e8b\u4ef6\u76d1\u542c \u6211\u4eec\u9700\u8981\u5b9e\u73b0\u624b\u5199\u6625\u8054\u6548\u679c\uff0c\u9996\u5148\u5c31\u662f\u8981\u505a\u4e8b\u4ef6\u76d1\u542c\uff0c Android \u4e2d\u81ea\u7136\u662f\u76d1\u542c Action_Down \uff0c Action_Move \uff0c Action_UP \uff0c Compose \u4e2d\u5e94\u8be5\u5982\u4f55\u5904\u7406\u5462? \u5176\u5b9e Compose \u4e2d\u4e5f\u53ef\u4ee5\u5229\u7528 pointerInteropFilter \u76d1\u542c Action_Down \uff0c Action_Move \uff0c Action_UP ,\u5982\u4e0b\u6240\u793a Column ( modifier = Modifier . pointerInteropFilter { when ( it . action ) { MotionEvent . ACTION_DOWN -> {} MotionEvent . ACTION_MOVE -> {} MotionEvent . ACTION_UP -> {} else -> false } true }) \u8def\u5f84\u7ed8\u5236 \u5f53\u6211\u4eec\u624b\u5199\u6625\u8054\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6211\u4eec\u89e6\u6478\u8fc7\u7684\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u6700\u76f4\u63a5\u7684\u60f3\u6cd5\u5f53\u7136\u662f\u901a\u8fc7 Path \u6765\u7ed8\u5236\uff0c\u5373\u628a\u5404\u4e2a\u70b9\u8fde\u63a5\u6210 Path ,\u7136\u540e\u901a\u8fc7 drawPath \u6765\u7ed8\u5236 \u4f46\u662f\u95ee\u9898\u5728\u4e8e\u6625\u8054\u662f\u6bdb\u7b14\u6548\u679c\uff0c\u5728\u5199\u7684\u8fc7\u7a0b\u4e2d\u8def\u5f84\u7684\u7c97\u7ec6\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u800c drawPath \u53ea\u652f\u6301\u56fa\u5b9a\u7684\u5bbd\u5ea6\uff0c\u56e0\u6b64\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u6240\u4ee5\u6211\u4eec\u6362\u4e2a\u601d\u8def\uff0c drawPath \u5176\u5b9e\u4e5f\u662f\u5c06\u5404\u4e2a\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5982\u679c\u6211\u4eec\u5c06\u89e6\u6478\u8fc7\u7a0b\u4e2d\u7684\u70b9\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u5728\u8fd9\u4e00\u7cfb\u5217\u7684\u70b9\u4e0a\u753b\u5706\u4e0d\u5c31\u884c\u4e86\u5417\uff1f\u6bcf\u4e2a\u5706\u7684\u534a\u5f84\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u4f46\u8fd9\u6837\u4f1a\u5e26\u6765\u4ee5\u4e0b\u95ee\u9898 \u53ef\u4ee5\u770b\u51fa: android \u89e6\u6478\u4e2d\u7684 MOVE \u65f6\u95f4\u53d6\u70b9\u7684\u9891\u7387\u4e0d\u662f\u975e\u5e38\u9ad8\uff0c\u4f1a\u9694\u4e00\u5b9a\u7684\u50cf\u7d20\u53d6\u70b9\u3002\u5f53\u8f7b\u89e6\u6ed1\u52a8\u65f6\u4f1a\u51fa\u73b0\u4e0d\u8fde\u7eed\u5706\u7684\u60c5\u51b5\uff0c\u660e\u663e\u4e0d\u7b26\u5408\u7b14\u950b\u6548\u679c \u8d1d\u585e\u5c14\u66f2\u7ebf \u4e0a\u9762\u7684\u95ee\u9898\u5728\u4e8e MOVE \u8fc7\u7a0b\u4e2d\u56de\u8c03\u7684\u6b21\u6570\u6709\u9650\uff0c\u56e0\u6b64\u53ea\u4f1a\u4ea7\u751f\u4e00\u7cfb\u5217\u4e0d\u8fde\u7eed\u7684\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u6761\u7ebf\uff0c\u8be5\u5982\u4f55\u89e3\u51b3\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b Path \uff0c\u5176\u5b9e\u5b83\u4e5f\u53ea\u662f\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u8d1d\u585e\u5c14\u66f2\u7ebf\u5c06\u8fd9\u4e9b\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u66f2\u7ebf\u6548\u679c\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u5c06\u4e0a\u9762\u8fd9\u4e9b\u70b9\u8fde\u6210\u7ebf\u5462? private fun onActionMove ( event : MotionEvent ) { val lastPoint = viewStates . value . curPoint val curPoint = ControllerPoint ( event . x , event . y ) val lineWidth = calWidth ( event = event ) curPoint . width = lineWidth if ( viewStates . value . pointList . size < 2 ) { //\u521d\u59cb\u5316\u8d1d\u585e\u5c14\u66f2\u7ebf bezier . init ( lastPoint , curPoint ) } else { //\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u70b9 bezier . addNode ( curPoint ) } val curDis = getDistance ( event ) //\u5728\u4e24\u4e2a\u70b9\u4e4b\u95f4\u63d2\u516510\u4e2a\u70b9\uff0c\u5b83\u4eec\u90fd\u5728\u4e24\u4e2a\u70b9\u8fde\u63a5\u7684\u8d1d\u585e\u5c14\u66f2\u7ebf\u4e0a val steps : Int = 1 + ( curDis / STEP_FACTOR ). toInt () val step = 1.0 / steps val list = mutableListOf < ControllerPoint > () var t = 0.0 // \u63d2\u516510\u4e2a\u70b9 while ( t < 1.0 ) { val point : ControllerPoint = bezier . getPoint ( t ) list . add ( point ) t += step } addPoints ( list ) _viewStates . value = _viewStates . value . copy ( curPoint = curPoint ) } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a 1. \u5f53\u76ee\u524d\u5217\u8868\u4e2d\u53ea\u67091\u4e2a\u70b9\u65f6\uff0c\u521d\u59cb\u5316\u8d1d\u585e\u5c14\u66f2\u7ebf\uff0c\u5373\u4ee5\u4e0a\u4e00\u4e2a\u70b9\u4e3a\u8d77\u59cb\u70b9\uff0c\u5f53\u524d\u70b9\u4e3a\u7ec8\u70b9 2. \u5f53\u5217\u8868\u4e2d\u5df2\u7ecf\u67092\u4e2a\u70b9\u65f6\uff0c\u5f80\u8d1d\u585e\u5c14\u66f2\u7ebf\u4e2d\u52a0\u5165\u5f53\u524d\u70b9\uff0c\u5c06\u539f\u6765\u7684\u7ec8\u70b9\u53d8\u4e3a\u8d77\u70b9\uff0c\u5f53\u524d\u70b9\u53d8\u4e3a\u65b0\u7684\u7ec8\u70b9 3. \u5728\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\u4e4b\u95f4\u63d2\u5165\u591a\u4e2a\u70b9\uff0c\u5b83\u4eec\u7684\u4f4d\u7f6e\u90fd\u5728\u8d1d\u585e\u5c14\u66f2\u7ebf\u4e0a\uff0c\u5177\u4f53\u7684\u6570\u91cf\u7531 STEP_FACTOR \u51b3\u5b9a\uff0c\u6211\u4eec\u76ee\u524d\u6682\u5b9a\u4e3a10\u4e2a 4. \u5f53\u6211\u4eec\u57282\u4e2a\u70b9\u4e4b\u95f4\uff0c\u63d2\u5165\u4e86\u591a\u4e2a\u70b9\u4e4b\u540e\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u7a7a\u767d\u5c31\u4f1a\u88ab\u586b\u8865\uff0c\u770b\u8d77\u6765\u4e0d\u50cf\u4e00\u6761\u7ebf\u4e00\u6837 \u53ef\u53d8\u7684\u5bbd\u5ea6 \u4e0a\u6587\u8bf4\u5230\u6bdb\u7b14\u7684\u8def\u5f84\u7c97\u7ec6\u662f\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u4e00\u822c\u6765\u8bf4\u662f\u8d8a\u6162\u7684\u5730\u65b9\u7b14\u5212\u8d8a\u7c97\uff0c\u8d8a\u5feb\u7684\u5730\u65b9\u7b14\u5212\u8d8a\u7ec6\uff0c\u540c\u65f6\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\u4e4b\u95f4\u7684\u5bbd\u5ea6\u5e94\u8be5\u662f\u6e10\u53d8\u7684\uff0c\u800c\u4e0d\u662f\u7a81\u53d8\u7684\uff0c\u8ba1\u7b97\u7b14\u753b\u5bbd\u5ea6\u7684\u4ee3\u7801\u5982\u4e0b\uff1a private fun calWidth ( event : MotionEvent ): Float { // \u6ed1\u52a8\u8ddd\u79bb val distance = getDistance ( event ) // \u6ed1\u52a8\u8ddd\u79bb\u52a0\u4e2a\u5f71\u54cd\u7cfb\u6570\u5b9a\u4e49\u4e3a\u901f\u5ea6 val calVel = distance * 0.002 // \u901f\u5ea6\u8d8a\u5927\u5bbd\u5ea6\u8d8a\u5c0f\uff0c\u901f\u5ea6\u8d8a\u5c0f\u5bbd\u5ea6\u8d8a\u5927 val width = NORMAL_WIDTH * maxOf ( exp ( - calVel ), 0.2 ) return width . toFloat () } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a 1. \u867d\u7136\u51b3\u5b9a\u7b14\u5212\u7c97\u7ec6\u7684\u662f\u901f\u5ea6\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5047\u5b9a\u4e24\u6b21 MOVE \u7684\u95f4\u9694\u662f\u5927\u81f4\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u8ba1\u7b97\u51fa\u6ed1\u52a8\u8ddd\u79bb\u5373\u53ef 2. \u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u7b14\u5212\u7c97\u7ec6\u6709\u4e2a\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7ed9\u6ed1\u52a8\u8ddd\u79bb\u52a0\u4e2a\u5f71\u54cd\u7cfb\u6570\uff0c\u4f7f exp(-calVel) \u7684\u7ed3\u679c\u5c3d\u91cf\u57280.2\u4e0e1\u4e4b\u95f4 3. \u901f\u5ea6\u8d8a\u5927\u5bbd\u5ea6\u8d8a\u5c0f\uff0c\u901f\u5ea6\u8d8a\u5c0f\u5bbd\u5ea6\u8d8a\u5927\uff0c\u5f53\u6ed1\u52a8\u901f\u5ea6\u4e3a0\u65f6\uff0c exp(-calVel) \u5373\u4e3a1\uff0c\u800c\u6ed1\u52a8\u901f\u5ea6\u8d8a\u5feb\uff0c exp(-calVel) \u8d8a\u63a5\u8fd1\u4e8e0 \u4e0a\u9762\u4e3b\u8981\u662f MOVE \u56de\u8c03\u7684\u70b9\u7684\u5bbd\u5ea6\u8ba1\u7b97\uff0c\u9664\u4e86 MOVE \u56de\u8c03\u7684\u70b9\uff0c\u8d1d\u585e\u5c14\u66f2\u7ebf\u52a0\u5165\u7684\u70b9\u7684\u5bbd\u5ea6\u4e5f\u5e94\u8be5\u5728\u8d77\u70b9\u4e0e\u7ec8\u70b9\u7684\u5bbd\u5ea6\u4e4b\u95f4\u6e10\u53d8 private double getW ( double t ){ return getWidth ( mSource . width , mDestination . width , t ); } private double getWidth ( double w0 , double w1 , double t ){ return w0 + ( w1 - w0 ) * t ; } \u7ed8\u5236\u6027\u80fd\u4f18\u5316 \u4e0a\u9762\u6211\u4eec\u901a\u8fc7\u4fdd\u5b58 MOVE \u8fc7\u7a0b\u4e2d\u7684\u70b9\u7684\u65b9\u5f0f\u5b9e\u73b0\u7ed8\u5236\uff0c\u5f53\u968f\u7740\u7b14\u5212\u8d8a\u6765\u8d8a\u591a\uff0c\u9700\u8981\u7ed8\u5236\u7684\u70b9\u4e5f\u8d8a\u6765\u8d8a\u591a\uff0c\u5728 onDraw \u4e2d\u5bf9\u5217\u8868\u8fdb\u884c\u904d\u5386\u7136\u540e\u7ed8\u5236\u662f\u6bd4\u8f83\u8017\u6027\u80fd\u7684\uff0c\u540c\u65f6\u6bcf\u5f53\u5217\u8868\u66f4\u65b0\uff0c\u5217\u8868\u90fd\u4f1a\u91cd\u65b0\u904d\u5386 \u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u7f13\u51b2 bitmap \uff0c ACTION_UP \u4e8b\u4ef6\u4e2d\u5c06\u5f53\u524d\u6240\u6709\u70b9\u7ed8\u5236\u5230\u7f13\u51b2 bitmap \u4e2d\u3002\u5728 draw \u65f6\u76f4\u63a5\u5c06\u7f13\u51b2 bitmap \u7ed8\u5236\u5230 canvas \u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a fun SpringBoard () { //\u5b9a\u4e49\u5185\u5b58\u56fe\u7247 val bitmap = remember { Bitmap . createBitmap ( itemSize . toInt (), itemSize . toInt (), Bitmap . Config . ARGB_8888 ) } val newCanvas = remember { android . graphics . Canvas ( bitmap ) } val paint = remember { Paint (). apply { color = android . graphics . Color . BLACK } } BoxWithConstraints (){ Canvas ( modifier = Modifier . fillMaxSize () . pointerInteropFilter ( onTouchEvent = { when ( it . action ) { MotionEvent . ACTION_UP -> { //\u7ed8\u5236\u5230Bitmap\u4e0a states . pointList . forEach { point -> newCanvas . drawCircle ( point . x , point . y , point . width , paint ) } //\u6e05\u7a7a\u5f53\u524d\u5217\u8868 viewModel . dispatch ( SpringBoardViewAction . ActionUp ( it )) } } true }) ) { //\u7ed8\u5236Bitmap\uff0c\u5373\u4e4b\u524d\u7684\u7b14\u5212 drawImage ( bitmap . asImageBitmap ()) //\u7ed8\u5236\u5f53\u524d\u5217\u8868\uff0c\u5373\u5f53\u524d\u7b14\u5212 states . pointList . forEach { drawCircle ( Color . Black , it . width , Offset ( it . x , it . y )) } } } } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a 1. \u5b9a\u4e49\u5185\u5b58\u56fe\u7247 bitmap ,\u5e76\u901a\u8fc7 bitmap \u83b7\u53d6 newCanvas 2. \u5728 ACTION_UP \u65f6\u5c06\u5f53\u524d\u70b9\u7684\u5217\u8868\u7ed8\u5236\u5230 bitmap \u4e2d\u5e76\u4e14\u6e05\u7a7a\u5f53\u524d\u70b9\u7684\u5217\u8868 3. \u5728 onDraw \u4e2d\u7ed8\u5236 bitmap \uff0c\u5373\u7ed8\u5236\u4e4b\u524d\u7684\u7b14\u5212\uff0c\u540c\u65f6\u7ed8\u5236\u5f53\u524d\u7684 pointList \uff0c\u5373\u5f53\u524d\u7684\u7b14\u5212 \u957f\u6309\u4fdd\u5b58\u5230\u672c\u5730 \u6211\u4eec\u5728\u957f\u6309\u65f6\uff0c\u9700\u8981\u5c06\u6625\u8054\u4fdd\u5b58\u5230\u672c\u5730\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u628a Compose \u4ee3\u7801\u8f6c\u5316\u6210 Bitmap \uff0c\u8fd9\u4e2a\u5728 View \u4e2d\u6bd4\u8f83\u6210\u719f\uff0c\u4f46\u662f\u5728 Compose \u4e2d\u6211\u6ca1\u6709\u627e\u5230\u76f8\u5173\u65b9\u6cd5 \u6211\u4eec\u53ef\u4ee5\u4eff\u7167\u4e0a\u9762\u7684\u5b9e\u73b0\uff0c\u628a\u5185\u5bb9\u7ed8\u5236\u5728\u4e00\u4e2a bitmap \u4e0a\uff0c\u7136\u540e\u76f4\u63a5\u4fdd\u5b58\u8fd9\u4e2a bitmap \u4e0a\u5c31\u597d\u4e86 @Composable fun SpringPreview () { BoxWithConstraints ( modifier = Modifier . pointerInput ( Unit ) { detectTapGestures ( onLongPress = { //\u957f\u6309\u65f6\u4fdd\u5b58bitmap\u5230\u672c\u5730 BitmapUtils . saveBitmapToGallery ( context , bitmap , \"\u6625\u8054\" ) } ) } ) { //\u5c06\u80cc\u666f\u4e0e\u56fe\u7247\u5217\u8868\u7ed8\u5236\u5230bitmap\u4e0a newCanvas . drawColor ( android . graphics . Color . RED ) for ( i in states . bitmapList . indices ) { newCanvas . drawBitmap ( states . bitmapList [ i ] , 0f , itemSize * i , paint ) } Canvas ( modifier = Modifier . fillMaxSize ()) { //\u7ed8\u5236bitmap drawImage ( bitmap . asImageBitmap (), Offset . Zero ) } } } 1. \u4e0a\u9762\u63d0\u5230\u6211\u4eec\u4f1a\u5c06\u7b14\u5212\u7ed8\u5236\u5230 bitmap \u4e2d\uff0c\u4e00\u4e2a\u5b57\u5373\u662f\u4e00\u4e2a bitmap 2. \u6211\u4eec\u7684\u6625\u8054\u7684\u5185\u5bb9\u5373\u4e3a\u4e0a\u9762\u7684 bitmap \u7684\u5217\u8868\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u7ea2\u8272\u7684\u80cc\u666f 3. \u6211\u4eec\u5c06\u7ea2\u8272\u80cc\u666f\u4e0e bitmap \u5217\u8868\u90fd\u7ed8\u5236\u5230\u4e00\u4e2a bitmap \u4e2d\uff0c\u518d\u5c06\u8fd9\u4e2a bitmap \u4e2d\u7ed8\u5236\u5230 Compose \u4e2d 4. \u4e0a\u9762\u8fd9\u4e2a bitmap \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u56fe\u7247\uff0c\u957f\u6309\u65f6\u5c06\u5176\u4fdd\u5b58\u5230\u672c\u5730\u5373\u53ef \u603b\u7ed3 \u53c2\u8003\u8d44\u6599 \u5b89\u5353\u753b\u7b14\u7b14\u950b\u7684\u5b9e\u73b0\u63a2\u7d22\uff08\u4e00\uff09 \u8fc7\u5e74\u4e86\uff01\u5f00\u53d1\u4e00\u5957\u7eb8\u7b14\u7cfb\u7edf\uff0c\u968f\u65f6\u968f\u5730\u5728\u7ebf\u5199\u6625\u8054 \u9879\u76ee\u5730\u5740 https://github.com/shenzhen2017/compose-handwriting","title":"Compose \u5b9e\u73b0\u624b\u5199\u6625\u8054\u6548\u679c"},{"location":"open-source-project/compose-spring-handwriting/#_1","text":"\u53c8\u662f\u4e00\u5e74\u65b0\u6625\uff0c\u5728\u8fd9\u91cc\u5148\u7ed9\u5927\u5bb6\u62dc\u4e2a\u65e9\u5e74\u4e86\u3002\u6bcf\u9022\u6625\u8282\uff0c\u5199\u6625\u8054\u8d34\u6625\u8054\u90fd\u662f\u4e00\u9879\u5fc5\u4e0d\u53ef\u5c11\u7684\u6d3b\u52a8\u3002\u672c\u6b21\u4e3b\u8981\u4f7f\u7528 Compose \uff0c\u5b9e\u73b0\u624b\u5199\u6625\u8054\u7684\u6548\u679c\u3002\u5982\u679c\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u4e2a\u8d5e\u6216\u8005\u8bc4\u8bba\u9f13\u52b1\u4e00\u4e0b~ \u7206\u7af9\u58f0\u4e2d\u4e00\u5c81\u9664 \u6625\u98ce\u9001\u6696\u5165\u5c60\u82cf \u5343\u95e8\u4e07\u6237\u66c8\u66c8\u65e5 \u603b\u628a\u65b0\u6843\u6362\u65e7\u7b26","title":"\u524d\u8a00"},{"location":"open-source-project/compose-spring-handwriting/#_2","text":"","title":"\u6548\u679c\u56fe"},{"location":"open-source-project/compose-spring-handwriting/#_3","text":"","title":"\u751f\u6210\u7684\u6625\u8054"},{"location":"open-source-project/compose-spring-handwriting/#_4","text":"","title":"\u4e3b\u8981\u601d\u8def"},{"location":"open-source-project/compose-spring-handwriting/#_5","text":"\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u624b\u5199\u6625\u8054\u6548\u679c\uff0c\u9996\u5148\u5c31\u662f\u8981\u505a\u4e8b\u4ef6\u76d1\u542c\uff0c Android \u4e2d\u81ea\u7136\u662f\u76d1\u542c Action_Down \uff0c Action_Move \uff0c Action_UP \uff0c Compose \u4e2d\u5e94\u8be5\u5982\u4f55\u5904\u7406\u5462? \u5176\u5b9e Compose \u4e2d\u4e5f\u53ef\u4ee5\u5229\u7528 pointerInteropFilter \u76d1\u542c Action_Down \uff0c Action_Move \uff0c Action_UP ,\u5982\u4e0b\u6240\u793a Column ( modifier = Modifier . pointerInteropFilter { when ( it . action ) { MotionEvent . ACTION_DOWN -> {} MotionEvent . ACTION_MOVE -> {} MotionEvent . ACTION_UP -> {} else -> false } true })","title":"\u4e8b\u4ef6\u76d1\u542c"},{"location":"open-source-project/compose-spring-handwriting/#_6","text":"\u5f53\u6211\u4eec\u624b\u5199\u6625\u8054\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6211\u4eec\u89e6\u6478\u8fc7\u7684\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u6700\u76f4\u63a5\u7684\u60f3\u6cd5\u5f53\u7136\u662f\u901a\u8fc7 Path \u6765\u7ed8\u5236\uff0c\u5373\u628a\u5404\u4e2a\u70b9\u8fde\u63a5\u6210 Path ,\u7136\u540e\u901a\u8fc7 drawPath \u6765\u7ed8\u5236 \u4f46\u662f\u95ee\u9898\u5728\u4e8e\u6625\u8054\u662f\u6bdb\u7b14\u6548\u679c\uff0c\u5728\u5199\u7684\u8fc7\u7a0b\u4e2d\u8def\u5f84\u7684\u7c97\u7ec6\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u800c drawPath \u53ea\u652f\u6301\u56fa\u5b9a\u7684\u5bbd\u5ea6\uff0c\u56e0\u6b64\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u6240\u4ee5\u6211\u4eec\u6362\u4e2a\u601d\u8def\uff0c drawPath \u5176\u5b9e\u4e5f\u662f\u5c06\u5404\u4e2a\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5982\u679c\u6211\u4eec\u5c06\u89e6\u6478\u8fc7\u7a0b\u4e2d\u7684\u70b9\u8bb0\u5f55\u4e0b\u6765\uff0c\u7136\u540e\u5728\u8fd9\u4e00\u7cfb\u5217\u7684\u70b9\u4e0a\u753b\u5706\u4e0d\u5c31\u884c\u4e86\u5417\uff1f\u6bcf\u4e2a\u5706\u7684\u534a\u5f84\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u4f46\u8fd9\u6837\u4f1a\u5e26\u6765\u4ee5\u4e0b\u95ee\u9898 \u53ef\u4ee5\u770b\u51fa: android \u89e6\u6478\u4e2d\u7684 MOVE \u65f6\u95f4\u53d6\u70b9\u7684\u9891\u7387\u4e0d\u662f\u975e\u5e38\u9ad8\uff0c\u4f1a\u9694\u4e00\u5b9a\u7684\u50cf\u7d20\u53d6\u70b9\u3002\u5f53\u8f7b\u89e6\u6ed1\u52a8\u65f6\u4f1a\u51fa\u73b0\u4e0d\u8fde\u7eed\u5706\u7684\u60c5\u51b5\uff0c\u660e\u663e\u4e0d\u7b26\u5408\u7b14\u950b\u6548\u679c","title":"\u8def\u5f84\u7ed8\u5236"},{"location":"open-source-project/compose-spring-handwriting/#_7","text":"\u4e0a\u9762\u7684\u95ee\u9898\u5728\u4e8e MOVE \u8fc7\u7a0b\u4e2d\u56de\u8c03\u7684\u6b21\u6570\u6709\u9650\uff0c\u56e0\u6b64\u53ea\u4f1a\u4ea7\u751f\u4e00\u7cfb\u5217\u4e0d\u8fde\u7eed\u7684\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u6761\u7ebf\uff0c\u8be5\u5982\u4f55\u89e3\u51b3\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b Path \uff0c\u5176\u5b9e\u5b83\u4e5f\u53ea\u662f\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u8d1d\u585e\u5c14\u66f2\u7ebf\u5c06\u8fd9\u4e9b\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u66f2\u7ebf\u6548\u679c\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u5c06\u4e0a\u9762\u8fd9\u4e9b\u70b9\u8fde\u6210\u7ebf\u5462? private fun onActionMove ( event : MotionEvent ) { val lastPoint = viewStates . value . curPoint val curPoint = ControllerPoint ( event . x , event . y ) val lineWidth = calWidth ( event = event ) curPoint . width = lineWidth if ( viewStates . value . pointList . size < 2 ) { //\u521d\u59cb\u5316\u8d1d\u585e\u5c14\u66f2\u7ebf bezier . init ( lastPoint , curPoint ) } else { //\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u70b9 bezier . addNode ( curPoint ) } val curDis = getDistance ( event ) //\u5728\u4e24\u4e2a\u70b9\u4e4b\u95f4\u63d2\u516510\u4e2a\u70b9\uff0c\u5b83\u4eec\u90fd\u5728\u4e24\u4e2a\u70b9\u8fde\u63a5\u7684\u8d1d\u585e\u5c14\u66f2\u7ebf\u4e0a val steps : Int = 1 + ( curDis / STEP_FACTOR ). toInt () val step = 1.0 / steps val list = mutableListOf < ControllerPoint > () var t = 0.0 // \u63d2\u516510\u4e2a\u70b9 while ( t < 1.0 ) { val point : ControllerPoint = bezier . getPoint ( t ) list . add ( point ) t += step } addPoints ( list ) _viewStates . value = _viewStates . value . copy ( curPoint = curPoint ) } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a 1. \u5f53\u76ee\u524d\u5217\u8868\u4e2d\u53ea\u67091\u4e2a\u70b9\u65f6\uff0c\u521d\u59cb\u5316\u8d1d\u585e\u5c14\u66f2\u7ebf\uff0c\u5373\u4ee5\u4e0a\u4e00\u4e2a\u70b9\u4e3a\u8d77\u59cb\u70b9\uff0c\u5f53\u524d\u70b9\u4e3a\u7ec8\u70b9 2. \u5f53\u5217\u8868\u4e2d\u5df2\u7ecf\u67092\u4e2a\u70b9\u65f6\uff0c\u5f80\u8d1d\u585e\u5c14\u66f2\u7ebf\u4e2d\u52a0\u5165\u5f53\u524d\u70b9\uff0c\u5c06\u539f\u6765\u7684\u7ec8\u70b9\u53d8\u4e3a\u8d77\u70b9\uff0c\u5f53\u524d\u70b9\u53d8\u4e3a\u65b0\u7684\u7ec8\u70b9 3. \u5728\u8d1d\u585e\u5c14\u66f2\u7ebf\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\u4e4b\u95f4\u63d2\u5165\u591a\u4e2a\u70b9\uff0c\u5b83\u4eec\u7684\u4f4d\u7f6e\u90fd\u5728\u8d1d\u585e\u5c14\u66f2\u7ebf\u4e0a\uff0c\u5177\u4f53\u7684\u6570\u91cf\u7531 STEP_FACTOR \u51b3\u5b9a\uff0c\u6211\u4eec\u76ee\u524d\u6682\u5b9a\u4e3a10\u4e2a 4. \u5f53\u6211\u4eec\u57282\u4e2a\u70b9\u4e4b\u95f4\uff0c\u63d2\u5165\u4e86\u591a\u4e2a\u70b9\u4e4b\u540e\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u7a7a\u767d\u5c31\u4f1a\u88ab\u586b\u8865\uff0c\u770b\u8d77\u6765\u4e0d\u50cf\u4e00\u6761\u7ebf\u4e00\u6837","title":"\u8d1d\u585e\u5c14\u66f2\u7ebf"},{"location":"open-source-project/compose-spring-handwriting/#_8","text":"\u4e0a\u6587\u8bf4\u5230\u6bdb\u7b14\u7684\u8def\u5f84\u7c97\u7ec6\u662f\u4e0d\u65ad\u53d8\u5316\u7684\uff0c\u4e00\u822c\u6765\u8bf4\u662f\u8d8a\u6162\u7684\u5730\u65b9\u7b14\u5212\u8d8a\u7c97\uff0c\u8d8a\u5feb\u7684\u5730\u65b9\u7b14\u5212\u8d8a\u7ec6\uff0c\u540c\u65f6\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\u4e4b\u95f4\u7684\u5bbd\u5ea6\u5e94\u8be5\u662f\u6e10\u53d8\u7684\uff0c\u800c\u4e0d\u662f\u7a81\u53d8\u7684\uff0c\u8ba1\u7b97\u7b14\u753b\u5bbd\u5ea6\u7684\u4ee3\u7801\u5982\u4e0b\uff1a private fun calWidth ( event : MotionEvent ): Float { // \u6ed1\u52a8\u8ddd\u79bb val distance = getDistance ( event ) // \u6ed1\u52a8\u8ddd\u79bb\u52a0\u4e2a\u5f71\u54cd\u7cfb\u6570\u5b9a\u4e49\u4e3a\u901f\u5ea6 val calVel = distance * 0.002 // \u901f\u5ea6\u8d8a\u5927\u5bbd\u5ea6\u8d8a\u5c0f\uff0c\u901f\u5ea6\u8d8a\u5c0f\u5bbd\u5ea6\u8d8a\u5927 val width = NORMAL_WIDTH * maxOf ( exp ( - calVel ), 0.2 ) return width . toFloat () } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a 1. \u867d\u7136\u51b3\u5b9a\u7b14\u5212\u7c97\u7ec6\u7684\u662f\u901f\u5ea6\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5047\u5b9a\u4e24\u6b21 MOVE \u7684\u95f4\u9694\u662f\u5927\u81f4\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u8ba1\u7b97\u51fa\u6ed1\u52a8\u8ddd\u79bb\u5373\u53ef 2. \u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u7b14\u5212\u7c97\u7ec6\u6709\u4e2a\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7ed9\u6ed1\u52a8\u8ddd\u79bb\u52a0\u4e2a\u5f71\u54cd\u7cfb\u6570\uff0c\u4f7f exp(-calVel) \u7684\u7ed3\u679c\u5c3d\u91cf\u57280.2\u4e0e1\u4e4b\u95f4 3. \u901f\u5ea6\u8d8a\u5927\u5bbd\u5ea6\u8d8a\u5c0f\uff0c\u901f\u5ea6\u8d8a\u5c0f\u5bbd\u5ea6\u8d8a\u5927\uff0c\u5f53\u6ed1\u52a8\u901f\u5ea6\u4e3a0\u65f6\uff0c exp(-calVel) \u5373\u4e3a1\uff0c\u800c\u6ed1\u52a8\u901f\u5ea6\u8d8a\u5feb\uff0c exp(-calVel) \u8d8a\u63a5\u8fd1\u4e8e0 \u4e0a\u9762\u4e3b\u8981\u662f MOVE \u56de\u8c03\u7684\u70b9\u7684\u5bbd\u5ea6\u8ba1\u7b97\uff0c\u9664\u4e86 MOVE \u56de\u8c03\u7684\u70b9\uff0c\u8d1d\u585e\u5c14\u66f2\u7ebf\u52a0\u5165\u7684\u70b9\u7684\u5bbd\u5ea6\u4e5f\u5e94\u8be5\u5728\u8d77\u70b9\u4e0e\u7ec8\u70b9\u7684\u5bbd\u5ea6\u4e4b\u95f4\u6e10\u53d8 private double getW ( double t ){ return getWidth ( mSource . width , mDestination . width , t ); } private double getWidth ( double w0 , double w1 , double t ){ return w0 + ( w1 - w0 ) * t ; }","title":"\u53ef\u53d8\u7684\u5bbd\u5ea6"},{"location":"open-source-project/compose-spring-handwriting/#_9","text":"\u4e0a\u9762\u6211\u4eec\u901a\u8fc7\u4fdd\u5b58 MOVE \u8fc7\u7a0b\u4e2d\u7684\u70b9\u7684\u65b9\u5f0f\u5b9e\u73b0\u7ed8\u5236\uff0c\u5f53\u968f\u7740\u7b14\u5212\u8d8a\u6765\u8d8a\u591a\uff0c\u9700\u8981\u7ed8\u5236\u7684\u70b9\u4e5f\u8d8a\u6765\u8d8a\u591a\uff0c\u5728 onDraw \u4e2d\u5bf9\u5217\u8868\u8fdb\u884c\u904d\u5386\u7136\u540e\u7ed8\u5236\u662f\u6bd4\u8f83\u8017\u6027\u80fd\u7684\uff0c\u540c\u65f6\u6bcf\u5f53\u5217\u8868\u66f4\u65b0\uff0c\u5217\u8868\u90fd\u4f1a\u91cd\u65b0\u904d\u5386 \u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u7f13\u51b2 bitmap \uff0c ACTION_UP \u4e8b\u4ef6\u4e2d\u5c06\u5f53\u524d\u6240\u6709\u70b9\u7ed8\u5236\u5230\u7f13\u51b2 bitmap \u4e2d\u3002\u5728 draw \u65f6\u76f4\u63a5\u5c06\u7f13\u51b2 bitmap \u7ed8\u5236\u5230 canvas \u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a fun SpringBoard () { //\u5b9a\u4e49\u5185\u5b58\u56fe\u7247 val bitmap = remember { Bitmap . createBitmap ( itemSize . toInt (), itemSize . toInt (), Bitmap . Config . ARGB_8888 ) } val newCanvas = remember { android . graphics . Canvas ( bitmap ) } val paint = remember { Paint (). apply { color = android . graphics . Color . BLACK } } BoxWithConstraints (){ Canvas ( modifier = Modifier . fillMaxSize () . pointerInteropFilter ( onTouchEvent = { when ( it . action ) { MotionEvent . ACTION_UP -> { //\u7ed8\u5236\u5230Bitmap\u4e0a states . pointList . forEach { point -> newCanvas . drawCircle ( point . x , point . y , point . width , paint ) } //\u6e05\u7a7a\u5f53\u524d\u5217\u8868 viewModel . dispatch ( SpringBoardViewAction . ActionUp ( it )) } } true }) ) { //\u7ed8\u5236Bitmap\uff0c\u5373\u4e4b\u524d\u7684\u7b14\u5212 drawImage ( bitmap . asImageBitmap ()) //\u7ed8\u5236\u5f53\u524d\u5217\u8868\uff0c\u5373\u5f53\u524d\u7b14\u5212 states . pointList . forEach { drawCircle ( Color . Black , it . width , Offset ( it . x , it . y )) } } } } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a 1. \u5b9a\u4e49\u5185\u5b58\u56fe\u7247 bitmap ,\u5e76\u901a\u8fc7 bitmap \u83b7\u53d6 newCanvas 2. \u5728 ACTION_UP \u65f6\u5c06\u5f53\u524d\u70b9\u7684\u5217\u8868\u7ed8\u5236\u5230 bitmap \u4e2d\u5e76\u4e14\u6e05\u7a7a\u5f53\u524d\u70b9\u7684\u5217\u8868 3. \u5728 onDraw \u4e2d\u7ed8\u5236 bitmap \uff0c\u5373\u7ed8\u5236\u4e4b\u524d\u7684\u7b14\u5212\uff0c\u540c\u65f6\u7ed8\u5236\u5f53\u524d\u7684 pointList \uff0c\u5373\u5f53\u524d\u7684\u7b14\u5212","title":"\u7ed8\u5236\u6027\u80fd\u4f18\u5316"},{"location":"open-source-project/compose-spring-handwriting/#_10","text":"\u6211\u4eec\u5728\u957f\u6309\u65f6\uff0c\u9700\u8981\u5c06\u6625\u8054\u4fdd\u5b58\u5230\u672c\u5730\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u628a Compose \u4ee3\u7801\u8f6c\u5316\u6210 Bitmap \uff0c\u8fd9\u4e2a\u5728 View \u4e2d\u6bd4\u8f83\u6210\u719f\uff0c\u4f46\u662f\u5728 Compose \u4e2d\u6211\u6ca1\u6709\u627e\u5230\u76f8\u5173\u65b9\u6cd5 \u6211\u4eec\u53ef\u4ee5\u4eff\u7167\u4e0a\u9762\u7684\u5b9e\u73b0\uff0c\u628a\u5185\u5bb9\u7ed8\u5236\u5728\u4e00\u4e2a bitmap \u4e0a\uff0c\u7136\u540e\u76f4\u63a5\u4fdd\u5b58\u8fd9\u4e2a bitmap \u4e0a\u5c31\u597d\u4e86 @Composable fun SpringPreview () { BoxWithConstraints ( modifier = Modifier . pointerInput ( Unit ) { detectTapGestures ( onLongPress = { //\u957f\u6309\u65f6\u4fdd\u5b58bitmap\u5230\u672c\u5730 BitmapUtils . saveBitmapToGallery ( context , bitmap , \"\u6625\u8054\" ) } ) } ) { //\u5c06\u80cc\u666f\u4e0e\u56fe\u7247\u5217\u8868\u7ed8\u5236\u5230bitmap\u4e0a newCanvas . drawColor ( android . graphics . Color . RED ) for ( i in states . bitmapList . indices ) { newCanvas . drawBitmap ( states . bitmapList [ i ] , 0f , itemSize * i , paint ) } Canvas ( modifier = Modifier . fillMaxSize ()) { //\u7ed8\u5236bitmap drawImage ( bitmap . asImageBitmap (), Offset . Zero ) } } } 1. \u4e0a\u9762\u63d0\u5230\u6211\u4eec\u4f1a\u5c06\u7b14\u5212\u7ed8\u5236\u5230 bitmap \u4e2d\uff0c\u4e00\u4e2a\u5b57\u5373\u662f\u4e00\u4e2a bitmap 2. \u6211\u4eec\u7684\u6625\u8054\u7684\u5185\u5bb9\u5373\u4e3a\u4e0a\u9762\u7684 bitmap \u7684\u5217\u8868\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u7ea2\u8272\u7684\u80cc\u666f 3. \u6211\u4eec\u5c06\u7ea2\u8272\u80cc\u666f\u4e0e bitmap \u5217\u8868\u90fd\u7ed8\u5236\u5230\u4e00\u4e2a bitmap \u4e2d\uff0c\u518d\u5c06\u8fd9\u4e2a bitmap \u4e2d\u7ed8\u5236\u5230 Compose \u4e2d 4. \u4e0a\u9762\u8fd9\u4e2a bitmap \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u56fe\u7247\uff0c\u957f\u6309\u65f6\u5c06\u5176\u4fdd\u5b58\u5230\u672c\u5730\u5373\u53ef","title":"\u957f\u6309\u4fdd\u5b58\u5230\u672c\u5730"},{"location":"open-source-project/compose-spring-handwriting/#_11","text":"","title":"\u603b\u7ed3"},{"location":"open-source-project/compose-spring-handwriting/#_12","text":"\u5b89\u5353\u753b\u7b14\u7b14\u950b\u7684\u5b9e\u73b0\u63a2\u7d22\uff08\u4e00\uff09 \u8fc7\u5e74\u4e86\uff01\u5f00\u53d1\u4e00\u5957\u7eb8\u7b14\u7cfb\u7edf\uff0c\u968f\u65f6\u968f\u5730\u5728\u7ebf\u5199\u6625\u8054","title":"\u53c2\u8003\u8d44\u6599"},{"location":"open-source-project/compose-spring-handwriting/#_13","text":"https://github.com/shenzhen2017/compose-handwriting","title":"\u9879\u76ee\u5730\u5740"},{"location":"open-source-project/compose-wan-android/","text":"\u524d\u8a00 \u4eca\u5e74\u4e03\u6708\u5e95\uff0c Google \u6b63\u5f0f\u53d1\u5e03\u4e86 Jetpack Compose \u7684 1.0 \u7a33\u5b9a\u7248\u672c\uff0c\u8fd9\u8bf4\u660e Google \u8ba4\u4e3a Compose \u5df2\u7ecf\u53ef\u4ee5\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u4e86\u3002\u76f8\u4fe1 Compose \u7684\u5e7f\u6cdb\u5e94\u7528\u5c31\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\uff0c\u73b0\u5728\u5e94\u8be5\u662f\u5b66\u4e60 Compose \u7684\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u65f6\u673a \u5728\u4e86\u89e3\u4e86 Compose \u7684\u57fa\u672c\u77e5\u8bc6\u4e0e\u539f\u7406\u4e4b\u540e\uff0c\u901a\u8fc7\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u7ee7\u7eed\u5b66\u4e60 Compose \u5e94\u8be5\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u3002\u672c\u6587\u4e3b\u8981\u57fa\u4e8e Compose \uff0c MVI \u67b6\u6784\uff0c\u5355 Activity \u67b6\u6784\u7b49\uff0c\u5feb\u901f\u5b9e\u73b0\u4e00\u4e2a wanAndroid \u5ba2\u6237\u7aef,\u5982\u679c\u5bf9\u60a8\u6709\u6240\u5e2e\u52a9\u53ef\u4ee5\u70b9\u4e2a Star : wanAndroid-compose \u6548\u679c\u56fe \u9996\u5148\u770b\u4e0b\u6548\u679c\u56fe ------------------------------------------------------------ ------------------------------------------------------------ \u4e3b\u8981\u5b9e\u73b0\u4ecb\u7ecd \u5404\u4e2a\u9875\u9762\u7684\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u67e5\u770b\u6e90\u7801\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u4e3b\u8981\u7684\u5b9e\u73b0\u4e0e\u539f\u7406 \u4f7f\u7528 MVI \u67b6\u6784 MVI \u4e0e MVVM \u5f88\u76f8\u4f3c\uff0c\u5176\u501f\u9274\u4e86\u524d\u7aef\u6846\u67b6\u7684\u601d\u60f3\uff0c\u66f4\u52a0\u5f3a\u8c03\u6570\u636e\u7684\u5355\u5411\u6d41\u52a8\u548c\u552f\u4e00\u6570\u636e\u6e90,\u67b6\u6784\u56fe\u5982\u4e0b\u6240\u793a \u5176\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u90e8\u5206 1. Model : \u4e0e MVVM \u4e2d\u7684 Model \u4e0d\u540c\u7684\u662f\uff0c MVI \u7684 Model \u4e3b\u8981\u6307 UI \u72b6\u6001\uff08 State \uff09\u3002\u4f8b\u5982\u9875\u9762\u52a0\u8f7d\u72b6\u6001\u3001\u63a7\u4ef6\u4f4d\u7f6e\u7b49\u90fd\u662f\u4e00\u79cd UI \u72b6\u6001 2. View : \u4e0e\u5176\u4ed6 MVX \u4e2d\u7684 View \u4e00\u81f4\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a Activity \u6216\u8005\u4efb\u610f UI \u627f\u8f7d\u5355\u5143\u3002 MVI \u4e2d\u7684 View \u901a\u8fc7\u8ba2\u9605 Model \u7684\u53d8\u5316\u5b9e\u73b0\u754c\u9762\u5237\u65b0 3. Intent : \u6b64 Intent \u4e0d\u662f Activity \u7684 Intent \uff0c\u7528\u6237\u7684\u4efb\u4f55\u64cd\u4f5c\u90fd\u88ab\u5305\u88c5\u6210 Intent \u540e\u53d1\u9001\u7ed9 Model \u5c42\u8fdb\u884c\u6570\u636e\u8bf7\u6c42 \u4f8b\u5982\u767b\u5f55\u9875\u9762\u7684 Model \u4e0e Intent \u5b9a\u4e49\u5982\u4e0b /** * \u9875\u9762\u6240\u6709\u72b6\u6001 / data class LoginViewState( val account: String = \"\", val password: String = \"\", val isLogged: Boolean = false ) /** * \u4e00\u6b21\u6027\u4e8b\u4ef6 */ sealed class LoginViewEvent { object PopBack : LoginViewEvent () data class ErrorMessage ( val message : String ) : LoginViewEvent () } /** * \u9875\u9762 Intent , \u5373\u7528\u6237\u7684\u64cd\u4f5c / sealed class LoginViewAction { object Login : LoginViewAction () object ClearAccount : LoginViewAction () object ClearPassword : LoginViewAction () data class UpdateAccount ( val account : String ) : LoginViewAction () data class UpdatePassword ( val password : String ) : LoginViewAction () } \u5982\u4e0a\u6240\u793a 1. \u901a\u8fc7 ViewState \u5b9a\u4e49\u9875\u9762\u6240\u6709\u72b6\u6001 2. ViewEvent \u5b9a\u4e49\u4e00\u6b21\u6027\u4e8b\u4ef6\u5982 Toast \uff0c\u9875\u9762\u5173\u95ed\u4e8b\u4ef6\u7b49 3. \u901a\u8fc7 ViewAction \u5b9a\u4e49\u6240\u6709\u7528\u6237\u64cd\u4f5c MVI \u67b6\u6784\u4e0e MVVM \u67b6\u6784\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff1a 1. MVVM \u5e76\u6ca1\u6709\u7ea6\u675f View \u5c42\u4e0e ViewModel \u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f View \u5c42\u53ef\u4ee5\u968f\u610f\u8c03\u7528 ViewModel \u4e2d\u7684\u65b9\u6cd5\uff0c\u800c MVI \u67b6\u6784\u4e0b ViewModel \u7684\u5b9e\u73b0\u5bf9 View \u5c42\u5c4f\u853d\uff0c\u53ea\u80fd\u901a\u8fc7\u53d1\u9001 Intent \u6765\u9a71\u52a8\u4e8b\u4ef6\u3002 2. MVVM \u7684 ViewModle \u4e2d\u5206\u6563\u5b9a\u4e49\u4e86\u591a\u4e2a State \uff0c MVI \u4f7f\u7528 ViewState \u5bf9 State \u96c6\u4e2d\u7ba1\u7406\uff0c\u53ea\u9700\u8981\u8ba2\u9605\u4e00\u4e2a ViewState \u4fbf\u53ef\u83b7\u53d6\u9875\u9762\u7684\u6240\u6709\u72b6\u6001\uff0c\u76f8\u5bf9 MVVM \u51cf\u5c11\u4e86\u4e0d\u5c11\u6a21\u677f\u4ee3\u7801 Compose \u7684\u58f0\u660e\u5f0f UI \u601d\u60f3\u6765\u81ea React \uff0c\u7406\u8bba\u4e0a\u540c\u6837\u6765\u81ea Redux \u601d\u60f3\u7684 MVI \u5e94\u8be5\u662f Compose \u7684\u6700\u4f73\u4f34\u4fa3 \u4f46\u662f MVI \u4e5f\u53ea\u662f\u5728 MVVM \u7684\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u5b9a\u7684\u6539\u826f\uff0c MVVM \u4e5f\u53ef\u4ee5\u5f88\u597d\u5730\u914d\u5408 Compose \u4f7f\u7528,\u5404\u4f4d\u53ef\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u9009\u62e9\u5408\u9002\u7684\u67b6\u6784 \u5173\u4e8e Compose \u7684\u67b6\u6784\u9009\u62e9\u53ef\u53c2\u8003\uff1a Jetpack Compose \u67b6\u6784\u5982\u4f55\u9009\uff1f MVP, MVVM, MVI \u5355 Activity \u67b6\u6784 \u65e9\u5728 View \u65f6\u4ee3\uff0c\u5c31\u6709\u4e0d\u5c11\u63a8\u8350\u5355 Activity +\u591a Fragment \u67b6\u6784\u7684\u6587\u7ae0\uff0c Google \u4e5f\u63a8\u51fa\u4e86 Jetpack Navigation \u5e93\u6765\u652f\u6301\u8fd9\u79cd\u5355 Activity \u67b6\u6784 \u5bf9\u4e8e Compose \u6765\u8bf4\uff0c\u56e0\u4e3a Activity \u4e0e Compose \u662f\u901a\u8fc7 AndroidComposeView \u6765\u4e2d\u8f6c\u7684\uff0c Activity \u8d8a\u591a\uff0c\u5c31\u9700\u8981\u521b\u5efa\u51fa\u8d8a\u591a\u7684 AndroidComposeView ,\u5bf9\u6027\u80fd\u6709\u4e00\u5b9a\u5f71\u54cd \u800c\u4f7f\u7528\u5355 Activity \u67b6\u6784\uff0c\u6240\u6709\u53d8\u6362\u9875\u9762\u8df3\u8f6c\u90fd\u5728 Compose \u5185\u90e8\u5b8c\u6210\uff0c\u53ef\u80fd\u4e5f\u662f\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u76ee\u524d Google \u7684\u793a\u4f8b\u9879\u76ee\u90fd\u662f\u57fa\u4e8e\u5355 Activity + Navigation +\u591a Compose \u67b6\u6784\u7684 \u4f46\u662f\u4f7f\u7528\u5355 Activity \u67b6\u6784\u4e5f\u9700\u8981\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898 1. \u6240\u6709\u7684 viewModel \u90fd\u5728\u4e00\u4e2a Activity \u7684 ViewModelStoreOwner \u4e2d\uff0c\u90a3\u4e48\u5f53\u4e00\u4e2a\u9875\u9762\u9500\u6bc1\u4e86\uff0c\u6b64\u9875\u9762\u7528\u8fc7\u7684 viewModel \u5e94\u8be5\u4ec0\u4e48\u65f6\u5019\u9500\u6bc1\u5462\uff1f 2. \u6709\u65f6\u5019\u9875\u9762\u9700\u8981\u76d1\u542c\u81ea\u5df1\u8fd9\u4e2a\u9875\u9762\u7684 onResume \uff0c onPause \u7b49\u751f\u547d\u5468\u671f\uff0c\u5355 Activity \u67b6\u6784\u4e0b\u5982\u4f55\u76d1\u542c\u751f\u547d\u5468\u671f\u5462? \u6211\u4eec\u4e0b\u9762\u5c31\u4e00\u8d77\u6765\u770b\u4e0b\u5982\u4f55\u89e3\u51b3\u5355 Activity \u67b6\u6784\u4e0b\u7684\u8fd9\u4e24\u4e2a\u95ee\u9898 \u9875\u9762 ViewModel \u4f55\u65f6\u9500\u6bc1? \u5728 Compose \u4e2d\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6 ViewModel //\u65b9\u5f0f1 @Composable fun LoginPage ( loginViewModel : LoginViewModel = viewModel () ) { //... } //\u65b9\u5f0f2 @Composable fun LoginPage ( loginViewModel : LoginViewModel = hiltViewModel () ) { //... } \u5982\u4e0a\u6240\u793a\uff1a 1. \u65b9\u5f0f1\u5c06\u8fd4\u56de\u4e00\u4e2a\u4e0e ViewModelStoreOwner (\u4e00\u822c\u662f Activity \u6216 Fragment )\u7ed1\u5b9a\u7684 ViewModel \uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\uff0c\u5df2\u5b58\u5728\u5219\u76f4\u63a5\u8fd4\u56de\u3002\u5f88\u660e\u663e\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684 ViewModel \u7684\u751f\u547d\u5468\u671f\u5c06\u4e0e Activity \u4e00\u81f4\uff0c\u5728\u5355 Activity \u67b6\u6784\u4e2d\u5c06\u4e00\u76f4\u5b58\u5728\uff0c\u4e0d\u4f1a\u91ca\u653e\u3002 2. \u65b9\u5f0f2\u901a\u8fc7 Hilt \u5b9e\u73b0\uff0c\u53ef\u4ee5\u5728 Composable \u4e2d\u83b7\u53d6 NavGraph Scope \u6216 Destination Scope \u7684 ViewModel \uff0c\u5e76\u81ea\u52a8\u4f9d\u8d56 Hilt \u6784\u5efa\u3002 Destination Scope \u7684 ViewModel \u4f1a\u8ddf\u968f BackStack \u7684\u5f39\u51fa\u81ea\u52a8 Clear \uff0c\u907f\u514d\u6cc4\u9732\u3002 \u603b\u5f97\u6765\u8bf4\uff0c\u901a\u8fc7 hiltViewModel \u4e0e Navigation \u914d\u5408\uff0c\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9 Compose \u5982\u4f55\u83b7\u53d6\u751f\u547d\u5468\u671f? \u4e3a\u4e86\u5728 Compose \u4e2d\u83b7\u53d6\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3\u4e0b \u526f\u4f5c\u7528 \u7528\u4e00\u53e5\u8bdd\u6982\u62ec\u526f\u4f5c\u7528\uff1a\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9664\u4e86\u8fd4\u56de\u51fd\u6570\u503c\u4e4b\u5916\uff0c\u5bf9\u8c03\u7528\u65b9\u8fd8\u4f1a\u5e26\u6765\u5176\u4ed6\u9644\u52a0\u5f71\u54cd\uff0c\u4f8b\u5982\u4fee\u6539\u5168\u5c40\u53d8\u91cf\u6216\u4fee\u6539\u53c2\u6570\u7b49\u3002 \u526f\u4f5c\u7528\u5fc5\u987b\u5728\u5408\u9002\u7684\u65f6\u673a\u6267\u884c\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u660e\u786e\u4e00\u4e0b Composable \u7684\u751f\u547d\u5468\u671f\uff1a 1. onActive\uff08or onEnter\uff09 \uff1a\u5f53 Composable \u9996\u6b21\u8fdb\u5165\u7ec4\u4ef6\u6811\u65f6 2. onCommit\uff08or onUpdate\uff09 \uff1a UI \u968f\u7740 recomposition \u53d1\u751f\u66f4\u65b0\u65f6 3. onDispose\uff08or onLeave\uff09 \uff1a\u5f53 Composable \u4ece\u7ec4\u4ef6\u6811\u79fb\u9664\u65f6 \u4e86\u89e3\u4e86 Compose \u7684\u751f\u547d\u5468\u671f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u5728 onActive \u65f6\u76d1\u542c Activity \u7684\u751f\u547d\u5468\u671f\uff0c\u5728 onDispose \u65f6\u53d6\u6d88\u76d1\u542c\uff0c\u4e0d\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728 Compose \u4e2d\u83b7\u53d6\u751f\u547d\u5468\u671f\u4e86\u5417? DisposableEffect \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\uff0c DisposableEffect \u5728\u5176\u76d1\u542c\u7684 Key \u53d1\u751f\u53d8\u5316\uff0c\u6216 onDispose \u65f6\u4f1a\u6267\u884c \u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u53c2\u6570\uff0c\u8ba9\u5176\u4ec5\u5728 onActive \u4e0e onDispose \u65f6\u6267\u884c\uff1a\u4f8b\u5982 DisposableEffect(true) \u6216 DisposableEffect(Unit) \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728 Compose \u4e2d\u76d1\u542c\u9875\u9762\u751f\u547d\u5468\u671f @Composable fun LoginPage ( loginViewModel : LoginViewModel = hiltViewModel () ) { val lifecycleOwner = LocalLifecycleOwner . current DisposableEffect ( key1 = Unit ) { val observer = object : LifecycleObserver { @OnLifecycleEvent ( Lifecycle . Event . ON_RESUME ) fun onResume () { viewModel . dispatch ( Action . Resume ) } @OnLifecycleEvent ( Lifecycle . Event . ON_PAUSE ) fun onPause () { viewModel . dispatch ( Action . Pause ) } } lifecycleOwner . lifecycle . addObserver ( observer ) onDispose { lifecycleOwner . lifecycle . removeObserver ( observer ) } } } \u5f53\u7136\u6709\u65f6\u4e5f\u4e0d\u9700\u8981\u8fd9\u4e48\u590d\u6742\uff0c\u6bd4\u5982\u6211\u4eec\u9700\u8981\u5728\u8fdb\u5165\u6216\u8fd4\u56de ProfilePage \u9875\u9762\u65f6\u5237\u65b0\u767b\u5f55\u72b6\u6001\uff0c\u5e76\u6839\u636e\u767b\u5f55\u72b6\u6001\u786e\u8ba4\u9875\u9762 UI \uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0 @Composable fun ProfilePage ( navCtrl : NavHostController , scaffoldState : ScaffoldState , viewModel : ProfileViewModel = hiltViewModel () ) { //... DisposableEffect ( Unit ) { Log . i ( \"debug\" , \"onStart\" ) viewModel . dispatch ( ProfileViewAction . OnStart ) onDispose { } } } \u5982\u4e0a\u6240\u793a\uff0c\u6bcf\u5f53\u8fdb\u5165\u9875\u9762\u6216\u8fd4\u56de\u8be5\u9875\u9762\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5237\u65b0\u9875\u9762\u767b\u5f55\u72b6\u6001\u4e86 Compose \u5982\u4f55\u4fdd\u5b58 LazyColumn \u5217\u8868\u72b6\u6001 \u76f8\u4fe1\u4f7f\u7528\u8fc7 LazyColumn \u7684\u540c\u5b66\u90fd\u78b0\u5230\u8fc7\u4e0b\u9762\u7684\u95ee\u9898 \u4f7f\u7528 Paging3 \u52a0\u8f7d\u5206\u9875\u6570\u636e\uff0c\u5e76\u663e\u793a\u5230\u9875\u9762 A \u7684 LazyColumn \u4e0a\uff0c\u5411\u4e0b\u6ed1\u52a8 LazyColumn \uff0c\u7136\u540e navigation.navigate \u8df3\u8f6c\u5230\u9875\u9762 B \uff0c\u63a5\u7740\u518d navigatUp \u56de\u5230\u9875\u9762 A \uff0c\u9875\u9762 A \u7684 LazyColumn \u53c8\u56de\u5230\u4e86\u5217\u8868\u9876\u90e8 \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c LazyListState \u5176\u5b9e\u662f\u901a\u8fc7 rememberLazyListState \u505a\u4e86\u6301\u4e45\u5316\u4fdd\u5b58\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u65e2\u7136\u505a\u4e86\u6301\u4e45\u5316\u4fdd\u5b58\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd4\u56de\u65f6\u7684\u4f4d\u7f6e\u8fd8\u6709\u95ee\u9898\u5462\uff1f\u5176\u5b9e\u7eaf\u7cb9\u4f7f\u7528 Paging + LazyColumn \uff0c\u5f53\u9875\u9762\u5207\u6362\u65f6\uff0c\u4f1a\u8bb0\u5f55\u5f53\u524d\u9875\u9762\u4f4d\u7f6e\uff0c\u4f46\u5982\u679c\u901a\u8fc7 item \u52a0\u4e0a Header \u6216 Footer \u5c31\u4e0d\u884c\u4e86 \u8fd9\u662f\u56e0\u4e3a rememberLazyListState \u4f1a\u5728\u5217\u8868\u4e2d\u81f3\u5c11\u6709\u4e00\u9879\u65f6 restore \u6eda\u52a8\u4f4d\u7f6e\uff0c\u540c\u65f6 Paging \u662f\u901a\u8fc7 Flow \u83b7\u53d6\u6570\u636e\u7684\uff0c\u5f53\u8fd4\u56de\u5230\u9875\u9762\u91cd\u7ec4\u65f6\u5e76\u4e0d\u80fd\u9a6c\u4e0a\u83b7\u53d6\u5230 Paging \u6570\u636e\uff0c\u7b2c\u4e00\u5e27\u65f6 Paging \u7684 itemCount \u4e3a0 \u4f46\u540c\u65f6\u56e0\u4e3a LazyColumn \u4e2d\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a Header \uff0c\u8fd9\u65f6\u4fbf\u4f1a\u8fd8\u539f\u4fdd\u5b58\u7684\u4f4d\u7f6e\uff0c\u4f46\u56e0\u4e3a\u8fd9\u65f6 Paging \u4e2d\u7684\u6570\u636e\u8fd8\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u6eda\u52a8\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f\u4fbf\u53c8\u6eda\u52a8\u5230\u9876\u90e8\u4e86 \u800c\u5f53 LazyColumn \u4e2d\u6ca1\u6709 Header \u65f6\uff0c\u5217\u8868\u4e2d\u81f3\u5c11\u6709\u4e00\u9879\u65f6\u4fbf\u662f Paging \u6570\u636e\u6210\u529f\u586b\u5145\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd8\u539f\u7684\u4f4d\u7f6e\u5c31\u662f\u5bf9\u7684,\u6240\u4ee5\u6ca1\u6709\u95ee\u9898 \u65e2\u7136\u539f\u56e0\u5728\u4e8e LazyListState \u6ca1\u6709\u5728\u6b63\u786e\u7684\u65f6\u673a\u88ab\u8fd8\u539f\uff0c\u90a3\u6211\u4eec\u5c06 LazyListSate \u4fdd\u5b58\u5728 ViewModel \u4e2d,\u5e76\u4e14\u5728 Paging \u4e2d\u6709\u6570\u636e\u65f6\u518d\u8fd8\u539f listState \uff0c\u5982\u4e0b\u6240\u793a\uff1a @HiltViewModel class SquareViewModel @Inject constructor ( private var service : HttpService , ) : ViewModel () { private val pager by lazy { simplePager { service . getSquareData ( it ) }. cachedIn ( viewModelScope ) } val listState : LazyListState = LazyListState () } @Composable fun SquarePage ( navCtrl : NavHostController , scaffoldState : ScaffoldState , viewModel : SquareViewModel = hiltViewModel () ) { val squareData = viewStates . pagingData . collectAsLazyPagingItems () // \u5f53`Paging`\u6709\u6570\u636e\u65f6\uff0c\u8fd4\u56de`ViewModel`\u4e2d\u7684`listState` val listState = if ( squareData . itemCount > 0 ) viewStates . listState else LazyListState () RefreshList ( squareData , listState = listState ) { itemsIndexed ( squareData ) { _ , item -> //... } } } \u603b\u5f97\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u9875\u9762\uff0c rememberLazyListState \u5df2\u7ecf\u8db3\u591f\uff0c\u4f46\u662f\u5bf9\u4e8e\u6709 Header \u6216 Footer \u7684 Paging \u9875\u9762\uff0c\u9700\u8981\u4e00\u4e9b\u7279\u6b8a\u5904\u7406 \u5173\u4e8e LazyColumn \u6eda\u52a8\u4e22\u5931\u7684\u95ee\u9898\uff0c\u66f4\u8be6\u7ec6\u7684\u8ba8\u8bba\u53ef\u53c2\u8003\uff1a Scroll position of LazyColumn built with collectAsLazyPagingItems is lost when using Navigation \u603b\u7ed3 \u9879\u76ee\u5730\u5740 https://github.com/shenzhen2017/wanandroid-compose \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~ \u53c2\u8003\u8d44\u6599 https://github.com/manqianzhuang/HamApp https://github.com/linxiangcheer/PlayAndroid \u4ece\u96f6\u5230\u4e00\u5199\u4e00\u4e2a\u5b8c\u6574\u7684 Compose \u7248\u672c\u7684\u5929\u6c14","title":"Compose + MVI + Navigation \u5feb\u901f\u5b9e\u73b0 wanAndroid \u5ba2\u6237\u7aef"},{"location":"open-source-project/compose-wan-android/#_1","text":"\u4eca\u5e74\u4e03\u6708\u5e95\uff0c Google \u6b63\u5f0f\u53d1\u5e03\u4e86 Jetpack Compose \u7684 1.0 \u7a33\u5b9a\u7248\u672c\uff0c\u8fd9\u8bf4\u660e Google \u8ba4\u4e3a Compose \u5df2\u7ecf\u53ef\u4ee5\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u4e86\u3002\u76f8\u4fe1 Compose \u7684\u5e7f\u6cdb\u5e94\u7528\u5c31\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\uff0c\u73b0\u5728\u5e94\u8be5\u662f\u5b66\u4e60 Compose \u7684\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u65f6\u673a \u5728\u4e86\u89e3\u4e86 Compose \u7684\u57fa\u672c\u77e5\u8bc6\u4e0e\u539f\u7406\u4e4b\u540e\uff0c\u901a\u8fc7\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\u7ee7\u7eed\u5b66\u4e60 Compose \u5e94\u8be5\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u3002\u672c\u6587\u4e3b\u8981\u57fa\u4e8e Compose \uff0c MVI \u67b6\u6784\uff0c\u5355 Activity \u67b6\u6784\u7b49\uff0c\u5feb\u901f\u5b9e\u73b0\u4e00\u4e2a wanAndroid \u5ba2\u6237\u7aef,\u5982\u679c\u5bf9\u60a8\u6709\u6240\u5e2e\u52a9\u53ef\u4ee5\u70b9\u4e2a Star : wanAndroid-compose","title":"\u524d\u8a00"},{"location":"open-source-project/compose-wan-android/#_2","text":"\u9996\u5148\u770b\u4e0b\u6548\u679c\u56fe ------------------------------------------------------------ ------------------------------------------------------------","title":"\u6548\u679c\u56fe"},{"location":"open-source-project/compose-wan-android/#_3","text":"\u5404\u4e2a\u9875\u9762\u7684\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u67e5\u770b\u6e90\u7801\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u4e3b\u8981\u7684\u5b9e\u73b0\u4e0e\u539f\u7406","title":"\u4e3b\u8981\u5b9e\u73b0\u4ecb\u7ecd"},{"location":"open-source-project/compose-wan-android/#mvi","text":"MVI \u4e0e MVVM \u5f88\u76f8\u4f3c\uff0c\u5176\u501f\u9274\u4e86\u524d\u7aef\u6846\u67b6\u7684\u601d\u60f3\uff0c\u66f4\u52a0\u5f3a\u8c03\u6570\u636e\u7684\u5355\u5411\u6d41\u52a8\u548c\u552f\u4e00\u6570\u636e\u6e90,\u67b6\u6784\u56fe\u5982\u4e0b\u6240\u793a \u5176\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u90e8\u5206 1. Model : \u4e0e MVVM \u4e2d\u7684 Model \u4e0d\u540c\u7684\u662f\uff0c MVI \u7684 Model \u4e3b\u8981\u6307 UI \u72b6\u6001\uff08 State \uff09\u3002\u4f8b\u5982\u9875\u9762\u52a0\u8f7d\u72b6\u6001\u3001\u63a7\u4ef6\u4f4d\u7f6e\u7b49\u90fd\u662f\u4e00\u79cd UI \u72b6\u6001 2. View : \u4e0e\u5176\u4ed6 MVX \u4e2d\u7684 View \u4e00\u81f4\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a Activity \u6216\u8005\u4efb\u610f UI \u627f\u8f7d\u5355\u5143\u3002 MVI \u4e2d\u7684 View \u901a\u8fc7\u8ba2\u9605 Model \u7684\u53d8\u5316\u5b9e\u73b0\u754c\u9762\u5237\u65b0 3. Intent : \u6b64 Intent \u4e0d\u662f Activity \u7684 Intent \uff0c\u7528\u6237\u7684\u4efb\u4f55\u64cd\u4f5c\u90fd\u88ab\u5305\u88c5\u6210 Intent \u540e\u53d1\u9001\u7ed9 Model \u5c42\u8fdb\u884c\u6570\u636e\u8bf7\u6c42 \u4f8b\u5982\u767b\u5f55\u9875\u9762\u7684 Model \u4e0e Intent \u5b9a\u4e49\u5982\u4e0b /** * \u9875\u9762\u6240\u6709\u72b6\u6001 / data class LoginViewState( val account: String = \"\", val password: String = \"\", val isLogged: Boolean = false ) /** * \u4e00\u6b21\u6027\u4e8b\u4ef6 */ sealed class LoginViewEvent { object PopBack : LoginViewEvent () data class ErrorMessage ( val message : String ) : LoginViewEvent () } /** * \u9875\u9762 Intent , \u5373\u7528\u6237\u7684\u64cd\u4f5c / sealed class LoginViewAction { object Login : LoginViewAction () object ClearAccount : LoginViewAction () object ClearPassword : LoginViewAction () data class UpdateAccount ( val account : String ) : LoginViewAction () data class UpdatePassword ( val password : String ) : LoginViewAction () } \u5982\u4e0a\u6240\u793a 1. \u901a\u8fc7 ViewState \u5b9a\u4e49\u9875\u9762\u6240\u6709\u72b6\u6001 2. ViewEvent \u5b9a\u4e49\u4e00\u6b21\u6027\u4e8b\u4ef6\u5982 Toast \uff0c\u9875\u9762\u5173\u95ed\u4e8b\u4ef6\u7b49 3. \u901a\u8fc7 ViewAction \u5b9a\u4e49\u6240\u6709\u7528\u6237\u64cd\u4f5c MVI \u67b6\u6784\u4e0e MVVM \u67b6\u6784\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff1a 1. MVVM \u5e76\u6ca1\u6709\u7ea6\u675f View \u5c42\u4e0e ViewModel \u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f View \u5c42\u53ef\u4ee5\u968f\u610f\u8c03\u7528 ViewModel \u4e2d\u7684\u65b9\u6cd5\uff0c\u800c MVI \u67b6\u6784\u4e0b ViewModel \u7684\u5b9e\u73b0\u5bf9 View \u5c42\u5c4f\u853d\uff0c\u53ea\u80fd\u901a\u8fc7\u53d1\u9001 Intent \u6765\u9a71\u52a8\u4e8b\u4ef6\u3002 2. MVVM \u7684 ViewModle \u4e2d\u5206\u6563\u5b9a\u4e49\u4e86\u591a\u4e2a State \uff0c MVI \u4f7f\u7528 ViewState \u5bf9 State \u96c6\u4e2d\u7ba1\u7406\uff0c\u53ea\u9700\u8981\u8ba2\u9605\u4e00\u4e2a ViewState \u4fbf\u53ef\u83b7\u53d6\u9875\u9762\u7684\u6240\u6709\u72b6\u6001\uff0c\u76f8\u5bf9 MVVM \u51cf\u5c11\u4e86\u4e0d\u5c11\u6a21\u677f\u4ee3\u7801 Compose \u7684\u58f0\u660e\u5f0f UI \u601d\u60f3\u6765\u81ea React \uff0c\u7406\u8bba\u4e0a\u540c\u6837\u6765\u81ea Redux \u601d\u60f3\u7684 MVI \u5e94\u8be5\u662f Compose \u7684\u6700\u4f73\u4f34\u4fa3 \u4f46\u662f MVI \u4e5f\u53ea\u662f\u5728 MVVM \u7684\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u5b9a\u7684\u6539\u826f\uff0c MVVM \u4e5f\u53ef\u4ee5\u5f88\u597d\u5730\u914d\u5408 Compose \u4f7f\u7528,\u5404\u4f4d\u53ef\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u9009\u62e9\u5408\u9002\u7684\u67b6\u6784 \u5173\u4e8e Compose \u7684\u67b6\u6784\u9009\u62e9\u53ef\u53c2\u8003\uff1a Jetpack Compose \u67b6\u6784\u5982\u4f55\u9009\uff1f MVP, MVVM, MVI","title":"\u4f7f\u7528MVI\u67b6\u6784"},{"location":"open-source-project/compose-wan-android/#activity","text":"\u65e9\u5728 View \u65f6\u4ee3\uff0c\u5c31\u6709\u4e0d\u5c11\u63a8\u8350\u5355 Activity +\u591a Fragment \u67b6\u6784\u7684\u6587\u7ae0\uff0c Google \u4e5f\u63a8\u51fa\u4e86 Jetpack Navigation \u5e93\u6765\u652f\u6301\u8fd9\u79cd\u5355 Activity \u67b6\u6784 \u5bf9\u4e8e Compose \u6765\u8bf4\uff0c\u56e0\u4e3a Activity \u4e0e Compose \u662f\u901a\u8fc7 AndroidComposeView \u6765\u4e2d\u8f6c\u7684\uff0c Activity \u8d8a\u591a\uff0c\u5c31\u9700\u8981\u521b\u5efa\u51fa\u8d8a\u591a\u7684 AndroidComposeView ,\u5bf9\u6027\u80fd\u6709\u4e00\u5b9a\u5f71\u54cd \u800c\u4f7f\u7528\u5355 Activity \u67b6\u6784\uff0c\u6240\u6709\u53d8\u6362\u9875\u9762\u8df3\u8f6c\u90fd\u5728 Compose \u5185\u90e8\u5b8c\u6210\uff0c\u53ef\u80fd\u4e5f\u662f\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u76ee\u524d Google \u7684\u793a\u4f8b\u9879\u76ee\u90fd\u662f\u57fa\u4e8e\u5355 Activity + Navigation +\u591a Compose \u67b6\u6784\u7684 \u4f46\u662f\u4f7f\u7528\u5355 Activity \u67b6\u6784\u4e5f\u9700\u8981\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898 1. \u6240\u6709\u7684 viewModel \u90fd\u5728\u4e00\u4e2a Activity \u7684 ViewModelStoreOwner \u4e2d\uff0c\u90a3\u4e48\u5f53\u4e00\u4e2a\u9875\u9762\u9500\u6bc1\u4e86\uff0c\u6b64\u9875\u9762\u7528\u8fc7\u7684 viewModel \u5e94\u8be5\u4ec0\u4e48\u65f6\u5019\u9500\u6bc1\u5462\uff1f 2. \u6709\u65f6\u5019\u9875\u9762\u9700\u8981\u76d1\u542c\u81ea\u5df1\u8fd9\u4e2a\u9875\u9762\u7684 onResume \uff0c onPause \u7b49\u751f\u547d\u5468\u671f\uff0c\u5355 Activity \u67b6\u6784\u4e0b\u5982\u4f55\u76d1\u542c\u751f\u547d\u5468\u671f\u5462? \u6211\u4eec\u4e0b\u9762\u5c31\u4e00\u8d77\u6765\u770b\u4e0b\u5982\u4f55\u89e3\u51b3\u5355 Activity \u67b6\u6784\u4e0b\u7684\u8fd9\u4e24\u4e2a\u95ee\u9898","title":"\u5355Activity\u67b6\u6784"},{"location":"open-source-project/compose-wan-android/#viewmodel","text":"\u5728 Compose \u4e2d\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6 ViewModel //\u65b9\u5f0f1 @Composable fun LoginPage ( loginViewModel : LoginViewModel = viewModel () ) { //... } //\u65b9\u5f0f2 @Composable fun LoginPage ( loginViewModel : LoginViewModel = hiltViewModel () ) { //... } \u5982\u4e0a\u6240\u793a\uff1a 1. \u65b9\u5f0f1\u5c06\u8fd4\u56de\u4e00\u4e2a\u4e0e ViewModelStoreOwner (\u4e00\u822c\u662f Activity \u6216 Fragment )\u7ed1\u5b9a\u7684 ViewModel \uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\uff0c\u5df2\u5b58\u5728\u5219\u76f4\u63a5\u8fd4\u56de\u3002\u5f88\u660e\u663e\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684 ViewModel \u7684\u751f\u547d\u5468\u671f\u5c06\u4e0e Activity \u4e00\u81f4\uff0c\u5728\u5355 Activity \u67b6\u6784\u4e2d\u5c06\u4e00\u76f4\u5b58\u5728\uff0c\u4e0d\u4f1a\u91ca\u653e\u3002 2. \u65b9\u5f0f2\u901a\u8fc7 Hilt \u5b9e\u73b0\uff0c\u53ef\u4ee5\u5728 Composable \u4e2d\u83b7\u53d6 NavGraph Scope \u6216 Destination Scope \u7684 ViewModel \uff0c\u5e76\u81ea\u52a8\u4f9d\u8d56 Hilt \u6784\u5efa\u3002 Destination Scope \u7684 ViewModel \u4f1a\u8ddf\u968f BackStack \u7684\u5f39\u51fa\u81ea\u52a8 Clear \uff0c\u907f\u514d\u6cc4\u9732\u3002 \u603b\u5f97\u6765\u8bf4\uff0c\u901a\u8fc7 hiltViewModel \u4e0e Navigation \u914d\u5408\uff0c\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9","title":"\u9875\u9762ViewModel\u4f55\u65f6\u9500\u6bc1?"},{"location":"open-source-project/compose-wan-android/#compose","text":"\u4e3a\u4e86\u5728 Compose \u4e2d\u83b7\u53d6\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3\u4e0b \u526f\u4f5c\u7528 \u7528\u4e00\u53e5\u8bdd\u6982\u62ec\u526f\u4f5c\u7528\uff1a\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9664\u4e86\u8fd4\u56de\u51fd\u6570\u503c\u4e4b\u5916\uff0c\u5bf9\u8c03\u7528\u65b9\u8fd8\u4f1a\u5e26\u6765\u5176\u4ed6\u9644\u52a0\u5f71\u54cd\uff0c\u4f8b\u5982\u4fee\u6539\u5168\u5c40\u53d8\u91cf\u6216\u4fee\u6539\u53c2\u6570\u7b49\u3002 \u526f\u4f5c\u7528\u5fc5\u987b\u5728\u5408\u9002\u7684\u65f6\u673a\u6267\u884c\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u660e\u786e\u4e00\u4e0b Composable \u7684\u751f\u547d\u5468\u671f\uff1a 1. onActive\uff08or onEnter\uff09 \uff1a\u5f53 Composable \u9996\u6b21\u8fdb\u5165\u7ec4\u4ef6\u6811\u65f6 2. onCommit\uff08or onUpdate\uff09 \uff1a UI \u968f\u7740 recomposition \u53d1\u751f\u66f4\u65b0\u65f6 3. onDispose\uff08or onLeave\uff09 \uff1a\u5f53 Composable \u4ece\u7ec4\u4ef6\u6811\u79fb\u9664\u65f6 \u4e86\u89e3\u4e86 Compose \u7684\u751f\u547d\u5468\u671f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u5728 onActive \u65f6\u76d1\u542c Activity \u7684\u751f\u547d\u5468\u671f\uff0c\u5728 onDispose \u65f6\u53d6\u6d88\u76d1\u542c\uff0c\u4e0d\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728 Compose \u4e2d\u83b7\u53d6\u751f\u547d\u5468\u671f\u4e86\u5417? DisposableEffect \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\uff0c DisposableEffect \u5728\u5176\u76d1\u542c\u7684 Key \u53d1\u751f\u53d8\u5316\uff0c\u6216 onDispose \u65f6\u4f1a\u6267\u884c \u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u53c2\u6570\uff0c\u8ba9\u5176\u4ec5\u5728 onActive \u4e0e onDispose \u65f6\u6267\u884c\uff1a\u4f8b\u5982 DisposableEffect(true) \u6216 DisposableEffect(Unit) \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728 Compose \u4e2d\u76d1\u542c\u9875\u9762\u751f\u547d\u5468\u671f @Composable fun LoginPage ( loginViewModel : LoginViewModel = hiltViewModel () ) { val lifecycleOwner = LocalLifecycleOwner . current DisposableEffect ( key1 = Unit ) { val observer = object : LifecycleObserver { @OnLifecycleEvent ( Lifecycle . Event . ON_RESUME ) fun onResume () { viewModel . dispatch ( Action . Resume ) } @OnLifecycleEvent ( Lifecycle . Event . ON_PAUSE ) fun onPause () { viewModel . dispatch ( Action . Pause ) } } lifecycleOwner . lifecycle . addObserver ( observer ) onDispose { lifecycleOwner . lifecycle . removeObserver ( observer ) } } } \u5f53\u7136\u6709\u65f6\u4e5f\u4e0d\u9700\u8981\u8fd9\u4e48\u590d\u6742\uff0c\u6bd4\u5982\u6211\u4eec\u9700\u8981\u5728\u8fdb\u5165\u6216\u8fd4\u56de ProfilePage \u9875\u9762\u65f6\u5237\u65b0\u767b\u5f55\u72b6\u6001\uff0c\u5e76\u6839\u636e\u767b\u5f55\u72b6\u6001\u786e\u8ba4\u9875\u9762 UI \uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0 @Composable fun ProfilePage ( navCtrl : NavHostController , scaffoldState : ScaffoldState , viewModel : ProfileViewModel = hiltViewModel () ) { //... DisposableEffect ( Unit ) { Log . i ( \"debug\" , \"onStart\" ) viewModel . dispatch ( ProfileViewAction . OnStart ) onDispose { } } } \u5982\u4e0a\u6240\u793a\uff0c\u6bcf\u5f53\u8fdb\u5165\u9875\u9762\u6216\u8fd4\u56de\u8be5\u9875\u9762\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5237\u65b0\u9875\u9762\u767b\u5f55\u72b6\u6001\u4e86","title":"Compose\u5982\u4f55\u83b7\u53d6\u751f\u547d\u5468\u671f?"},{"location":"open-source-project/compose-wan-android/#composelazycolumn","text":"\u76f8\u4fe1\u4f7f\u7528\u8fc7 LazyColumn \u7684\u540c\u5b66\u90fd\u78b0\u5230\u8fc7\u4e0b\u9762\u7684\u95ee\u9898 \u4f7f\u7528 Paging3 \u52a0\u8f7d\u5206\u9875\u6570\u636e\uff0c\u5e76\u663e\u793a\u5230\u9875\u9762 A \u7684 LazyColumn \u4e0a\uff0c\u5411\u4e0b\u6ed1\u52a8 LazyColumn \uff0c\u7136\u540e navigation.navigate \u8df3\u8f6c\u5230\u9875\u9762 B \uff0c\u63a5\u7740\u518d navigatUp \u56de\u5230\u9875\u9762 A \uff0c\u9875\u9762 A \u7684 LazyColumn \u53c8\u56de\u5230\u4e86\u5217\u8868\u9876\u90e8 \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c LazyListState \u5176\u5b9e\u662f\u901a\u8fc7 rememberLazyListState \u505a\u4e86\u6301\u4e45\u5316\u4fdd\u5b58\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u65e2\u7136\u505a\u4e86\u6301\u4e45\u5316\u4fdd\u5b58\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8fd4\u56de\u65f6\u7684\u4f4d\u7f6e\u8fd8\u6709\u95ee\u9898\u5462\uff1f\u5176\u5b9e\u7eaf\u7cb9\u4f7f\u7528 Paging + LazyColumn \uff0c\u5f53\u9875\u9762\u5207\u6362\u65f6\uff0c\u4f1a\u8bb0\u5f55\u5f53\u524d\u9875\u9762\u4f4d\u7f6e\uff0c\u4f46\u5982\u679c\u901a\u8fc7 item \u52a0\u4e0a Header \u6216 Footer \u5c31\u4e0d\u884c\u4e86 \u8fd9\u662f\u56e0\u4e3a rememberLazyListState \u4f1a\u5728\u5217\u8868\u4e2d\u81f3\u5c11\u6709\u4e00\u9879\u65f6 restore \u6eda\u52a8\u4f4d\u7f6e\uff0c\u540c\u65f6 Paging \u662f\u901a\u8fc7 Flow \u83b7\u53d6\u6570\u636e\u7684\uff0c\u5f53\u8fd4\u56de\u5230\u9875\u9762\u91cd\u7ec4\u65f6\u5e76\u4e0d\u80fd\u9a6c\u4e0a\u83b7\u53d6\u5230 Paging \u6570\u636e\uff0c\u7b2c\u4e00\u5e27\u65f6 Paging \u7684 itemCount \u4e3a0 \u4f46\u540c\u65f6\u56e0\u4e3a LazyColumn \u4e2d\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a Header \uff0c\u8fd9\u65f6\u4fbf\u4f1a\u8fd8\u539f\u4fdd\u5b58\u7684\u4f4d\u7f6e\uff0c\u4f46\u56e0\u4e3a\u8fd9\u65f6 Paging \u4e2d\u7684\u6570\u636e\u8fd8\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u6eda\u52a8\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f\u4fbf\u53c8\u6eda\u52a8\u5230\u9876\u90e8\u4e86 \u800c\u5f53 LazyColumn \u4e2d\u6ca1\u6709 Header \u65f6\uff0c\u5217\u8868\u4e2d\u81f3\u5c11\u6709\u4e00\u9879\u65f6\u4fbf\u662f Paging \u6570\u636e\u6210\u529f\u586b\u5145\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd8\u539f\u7684\u4f4d\u7f6e\u5c31\u662f\u5bf9\u7684,\u6240\u4ee5\u6ca1\u6709\u95ee\u9898 \u65e2\u7136\u539f\u56e0\u5728\u4e8e LazyListState \u6ca1\u6709\u5728\u6b63\u786e\u7684\u65f6\u673a\u88ab\u8fd8\u539f\uff0c\u90a3\u6211\u4eec\u5c06 LazyListSate \u4fdd\u5b58\u5728 ViewModel \u4e2d,\u5e76\u4e14\u5728 Paging \u4e2d\u6709\u6570\u636e\u65f6\u518d\u8fd8\u539f listState \uff0c\u5982\u4e0b\u6240\u793a\uff1a @HiltViewModel class SquareViewModel @Inject constructor ( private var service : HttpService , ) : ViewModel () { private val pager by lazy { simplePager { service . getSquareData ( it ) }. cachedIn ( viewModelScope ) } val listState : LazyListState = LazyListState () } @Composable fun SquarePage ( navCtrl : NavHostController , scaffoldState : ScaffoldState , viewModel : SquareViewModel = hiltViewModel () ) { val squareData = viewStates . pagingData . collectAsLazyPagingItems () // \u5f53`Paging`\u6709\u6570\u636e\u65f6\uff0c\u8fd4\u56de`ViewModel`\u4e2d\u7684`listState` val listState = if ( squareData . itemCount > 0 ) viewStates . listState else LazyListState () RefreshList ( squareData , listState = listState ) { itemsIndexed ( squareData ) { _ , item -> //... } } } \u603b\u5f97\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u9875\u9762\uff0c rememberLazyListState \u5df2\u7ecf\u8db3\u591f\uff0c\u4f46\u662f\u5bf9\u4e8e\u6709 Header \u6216 Footer \u7684 Paging \u9875\u9762\uff0c\u9700\u8981\u4e00\u4e9b\u7279\u6b8a\u5904\u7406 \u5173\u4e8e LazyColumn \u6eda\u52a8\u4e22\u5931\u7684\u95ee\u9898\uff0c\u66f4\u8be6\u7ec6\u7684\u8ba8\u8bba\u53ef\u53c2\u8003\uff1a Scroll position of LazyColumn built with collectAsLazyPagingItems is lost when using Navigation","title":"Compose\u5982\u4f55\u4fdd\u5b58LazyColumn\u5217\u8868\u72b6\u6001"},{"location":"open-source-project/compose-wan-android/#_4","text":"","title":"\u603b\u7ed3"},{"location":"open-source-project/compose-wan-android/#_5","text":"https://github.com/shenzhen2017/wanandroid-compose \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~","title":"\u9879\u76ee\u5730\u5740"},{"location":"open-source-project/compose-wan-android/#_6","text":"https://github.com/manqianzhuang/HamApp https://github.com/linxiangcheer/PlayAndroid \u4ece\u96f6\u5230\u4e00\u5199\u4e00\u4e2a\u5b8c\u6574\u7684 Compose \u7248\u672c\u7684\u5929\u6c14","title":"\u53c2\u8003\u8d44\u6599"},{"location":"principle/gap_buffer/","text":"\u63ed\u79d8 @Composable \u5982\u679c\u4f60\u5df2\u7ecf\u770b\u8fc7 Compose \uff0c\u4f60\u53ef\u80fd\u5728\u5f88\u591a\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\u770b\u5230\u8fc7 @Composable \u6ce8\u89e3\u3002\u6709\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u5fc5\u987b\u8bf4\u660e\uff0c Compose \u6ca1\u6709\u4f7f\u7528\u6ce8\u89e3\u5904\u7406\u5668\u3002 Compose \u5728 Kotlin \u7f16\u8bd1\u63d2\u4ef6\u5728\u7c7b\u578b\u68c0\u67e5\u548c\u4ee3\u7801\u751f\u6210\u9636\u6bb5\u5de5\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4f7f\u7528\u6ce8\u89e3\u5904\u7406\u5668\u3002 \u8fd9\u4e2a\u6ce8\u89e3\u66f4\u50cf\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u3002\u5c31\u50cf Kotlin \u91cc\u9762\u7684 suspend \u5173\u952e\u5b57\u4e00\u6837\u3002 // function declaration suspend fun MyFun () { \u2026 } // lambda declaration val myLambda = suspend { \u2026 } // function type fun MyFun ( myParam : suspend () -> Unit ) { \u2026 } Kotlin \u7684 suspend \u5173\u952e\u5b57\u4f1a\u7528\u5728\u51fd\u6570\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u3001 lambda \u6216\u8005\u662f\u7c7b\u578b\u662f suspend \u7684\u3002 Compose \u4e5f\u4e00\u6837\uff0c\u5b83\u53ef\u4ee5\u6539\u53d8\u51fd\u6570\u7684\u7c7b\u578b\u3002 // function declaration @Composable fun MyFun () { \u2026 } // lambda declaration val myLambda = @Composable { \u2026 } // function type fun MyFun ( myParam : @Composable () -> Unit ) { \u2026 } \u6709\u4e00\u70b9\u5f88\u91cd\u8981\u8fd9\u91cc\u5fc5\u987b\u8981\u8bf4\u660e\uff0c\u5f53\u4f60\u4e3a\u4e00\u4e2a\u51fd\u6570\u6dfb\u52a0\u4e86 @Composable \u6ce8\u89e3\u65f6\uff0c\u4f60\u5c31\u6539\u53d8\u4e86\u8fd9\u4e2a\u51fd\u6570\u7c7b\u578b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f8\u540c\u51fd\u6570\u7c7b\u578b\u6ca1\u6709\u6ce8\u89e3\u548c\u6709\u6ce8\u89e3\u662f\u4e0d\u517c\u5bb9\u7684\u3002\u540c\u6837\u7684\uff0c suspend \u51fd\u6570\u4e5f\u9700\u8981\u4e00\u4e2a\u8c03\u7528\u7684\u4e0a\u4e0b\u6587\uff0c\u610f\u601d\u5c31\u662f\u53ea\u80fd\u5728\u53ea\u80fd\u5728\u53e6\u4e00\u4e2a suspend \u51fd\u6570\u91cc\u9762\u8c03\u7528 suspend \u51fd\u6570\u3002 fun Example ( a : () -> Unit , b : suspend () -> Unit ) { a () // allowed b () // NOT allowed } suspend fun Example ( a : () -> Unit , b : suspend () -> Unit ) { a () // allowed b () // allowed } Composable \u5de5\u4f5c\u65b9\u5f0f\u4e5f\u662f\u4e00\u6837\u7684\u3002\u56e0\u4e3a\u6709\u4e00\u4e2a\u8c03\u7528\u4e0a\u4e0b\u6587\u7684\u5bf9\u8c61\u8d2f\u7a7f\u8fd9\u6574\u4e2a\u8c03\u7528\u3002 fun Example ( a : () -> Unit , b : @Composable () -> Unit ) { a () // allowed b () // NOT allowed } @Composable fun Example ( a : () -> Unit , b : @Composable () -> Unit ) { a () // allowed b () // allowed } \u57fa\u4e8e GapBuffer \u7684\u8fd0\u884c\u8fc7\u7a0b \u90a3\u4e48\uff0c\u8fd9\u4e2a\u6211\u4eec\u4f20\u9012\u7684\u4e0a\u4e0b\u6587\u662f\u4ec0\u4e48\u5462\uff1f\u8fd8\u6709\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u8fd9\u4e48\u505a\uff1f \u6211\u4eec\u628a\u8fd9\u4e2a\u5bf9\u8c61\u53eb \u201cComposer\u201d\u3002 Composer \u7684\u5b9e\u73b0\u5305\u542b\u4e86\u4e00\u4e2a\u8ddf Gap Buffer \u5f88\u7c7b\u4f3c\u7684\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7ecf\u5e38\u7528\u5728\u6587\u672c\u7f16\u8f91\u5668\u91cc\u9762\u3002 Gap Buffer \u8868\u793a\u7684\u662f\u4e00\u4e2a\u5305\u542b\u4e86 index \u548c cursor \u7684\u96c6\u5408\u3002\u5728\u5185\u5b58\u91cc\u9762\u5b83\u5c31\u662f\u4e00\u4e2a\u6241\u5e73\u7684\u6570\u7ec4\u3002\u8fd9\u4e2a\u6241\u5e73\u7684\u6570\u7ec4\u4f1a\u6bd4\u5b9e\u9645\u8868\u793a\u7684\u6570\u636e\u8981\u5927\u4e00\u4e9b\uff0c\u5176\u4e2d\u6ca1\u6709\u4f7f\u7528\u7684\u7a7a\u95f4\u5c31\u662f gap \u3002 \u73b0\u5728\uff0c\u4e00\u4e2a\u6b63\u5728\u6267\u884c\u7684 Composable \u5c42\u7ea7\u4f1a\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u63d2\u5165\u6570\u636e\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5c42\u7ea7\u7ed3\u6784\u7684\u6570\u636e\u63d2\u5165\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981 rcompose \uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u91cd\u7f6e cursor \u5230\u6570\u7ec4\u7684\u9876\u90e8\u5e76\u91cd\u65b0\u518d\u6b21\u904d\u5386\u6574\u4e2a\u6570\u7ec4\u3002\u5f53\u6211\u4eec\u5728\u6267\u884c\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6570\u636e\u770b\u662f\u5426\u9700\u8981\u66f4\u65b0\u503c\u3002 \u53ef\u80fd\u56e0\u4e3aUI\u7ed3\u6784\u7684\u6539\u53d8\u6211\u4eec\u60f3\u8981\u63d2\u5165\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u628a gap \u79fb\u52a8\u5230\u4e86\u5f53\u524d\u7684\u4f4d\u7f6e\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u63d2\u5165\u6570\u636e\u4e86\u3002 \u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\u6211\u4eec\u9700\u8981\u7406\u89e3\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u6240\u6709\u7684\u64cd\u4f5c\u2014\u2014 get , move , insert , delete \u2014\u2014\u90fd\u662f\u5e38\u91cf\u9636\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\uff0c\u9664\u4e86\u79fb\u52a8gap\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002\u6211\u4eec\u9009\u62e9\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u6211\u4eec\u8ba4\u4e3a\uff0c\u5e73\u5747\u6765\u8bf4\uff0c UI \u7ed3\u6784\u7684\u53d8\u5316\u4e0d\u4f1a\u592a\u591a\u3002\u52a8\u6001\u7684UI\u901a\u5e38\u662f\u6839\u636e\u6570\u636e\u503c\u7684\u53d8\u5316\uff0c\u800c\u7ed3\u6784\u7684\u53d8\u5316\u4e0d\u4f1a\u7ecf\u5e38\u53d1\u751f\u3002\u5982\u679c\u786e\u5b9e\u53d1\u751f\u4e86\u7ed3\u6784\u884c\u7684\u53d8\u5316\uff0c\u901a\u5e38\u662f\u4e00\u5927\u5757\u7684\u53d8\u5316\uff0c\u56e0\u6b64\u6267\u884c O(n) \u590d\u6742\u5ea6\u7684 gap \u79fb\u52a8\u4e5f\u662f\u5408\u7406\u7684\u6743\u8861\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a counter \u7684\u793a\u4f8b\uff1a @Composable fun Counter () { var count by remember { mutableStateOf ( 0 ) } Button ( text = \"Count: $ count \" , onClick = { count += 1 } ) } \u6211\u4eec\u5199\u4ee3\u7801\u4f1a\u8fd9\u4e48\u5199\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6211\u4eec\u505a\u4ec0\u4e48\u5462\uff1f \u5f53\u7f16\u8bd1\u5668\u770b\u5230 Composable \u6ce8\u89e3\u65f6\u4fbf\u4f1a\u63d2\u5165\u989d\u5916\u7684\u53c2\u6570\u5e76\u5728\u51fd\u6570\u4f53\u5185\u8c03\u7528\u3002 \u9996\u5148\uff0c\u7f16\u8bd1\u5668\u6dfb\u52a0\u4e86\u4e00\u4e2a Composer.start \u7684\u8c03\u7528\u5e76\u4f20\u5165\u4e00\u4e2a\u5728\u7f16\u8bd1\u671f\u751f\u6210\u7684\u6574\u578b\u5173\u952e\u5b57\u3002 fun Counter ( $ composer : Composer ) { $ composer . start ( 123 ) var count by remember { mutableStateOf ( 0 ) } Button ( text = \"Count: $ count \" , onClick = { count += 1 } ) $ composer . end () } \u7f16\u8bd1\u5668\u8fd8\u628a Composer \u7684\u5bf9\u8c61\u4f20\u9012\u5230\u4e86\u6240\u6709\u7684\u51fd\u6570\u4f53\u5185\u90e8\u6709 Composable \u7684\u5730\u65b9\u3002 fun Counter ( $ composer : Composer ) { $ composer . start ( 123 ) var count by remember ( $ composer ) { mutableStateOf ( 0 ) } Button ( $ composer , text = \"Count: $ count \" , onClick = { count += 1 }, ) $ composer . end () } \u5f53\u4e00\u4e2a Composer \u6267\u884c\uff0c\u5b83\u505a\u4e86\u4e0b\u9762\u8fd9\u4e9b\u4e8b\u60c5\uff1a Composer.start \u88ab\u6267\u884c\u4e86\uff0c\u5e76\u4e14\u4fdd\u5b58\u4e86\u4e00\u4e2a\u7ec4\u5bf9\u8c61 remember \u63d2\u5165\u7684\u7ec4\u5bf9\u8c61 \u72b6\u6001\u5b9e\u4f8b mutableStateOf \u8fd4\u56de\u7684\u503c\u88ab\u5b58\u50a8\u4e86\u4e0b\u6765 Button \u6bcf\u4e2a\u53c2\u6570\u540e\u9762\u4e5f\u6301\u6709\u4e86\u4e00\u4e2a\u7ec4\u5bf9\u8c61 \u6700\u540e\u6211\u4eec\u8d70\u5230\u4e86 Composer.end \u3002 \u73b0\u5728\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6301\u6709\u4e86\u8fd9\u4e2a composition \u7684\u6240\u6709\u5bf9\u8c61\uff0c\u6309\u7167\u6574\u4e2a\u6811\u7684\u6267\u884c\u987a\u5e8f\u6392\u5e8f\uff0c\u5b9e\u9645\u4e0a\u662f\u6574\u4e2a\u6811\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002 \u73b0\u5728\u6240\u6709\u8fd9\u4e9b\u7ec4\u5bf9\u8c61\u5360\u7528\u4e86\u5f88\u591a\u7684\u7a7a\u95f4\uff0c\u90a3\u8fd9\u5230\u5e95\u662f\u4e3a\u4e86\u4ec0\u4e48\u5462\uff1f\u8fd9\u4e9b\u7ec4\u5bf9\u8c61\u5b58\u5728\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u7ba1\u7406 move \u548c insert \u8fd9\u4e9b\u53ef\u80fd\u53d1\u751f\u5728\u52a8\u6001UI\u7684\u64cd\u4f5c\u3002\u7f16\u8bd1\u5668\u77e5\u9053\u4f1a\u6539\u53d8 UI \u7ed3\u6784\u4ee3\u7801\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u6839\u636e\u6761\u4ef6\u6765\u63d2\u5165\u8fd9\u4e9b\u7ec4\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u8fd9\u4e9b\u7ec4\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u63d2\u5165\u90a3\u4e48\u591a\u7684\u7ec4\u5230 slot table \u91cc\u9762\u3002\u4e3a\u4e86\u6f14\u793a\u5177\u4f53\u60c5\u51b5\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u6761\u4ef6\u903b\u8f91\u3002 @Composable fun App () { val result = getData () if ( result == null ) { Loading (...) } else { Header ( result ) Body ( result ) } } \u5728\u8fd9\u4e2a Composable \u91cc\u9762\uff0c getData \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e9b\u7ed3\u679c\uff0c\u5f53 result == null \u65f6\u4f1a\u6e32\u67d3 Loading \uff0c\u5728\u53e6\u4e00\u4e2a\u573a\u666f\u4e0b\u4f1a\u6e32\u67d3 Header \u548c Body \u3002\u7f16\u8bd1\u5668\u4f1a\u5206\u522b\u63d2\u5165\u4e24\u4e2a\u4e0d\u540c\u7684\u6574\u5f62\u5173\u952e\u5b57\u7ed9 if \u8bed\u53e5\u7684\u6761\u4ef6\u5206\u652f\u3002 fun App ( $ composer : Composer ) { val result = getData () if ( result == null ) { $ composer . start ( 123 ) Loading (...) $ composer . end () } else { $ composer . start ( 456 ) Header ( result ) Body ( result ) $ composer . end () } } \u8ba9\u6211\u4eec\u5047\u8bbe\u4e00\u5f00\u59cb\u8fd9\u4e2a\u4ee3\u7801\u6267\u884c\u7ed3\u679c\u8fd4\u56de\u7684\u662f null\u3002\u90a3\u4e48\u5c31\u662f\u63d2\u5165\u4e00\u4e2a\u7ec4\u5230 gap \u6570\u7ec4\u91cc\u9762\uff0c\u7136\u540e\u5c4f\u5e55\u5f00\u59cb loading \u3002 \u63a5\u7740\u6211\u4eec\u5047\u8bbe\u8fd4\u56de\u7684\u7ed3\u679c\u4e0d\u518d\u662f null\uff0c\u56e0\u6b64 if \u8bed\u53e5\u7684\u7b2c\u4e8c\u4e2a\u5206\u652f\u88ab\u6267\u884c\u4e86\u3002\u8fd9\u4e5f\u662f\u5b83\u6709\u610f\u601d\u7684\u5730\u65b9\u3002 Composer.start \u6267\u884c\u5165\u4e86\u4e00\u4e2a\u6574\u5f62\u5173\u952e\u5b57\u4e3a 456 \u7684\u7ec4\u3002\u7f16\u8bd1\u5668\u53d1\u73b0\u8fd9\u4e2a\u7ec4\u8ddf\u8868\u91cc\u9762\u7684 123 \u4e0d\u5339\u914d\uff0c\u56e0\u6b64\u5b83\u77e5\u9053 UI \u7684\u7ed3\u6784\u53d1\u751f\u4e86\u53d8\u5316\u3002 \u7136\u540e\u7f16\u8bd1\u5668\u5c31\u628a gap \u79fb\u52a8\u5230\u5f53\u524d\u7684\u4f4d\u7f6e\u5e76\u6269\u5927\uff0c\u5b9e\u9645\u4e0a\u820d\u5f03\u4e86\u65e7\u7684 UI \u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u4ee3\u7801\u6b63\u5e38\u6267\u884c\uff0c\u8fd8\u6709\u65b0\u7684 Header \u548c Body \u90fd\u88ab\u63d2\u5165\u8fdb\u6765\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\uff0cif \u8bed\u53e5\u53ea\u662f slot table \u91cc\u4e00\u4e2a slot entry \u3002\u901a\u8fc7\u63d2\u5165\u4e00\u4e2a\u7ec4\u8ba9\u6211\u4eec\u80fd\u591f\u64cd\u63a7 UI \u7684\u63a7\u5236\u6d41\uff0c\u8ba9\u7f16\u8bd1\u5668\u80fd\u591f\u53bb\u7ba1\u7406\uff0c\u5f53\u5728\u6267\u884c UI \u7684\u65f6\u5019\u53ef\u4ee5\u7528\u8fd9\u4e9b\u7c7b\u4f3c\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\u3002 \u8fd9\u4e2a\u6982\u5ff5\u6211\u4eec\u79f0\u5176\u4e3a\u201c\u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization \u201d\uff0c\u8fd9\u4e5f\u662f Compose \u59cb\u7ec8\u5728\u4f7f\u7528\u7684\u6982\u5ff5\u3002 \u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization \u901a\u5e38\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u901a\u7528\u7684 memoization \uff0c\u5176\u542b\u4e49\u662f\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u51fd\u6570\u8f93\u5165\u7684\u53c2\u6570\u7f13\u5b58\u51fd\u6570\u7684\u7ed3\u679c\u3002\u4e3a\u4e86\u8bf4\u660e\u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization \uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a Composable \u6765\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u3002 @Composable fun App ( items : List < String > , query : String ) { val results = items . filter { it . matches ( query ) } // ... } \u8fd9\u4e2a\u51fd\u6570\u4f20\u5165\u4e00\u4e2a items \u5217\u8868\u548c\u4e00\u4e2a query \u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6267\u884c\u4e86\u9488\u5bf9\u4f20\u5165\u7684 items \u505a\u4e86\u4e00\u4e2a filter \u8fc7\u6ee4\u8ba1\u7b97\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8ba1\u7b97\u5305\u88c5\u5230\u4e00\u4e2a\u8bb0\u5f55\u7684\u8c03\u7528\u91cc\u9762\uff08\u8bb0\u5f55\u6307\u7684\u662f\u77e5\u9053\u600e\u4e48\u50cf\u8868\u53d1\u8d77\u8bf7\u6c42\uff09\u3002\u5728\u8fd4\u56de\u4e4b\u524d\uff0c\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u8ba1\u7b97\u5b8c\u5e76\u4e14\u628a\u7ed3\u679c\u8bb0\u5f55\u4e0b\u6765\u3002 \u5f53\u8fd9\u4e2a\u51fd\u6570\u518d\u6b21\u88ab\u6267\u884c\u7684\u65f6\u5019\uff0c\u62ff\u65b0\u4f20\u9012\u8fdb\u6765\u7684\u503c\u540c\u5386\u53f2\u8bb0\u5f55\u505a\u5bf9\u6bd4\uff0c\u5982\u679c\u6ca1\u53d8\u5316\uff0c\u8fc7\u6ee4\u64cd\u4f5c\u4f1a\u88ab\u8df3\u8fc7\uff0c\u4e4b\u524d\u7684\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de\u3002\u8fd9\u5c31\u662f memoization \u3002 \u6709\u8da3\u7684\u662f\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5f00\u9500\u5f88\u5c0f\uff0c\u7f16\u8bd1\u5668\u53ea\u9700\u8981\u5b58\u50a8\u4e4b\u524d\u7684\u8c03\u7528\u3002\u8fd9\u4e2a\u8ba1\u7b97\u53ef\u80fd\u4f1a\u53d1\u751f\u5728\u6574\u4e2a UI \u7684\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e3a\u4f60\u662f\u6839\u636e\u4f4d\u7f6e\u5b58\u50a8\u7684\uff0c\u53ea\u6709\u5728\u90a3\u4e2a\u4f4d\u7f6e\u624d\u4f1a\u5b58\u50a8\u3002 \u4e0b\u9762\u662f remember \u51fd\u6570\u7684\u7b7e\u540d\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u548c\u8ba1\u7b97\u51fd\u6570\u7684\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u3002 @Composable fun < T > remember ( vararg inputs : Any? , calculation : () -> T ): T \u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u9000\u5316\u573a\u666f\uff0c\u5728\u6ca1\u6709\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u80fd\u505a\u7684\u4e00\u4ef6\u4e8b\u5c31\u662f\u6545\u610f\u9519\u8bef\u4f7f\u7528\u8fd9\u4e2a API \u3002\u6211\u4eec\u53ef\u4ee5\u6545\u610f\u4f20\u4e00\u4e2a\u810f\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\uff0c\u6bd4\u5982 Math.random() \u3002 @Composable fun App () { val x = remember { Math . random () } // ... } \u5982\u679c\u4f60\u6b63\u5728\u505a\u7684\u662f\u4e00\u4e2a\u5168\u5c40\u7684 memoization \u7684\u8bdd\u90a3\u5c31\u6ca1\u6709\u610f\u4e49\u3002\u4f46\u662f\u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization \uff0c\u5b83\u5c06\u4f1a\u662f\u4e00\u4e2a\u65b0\u7684\u8bed\u4e49\u3002\u6bcf\u6b21\u6211\u4eec\u7528 Composable \u7684\u5c42\u7ea7\uff0c Math.random \u90fd\u4f1a\u8fd4\u56de\u65b0\u503c\u3002\u4f46\u662f\uff0c\u6bcf\u6b21 Composable \u88ab\u91cd\u65b0\u7ec4\u5408\u7684\u65f6\u5019\uff0c Math.random \u90fd\u4f1a\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6301\u4e45\u5316\uff0c\u6301\u4e45\u5316\u5c31\u53ef\u4ee5\u8fdb\u884c\u72b6\u6001\u7ba1\u7406\u4e86\u3002 \u5b58\u50a8\u53c2\u6570 \u4e3a\u4e86\u6f14\u793a Composable \u51fd\u6570\u7684\u53c2\u6570\u662f\u600e\u4e48\u88ab\u4fdd\u5b58\u7684\uff0c\u6211\u4eec\u7528 Google \u8fd9\u4e2a Composable \u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a Int \u7c7b\u578b\u7684 number \u5165\u53c2\uff0c\u91cc\u9762\u8c03\u7528\u4e86\u4e00\u4e2a\u53eb Address \u7684 Composable \uff0c\u7136\u540e\u6e32\u67d3 Address \u3002 @Composable fun Google ( number : Int ) { Address ( number = number , street = \"Amphitheatre Pkwy\" , city = \"Mountain View\" , state = \"CA\" zip = \"94043\" ) } @Composable fun Address ( number : Int , street : String , city : String , state : String , zip : String ) { Text ( \" $ number $ street \" ) Text ( city ) Text ( \", \" ) Text ( state ) Text ( \" \" ) Text ( zip ) } compose \u5c06 Composable \u51fd\u6570\u7684\u53c2\u6570\u4fdd\u5b58\u5728\u8868\u91cc\u9762\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u770b\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\u4f1a\u6709\u4e00\u4e9b\u5197\u4f59\uff0c\u201cMountain View\u201d \u548c \u201cCA\u201d\uff0c\u8fd9\u4e24\u4e2a\u6dfb\u52a0\u5230\u5730\u5740\u91cc\u9762\u4f1a\u968f\u7740\u6587\u672c\u7684\u8c03\u7528\u518d\u6b21\u5b58\u50a8\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4f1a\u88ab\u5b58\u50a8\u4e24\u6b21\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u901a\u8fc7\u6dfb\u52a0 static \u7684\u53c2\u6570\u6765\u907f\u514d\u8fd9\u79cd\u5197\u4f59\u3002 fun Google ( $ composer : Composer , $ static : Int , number : Int ) { Address ( $ composer , 0 b11110 or ( $ static and 0 b1 ), number = number , street = \"Amphitheatre Pkwy\" , city = \"Mountain View\" , state = \"CA\" zip = \"94043\" ) } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d static \u662f\u4e00\u4e2a\u6574\u6570\u5b57\u6bb5\u8868\u793a\u8fd0\u884c\u65f6\u662f\u5426\u77e5\u9053\u53c2\u6570\u6709\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002\u5982\u679c\u53c2\u6570\u6ca1\u53d8\uff0c\u90a3\u4e48\u5c31\u6ca1\u5fc5\u8981\u53bb\u5b58\u6570\u636e\u3002\u56e0\u6b64\u5728\u8fd9\u4e2a Google \u7684\u4f8b\u5b50\u91cc\u9762\uff0c\u7f16\u8bd1\u5668\u4f20\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\u7528\u4ee5\u8868\u793a\u662f\u5426\u4f1a\u53d1\u751f\u6539\u53d8\u3002 \u90a3\u4e48\u5728 Address \u91cc\uff0c\u7f16\u8bd1\u5668\u540c\u6837\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u628a\u5b83\u4f20\u7ed9\u5b57\u7b26\u4e32\u3002 fun Address ( $ composer : Composer , $ static : Int , number : Int , street : String , city : String , state : String , zip : String ) { Text ( $ composer , ( $ static and 0 b11 ) and (( $ static and 0 b10 ) shr 1 ), \" $ number $ street \" ) Text ( $ composer , ( $ static and 0 b100 ) shr 2 , city ) Text ( $ composer , 0 b1 , \", \" ) Text ( $ composer , ( $ static and 0 b1000 ) shr 3 , state ) Text ( $ composer , 0 b1 , \" \" ) Text ( $ composer , ( $ static and 0 b10000 ) shr 4 , zip ) } \u8fd9\u91cc\u7684\u903b\u8f91\u8fd0\u7b97\u770b\u8d77\u6765\u6bd4\u8f83\u6666\u6da9\u4e5f\u8ba9\u4eba\u770b\u8d77\u6765\u6bd4\u8f83\u56f0\u60d1\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u5fc5\u8981\u53bb\u7406\u89e3\u5b83\uff0c\u8fd9\u662f\u7f16\u8bd1\u5668\u64c5\u957f\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u4e0d\u64c5\u957f\u5904\u7406\u3002 \u5728 Google \u7684\u793a\u4f8b\u91cc\u9762\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5197\u4f59\u7684\u4fe1\u606f\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u5e38\u91cf\u3002\u5176\u5b9e\u6211\u4eec\u4e5f\u6ca1\u5fc5\u8981\u53bb\u5b58\u50a8\u5b83\u4eec\u3002\u56e0\u6b64\u6574\u4e2a\u5c42\u7ea7\u7ed3\u6784\u662f\u7531\u53c2\u6570\u7684\u6570\u91cf\u51b3\u5b9a\u7684\u5e76\u4e14\u8fd9\u4e5f\u662f\u552f\u4e00\u9700\u8981\u7f16\u8bd1\u5668\u53bb\u5b58\u50a8\u7684\u3002 \u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4eec\u518d\u8fdb\u4e00\u6b65\uff0c\u751f\u6210\u4e86\u4ee3\u7801\u624d\u7406\u89e3\u90a3\u4e2a\u6570\u5b57\u662f\u552f\u4e00\u4f1a\u6539\u53d8\u7684\u4e1c\u897f\u3002\u8fd9\u6bb5\u4ee3\u7801\u5c06\u4f1a\u8fd9\u6837\u8fd0\u884c\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u6ca1\u53d8\u7684\u8bdd\uff0c\u6574\u4e2a\u51fd\u6570\u90fd\u4f1a\u88ab\u8df3\u8fc7\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5f15\u5bfc Composer \u5f53\u524d\u7684 index \u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u597d\u50cf\u51fd\u6570\u5df2\u7ecf\u88ab\u6267\u884c\u4e86\u4e00\u6837\u3002 fun Google ( $ composer : Composer , number : Int ) { if ( number == $ composer . next ()) { Address ( $ composer , number = number , street = \"Amphitheatre Pkwy\" , city = \"Mountain View\" , state = \"CA\" zip = \"94043\" ) } else { $ composer . skip () } } Composer \u77e5\u9053\u9700\u8981\u5feb\u8fdb\u5230\u54ea\u4e00\u6b65\u53bb\u6062\u590d\u6267\u884c\u3002 \u91cd\u7ec4 \u4e3a\u4e86\u7406\u89e3\u91cd\u7ec4\u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff0c\u8ba9\u6211\u4eec\u518d\u56de\u5934\u770b\u4e0b counter \u7684\u4f8b\u5b50\u3002 fun Counter ( $ composer : Composer ) { $ composer . start ( 123 ) var count = remember ( $ composer ) { mutableStateOf ( 0 ) } Button ( $ composer , text = \"Count: ${ count . value } \" , onPress = { count . value += 1 }, ) $ composer . end () } \u7f16\u8bd1\u5668\u7ed9\u8fd9\u4e2a counter \u4f8b\u5b50\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\u6709 composer.start \u548c composer.end \u3002\u4e0d\u7ba1 counter \u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff0c\u5b83\u901a\u8fc7\u8bfb\u53d6 APP \u6a21\u578b\u5b9e\u4f8b\u7684\u5c5e\u6027\u90fd\u80fd\u77e5\u9053 count \u7684\u503c\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u8c03\u7528 composer.end \uff0c\u6211\u4eec\u90fd\u80fd\u9009\u62e9\u662f\u5426\u8fd4\u56de\u503c\u3002 $ composer . end () ?. updateScope { nextComposer -> Counter ( nextComposer ) } \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u8be5\u503c\u8c03\u7528 updateScope \u65b9\u6cd5\uff0c\u65b9\u6cd5\u4f20\u4e00\u4e2a lambda \u6765\u544a\u8bc9\u8fd0\u884c\u65f6\u5728\u5fc5\u8981\u65f6\u600e\u4e48\u53bb\u91cd\u542f\u8fd9\u4e2a Composable \u3002\u8fd9\u4e2a\u548c LiveData \u63a5\u6536\u4e00\u4e2a lambda \u662f\u4e00\u6837\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u53ef\u7a7a\uff08\uff1f\uff09\u7684\u539f\u56e0\u662f\uff0c\u8fd4\u56de\u503c\u662f\u53ef\u7a7a\u7684\uff0c\u4e3a\u4ec0\u4e48\u662f\u53ef\u7a7a\u7684\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u5728 Counter \u8fd0\u884c\u7684\u65f6\u5019\u4e0d\u8bfb\u53d6\u4efb\u4f55\u6a21\u578b\u5bf9\u8c61\uff0c\u6211\u4eec\u5c31\u6ca1\u6cd5\u544a\u8bc9\u8fd0\u884c\u65f6\u600e\u4e48\u53bb\u66f4\u65b0\uff0c\u56e0\u4e3a\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u66f4\u65b0\u3002 \u7ed3\u8bed \u4f60\u9700\u8981\u77e5\u9053\u7684\u662f\u5927\u90e8\u5206\u8fd9\u4e9b\u7ec6\u8282\u53ea\u662f\u5b9e\u73b0\u7ec6\u8282\u3002\u6807\u51c6 Kotlin \u51fd\u6570\u5e93\u91cc\u9762 Composable \u51fd\u6570\u4f1a\u6709\u4e0d\u540c\u7684\u884c\u4e3a\u548c\u80fd\u529b\uff0c\u6709\u65f6\u5019\u7406\u89e3\u5b83\u4eec\u600e\u4e48\u5b9e\u73b0\u4f1a\u5bf9\u6211\u4eec\u6709\u6240\u5e2e\u52a9\uff0c\u4f46\u662f\u884c\u4e3a\u548c\u80fd\u529b\u4e0d\u4f1a\u53d8\uff0c\u5b9e\u73b0\u662f\u6709\u53ef\u80fd\u53d8\u7684\u3002 \u540c\u6837\u7684\uff0c Compose \u7684\u7f16\u8bd1\u5668\u5728\u7279\u5b9a\u60c5\u5f62\u4e0b\u53ef\u4ee5\u751f\u6210\u66f4\u9ad8\u6548\u7684\u4ee3\u7801\u3002\u540e\u7eed\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u80fd\u8fdb\u4e00\u6b65\u4f18\u5316\u3002","title":"Compose\u8fd0\u884c\u539f\u7406\u4e0eGapBuffer"},{"location":"principle/gap_buffer/#composable","text":"\u5982\u679c\u4f60\u5df2\u7ecf\u770b\u8fc7 Compose \uff0c\u4f60\u53ef\u80fd\u5728\u5f88\u591a\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\u770b\u5230\u8fc7 @Composable \u6ce8\u89e3\u3002\u6709\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u5fc5\u987b\u8bf4\u660e\uff0c Compose \u6ca1\u6709\u4f7f\u7528\u6ce8\u89e3\u5904\u7406\u5668\u3002 Compose \u5728 Kotlin \u7f16\u8bd1\u63d2\u4ef6\u5728\u7c7b\u578b\u68c0\u67e5\u548c\u4ee3\u7801\u751f\u6210\u9636\u6bb5\u5de5\u4f5c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4f7f\u7528\u6ce8\u89e3\u5904\u7406\u5668\u3002 \u8fd9\u4e2a\u6ce8\u89e3\u66f4\u50cf\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u3002\u5c31\u50cf Kotlin \u91cc\u9762\u7684 suspend \u5173\u952e\u5b57\u4e00\u6837\u3002 // function declaration suspend fun MyFun () { \u2026 } // lambda declaration val myLambda = suspend { \u2026 } // function type fun MyFun ( myParam : suspend () -> Unit ) { \u2026 } Kotlin \u7684 suspend \u5173\u952e\u5b57\u4f1a\u7528\u5728\u51fd\u6570\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u3001 lambda \u6216\u8005\u662f\u7c7b\u578b\u662f suspend \u7684\u3002 Compose \u4e5f\u4e00\u6837\uff0c\u5b83\u53ef\u4ee5\u6539\u53d8\u51fd\u6570\u7684\u7c7b\u578b\u3002 // function declaration @Composable fun MyFun () { \u2026 } // lambda declaration val myLambda = @Composable { \u2026 } // function type fun MyFun ( myParam : @Composable () -> Unit ) { \u2026 } \u6709\u4e00\u70b9\u5f88\u91cd\u8981\u8fd9\u91cc\u5fc5\u987b\u8981\u8bf4\u660e\uff0c\u5f53\u4f60\u4e3a\u4e00\u4e2a\u51fd\u6570\u6dfb\u52a0\u4e86 @Composable \u6ce8\u89e3\u65f6\uff0c\u4f60\u5c31\u6539\u53d8\u4e86\u8fd9\u4e2a\u51fd\u6570\u7c7b\u578b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f8\u540c\u51fd\u6570\u7c7b\u578b\u6ca1\u6709\u6ce8\u89e3\u548c\u6709\u6ce8\u89e3\u662f\u4e0d\u517c\u5bb9\u7684\u3002\u540c\u6837\u7684\uff0c suspend \u51fd\u6570\u4e5f\u9700\u8981\u4e00\u4e2a\u8c03\u7528\u7684\u4e0a\u4e0b\u6587\uff0c\u610f\u601d\u5c31\u662f\u53ea\u80fd\u5728\u53ea\u80fd\u5728\u53e6\u4e00\u4e2a suspend \u51fd\u6570\u91cc\u9762\u8c03\u7528 suspend \u51fd\u6570\u3002 fun Example ( a : () -> Unit , b : suspend () -> Unit ) { a () // allowed b () // NOT allowed } suspend fun Example ( a : () -> Unit , b : suspend () -> Unit ) { a () // allowed b () // allowed } Composable \u5de5\u4f5c\u65b9\u5f0f\u4e5f\u662f\u4e00\u6837\u7684\u3002\u56e0\u4e3a\u6709\u4e00\u4e2a\u8c03\u7528\u4e0a\u4e0b\u6587\u7684\u5bf9\u8c61\u8d2f\u7a7f\u8fd9\u6574\u4e2a\u8c03\u7528\u3002 fun Example ( a : () -> Unit , b : @Composable () -> Unit ) { a () // allowed b () // NOT allowed } @Composable fun Example ( a : () -> Unit , b : @Composable () -> Unit ) { a () // allowed b () // allowed }","title":"\u63ed\u79d8 @Composable"},{"location":"principle/gap_buffer/#gapbuffer","text":"\u90a3\u4e48\uff0c\u8fd9\u4e2a\u6211\u4eec\u4f20\u9012\u7684\u4e0a\u4e0b\u6587\u662f\u4ec0\u4e48\u5462\uff1f\u8fd8\u6709\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u8fd9\u4e48\u505a\uff1f \u6211\u4eec\u628a\u8fd9\u4e2a\u5bf9\u8c61\u53eb \u201cComposer\u201d\u3002 Composer \u7684\u5b9e\u73b0\u5305\u542b\u4e86\u4e00\u4e2a\u8ddf Gap Buffer \u5f88\u7c7b\u4f3c\u7684\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7ecf\u5e38\u7528\u5728\u6587\u672c\u7f16\u8f91\u5668\u91cc\u9762\u3002 Gap Buffer \u8868\u793a\u7684\u662f\u4e00\u4e2a\u5305\u542b\u4e86 index \u548c cursor \u7684\u96c6\u5408\u3002\u5728\u5185\u5b58\u91cc\u9762\u5b83\u5c31\u662f\u4e00\u4e2a\u6241\u5e73\u7684\u6570\u7ec4\u3002\u8fd9\u4e2a\u6241\u5e73\u7684\u6570\u7ec4\u4f1a\u6bd4\u5b9e\u9645\u8868\u793a\u7684\u6570\u636e\u8981\u5927\u4e00\u4e9b\uff0c\u5176\u4e2d\u6ca1\u6709\u4f7f\u7528\u7684\u7a7a\u95f4\u5c31\u662f gap \u3002 \u73b0\u5728\uff0c\u4e00\u4e2a\u6b63\u5728\u6267\u884c\u7684 Composable \u5c42\u7ea7\u4f1a\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u63d2\u5165\u6570\u636e\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5c42\u7ea7\u7ed3\u6784\u7684\u6570\u636e\u63d2\u5165\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981 rcompose \uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u91cd\u7f6e cursor \u5230\u6570\u7ec4\u7684\u9876\u90e8\u5e76\u91cd\u65b0\u518d\u6b21\u904d\u5386\u6574\u4e2a\u6570\u7ec4\u3002\u5f53\u6211\u4eec\u5728\u6267\u884c\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6570\u636e\u770b\u662f\u5426\u9700\u8981\u66f4\u65b0\u503c\u3002 \u53ef\u80fd\u56e0\u4e3aUI\u7ed3\u6784\u7684\u6539\u53d8\u6211\u4eec\u60f3\u8981\u63d2\u5165\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u628a gap \u79fb\u52a8\u5230\u4e86\u5f53\u524d\u7684\u4f4d\u7f6e\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u63d2\u5165\u6570\u636e\u4e86\u3002 \u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\u6211\u4eec\u9700\u8981\u7406\u89e3\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u6240\u6709\u7684\u64cd\u4f5c\u2014\u2014 get , move , insert , delete \u2014\u2014\u90fd\u662f\u5e38\u91cf\u9636\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u64cd\u4f5c\uff0c\u9664\u4e86\u79fb\u52a8gap\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002\u6211\u4eec\u9009\u62e9\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u6211\u4eec\u8ba4\u4e3a\uff0c\u5e73\u5747\u6765\u8bf4\uff0c UI \u7ed3\u6784\u7684\u53d8\u5316\u4e0d\u4f1a\u592a\u591a\u3002\u52a8\u6001\u7684UI\u901a\u5e38\u662f\u6839\u636e\u6570\u636e\u503c\u7684\u53d8\u5316\uff0c\u800c\u7ed3\u6784\u7684\u53d8\u5316\u4e0d\u4f1a\u7ecf\u5e38\u53d1\u751f\u3002\u5982\u679c\u786e\u5b9e\u53d1\u751f\u4e86\u7ed3\u6784\u884c\u7684\u53d8\u5316\uff0c\u901a\u5e38\u662f\u4e00\u5927\u5757\u7684\u53d8\u5316\uff0c\u56e0\u6b64\u6267\u884c O(n) \u590d\u6742\u5ea6\u7684 gap \u79fb\u52a8\u4e5f\u662f\u5408\u7406\u7684\u6743\u8861\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a counter \u7684\u793a\u4f8b\uff1a @Composable fun Counter () { var count by remember { mutableStateOf ( 0 ) } Button ( text = \"Count: $ count \" , onClick = { count += 1 } ) } \u6211\u4eec\u5199\u4ee3\u7801\u4f1a\u8fd9\u4e48\u5199\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6211\u4eec\u505a\u4ec0\u4e48\u5462\uff1f \u5f53\u7f16\u8bd1\u5668\u770b\u5230 Composable \u6ce8\u89e3\u65f6\u4fbf\u4f1a\u63d2\u5165\u989d\u5916\u7684\u53c2\u6570\u5e76\u5728\u51fd\u6570\u4f53\u5185\u8c03\u7528\u3002 \u9996\u5148\uff0c\u7f16\u8bd1\u5668\u6dfb\u52a0\u4e86\u4e00\u4e2a Composer.start \u7684\u8c03\u7528\u5e76\u4f20\u5165\u4e00\u4e2a\u5728\u7f16\u8bd1\u671f\u751f\u6210\u7684\u6574\u578b\u5173\u952e\u5b57\u3002 fun Counter ( $ composer : Composer ) { $ composer . start ( 123 ) var count by remember { mutableStateOf ( 0 ) } Button ( text = \"Count: $ count \" , onClick = { count += 1 } ) $ composer . end () } \u7f16\u8bd1\u5668\u8fd8\u628a Composer \u7684\u5bf9\u8c61\u4f20\u9012\u5230\u4e86\u6240\u6709\u7684\u51fd\u6570\u4f53\u5185\u90e8\u6709 Composable \u7684\u5730\u65b9\u3002 fun Counter ( $ composer : Composer ) { $ composer . start ( 123 ) var count by remember ( $ composer ) { mutableStateOf ( 0 ) } Button ( $ composer , text = \"Count: $ count \" , onClick = { count += 1 }, ) $ composer . end () } \u5f53\u4e00\u4e2a Composer \u6267\u884c\uff0c\u5b83\u505a\u4e86\u4e0b\u9762\u8fd9\u4e9b\u4e8b\u60c5\uff1a Composer.start \u88ab\u6267\u884c\u4e86\uff0c\u5e76\u4e14\u4fdd\u5b58\u4e86\u4e00\u4e2a\u7ec4\u5bf9\u8c61 remember \u63d2\u5165\u7684\u7ec4\u5bf9\u8c61 \u72b6\u6001\u5b9e\u4f8b mutableStateOf \u8fd4\u56de\u7684\u503c\u88ab\u5b58\u50a8\u4e86\u4e0b\u6765 Button \u6bcf\u4e2a\u53c2\u6570\u540e\u9762\u4e5f\u6301\u6709\u4e86\u4e00\u4e2a\u7ec4\u5bf9\u8c61 \u6700\u540e\u6211\u4eec\u8d70\u5230\u4e86 Composer.end \u3002 \u73b0\u5728\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u6301\u6709\u4e86\u8fd9\u4e2a composition \u7684\u6240\u6709\u5bf9\u8c61\uff0c\u6309\u7167\u6574\u4e2a\u6811\u7684\u6267\u884c\u987a\u5e8f\u6392\u5e8f\uff0c\u5b9e\u9645\u4e0a\u662f\u6574\u4e2a\u6811\u7684\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002 \u73b0\u5728\u6240\u6709\u8fd9\u4e9b\u7ec4\u5bf9\u8c61\u5360\u7528\u4e86\u5f88\u591a\u7684\u7a7a\u95f4\uff0c\u90a3\u8fd9\u5230\u5e95\u662f\u4e3a\u4e86\u4ec0\u4e48\u5462\uff1f\u8fd9\u4e9b\u7ec4\u5bf9\u8c61\u5b58\u5728\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u7ba1\u7406 move \u548c insert \u8fd9\u4e9b\u53ef\u80fd\u53d1\u751f\u5728\u52a8\u6001UI\u7684\u64cd\u4f5c\u3002\u7f16\u8bd1\u5668\u77e5\u9053\u4f1a\u6539\u53d8 UI \u7ed3\u6784\u4ee3\u7801\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u6839\u636e\u6761\u4ef6\u6765\u63d2\u5165\u8fd9\u4e9b\u7ec4\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u8fd9\u4e9b\u7ec4\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u63d2\u5165\u90a3\u4e48\u591a\u7684\u7ec4\u5230 slot table \u91cc\u9762\u3002\u4e3a\u4e86\u6f14\u793a\u5177\u4f53\u60c5\u51b5\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u6761\u4ef6\u903b\u8f91\u3002 @Composable fun App () { val result = getData () if ( result == null ) { Loading (...) } else { Header ( result ) Body ( result ) } } \u5728\u8fd9\u4e2a Composable \u91cc\u9762\uff0c getData \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e9b\u7ed3\u679c\uff0c\u5f53 result == null \u65f6\u4f1a\u6e32\u67d3 Loading \uff0c\u5728\u53e6\u4e00\u4e2a\u573a\u666f\u4e0b\u4f1a\u6e32\u67d3 Header \u548c Body \u3002\u7f16\u8bd1\u5668\u4f1a\u5206\u522b\u63d2\u5165\u4e24\u4e2a\u4e0d\u540c\u7684\u6574\u5f62\u5173\u952e\u5b57\u7ed9 if \u8bed\u53e5\u7684\u6761\u4ef6\u5206\u652f\u3002 fun App ( $ composer : Composer ) { val result = getData () if ( result == null ) { $ composer . start ( 123 ) Loading (...) $ composer . end () } else { $ composer . start ( 456 ) Header ( result ) Body ( result ) $ composer . end () } } \u8ba9\u6211\u4eec\u5047\u8bbe\u4e00\u5f00\u59cb\u8fd9\u4e2a\u4ee3\u7801\u6267\u884c\u7ed3\u679c\u8fd4\u56de\u7684\u662f null\u3002\u90a3\u4e48\u5c31\u662f\u63d2\u5165\u4e00\u4e2a\u7ec4\u5230 gap \u6570\u7ec4\u91cc\u9762\uff0c\u7136\u540e\u5c4f\u5e55\u5f00\u59cb loading \u3002 \u63a5\u7740\u6211\u4eec\u5047\u8bbe\u8fd4\u56de\u7684\u7ed3\u679c\u4e0d\u518d\u662f null\uff0c\u56e0\u6b64 if \u8bed\u53e5\u7684\u7b2c\u4e8c\u4e2a\u5206\u652f\u88ab\u6267\u884c\u4e86\u3002\u8fd9\u4e5f\u662f\u5b83\u6709\u610f\u601d\u7684\u5730\u65b9\u3002 Composer.start \u6267\u884c\u5165\u4e86\u4e00\u4e2a\u6574\u5f62\u5173\u952e\u5b57\u4e3a 456 \u7684\u7ec4\u3002\u7f16\u8bd1\u5668\u53d1\u73b0\u8fd9\u4e2a\u7ec4\u8ddf\u8868\u91cc\u9762\u7684 123 \u4e0d\u5339\u914d\uff0c\u56e0\u6b64\u5b83\u77e5\u9053 UI \u7684\u7ed3\u6784\u53d1\u751f\u4e86\u53d8\u5316\u3002 \u7136\u540e\u7f16\u8bd1\u5668\u5c31\u628a gap \u79fb\u52a8\u5230\u5f53\u524d\u7684\u4f4d\u7f6e\u5e76\u6269\u5927\uff0c\u5b9e\u9645\u4e0a\u820d\u5f03\u4e86\u65e7\u7684 UI \u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u4ee3\u7801\u6b63\u5e38\u6267\u884c\uff0c\u8fd8\u6709\u65b0\u7684 Header \u548c Body \u90fd\u88ab\u63d2\u5165\u8fdb\u6765\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\uff0cif \u8bed\u53e5\u53ea\u662f slot table \u91cc\u4e00\u4e2a slot entry \u3002\u901a\u8fc7\u63d2\u5165\u4e00\u4e2a\u7ec4\u8ba9\u6211\u4eec\u80fd\u591f\u64cd\u63a7 UI \u7684\u63a7\u5236\u6d41\uff0c\u8ba9\u7f16\u8bd1\u5668\u80fd\u591f\u53bb\u7ba1\u7406\uff0c\u5f53\u5728\u6267\u884c UI \u7684\u65f6\u5019\u53ef\u4ee5\u7528\u8fd9\u4e9b\u7c7b\u4f3c\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\u3002 \u8fd9\u4e2a\u6982\u5ff5\u6211\u4eec\u79f0\u5176\u4e3a\u201c\u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization \u201d\uff0c\u8fd9\u4e5f\u662f Compose \u59cb\u7ec8\u5728\u4f7f\u7528\u7684\u6982\u5ff5\u3002","title":"\u57fa\u4e8e GapBuffer \u7684\u8fd0\u884c\u8fc7\u7a0b"},{"location":"principle/gap_buffer/#memoization","text":"\u901a\u5e38\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u901a\u7528\u7684 memoization \uff0c\u5176\u542b\u4e49\u662f\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u51fd\u6570\u8f93\u5165\u7684\u53c2\u6570\u7f13\u5b58\u51fd\u6570\u7684\u7ed3\u679c\u3002\u4e3a\u4e86\u8bf4\u660e\u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization \uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a Composable \u6765\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\u3002 @Composable fun App ( items : List < String > , query : String ) { val results = items . filter { it . matches ( query ) } // ... } \u8fd9\u4e2a\u51fd\u6570\u4f20\u5165\u4e00\u4e2a items \u5217\u8868\u548c\u4e00\u4e2a query \u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6267\u884c\u4e86\u9488\u5bf9\u4f20\u5165\u7684 items \u505a\u4e86\u4e00\u4e2a filter \u8fc7\u6ee4\u8ba1\u7b97\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8ba1\u7b97\u5305\u88c5\u5230\u4e00\u4e2a\u8bb0\u5f55\u7684\u8c03\u7528\u91cc\u9762\uff08\u8bb0\u5f55\u6307\u7684\u662f\u77e5\u9053\u600e\u4e48\u50cf\u8868\u53d1\u8d77\u8bf7\u6c42\uff09\u3002\u5728\u8fd4\u56de\u4e4b\u524d\uff0c\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u8ba1\u7b97\u5b8c\u5e76\u4e14\u628a\u7ed3\u679c\u8bb0\u5f55\u4e0b\u6765\u3002 \u5f53\u8fd9\u4e2a\u51fd\u6570\u518d\u6b21\u88ab\u6267\u884c\u7684\u65f6\u5019\uff0c\u62ff\u65b0\u4f20\u9012\u8fdb\u6765\u7684\u503c\u540c\u5386\u53f2\u8bb0\u5f55\u505a\u5bf9\u6bd4\uff0c\u5982\u679c\u6ca1\u53d8\u5316\uff0c\u8fc7\u6ee4\u64cd\u4f5c\u4f1a\u88ab\u8df3\u8fc7\uff0c\u4e4b\u524d\u7684\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de\u3002\u8fd9\u5c31\u662f memoization \u3002 \u6709\u8da3\u7684\u662f\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5f00\u9500\u5f88\u5c0f\uff0c\u7f16\u8bd1\u5668\u53ea\u9700\u8981\u5b58\u50a8\u4e4b\u524d\u7684\u8c03\u7528\u3002\u8fd9\u4e2a\u8ba1\u7b97\u53ef\u80fd\u4f1a\u53d1\u751f\u5728\u6574\u4e2a UI \u7684\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e3a\u4f60\u662f\u6839\u636e\u4f4d\u7f6e\u5b58\u50a8\u7684\uff0c\u53ea\u6709\u5728\u90a3\u4e2a\u4f4d\u7f6e\u624d\u4f1a\u5b58\u50a8\u3002 \u4e0b\u9762\u662f remember \u51fd\u6570\u7684\u7b7e\u540d\uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u548c\u8ba1\u7b97\u51fd\u6570\u7684\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u3002 @Composable fun < T > remember ( vararg inputs : Any? , calculation : () -> T ): T \u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u9000\u5316\u573a\u666f\uff0c\u5728\u6ca1\u6709\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u80fd\u505a\u7684\u4e00\u4ef6\u4e8b\u5c31\u662f\u6545\u610f\u9519\u8bef\u4f7f\u7528\u8fd9\u4e2a API \u3002\u6211\u4eec\u53ef\u4ee5\u6545\u610f\u4f20\u4e00\u4e2a\u810f\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\uff0c\u6bd4\u5982 Math.random() \u3002 @Composable fun App () { val x = remember { Math . random () } // ... } \u5982\u679c\u4f60\u6b63\u5728\u505a\u7684\u662f\u4e00\u4e2a\u5168\u5c40\u7684 memoization \u7684\u8bdd\u90a3\u5c31\u6ca1\u6709\u610f\u4e49\u3002\u4f46\u662f\u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization \uff0c\u5b83\u5c06\u4f1a\u662f\u4e00\u4e2a\u65b0\u7684\u8bed\u4e49\u3002\u6bcf\u6b21\u6211\u4eec\u7528 Composable \u7684\u5c42\u7ea7\uff0c Math.random \u90fd\u4f1a\u8fd4\u56de\u65b0\u503c\u3002\u4f46\u662f\uff0c\u6bcf\u6b21 Composable \u88ab\u91cd\u65b0\u7ec4\u5408\u7684\u65f6\u5019\uff0c Math.random \u90fd\u4f1a\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6301\u4e45\u5316\uff0c\u6301\u4e45\u5316\u5c31\u53ef\u4ee5\u8fdb\u884c\u72b6\u6001\u7ba1\u7406\u4e86\u3002","title":"\u57fa\u4e8e\u4f4d\u7f6e\u7684 memoization"},{"location":"principle/gap_buffer/#_1","text":"\u4e3a\u4e86\u6f14\u793a Composable \u51fd\u6570\u7684\u53c2\u6570\u662f\u600e\u4e48\u88ab\u4fdd\u5b58\u7684\uff0c\u6211\u4eec\u7528 Google \u8fd9\u4e2a Composable \u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a Int \u7c7b\u578b\u7684 number \u5165\u53c2\uff0c\u91cc\u9762\u8c03\u7528\u4e86\u4e00\u4e2a\u53eb Address \u7684 Composable \uff0c\u7136\u540e\u6e32\u67d3 Address \u3002 @Composable fun Google ( number : Int ) { Address ( number = number , street = \"Amphitheatre Pkwy\" , city = \"Mountain View\" , state = \"CA\" zip = \"94043\" ) } @Composable fun Address ( number : Int , street : String , city : String , state : String , zip : String ) { Text ( \" $ number $ street \" ) Text ( city ) Text ( \", \" ) Text ( state ) Text ( \" \" ) Text ( zip ) } compose \u5c06 Composable \u51fd\u6570\u7684\u53c2\u6570\u4fdd\u5b58\u5728\u8868\u91cc\u9762\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u770b\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\u4f1a\u6709\u4e00\u4e9b\u5197\u4f59\uff0c\u201cMountain View\u201d \u548c \u201cCA\u201d\uff0c\u8fd9\u4e24\u4e2a\u6dfb\u52a0\u5230\u5730\u5740\u91cc\u9762\u4f1a\u968f\u7740\u6587\u672c\u7684\u8c03\u7528\u518d\u6b21\u5b58\u50a8\uff0c\u56e0\u6b64\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4f1a\u88ab\u5b58\u50a8\u4e24\u6b21\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u901a\u8fc7\u6dfb\u52a0 static \u7684\u53c2\u6570\u6765\u907f\u514d\u8fd9\u79cd\u5197\u4f59\u3002 fun Google ( $ composer : Composer , $ static : Int , number : Int ) { Address ( $ composer , 0 b11110 or ( $ static and 0 b1 ), number = number , street = \"Amphitheatre Pkwy\" , city = \"Mountain View\" , state = \"CA\" zip = \"94043\" ) } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d static \u662f\u4e00\u4e2a\u6574\u6570\u5b57\u6bb5\u8868\u793a\u8fd0\u884c\u65f6\u662f\u5426\u77e5\u9053\u53c2\u6570\u6709\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002\u5982\u679c\u53c2\u6570\u6ca1\u53d8\uff0c\u90a3\u4e48\u5c31\u6ca1\u5fc5\u8981\u53bb\u5b58\u6570\u636e\u3002\u56e0\u6b64\u5728\u8fd9\u4e2a Google \u7684\u4f8b\u5b50\u91cc\u9762\uff0c\u7f16\u8bd1\u5668\u4f20\u5165\u4e86\u4e00\u4e2a\u53c2\u6570\u7528\u4ee5\u8868\u793a\u662f\u5426\u4f1a\u53d1\u751f\u6539\u53d8\u3002 \u90a3\u4e48\u5728 Address \u91cc\uff0c\u7f16\u8bd1\u5668\u540c\u6837\u53ef\u4ee5\u8fd9\u4e48\u505a\uff0c\u628a\u5b83\u4f20\u7ed9\u5b57\u7b26\u4e32\u3002 fun Address ( $ composer : Composer , $ static : Int , number : Int , street : String , city : String , state : String , zip : String ) { Text ( $ composer , ( $ static and 0 b11 ) and (( $ static and 0 b10 ) shr 1 ), \" $ number $ street \" ) Text ( $ composer , ( $ static and 0 b100 ) shr 2 , city ) Text ( $ composer , 0 b1 , \", \" ) Text ( $ composer , ( $ static and 0 b1000 ) shr 3 , state ) Text ( $ composer , 0 b1 , \" \" ) Text ( $ composer , ( $ static and 0 b10000 ) shr 4 , zip ) } \u8fd9\u91cc\u7684\u903b\u8f91\u8fd0\u7b97\u770b\u8d77\u6765\u6bd4\u8f83\u6666\u6da9\u4e5f\u8ba9\u4eba\u770b\u8d77\u6765\u6bd4\u8f83\u56f0\u60d1\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u5fc5\u8981\u53bb\u7406\u89e3\u5b83\uff0c\u8fd9\u662f\u7f16\u8bd1\u5668\u64c5\u957f\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u4e0d\u64c5\u957f\u5904\u7406\u3002 \u5728 Google \u7684\u793a\u4f8b\u91cc\u9762\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5197\u4f59\u7684\u4fe1\u606f\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u5e38\u91cf\u3002\u5176\u5b9e\u6211\u4eec\u4e5f\u6ca1\u5fc5\u8981\u53bb\u5b58\u50a8\u5b83\u4eec\u3002\u56e0\u6b64\u6574\u4e2a\u5c42\u7ea7\u7ed3\u6784\u662f\u7531\u53c2\u6570\u7684\u6570\u91cf\u51b3\u5b9a\u7684\u5e76\u4e14\u8fd9\u4e5f\u662f\u552f\u4e00\u9700\u8981\u7f16\u8bd1\u5668\u53bb\u5b58\u50a8\u7684\u3002 \u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4eec\u518d\u8fdb\u4e00\u6b65\uff0c\u751f\u6210\u4e86\u4ee3\u7801\u624d\u7406\u89e3\u90a3\u4e2a\u6570\u5b57\u662f\u552f\u4e00\u4f1a\u6539\u53d8\u7684\u4e1c\u897f\u3002\u8fd9\u6bb5\u4ee3\u7801\u5c06\u4f1a\u8fd9\u6837\u8fd0\u884c\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u6ca1\u53d8\u7684\u8bdd\uff0c\u6574\u4e2a\u51fd\u6570\u90fd\u4f1a\u88ab\u8df3\u8fc7\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5f15\u5bfc Composer \u5f53\u524d\u7684 index \u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u597d\u50cf\u51fd\u6570\u5df2\u7ecf\u88ab\u6267\u884c\u4e86\u4e00\u6837\u3002 fun Google ( $ composer : Composer , number : Int ) { if ( number == $ composer . next ()) { Address ( $ composer , number = number , street = \"Amphitheatre Pkwy\" , city = \"Mountain View\" , state = \"CA\" zip = \"94043\" ) } else { $ composer . skip () } } Composer \u77e5\u9053\u9700\u8981\u5feb\u8fdb\u5230\u54ea\u4e00\u6b65\u53bb\u6062\u590d\u6267\u884c\u3002","title":"\u5b58\u50a8\u53c2\u6570"},{"location":"principle/gap_buffer/#_2","text":"\u4e3a\u4e86\u7406\u89e3\u91cd\u7ec4\u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff0c\u8ba9\u6211\u4eec\u518d\u56de\u5934\u770b\u4e0b counter \u7684\u4f8b\u5b50\u3002 fun Counter ( $ composer : Composer ) { $ composer . start ( 123 ) var count = remember ( $ composer ) { mutableStateOf ( 0 ) } Button ( $ composer , text = \"Count: ${ count . value } \" , onPress = { count . value += 1 }, ) $ composer . end () } \u7f16\u8bd1\u5668\u7ed9\u8fd9\u4e2a counter \u4f8b\u5b50\u81ea\u52a8\u751f\u6210\u7684\u4ee3\u7801\u6709 composer.start \u548c composer.end \u3002\u4e0d\u7ba1 counter \u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff0c\u5b83\u901a\u8fc7\u8bfb\u53d6 APP \u6a21\u578b\u5b9e\u4f8b\u7684\u5c5e\u6027\u90fd\u80fd\u77e5\u9053 count \u7684\u503c\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u8c03\u7528 composer.end \uff0c\u6211\u4eec\u90fd\u80fd\u9009\u62e9\u662f\u5426\u8fd4\u56de\u503c\u3002 $ composer . end () ?. updateScope { nextComposer -> Counter ( nextComposer ) } \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u8be5\u503c\u8c03\u7528 updateScope \u65b9\u6cd5\uff0c\u65b9\u6cd5\u4f20\u4e00\u4e2a lambda \u6765\u544a\u8bc9\u8fd0\u884c\u65f6\u5728\u5fc5\u8981\u65f6\u600e\u4e48\u53bb\u91cd\u542f\u8fd9\u4e2a Composable \u3002\u8fd9\u4e2a\u548c LiveData \u63a5\u6536\u4e00\u4e2a lambda \u662f\u4e00\u6837\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u53ef\u7a7a\uff08\uff1f\uff09\u7684\u539f\u56e0\u662f\uff0c\u8fd4\u56de\u503c\u662f\u53ef\u7a7a\u7684\uff0c\u4e3a\u4ec0\u4e48\u662f\u53ef\u7a7a\u7684\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u5728 Counter \u8fd0\u884c\u7684\u65f6\u5019\u4e0d\u8bfb\u53d6\u4efb\u4f55\u6a21\u578b\u5bf9\u8c61\uff0c\u6211\u4eec\u5c31\u6ca1\u6cd5\u544a\u8bc9\u8fd0\u884c\u65f6\u600e\u4e48\u53bb\u66f4\u65b0\uff0c\u56e0\u4e3a\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u66f4\u65b0\u3002","title":"\u91cd\u7ec4"},{"location":"principle/gap_buffer/#_3","text":"\u4f60\u9700\u8981\u77e5\u9053\u7684\u662f\u5927\u90e8\u5206\u8fd9\u4e9b\u7ec6\u8282\u53ea\u662f\u5b9e\u73b0\u7ec6\u8282\u3002\u6807\u51c6 Kotlin \u51fd\u6570\u5e93\u91cc\u9762 Composable \u51fd\u6570\u4f1a\u6709\u4e0d\u540c\u7684\u884c\u4e3a\u548c\u80fd\u529b\uff0c\u6709\u65f6\u5019\u7406\u89e3\u5b83\u4eec\u600e\u4e48\u5b9e\u73b0\u4f1a\u5bf9\u6211\u4eec\u6709\u6240\u5e2e\u52a9\uff0c\u4f46\u662f\u884c\u4e3a\u548c\u80fd\u529b\u4e0d\u4f1a\u53d8\uff0c\u5b9e\u73b0\u662f\u6709\u53ef\u80fd\u53d8\u7684\u3002 \u540c\u6837\u7684\uff0c Compose \u7684\u7f16\u8bd1\u5668\u5728\u7279\u5b9a\u60c5\u5f62\u4e0b\u53ef\u4ee5\u751f\u6210\u66f4\u9ad8\u6548\u7684\u4ee3\u7801\u3002\u540e\u7eed\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u80fd\u8fdb\u4e00\u6b65\u4f18\u5316\u3002","title":"\u7ed3\u8bed"},{"location":"principle/modifier_structure/","text":"\u60f3\u5fc5\u8bb8\u591a\u5c0f\u4f19\u4f34\u5728\u4f7f\u7528 Jetpack Compose \u5f00\u53d1\u65f6\u90fd\u4f7f\u7528\u8fc7 Modifier \u6765\u4fee\u9970 UI \u7ec4\u4ef6\uff0c\u505a\u8fc7\u4e00\u6bb5\u65f6\u95f4 Compose \u5f00\u53d1\u7684\u5c0f\u4f19\u4f34\u90fd\u4f1a\u53d1\u73b0 UI \u7ec4\u4ef6\u6700\u7ec8\u6240\u5448\u73b0\u6548\u679c\u4e0e Modifier \u8c03\u7528\u987a\u5e8f\u662f\u606f\u606f\u76f8\u5173\u7684\u3002\u8fd9\u662f\u56e0\u4e3a Modifier \u4f1a\u7531\u4e8e\u8c03\u7528\u987a\u5e8f\u7684\u4e0d\u540c\u800c\u4ea7\u751f\u4e0d\u540c\u7684 Modifier \u94fe\uff0cJetpack Compose \u4f1a\u6309\u7167 Modifier \u94fe\u4e0a\u7684\u987a\u5e8f\u8fdb\u884c\u6267\u884c\uff0c\u4ece\u800c\u5bfc\u81f4 Modifier \u8c03\u7528\u987a\u5e8f\u4e0d\u540c\u65f6\uff0cUI \u7ec4\u4ef6\u6700\u7ec8\u5448\u73b0\u7684\u6548\u679c\u4e5f\u4f1a\u4e0d\u540c\u3002\u90a3\u4e48 Modifier \u94fe\u5728\u5e95\u5c42\u5982\u4f55\u5b58\u50a8\u7684\u5462\uff1f\u672c\u6587\u5c06\u5e26\u7740\u5927\u5bb6\u6765\u4e00\u8d77\u6252\u4e00\u6252 Modifier \u5b9e\u73b0\u539f\u7406\uff0c\u7ed3\u5408\u56fe\u7247\u6765\u89e3\u91ca Modifier \u94fe\u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3002 Modifier \u63a5\u53e3 \u4ece\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 Modifier \u5b9e\u9645\u4e0a\u662f\u4e2a\u63a5\u53e3\u3002 interface Modifier { fun < R > foldIn ( initial : R , operation : ( R , Element ) -> R ): R fun < R > foldOut ( initial : R , operation : ( Element , R ) -> R ): R fun any ( predicate : ( Element ) -> Boolean ): Boolean fun all ( predicate : ( Element ) -> Boolean ): Boolean infix fun then ( other : Modifier ): Modifier = ... interface Element : Modifier { ... } companion object : Modifier { ... } } \u65e2\u7136\u662f\u63a5\u53e3\u80af\u5b9a\u6709\u5176\u5bf9\u5e94\u7684\u5b9e\u73b0\u3002Modifier \u63a5\u53e3\u6709\u4e09\u4e2a\u76f4\u63a5\u5b9e\u73b0\u7c7b\u6216\u63a5\u53e3\uff1a\u4f34\u751f\u5bf9\u8c61 Modifier\u3001\u5185\u90e8\u5b50\u63a5\u53e3Modifier.Element\u3001CombinedModifier\u3002 \u4f34\u751f\u5bf9\u8c61 Modifier\uff1a \u6700\u5e38\u7528\u7684 Modifier\uff0c \u5f53\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 Modifier.xxx()\uff0c\u5b9e\u9645\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u4f34\u751f\u5bf9\u8c61\u3002 \u5185\u90e8\u5b50\u63a5\u53e3 Modifier.Element\uff1a \u5f53\u6211\u4eec\u4f7f\u7528Modifier.xxx()\u65f6\uff0c\u5176\u5185\u90e8\u5b9e\u9645\u4f1a\u521b\u5efa\u4e00\u4e2a Modifier \u5b9e\u4f8b\u3002\u6211\u4eec\u4ee5 size \u4e3a\u4f8b\u3002\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.size(100.dp) \u65f6\uff0c\u5b9e\u9645\u4e0a\u5185\u90e8\u4f1a\u521b\u5efa\u4e00\u4e2a SizeModifier \u5b9e\u4f8b fun Modifier . size ( size : Dp ) = this . then ( SizeModifier ( ... ) ) \u4ece\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 SizeModifier \u5b9e\u73b0\u4e86LayoutModifier \u63a5\u53e3\uff0c\u800c LayoutModifier \u63a5\u53e3\u53c8\u662f Modifier.Element \u7684\u5b50\u63a5\u53e3\u3002 \u53ef\u4ee5\u8bf4\uff0c\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.xxx() \u6240\u521b\u5efa\u7684\u5404\u7c7b Modifier \u8ffd\u8e2a\u6eaf\u6e90\uff0c\u6700\u540e\u53d1\u73b0\u5176\u5b9e\u90fd\u662f Modifier.Element \u5b50\u7c7b\u3002\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.size() \u6240\u521b\u5efa\u7684 SizeModifier \u5b9e\u9645\u4e0a\u662f Modifier \u63a5\u53e3\u7684\u76f4\u63a5\u5b50\u63a5\u53e3 LayoutModifier \u7684\u5b50\u7c7b\uff0c\u50cf\u8fd9\u7c7b\u76f4\u63a5\u5b50\u63a5\u53e3\u6216\u5b50\u7c7b\u8fd8\u6709\u54ea\u4e9b\u5462\uff0c\u5728\u8fd9\u91cc\u6211\u6574\u7406\u4e86\u4e00\u4e0b\u3002\u5982\u56fe\u6240\u793a\uff0c\u8fd9\u4e9b\u63a5\u53e3\u57fa\u672c\u6db5\u76d6\u4e86 Modifier \u6240\u63d0\u4f9b\u7684\u6240\u6709\u80fd\u529b\u3002 CombinedModifier\uff1a Compose\u5185\u90e8\u7ef4\u62a4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8fde\u63a5 Modifier \u94fe\u4e2d\u7684\u6bcf\u4e2a Modifier \u7ed3\u70b9\uff0c\u540e\u7eed\u4f1a\u8bb2\u5230\u3002 Modifier \u94fe\u7684\u6784\u5efa\u8fc7\u7a0b \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u901a\u8fc7\u5b9e\u4f8b\u6765\u5206\u6790 Modifier \u94fe\u662f\u5982\u4f55\u4e00\u6b65\u6b65\u521b\u5efa\u7684\u3002 then() \u4e00\u822c\u6211\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7\u4f34\u751f\u5bf9\u8c61 Modifier \u6765\u521b\u5efa Modifier \u94fe\u3002\u524d\u6587\u63d0\u5230\u8fc7\uff0c\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.size() \u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a SizeModifier \u5b9e\u4f8b\u3002\u6211\u4eec\u8fdb\u5165 size() \u5b9e\u73b0\u4f1a\u53d1\u73b0 SizeModifier\u5b9e\u4f8b\u88ab\u5f53\u4f5c\u53c2\u6570\u4f20\u5165 then() \u65b9\u6cd5\u4e2d\u3002\u800c\u8fd9\u4e2a then() \u65b9\u6cd5\u5c31\u662f Modifier \u95f4\u76f8\u4e92\u8fde\u63a5\u7684\u5173\u952e\u65b9\u6cd5\u3002 Modifier . size ( 100. dp ) fun Modifier . size ( size : Dp ) = this . then ( // \u5173\u952e\u65b9\u6cd5 SizeModifier ( ... ) ) \u6b64\u65f6 this \u6307\u9488\u4ecd\u6307\u5411\u7684\u662f\u6211\u4eec\u7684\u4f34\u751f\u5bf9\u8c61 Modifier\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u770b\u4f34\u751f\u5bf9\u8c61 Modifier \u662f\u5982\u4f55\u5b9e\u73b0 then() \u65b9\u6cd5\u7684\u3002 \u53ef\u4ee5\u770b\u5230\u4f34\u751f\u5bf9\u8c61 Modifier \u7684 then() \u65b9\u6cd5\u5b9e\u73b0\u7684\u5341\u5206\u5e72\u8106\uff0c\u76f4\u63a5\u8fd4\u56de\u5f85\u8fde\u63a5\u7684 SizeModifier\u3002 companion object : Modifier { ... override infix fun then ( other : Modifier ): Modifier = other } \u6b64\u65f6Modifier\u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7ee7\u7eed\u8c03\u7528 Modifier.background(Color.Red) \u3002\u7531\u4e8e\u662f\u94fe\u5f0f\u8c03\u7528\uff0c\u6b64\u65f6\u5f53\u524d Modifier \u662f SizeModifier\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8c03\u7528 background \u65f6\uff0c\u5176\u5185\u90e8\u4f7f\u7528\u7684 this \u6307\u9488\u6307\u5411\u7684\u662f SizeModifier \u5b9e\u4f8b\u3002 \u4ece\u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cBackground \u5b9e\u9645\u4e0a DrawModifier \u7684\u5b9e\u73b0\u7c7b\uff0c\u540c\u65f6\u4e5f\u662f Modifier.Element \u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b Modifier . size ( 100. dp ) . background ( Color . Red ) fun Modifier . background ( color : Color , shape : Shape = RectangleShape ) = this . then ( // \u5f53\u524d this \u6307\u5411 SizeModifier \u5b9e\u4f8b Background ( ... ) ) \u6211\u4eec\u5411\u4e0a\u67e5\u627e SizeModifier \u7684 then \u65b9\u6cd5\u5b9e\u73b0\uff0c\u6700\u7ec8\u5728 Modifier \u63a5\u53e3\u4e2d\u627e\u5230\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u539f\u6709 SizeModifier \u4f1a\u901a\u8fc7\u4e00\u4e2a CombinedModifier \u8fde\u63a5 Background interface Modifier { infix fun then ( other : Modifier ): Modifier = if ( other === Modifier ) this else CombinedModifier ( this , other ) } class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier \u6b64\u65f6 Modifier \u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b \u6211\u4eec\u901a\u8fc7\u56fe\u7247\u53ef\u4ee5\u76f4\u89c2\u67e5\u770b CombinedModifier \u901a\u8fc7 outer \u4e0e inner \u8fde\u63a5\u4e86\u4e24\u4e2a Modifier\u3002 \u7136\u800c\u503c\u5f97\u6ce8\u610f\u7684\u662f outer \u4e0e inner \u5b57\u6bb5\u90fd\u88ab\u4f7f\u7528 private \u5173\u952e\u5b57\u58f0\u660e\uff0c\u610f\u5473\u7740\u4e0d\u5e0c\u671b\u88ab\u5916\u90e8\u62ff\u5230\u3002 Modifier \u94fe\u65e2\u7136\u4ee5\u94fe\u5f0f\u7ed3\u6784\u5b58\u50a8\uff0c\u5b98\u65b9\u53c8\u4f7f\u7528\u4e86 private \u5173\u952e\u5b57\u58f0\u660e\uff0c\u96be\u9053\u4e0d\u5141\u8bb8\u6211\u4eec\u904d\u5386 Modifier \u94fe\u561b\u3002\u5176\u5b9e\u5b98\u65b9\u65e9\u5c31\u66ff\u6211\u4eec\u60f3\u597d\u4e86\uff0c\u901a\u8fc7 foldOut() \u4e0e foldIn() \uff0c\u6709\u5173\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u8bb2\u5230\u3002 \u6211\u4eec\u7ee7\u7eed\u8c03\u7528 Modifier.padding(10.dp) \uff0c\u6b64\u65f6 padding \u5185\u90e8\u4f7f\u7528\u7684 this \u6307\u9488\u6307\u5411\u7684\u662f CombinedModifier \u5b9e\u4f8b\uff0c\u6211\u4eec\u7ffb\u9605 CombinedModifier \u7684 then \u65b9\u6cd5\u5b9e\u73b0\u53d1\u751f\u6ca1\u6709\u91cd\u5199\uff0c\u6700\u7ec8\u8fd8\u662f\u56de\u5230\u4e86 Modifier \u63a5\u53e3\u4e2d\u3002 \u6b64\u65f6\u5f85\u8fde\u63a5\u7684\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a PaddingModifier \u5b9e\u4f8b\u3002 Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) fun Modifier . padding ( all : Dp ) = this . then ( PaddingModifier ( ... ) ) \u6b64\u65f6Modifier\u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b composed() \u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u8981\u6dfb\u52a0\u4e00\u4e9b\u624b\u52bf\u76d1\u542c\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528 Modifier.pointerInput() \u6765\u5b9a\u5236\u624b\u52bf\u5904\u7406\u3002\u4ece\u6e90\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6b64\u65f6\u5e76\u6ca1\u6709\u4f7f\u7528 then() \u65b9\u6cd5\u8fde\u63a5 Modifier\uff0c\u800c\u4f7f\u7528\u7684\u662f composed() \u65b9\u6cd5\u3002\u4ece composed() \u5b9e\u73b0\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6700\u7ec8\u4ecd\u7136\u4f7f\u7528\u7684\u662f then() \u65b9\u6cd5\uff0c\u6b64\u65f6\u5f85\u8fde\u63a5\u7684\u662f\u4e2a ComposedModifier \u5b9e\u4f8b\u3002\u7136\u800c\u6211\u4eec\u77e5\u9053\u5176\u5b9e\u6211\u4eec\u771f\u6b63\u8981\u8fde\u63a5\u7684\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u624b\u52bf\u5904\u7406\u76f8\u5173Modifier\uff0c\u901a\u8fc7 composed() \u65b9\u6cd5\u53c2\u6570\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\u6b64\u65f6\u5b9e\u9645\u4e0a ComposedModifier \u5185\u90e8\u6301\u6709\u4e86\u4e00\u4e2a\u5de5\u5382 lambda \u7528\u4e8e\u751f\u4ea7 Modifier \u7684\uff0c\u800c\u771f\u6b63\u8981\u88ab\u8fde\u63a5\u7684 Modifier \u5b9e\u9645\u4e0a\u5c31\u662f\u5de5\u5382 lambda \u7684\u8fd4\u56de\u503c SuspendingPointerInputFilter\u3002SuspendingPointerInputFilter \u5b9e\u9645\u4e0a\u662f PointerInputModifier \u7684\u5b9e\u73b0\u7c7b\u3002\u800c ComposedModifier \u5b9e\u9645\u4e0a\u5c31\u662f\u505a\u4e86\u4e00\u4e2a\u88c5\u7bb1\u8fc7\u7a0b\u3002\u7136\u800c\u4ec0\u4e48\u65f6\u5019\u62c6\u7bb1\u5462\uff1f\u8fd9\u4e2a\u6211\u4eec\u540e\u7eed\u4f1a\u8bb2\u5230\u7684\u3002 Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) . pointerInput ( Unit ) { ... } fun Modifier . pointerInput ( key1 : Any? , block : suspend PointerInputScope .() -> Unit ): Modifier = composed ( // ... ) { ... // SuspendingPointerInputFilter \u662f\u624b\u52bf\u5904\u7406\u7684\u771f\u6b63Modifier remember ( density ) { SuspendingPointerInputFilter ( viewConfiguration , density ) }. apply { ... } } fun Modifier . composed ( inspectorInfo : InspectorInfo .() -> Unit = NoInspectorInfo , factory : @Composable Modifier .() -> Modifier ): Modifier = this . then ( ComposedModifier ( inspectorInfo , factory )) \u6b64\u65f6 Modifier \u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b \u4ee5\u6b64\u7c7b\u63a8\uff0c\u8c03\u7528\u65b9\u6cd5\u8d8a\u591aModifier \u94fe\u5c31\u4f1a\u53d8\u5f97\u8d8a\u957f\u3002 Modifier \u94fe\u7684\u904d\u5386 foldIn() \u4e0e foldOut() \u7528\u6cd5 Modifier \u94fe\u65e2\u7136\u662f\u94fe\u5f0f\u7ed3\u6784\uff0c\u8bf4\u660e\u662f\u53ef\u4ee5\u904d\u5386\u7684\u3002\u7136\u800c\u524d\u6587\u6211\u4eec\u4e5f\u63d0\u5230\u8fc7\uff0c outer \u4e0e inner \u5b57\u6bb5\u90fd\u88ab\u4f7f\u7528 private \u5173\u952e\u5b57\u58f0\u660e\uff0c\u610f\u5473\u7740\u5916\u90e8\u662f\u62ff\u4e0d\u5230\u7684\u3002\u6240\u4ee5\uff0c\u5b98\u65b9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 foldOut() \u4e0e foldIn() \u4e13\u95e8\u7528\u6765\u904d\u5386 Modifier \u94fe\u3002 Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) . pointerInput ( Unit ) { ... } foldIn()\uff1a \u6b63\u5411\u904d\u5386 Modifier \u94fe\uff0cSizeModifier-> Background -> PaddingModifier -> ComposedModifier foldOut()\uff1a \u53cd\u5411\u904d\u5386 Modifier \u94fe, ComposedModifier -> PaddingModifier -> Background ->SizeModifier \u5f53\u7136 foldOut() \u4e0e foldIn() \u662f\u9700\u8981\u4f20\u9012\u53c2\u6570\u7684\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u4e24\u4e2a\u53c2\u6570 initial, operation\u3002 fun < R > foldIn ( initial : R , operation : ( R , Element ) -> R ): R fun < R > foldOut ( initial : R , operation : ( Element , R ) -> R ): R initial\uff1a\u521d\u59cb\u503c operation\uff1a\u6bcf\u904d\u5386\u5230\u4e00\u4e2a Modifier \u65f6\u7684\u56de\u8c03\uff0c\u8fd9\u4e2a lambda \u53c8\u6709\u4e24\u4e2a\u53c2\u6570\uff0cR\u7c7b\u578b\u4e0e Element\u7c7b\u578b \u4e3a\u89e3\u91ca\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u610f\u4e49\uff0c\u6211\u89c9\u5f97\u7528 for \u5faa\u73af\u7c7b\u6bd4\u6bd4\u8f83\u6070\u5f53\u3002 foldIn \u65b9\u6cd5\u7c7b\u4f3c\u4e8e for (int i = initial; ; operation()) \u3002 \u8bbe\u7f6e initial \u53c2\u6570\u7c7b\u4f3c\u4e3a i \u8bbe\u7f6e\u521d\u59cb\u503c\uff0c\u800c operation \u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u503c\u7684\u66f4\u65b0\u3002 foldOut \u65b9\u6cd5\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u904d\u5386\u987a\u5e8f\u76f8\u53cd\u3002 \u4e5f\u5c31\u662f\u8bf4\u904d\u5386\u5f53\u524d Modifier \u65f6\u6267\u884c\u7684operation \u7684\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u94fe\u4e2d\u4e0b\u4e00\u4e2a Modifier \u7684 operation \u7684 R \u7c7b\u578b\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u4e48\u8bf4\u53ef\u80fd\u6bd4\u8f83\u6666\u6da9\u96be\u61c2\uff0c\u5728\u8fd9\u91cc\u7b80\u5355\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u5e0c\u671b\u7edf\u8ba1 Modifier \u94fe\u4e2d\u6709 Modifier \u7684\u6570\u91cf\u3002 val modifier = Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) . pointerInput ( Unit ) { } val result = modifier . foldIn < Int > ( 0 ) { currentIndex , element -> Log . d ( \"compose_study\" , \"index: $ currentIndex , element : $ element \" ) currentIndex + 1 } foldOut \u65b9\u6cd5\u7684\u65b9\u6cd5\u4e5f\u662f\u7c7b\u4f3c\uff0c\u5927\u5bb6\u90fd\u7b80\u5355\u7406\u89e3\u4e3a\u53cd\u5411\u904d\u5386 Modifier \u94fe\u5373\u53ef\u3002 \u5230\u8fd9\u91cc\u5927\u5bb6\u53ef\u80fd\u5fc3\u751f\u7591\u95ee\uff0c\u6211\u4eec\u524d\u9762\u6240\u8bb2\u7684 Modifier \u94fe\u4e2d\u4e0d\u4ec5\u4ec5\u53ea\u6709 Modifier.Element\uff0c\u5176\u4e2d\u8fd8\u5939\u6742\u7740\u8bb8\u591a CombinedModifier\u3002\u4e3a\u4ec0\u4e48\u6211\u4eec\u904d\u5386 Modifier \u94fe\u65f6\u8fd9\u4e9b CombinedModifier \u6ca1\u6709\u51fa\u73b0\u5462\uff1f\u539f\u56e0\u5728\u4e8eCombinedModifier \u5b9e\u9645\u4e0a\u662f Compose \u5185\u90e8\u7ef4\u62a4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b98\u65b9\u5982\u6b64\u8bbe\u8ba1\u662f\u5e0c\u671b\u5bf9\u4e0a\u5c42\u5f00\u53d1\u8005\u65e0\u611f\u77e5\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u4f7f\u7528\u5c31\u8bf4\u8fd9\u4e48\u591a\uff0c\u5982\u679c\u4f60\u5bf9\u5176\u5185\u90e8\u5b9e\u73b0\u539f\u7406\u611f\u5174\u8da3\u5c31\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4e0b\u53bb\uff5e foldIn() \u4e0e foldOut() \u5b9e\u73b0\u539f\u7406 \u4e3a\u63a2\u7d22\u539f\u7406\uff0c\u8001\u89c4\u77e9\u6211\u4eec\u5c31\u9700\u8981\u8fdb\u5165\u6e90\u7801\u4e00\u63a2\u7a76\u7adf\u4e86\u3002\u6211\u4eec\u4e0a\u6765\u8981\u505a\u7684\u5c31\u662f\u627e\u5230 foldIn() \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002\u901a\u8fc7\u524d\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\u5f53 Modifier \u94fe\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 2 \u65f6\uff0c\u8fd4\u56de\u7684 Modifier \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a CombinedModifier \u5b9e\u4f8b\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u770b\u770b ConbinedModifier \u91cc\u9762\u662f\u600e\u4e48\u91cd\u5199\u7684 foldIn() \u65b9\u6cd5\u3002 class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier { ... override fun < R > foldIn ( initial : R , operation : ( R , Modifier . Element ) -> R ): R = inner . foldIn ( outer . foldIn ( initial , operation ), operation ) } \u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u7684\u662f outer.foldIn(initial. operation) \u7684\u8fd4\u56de\u503c\uff0c\u7ecf\u8fc7\u4e00\u8def\u9012\u5f52\u5411\u4e0a\u5373\u53ef\u5230\u8fbe\u6700\u9876\u90e8\u7684outer Modifier\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8bbe\u7f6e\u7684\u521d\u59cb\u503c\u4e5f\u8ddf\u968fouter\u4e00\u8def\u900f\u4f20\u4e0a\u53bb\u4e86\u3002 \u6839\u636e Modifier \u94fe\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\u6700\u9876\u90e8\u7684outer Modifier\u4e00\u5b9a\u662f\u4e2a Modifier.Element\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u8981\u770b\u770b Modifier.Element \u662f\u600e\u4e48\u91cd\u5199\u7684 foldIn() \u65b9\u6cd5\u4e86\u3002\u901a\u8fc7\u6e90\u7801\u6211\u4eec\u770b\u5230\u76f4\u63a5\u8c03\u7528\u4e86\u6211\u4eec\u4f20\u5165\u7684lambda\uff0c\u5e76\u5c06 lambda \u8fd4\u56de\u503c\u4f5c\u4e3a foldIn() \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u3002 interface Element : Modifier { ... override fun < R > foldIn ( initial : R , operation : ( R , Element ) -> R ): R = operation ( initial , this ) } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u9000\u5230\u4e86\u4e0a\u4e00\u5c42 CombinedModifier\uff0c\u63a5\u4e0b\u91cc\u6211\u4eec\u518d\u770b\u770b\u4ed6\u662f\u600e\u4e48\u505a\u7684\u3002\u7d27\u63a5\u7740\u8c03\u7528\u4e86 inner.foldIn() class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier { ... override fun < R > foldIn ( initial : R , operation : ( R , Modifier . Element ) -> R ): R = inner . foldIn ( outer . foldIn ( initial , operation ), operation ) } \u6211\u4eec\u4e0d\u59a8\u770b\u770b\u5f53\u524d\u573a\u666f\u4e0b\u7684\u56fe\u793a\u3002 \u6574\u4e2a\u6d41\u7a0b\u5c31\u975e\u5e38\u6e05\u6670\u4e86\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a inner Modifier \u88ab\u904d\u5386\u540e\u4fbf\u4f1a\u5c06 lambda \u7ed3\u679c\u8fd4\u56de\u7ed9\u5f00\u53d1\u8005\u3002\u901a\u8fc7\u6d41\u7a0b\u7684\u89e3\u8bfb\uff0c\u6211\u4eec\u53ef\u77e5\u4e4b\u6240\u4ee5\u6211\u4eec\u7684\u4fbf\u5229\u8fc7\u7a0b\u6ca1\u6709 CombindedModifier\uff0c\u662f\u56e0\u4e3a CombinedModifier \u867d\u91cd\u5199\u4e86 foldIn()\u65b9\u6cd5 \uff0c\u4f46\u5e76\u6ca1\u6709\u8c03\u7528\u6211\u4eec\u4f20\u5165\u7684lambda\u3002\u800c\u53ea\u6709\u6240\u6709 Modifier.Element \u624d\u4f1a\u8c03\u7528\u6211\u4eec\u4f20\u5165\u7684 lambda\u3002 \u7406\u89e3\u4e86 foldIn() \u65b9\u6cd5 \u7684\u5b9e\u73b0\u539f\u7406\uff0c foldOut() \u65b9\u6cd5 \u7684\u5b9e\u73b0\u539f\u7406\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u662f\u904d\u5386\u987a\u5e8f\u662f\u5b8c\u5168\u76f8\u53cd\u7684\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u52a0\u8d58\u8ff0\u4e86\u3002 foldIn() \u4e0e foldOut() \u7684\u5e94\u7528 \u5f04\u61c2\u4e86\u5b9e\u73b0\u539f\u7406\u540e\uff0c\u6211\u4eec\u5c31\u6765\u770b\u770b\u8be5\u600e\u4e48\u7528\u3002Compose \u6e90\u7801\u4e2d\u5c06\u6211\u4eec\u6240\u521b\u5efa\u7684 Modifier \u4f20\u5165 Layout \u7684\u8fc7\u7a0b\u5c31\u662f\u5bf9 foldIn() \u65b9\u6cd5 \u4e0e foldOut() \u65b9\u6cd5 \u7684\u4e00\u6b21\u6700\u4f73\u5b9e\u8df5\u3002 \u6211\u4eec\u77e5\u9053 Compose \u7ec4\u4ef6\u90fd\u662f\u57fa\u4e8e Layout \u8fd9\u4e2a\u57fa\u7840\u7ec4\u4ef6\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u521b\u5efa\u7684 Modifier \u5728\u5176\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u4f20\u9012\u7684\u3002\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684 modifier \u4f20\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a materializerOf \u65b9\u6cd5 @Composable inline fun Layout ( content : @Composable () -> Unit , modifier : Modifier = Modifier , measurePolicy : MeasurePolicy ) { ... ReusableComposeNode < ComposeUiNode , Applier < Any >> ( factory = ..., update = { ... }, skippableUpdate = materializerOf ( modifier ), // \u91cd\u70b9 content = ... ) } \u7ee7\u7eed\u8ddf\u8fdb\uff0c\u6211\u4eec\u4f1a\u8d70\u8fdb Composer.materialize()\u3002\u53ef\u4ee5\u53d1\u73b0\u6e90\u7801\u4e2d\u4f7f\u7528\u4e86 fouldIn() \u65b9\u6cd5 \u3002 \u5728\u5176\u4e2d\u6211\u4eec\u770b\u5230\u4e86\u5bf9\u4e8e ComposedModifier \u7684\u7279\u6b8a\u5224\u65ad\u3002\u8fd8\u8bb0\u5f97 composed() \u8fd4\u56de\u7684 ComposedModifier \u561b\u3002\u6839\u636e\u524d\u6587\u6211\u4eec\u53ef\u77e5\uff0c\u6211\u4eec\u6b63\u5e38\u5f97\u5230\u7684 Modifier \u94fe\u5176\u4e2d\u662f\u53ef\u80fd\u5305\u542b ComposedModifier\u7684\uff0c\u800c\u8fd9\u91cc\u60f3\u505a\u7684\u662f\u5c06 Modifier \u94fe\u4e2d\u7684\u6240\u6709 ComposedModifier \u644a\u5e73\uff0c\u8ba9\u5176 factory \u5185\u90e8\u4ea7\u751f\u7684 Modifier \u4e5f\u80fd\u52a0\u5165\u5230 Modifier \u94fe\u4e2d\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86 fouldIn() \u65b9\u6cd5 \u8fdb\u884c\u4e86\u6b63\u5411\u904d\u5386\uff0c\u4f20\u5165\u7684\u521d\u59cb\u503c\u4e3a Modifier\u3002\u5f53\u904d\u5386\u5230 ComposedModifier \u65f6\uff0c\u5219\u4f7f\u7528\u5176\u5185\u90e8\u7684 factory \u6765\u751f\u4ea7 Modifier\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u751f\u6210\u7684 Modifier \u53ef\u80fd\u4e5f\u662f Modifier \u94fe\u6216\u5355\u4e2a Modifier\u3002\u751f\u6210\u7684 Modifier \u5176\u4e2d\u4e5f\u53ef\u80fd\u4f1a\u5305\u542b ComposedModifier\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u8fdb\u884c\u4e86\u9012\u5f52\u5904\u7406\u3002\u6700\u7ec8\u76ee\u6807\u5c31\u662f\u6240\u5f97\u5230\u7684 Modifier \u94fe\u4e2d\u662f\u4e0d\u5305\u542b ComposedModifier \u7ed3\u70b9\u7684\uff0c\u5373\u5b8c\u5168\u644a\u5f00\u7684 Modifier \u94fe\u3002 fun Composer . materialize ( modifier : Modifier ): Modifier { ... val result = modifier . foldIn < Modifier > ( Modifier ) { acc , element -> acc . then ( if ( element is ComposedModifier ) { @kotlin.Suppress ( \"UNCHECKED_CAST\" ) val factory = element . factory as Modifier .( Composer , Int ) -> Modifier val composedMod = factory ( Modifier , this , 0 ) // \u751f\u4ea7 Modifier materialize ( composedMod ) // \u751f\u6210\u51fa\u7684 Modifier \u53ef\u80fd\u4e5f\u5305\u542b ComposedModifier\uff0c\u9012\u5f52\u5904\u7406 } else element ) } ... return result } Modifier \u94fe\u540e\u7eed\u8fd8\u4f1a\u4f7f\u7528 foldOut\u65b9\u6cd5 \u8fdb\u884c\u904d\u5386\u4ece\u800c\u751f\u6210 LayoutNodeWrapper \u94fe\uff0c\u4e86\u89e3 Modifier \u94fe\u7684\u672c\u8d28\u5c06\u6709\u52a9\u4e8e\u7406\u89e3 Jetpack Compose \u6e90\u7801\u4e2d\u6d4b\u91cf\u5e03\u5c40\u6d41\u7a0b\uff0c\u611f\u5174\u8da3\u5c0f\u4f19\u4f34\u53ef\u4ee5\u62d3\u5c55\u9605\u8bfb\u6587\u7ae0 \u300aJetpack Compose \u6d4b\u91cf\u6d41\u7a0b\u6e90\u7801\u5206\u6790\u300b \u603b\u7ed3 \u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u5c31\u662f\u5e26\u9886\u5927\u5bb6\u5bf9 Modifier \u94fe\u80cc\u540e\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u6267\u884c\u903b\u8f91\u8fdb\u884c\u5206\u6790\uff0c\u4f7f\u5927\u5bb6\u5bf9\u4e8e Modifier \u94fe\u7684\u672c\u8d28\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u8ba4\u8bc6\u3002\u5f04\u6e05\u695a\u4e86 Modifier \u94fe\u7684\u672c\u8d28\u4ee5\u540e\uff0c\u4ee5\u540e\u4f7f\u7528 Modifier \u51fa\u73b0\u95ee\u9898\u65f6\u5c31\u5bb9\u6613\u8fdb\u884c\u6392\u67e5\u4e86\u3002\u603b\u4e4b\u5bf9\u672c\u8d28\u4e86\u89e3\u7684\u8d8a\u591a\uff0c\u4f7f\u7528\u8d77\u6765\u5c31\u8d8a\u987a\u624b\uff01","title":"\u56fe\u89e3Modifier"},{"location":"principle/modifier_structure/#modifier","text":"\u4ece\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 Modifier \u5b9e\u9645\u4e0a\u662f\u4e2a\u63a5\u53e3\u3002 interface Modifier { fun < R > foldIn ( initial : R , operation : ( R , Element ) -> R ): R fun < R > foldOut ( initial : R , operation : ( Element , R ) -> R ): R fun any ( predicate : ( Element ) -> Boolean ): Boolean fun all ( predicate : ( Element ) -> Boolean ): Boolean infix fun then ( other : Modifier ): Modifier = ... interface Element : Modifier { ... } companion object : Modifier { ... } } \u65e2\u7136\u662f\u63a5\u53e3\u80af\u5b9a\u6709\u5176\u5bf9\u5e94\u7684\u5b9e\u73b0\u3002Modifier \u63a5\u53e3\u6709\u4e09\u4e2a\u76f4\u63a5\u5b9e\u73b0\u7c7b\u6216\u63a5\u53e3\uff1a\u4f34\u751f\u5bf9\u8c61 Modifier\u3001\u5185\u90e8\u5b50\u63a5\u53e3Modifier.Element\u3001CombinedModifier\u3002 \u4f34\u751f\u5bf9\u8c61 Modifier\uff1a \u6700\u5e38\u7528\u7684 Modifier\uff0c \u5f53\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 Modifier.xxx()\uff0c\u5b9e\u9645\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u4f34\u751f\u5bf9\u8c61\u3002 \u5185\u90e8\u5b50\u63a5\u53e3 Modifier.Element\uff1a \u5f53\u6211\u4eec\u4f7f\u7528Modifier.xxx()\u65f6\uff0c\u5176\u5185\u90e8\u5b9e\u9645\u4f1a\u521b\u5efa\u4e00\u4e2a Modifier \u5b9e\u4f8b\u3002\u6211\u4eec\u4ee5 size \u4e3a\u4f8b\u3002\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.size(100.dp) \u65f6\uff0c\u5b9e\u9645\u4e0a\u5185\u90e8\u4f1a\u521b\u5efa\u4e00\u4e2a SizeModifier \u5b9e\u4f8b fun Modifier . size ( size : Dp ) = this . then ( SizeModifier ( ... ) ) \u4ece\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 SizeModifier \u5b9e\u73b0\u4e86LayoutModifier \u63a5\u53e3\uff0c\u800c LayoutModifier \u63a5\u53e3\u53c8\u662f Modifier.Element \u7684\u5b50\u63a5\u53e3\u3002 \u53ef\u4ee5\u8bf4\uff0c\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.xxx() \u6240\u521b\u5efa\u7684\u5404\u7c7b Modifier \u8ffd\u8e2a\u6eaf\u6e90\uff0c\u6700\u540e\u53d1\u73b0\u5176\u5b9e\u90fd\u662f Modifier.Element \u5b50\u7c7b\u3002\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.size() \u6240\u521b\u5efa\u7684 SizeModifier \u5b9e\u9645\u4e0a\u662f Modifier \u63a5\u53e3\u7684\u76f4\u63a5\u5b50\u63a5\u53e3 LayoutModifier \u7684\u5b50\u7c7b\uff0c\u50cf\u8fd9\u7c7b\u76f4\u63a5\u5b50\u63a5\u53e3\u6216\u5b50\u7c7b\u8fd8\u6709\u54ea\u4e9b\u5462\uff0c\u5728\u8fd9\u91cc\u6211\u6574\u7406\u4e86\u4e00\u4e0b\u3002\u5982\u56fe\u6240\u793a\uff0c\u8fd9\u4e9b\u63a5\u53e3\u57fa\u672c\u6db5\u76d6\u4e86 Modifier \u6240\u63d0\u4f9b\u7684\u6240\u6709\u80fd\u529b\u3002 CombinedModifier\uff1a Compose\u5185\u90e8\u7ef4\u62a4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8fde\u63a5 Modifier \u94fe\u4e2d\u7684\u6bcf\u4e2a Modifier \u7ed3\u70b9\uff0c\u540e\u7eed\u4f1a\u8bb2\u5230\u3002","title":"Modifier \u63a5\u53e3"},{"location":"principle/modifier_structure/#modifier_1","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u901a\u8fc7\u5b9e\u4f8b\u6765\u5206\u6790 Modifier \u94fe\u662f\u5982\u4f55\u4e00\u6b65\u6b65\u521b\u5efa\u7684\u3002","title":"Modifier \u94fe\u7684\u6784\u5efa\u8fc7\u7a0b"},{"location":"principle/modifier_structure/#then","text":"\u4e00\u822c\u6211\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7\u4f34\u751f\u5bf9\u8c61 Modifier \u6765\u521b\u5efa Modifier \u94fe\u3002\u524d\u6587\u63d0\u5230\u8fc7\uff0c\u5f53\u6211\u4eec\u4f7f\u7528 Modifier.size() \u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a SizeModifier \u5b9e\u4f8b\u3002\u6211\u4eec\u8fdb\u5165 size() \u5b9e\u73b0\u4f1a\u53d1\u73b0 SizeModifier\u5b9e\u4f8b\u88ab\u5f53\u4f5c\u53c2\u6570\u4f20\u5165 then() \u65b9\u6cd5\u4e2d\u3002\u800c\u8fd9\u4e2a then() \u65b9\u6cd5\u5c31\u662f Modifier \u95f4\u76f8\u4e92\u8fde\u63a5\u7684\u5173\u952e\u65b9\u6cd5\u3002 Modifier . size ( 100. dp ) fun Modifier . size ( size : Dp ) = this . then ( // \u5173\u952e\u65b9\u6cd5 SizeModifier ( ... ) ) \u6b64\u65f6 this \u6307\u9488\u4ecd\u6307\u5411\u7684\u662f\u6211\u4eec\u7684\u4f34\u751f\u5bf9\u8c61 Modifier\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u770b\u4f34\u751f\u5bf9\u8c61 Modifier \u662f\u5982\u4f55\u5b9e\u73b0 then() \u65b9\u6cd5\u7684\u3002 \u53ef\u4ee5\u770b\u5230\u4f34\u751f\u5bf9\u8c61 Modifier \u7684 then() \u65b9\u6cd5\u5b9e\u73b0\u7684\u5341\u5206\u5e72\u8106\uff0c\u76f4\u63a5\u8fd4\u56de\u5f85\u8fde\u63a5\u7684 SizeModifier\u3002 companion object : Modifier { ... override infix fun then ( other : Modifier ): Modifier = other } \u6b64\u65f6Modifier\u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7ee7\u7eed\u8c03\u7528 Modifier.background(Color.Red) \u3002\u7531\u4e8e\u662f\u94fe\u5f0f\u8c03\u7528\uff0c\u6b64\u65f6\u5f53\u524d Modifier \u662f SizeModifier\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8c03\u7528 background \u65f6\uff0c\u5176\u5185\u90e8\u4f7f\u7528\u7684 this \u6307\u9488\u6307\u5411\u7684\u662f SizeModifier \u5b9e\u4f8b\u3002 \u4ece\u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cBackground \u5b9e\u9645\u4e0a DrawModifier \u7684\u5b9e\u73b0\u7c7b\uff0c\u540c\u65f6\u4e5f\u662f Modifier.Element \u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b Modifier . size ( 100. dp ) . background ( Color . Red ) fun Modifier . background ( color : Color , shape : Shape = RectangleShape ) = this . then ( // \u5f53\u524d this \u6307\u5411 SizeModifier \u5b9e\u4f8b Background ( ... ) ) \u6211\u4eec\u5411\u4e0a\u67e5\u627e SizeModifier \u7684 then \u65b9\u6cd5\u5b9e\u73b0\uff0c\u6700\u7ec8\u5728 Modifier \u63a5\u53e3\u4e2d\u627e\u5230\u4e86\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u539f\u6709 SizeModifier \u4f1a\u901a\u8fc7\u4e00\u4e2a CombinedModifier \u8fde\u63a5 Background interface Modifier { infix fun then ( other : Modifier ): Modifier = if ( other === Modifier ) this else CombinedModifier ( this , other ) } class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier \u6b64\u65f6 Modifier \u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b \u6211\u4eec\u901a\u8fc7\u56fe\u7247\u53ef\u4ee5\u76f4\u89c2\u67e5\u770b CombinedModifier \u901a\u8fc7 outer \u4e0e inner \u8fde\u63a5\u4e86\u4e24\u4e2a Modifier\u3002 \u7136\u800c\u503c\u5f97\u6ce8\u610f\u7684\u662f outer \u4e0e inner \u5b57\u6bb5\u90fd\u88ab\u4f7f\u7528 private \u5173\u952e\u5b57\u58f0\u660e\uff0c\u610f\u5473\u7740\u4e0d\u5e0c\u671b\u88ab\u5916\u90e8\u62ff\u5230\u3002 Modifier \u94fe\u65e2\u7136\u4ee5\u94fe\u5f0f\u7ed3\u6784\u5b58\u50a8\uff0c\u5b98\u65b9\u53c8\u4f7f\u7528\u4e86 private \u5173\u952e\u5b57\u58f0\u660e\uff0c\u96be\u9053\u4e0d\u5141\u8bb8\u6211\u4eec\u904d\u5386 Modifier \u94fe\u561b\u3002\u5176\u5b9e\u5b98\u65b9\u65e9\u5c31\u66ff\u6211\u4eec\u60f3\u597d\u4e86\uff0c\u901a\u8fc7 foldOut() \u4e0e foldIn() \uff0c\u6709\u5173\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u8bb2\u5230\u3002 \u6211\u4eec\u7ee7\u7eed\u8c03\u7528 Modifier.padding(10.dp) \uff0c\u6b64\u65f6 padding \u5185\u90e8\u4f7f\u7528\u7684 this \u6307\u9488\u6307\u5411\u7684\u662f CombinedModifier \u5b9e\u4f8b\uff0c\u6211\u4eec\u7ffb\u9605 CombinedModifier \u7684 then \u65b9\u6cd5\u5b9e\u73b0\u53d1\u751f\u6ca1\u6709\u91cd\u5199\uff0c\u6700\u7ec8\u8fd8\u662f\u56de\u5230\u4e86 Modifier \u63a5\u53e3\u4e2d\u3002 \u6b64\u65f6\u5f85\u8fde\u63a5\u7684\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a PaddingModifier \u5b9e\u4f8b\u3002 Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) fun Modifier . padding ( all : Dp ) = this . then ( PaddingModifier ( ... ) ) \u6b64\u65f6Modifier\u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b","title":"then()"},{"location":"principle/modifier_structure/#composed","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u8981\u6dfb\u52a0\u4e00\u4e9b\u624b\u52bf\u76d1\u542c\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528 Modifier.pointerInput() \u6765\u5b9a\u5236\u624b\u52bf\u5904\u7406\u3002\u4ece\u6e90\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6b64\u65f6\u5e76\u6ca1\u6709\u4f7f\u7528 then() \u65b9\u6cd5\u8fde\u63a5 Modifier\uff0c\u800c\u4f7f\u7528\u7684\u662f composed() \u65b9\u6cd5\u3002\u4ece composed() \u5b9e\u73b0\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6700\u7ec8\u4ecd\u7136\u4f7f\u7528\u7684\u662f then() \u65b9\u6cd5\uff0c\u6b64\u65f6\u5f85\u8fde\u63a5\u7684\u662f\u4e2a ComposedModifier \u5b9e\u4f8b\u3002\u7136\u800c\u6211\u4eec\u77e5\u9053\u5176\u5b9e\u6211\u4eec\u771f\u6b63\u8981\u8fde\u63a5\u7684\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u624b\u52bf\u5904\u7406\u76f8\u5173Modifier\uff0c\u901a\u8fc7 composed() \u65b9\u6cd5\u53c2\u6570\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\u6b64\u65f6\u5b9e\u9645\u4e0a ComposedModifier \u5185\u90e8\u6301\u6709\u4e86\u4e00\u4e2a\u5de5\u5382 lambda \u7528\u4e8e\u751f\u4ea7 Modifier \u7684\uff0c\u800c\u771f\u6b63\u8981\u88ab\u8fde\u63a5\u7684 Modifier \u5b9e\u9645\u4e0a\u5c31\u662f\u5de5\u5382 lambda \u7684\u8fd4\u56de\u503c SuspendingPointerInputFilter\u3002SuspendingPointerInputFilter \u5b9e\u9645\u4e0a\u662f PointerInputModifier \u7684\u5b9e\u73b0\u7c7b\u3002\u800c ComposedModifier \u5b9e\u9645\u4e0a\u5c31\u662f\u505a\u4e86\u4e00\u4e2a\u88c5\u7bb1\u8fc7\u7a0b\u3002\u7136\u800c\u4ec0\u4e48\u65f6\u5019\u62c6\u7bb1\u5462\uff1f\u8fd9\u4e2a\u6211\u4eec\u540e\u7eed\u4f1a\u8bb2\u5230\u7684\u3002 Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) . pointerInput ( Unit ) { ... } fun Modifier . pointerInput ( key1 : Any? , block : suspend PointerInputScope .() -> Unit ): Modifier = composed ( // ... ) { ... // SuspendingPointerInputFilter \u662f\u624b\u52bf\u5904\u7406\u7684\u771f\u6b63Modifier remember ( density ) { SuspendingPointerInputFilter ( viewConfiguration , density ) }. apply { ... } } fun Modifier . composed ( inspectorInfo : InspectorInfo .() -> Unit = NoInspectorInfo , factory : @Composable Modifier .() -> Modifier ): Modifier = this . then ( ComposedModifier ( inspectorInfo , factory )) \u6b64\u65f6 Modifier \u94fe\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b \u4ee5\u6b64\u7c7b\u63a8\uff0c\u8c03\u7528\u65b9\u6cd5\u8d8a\u591aModifier \u94fe\u5c31\u4f1a\u53d8\u5f97\u8d8a\u957f\u3002","title":"composed()"},{"location":"principle/modifier_structure/#modifier_2","text":"","title":"Modifier \u94fe\u7684\u904d\u5386"},{"location":"principle/modifier_structure/#foldin-foldout","text":"Modifier \u94fe\u65e2\u7136\u662f\u94fe\u5f0f\u7ed3\u6784\uff0c\u8bf4\u660e\u662f\u53ef\u4ee5\u904d\u5386\u7684\u3002\u7136\u800c\u524d\u6587\u6211\u4eec\u4e5f\u63d0\u5230\u8fc7\uff0c outer \u4e0e inner \u5b57\u6bb5\u90fd\u88ab\u4f7f\u7528 private \u5173\u952e\u5b57\u58f0\u660e\uff0c\u610f\u5473\u7740\u5916\u90e8\u662f\u62ff\u4e0d\u5230\u7684\u3002\u6240\u4ee5\uff0c\u5b98\u65b9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 foldOut() \u4e0e foldIn() \u4e13\u95e8\u7528\u6765\u904d\u5386 Modifier \u94fe\u3002 Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) . pointerInput ( Unit ) { ... } foldIn()\uff1a \u6b63\u5411\u904d\u5386 Modifier \u94fe\uff0cSizeModifier-> Background -> PaddingModifier -> ComposedModifier foldOut()\uff1a \u53cd\u5411\u904d\u5386 Modifier \u94fe, ComposedModifier -> PaddingModifier -> Background ->SizeModifier \u5f53\u7136 foldOut() \u4e0e foldIn() \u662f\u9700\u8981\u4f20\u9012\u53c2\u6570\u7684\u3002\u8fd9\u91cc\u6d89\u53ca\u5230\u4e24\u4e2a\u53c2\u6570 initial, operation\u3002 fun < R > foldIn ( initial : R , operation : ( R , Element ) -> R ): R fun < R > foldOut ( initial : R , operation : ( Element , R ) -> R ): R initial\uff1a\u521d\u59cb\u503c operation\uff1a\u6bcf\u904d\u5386\u5230\u4e00\u4e2a Modifier \u65f6\u7684\u56de\u8c03\uff0c\u8fd9\u4e2a lambda \u53c8\u6709\u4e24\u4e2a\u53c2\u6570\uff0cR\u7c7b\u578b\u4e0e Element\u7c7b\u578b \u4e3a\u89e3\u91ca\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u610f\u4e49\uff0c\u6211\u89c9\u5f97\u7528 for \u5faa\u73af\u7c7b\u6bd4\u6bd4\u8f83\u6070\u5f53\u3002 foldIn \u65b9\u6cd5\u7c7b\u4f3c\u4e8e for (int i = initial; ; operation()) \u3002 \u8bbe\u7f6e initial \u53c2\u6570\u7c7b\u4f3c\u4e3a i \u8bbe\u7f6e\u521d\u59cb\u503c\uff0c\u800c operation \u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u503c\u7684\u66f4\u65b0\u3002 foldOut \u65b9\u6cd5\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u904d\u5386\u987a\u5e8f\u76f8\u53cd\u3002 \u4e5f\u5c31\u662f\u8bf4\u904d\u5386\u5f53\u524d Modifier \u65f6\u6267\u884c\u7684operation \u7684\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u94fe\u4e2d\u4e0b\u4e00\u4e2a Modifier \u7684 operation \u7684 R \u7c7b\u578b\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u4e48\u8bf4\u53ef\u80fd\u6bd4\u8f83\u6666\u6da9\u96be\u61c2\uff0c\u5728\u8fd9\u91cc\u7b80\u5355\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u5e0c\u671b\u7edf\u8ba1 Modifier \u94fe\u4e2d\u6709 Modifier \u7684\u6570\u91cf\u3002 val modifier = Modifier . size ( 100. dp ) . background ( Color . Red ) . padding ( 10. dp ) . pointerInput ( Unit ) { } val result = modifier . foldIn < Int > ( 0 ) { currentIndex , element -> Log . d ( \"compose_study\" , \"index: $ currentIndex , element : $ element \" ) currentIndex + 1 } foldOut \u65b9\u6cd5\u7684\u65b9\u6cd5\u4e5f\u662f\u7c7b\u4f3c\uff0c\u5927\u5bb6\u90fd\u7b80\u5355\u7406\u89e3\u4e3a\u53cd\u5411\u904d\u5386 Modifier \u94fe\u5373\u53ef\u3002 \u5230\u8fd9\u91cc\u5927\u5bb6\u53ef\u80fd\u5fc3\u751f\u7591\u95ee\uff0c\u6211\u4eec\u524d\u9762\u6240\u8bb2\u7684 Modifier \u94fe\u4e2d\u4e0d\u4ec5\u4ec5\u53ea\u6709 Modifier.Element\uff0c\u5176\u4e2d\u8fd8\u5939\u6742\u7740\u8bb8\u591a CombinedModifier\u3002\u4e3a\u4ec0\u4e48\u6211\u4eec\u904d\u5386 Modifier \u94fe\u65f6\u8fd9\u4e9b CombinedModifier \u6ca1\u6709\u51fa\u73b0\u5462\uff1f\u539f\u56e0\u5728\u4e8eCombinedModifier \u5b9e\u9645\u4e0a\u662f Compose \u5185\u90e8\u7ef4\u62a4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b98\u65b9\u5982\u6b64\u8bbe\u8ba1\u662f\u5e0c\u671b\u5bf9\u4e0a\u5c42\u5f00\u53d1\u8005\u65e0\u611f\u77e5\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u4f7f\u7528\u5c31\u8bf4\u8fd9\u4e48\u591a\uff0c\u5982\u679c\u4f60\u5bf9\u5176\u5185\u90e8\u5b9e\u73b0\u539f\u7406\u611f\u5174\u8da3\u5c31\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4e0b\u53bb\uff5e","title":"foldIn() \u4e0e foldOut() \u7528\u6cd5"},{"location":"principle/modifier_structure/#foldin-foldout_1","text":"\u4e3a\u63a2\u7d22\u539f\u7406\uff0c\u8001\u89c4\u77e9\u6211\u4eec\u5c31\u9700\u8981\u8fdb\u5165\u6e90\u7801\u4e00\u63a2\u7a76\u7adf\u4e86\u3002\u6211\u4eec\u4e0a\u6765\u8981\u505a\u7684\u5c31\u662f\u627e\u5230 foldIn() \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002\u901a\u8fc7\u524d\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\uff0c\u5f53 Modifier \u94fe\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 2 \u65f6\uff0c\u8fd4\u56de\u7684 Modifier \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a CombinedModifier \u5b9e\u4f8b\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u770b\u770b ConbinedModifier \u91cc\u9762\u662f\u600e\u4e48\u91cd\u5199\u7684 foldIn() \u65b9\u6cd5\u3002 class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier { ... override fun < R > foldIn ( initial : R , operation : ( R , Modifier . Element ) -> R ): R = inner . foldIn ( outer . foldIn ( initial , operation ), operation ) } \u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165\u7684\u662f outer.foldIn(initial. operation) \u7684\u8fd4\u56de\u503c\uff0c\u7ecf\u8fc7\u4e00\u8def\u9012\u5f52\u5411\u4e0a\u5373\u53ef\u5230\u8fbe\u6700\u9876\u90e8\u7684outer Modifier\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8bbe\u7f6e\u7684\u521d\u59cb\u503c\u4e5f\u8ddf\u968fouter\u4e00\u8def\u900f\u4f20\u4e0a\u53bb\u4e86\u3002 \u6839\u636e Modifier \u94fe\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\u6700\u9876\u90e8\u7684outer Modifier\u4e00\u5b9a\u662f\u4e2a Modifier.Element\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u8981\u770b\u770b Modifier.Element \u662f\u600e\u4e48\u91cd\u5199\u7684 foldIn() \u65b9\u6cd5\u4e86\u3002\u901a\u8fc7\u6e90\u7801\u6211\u4eec\u770b\u5230\u76f4\u63a5\u8c03\u7528\u4e86\u6211\u4eec\u4f20\u5165\u7684lambda\uff0c\u5e76\u5c06 lambda \u8fd4\u56de\u503c\u4f5c\u4e3a foldIn() \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u3002 interface Element : Modifier { ... override fun < R > foldIn ( initial : R , operation : ( R , Element ) -> R ): R = operation ( initial , this ) } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u9000\u5230\u4e86\u4e0a\u4e00\u5c42 CombinedModifier\uff0c\u63a5\u4e0b\u91cc\u6211\u4eec\u518d\u770b\u770b\u4ed6\u662f\u600e\u4e48\u505a\u7684\u3002\u7d27\u63a5\u7740\u8c03\u7528\u4e86 inner.foldIn() class CombinedModifier ( private val outer : Modifier , private val inner : Modifier ) : Modifier { ... override fun < R > foldIn ( initial : R , operation : ( R , Modifier . Element ) -> R ): R = inner . foldIn ( outer . foldIn ( initial , operation ), operation ) } \u6211\u4eec\u4e0d\u59a8\u770b\u770b\u5f53\u524d\u573a\u666f\u4e0b\u7684\u56fe\u793a\u3002 \u6574\u4e2a\u6d41\u7a0b\u5c31\u975e\u5e38\u6e05\u6670\u4e86\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a inner Modifier \u88ab\u904d\u5386\u540e\u4fbf\u4f1a\u5c06 lambda \u7ed3\u679c\u8fd4\u56de\u7ed9\u5f00\u53d1\u8005\u3002\u901a\u8fc7\u6d41\u7a0b\u7684\u89e3\u8bfb\uff0c\u6211\u4eec\u53ef\u77e5\u4e4b\u6240\u4ee5\u6211\u4eec\u7684\u4fbf\u5229\u8fc7\u7a0b\u6ca1\u6709 CombindedModifier\uff0c\u662f\u56e0\u4e3a CombinedModifier \u867d\u91cd\u5199\u4e86 foldIn()\u65b9\u6cd5 \uff0c\u4f46\u5e76\u6ca1\u6709\u8c03\u7528\u6211\u4eec\u4f20\u5165\u7684lambda\u3002\u800c\u53ea\u6709\u6240\u6709 Modifier.Element \u624d\u4f1a\u8c03\u7528\u6211\u4eec\u4f20\u5165\u7684 lambda\u3002 \u7406\u89e3\u4e86 foldIn() \u65b9\u6cd5 \u7684\u5b9e\u73b0\u539f\u7406\uff0c foldOut() \u65b9\u6cd5 \u7684\u5b9e\u73b0\u539f\u7406\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u662f\u904d\u5386\u987a\u5e8f\u662f\u5b8c\u5168\u76f8\u53cd\u7684\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u52a0\u8d58\u8ff0\u4e86\u3002","title":"foldIn() \u4e0e foldOut() \u5b9e\u73b0\u539f\u7406"},{"location":"principle/modifier_structure/#foldin-foldout_2","text":"\u5f04\u61c2\u4e86\u5b9e\u73b0\u539f\u7406\u540e\uff0c\u6211\u4eec\u5c31\u6765\u770b\u770b\u8be5\u600e\u4e48\u7528\u3002Compose \u6e90\u7801\u4e2d\u5c06\u6211\u4eec\u6240\u521b\u5efa\u7684 Modifier \u4f20\u5165 Layout \u7684\u8fc7\u7a0b\u5c31\u662f\u5bf9 foldIn() \u65b9\u6cd5 \u4e0e foldOut() \u65b9\u6cd5 \u7684\u4e00\u6b21\u6700\u4f73\u5b9e\u8df5\u3002 \u6211\u4eec\u77e5\u9053 Compose \u7ec4\u4ef6\u90fd\u662f\u57fa\u4e8e Layout \u8fd9\u4e2a\u57fa\u7840\u7ec4\u4ef6\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u521b\u5efa\u7684 Modifier \u5728\u5176\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u4f20\u9012\u7684\u3002\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684 modifier \u4f20\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a materializerOf \u65b9\u6cd5 @Composable inline fun Layout ( content : @Composable () -> Unit , modifier : Modifier = Modifier , measurePolicy : MeasurePolicy ) { ... ReusableComposeNode < ComposeUiNode , Applier < Any >> ( factory = ..., update = { ... }, skippableUpdate = materializerOf ( modifier ), // \u91cd\u70b9 content = ... ) } \u7ee7\u7eed\u8ddf\u8fdb\uff0c\u6211\u4eec\u4f1a\u8d70\u8fdb Composer.materialize()\u3002\u53ef\u4ee5\u53d1\u73b0\u6e90\u7801\u4e2d\u4f7f\u7528\u4e86 fouldIn() \u65b9\u6cd5 \u3002 \u5728\u5176\u4e2d\u6211\u4eec\u770b\u5230\u4e86\u5bf9\u4e8e ComposedModifier \u7684\u7279\u6b8a\u5224\u65ad\u3002\u8fd8\u8bb0\u5f97 composed() \u8fd4\u56de\u7684 ComposedModifier \u561b\u3002\u6839\u636e\u524d\u6587\u6211\u4eec\u53ef\u77e5\uff0c\u6211\u4eec\u6b63\u5e38\u5f97\u5230\u7684 Modifier \u94fe\u5176\u4e2d\u662f\u53ef\u80fd\u5305\u542b ComposedModifier\u7684\uff0c\u800c\u8fd9\u91cc\u60f3\u505a\u7684\u662f\u5c06 Modifier \u94fe\u4e2d\u7684\u6240\u6709 ComposedModifier \u644a\u5e73\uff0c\u8ba9\u5176 factory \u5185\u90e8\u4ea7\u751f\u7684 Modifier \u4e5f\u80fd\u52a0\u5165\u5230 Modifier \u94fe\u4e2d\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86 fouldIn() \u65b9\u6cd5 \u8fdb\u884c\u4e86\u6b63\u5411\u904d\u5386\uff0c\u4f20\u5165\u7684\u521d\u59cb\u503c\u4e3a Modifier\u3002\u5f53\u904d\u5386\u5230 ComposedModifier \u65f6\uff0c\u5219\u4f7f\u7528\u5176\u5185\u90e8\u7684 factory \u6765\u751f\u4ea7 Modifier\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u751f\u6210\u7684 Modifier \u53ef\u80fd\u4e5f\u662f Modifier \u94fe\u6216\u5355\u4e2a Modifier\u3002\u751f\u6210\u7684 Modifier \u5176\u4e2d\u4e5f\u53ef\u80fd\u4f1a\u5305\u542b ComposedModifier\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u8fdb\u884c\u4e86\u9012\u5f52\u5904\u7406\u3002\u6700\u7ec8\u76ee\u6807\u5c31\u662f\u6240\u5f97\u5230\u7684 Modifier \u94fe\u4e2d\u662f\u4e0d\u5305\u542b ComposedModifier \u7ed3\u70b9\u7684\uff0c\u5373\u5b8c\u5168\u644a\u5f00\u7684 Modifier \u94fe\u3002 fun Composer . materialize ( modifier : Modifier ): Modifier { ... val result = modifier . foldIn < Modifier > ( Modifier ) { acc , element -> acc . then ( if ( element is ComposedModifier ) { @kotlin.Suppress ( \"UNCHECKED_CAST\" ) val factory = element . factory as Modifier .( Composer , Int ) -> Modifier val composedMod = factory ( Modifier , this , 0 ) // \u751f\u4ea7 Modifier materialize ( composedMod ) // \u751f\u6210\u51fa\u7684 Modifier \u53ef\u80fd\u4e5f\u5305\u542b ComposedModifier\uff0c\u9012\u5f52\u5904\u7406 } else element ) } ... return result } Modifier \u94fe\u540e\u7eed\u8fd8\u4f1a\u4f7f\u7528 foldOut\u65b9\u6cd5 \u8fdb\u884c\u904d\u5386\u4ece\u800c\u751f\u6210 LayoutNodeWrapper \u94fe\uff0c\u4e86\u89e3 Modifier \u94fe\u7684\u672c\u8d28\u5c06\u6709\u52a9\u4e8e\u7406\u89e3 Jetpack Compose \u6e90\u7801\u4e2d\u6d4b\u91cf\u5e03\u5c40\u6d41\u7a0b\uff0c\u611f\u5174\u8da3\u5c0f\u4f19\u4f34\u53ef\u4ee5\u62d3\u5c55\u9605\u8bfb\u6587\u7ae0 \u300aJetpack Compose \u6d4b\u91cf\u6d41\u7a0b\u6e90\u7801\u5206\u6790\u300b","title":"foldIn() \u4e0e foldOut() \u7684\u5e94\u7528"},{"location":"principle/modifier_structure/#_1","text":"\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u5c31\u662f\u5e26\u9886\u5927\u5bb6\u5bf9 Modifier \u94fe\u80cc\u540e\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u6267\u884c\u903b\u8f91\u8fdb\u884c\u5206\u6790\uff0c\u4f7f\u5927\u5bb6\u5bf9\u4e8e Modifier \u94fe\u7684\u672c\u8d28\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u8ba4\u8bc6\u3002\u5f04\u6e05\u695a\u4e86 Modifier \u94fe\u7684\u672c\u8d28\u4ee5\u540e\uff0c\u4ee5\u540e\u4f7f\u7528 Modifier \u51fa\u73b0\u95ee\u9898\u65f6\u5c31\u5bb9\u6613\u8fdb\u884c\u6392\u67e5\u4e86\u3002\u603b\u4e4b\u5bf9\u672c\u8d28\u4e86\u89e3\u7684\u8d8a\u591a\uff0c\u4f7f\u7528\u8d77\u6765\u5c31\u8d8a\u987a\u624b\uff01","title":"\u603b\u7ed3"},{"location":"principle/recompose_working_principle/","text":"\u6211\u4eec\u90fd\u77e5\u9053 Jetpack Compose \u662f\u4e00\u5957\u58f0\u660e\u5f0f UI \u7cfb\u7edf\uff0c\u5f53 UI \u7ec4\u4ef6\u6240\u4f9d\u8d56\u7684\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u4f1a\u81ea\u52a8\u53d1\u751f\u91cd\u7ed8\u5237\u65b0\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u5b98\u65b9\u79f0\u4f5c \u91cd\u7ec4 \uff0c\u524d\u9762\u5df2\u7ecf\u603b\u7ed3\u8fc7 Compose \u7684\u91cd\u7ec4\u8303\u56f4 \uff0c\u4ee5\u53ca \u91cd\u7ec4\u8fc7\u7a0b\u4f7f\u7528\u7684Snapshot \u3002\u672c\u6587\u5c06\u5e26\u9886\u5927\u5bb6\u6765\u770b\u770b Compose \u6e90\u7801\u4e2d\u4ece\u72b6\u6001\u66f4\u65b0\u5230 recompose \u8fc7\u7a0b\u5728\u6e90\u7801\u4e2d\u662f\u5982\u4f55\u8fdb\u884c\u7684\uff0c\u5e76\u4e14\u8bb2\u89e3\u5feb\u7167\u7cfb\u7edf\u5728 recompose \u8fc7\u7a0b\u4e2d\u5982\u4f55\u88ab\u4f7f\u7528\u5230\u7684\u3002 \u610f\u4e49 \u672c\u6587\u901a\u8fc7\u9605\u8bfb\u6e90\u7801\u6765\u89e3\u8bfb recompose \u6d41\u7a0b\uff0c\u9605\u8bfb\u6e90\u7801\u5176\u5b9e\u662f\u4e00\u4e2a\u975e\u5e38\u67af\u71e5\u7684\u8fc7\u7a0b\uff0c\u6e90\u7801\u4e2d\u5b58\u5728\u7740\u5927\u91cf\u903b\u8f91\u5206\u652f\u5bfc\u81f4\u8bb8\u591a\u4eba\u770b\u7740\u770b\u7740\u5c31\u88ab\u7ed5\u6655\u4e86\u3002\u672c\u6587\u5254\u9664\u4e86\u6240\u6709\u4e0e\u4e3b\u7ebf\u6d41\u7a0b\u65e0\u5173\u7684\u903b\u8f91\u5206\u652f\uff0c\u5e76\u7ed3\u5408\u914d\u56fe\u8fdb\u884c\u903b\u8f91\u8868\u8fbe\uff0c\u5e0c\u671b\u80fd\u591f\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3 recompose \u5de5\u4f5c\u539f\u7406\u3002\u901a\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u5bf9 recompose\u5de5\u4f5c\u539f\u7406\u4ea7\u751f\u4e00\u79cd\u611f\u6027\u8ba4\u77e5\uff0c\u5e76\u5728\u672c\u6587\u7684\u57fa\u7840\u4e0a\u80fd\u591f\u7ee7\u7eed\u6df1\u5165\u63a2\u7d22recompose\u6d41\u7a0b\u4e2d\u7684\u5404\u79cd\u6280\u672f\u7ec6\u8282\u3002 \u26a0\ufe0f Tips\uff1a\u7531\u4e8e recompose \u6d41\u7a0b\u5341\u5206\u590d\u6742\uff0c\u672c\u6587\u76ee\u524d\u4ec5\u5bf9 recompose \u4e3b\u7ebf\u6d41\u7a0b\u8fdb\u884c\u4e86\u63cf\u8ff0\uff0c\u5176\u4e2d\u5305\u542b\u7684\u8bb8\u591a\u6280\u672f\u7ec6\u8282\u6ca1\u6709\u6df1\u6316\u3002\u7531\u4e8e\u672c\u4eba\u91c7\u7528\u52a8\u9759\u7ed3\u5408\u65b9\u5f0f\u8fdb\u884c\u6e90\u7801\u5206\u6790\uff0c\u96be\u514d\u51fa\u73b0\u6709\u4e9bcase\u6d41\u7a0b\u6ca1\u6709\u8986\u76d6\u5230\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6587\u7ae0\u5b58\u5728\u9519\u8bef\u6b22\u8fce\u63d0\u51fa\u3002 recompose \u6d41\u7a0b\u5206\u6790 \u4ece MutableState \u66f4\u65b0\u5f00\u59cb \u5f53\u4f60\u4e3a MutableState \u8d4b\u503c\u65f6\u5c06\u4f1a\u9ed8\u8ba4\u8c03\u7528 MutableState \u7684\u6269\u5c55\u65b9\u6cd5 MutableState.setValue // androidx.compose.runtime.SnapshotState inline operator fun < T > MutableState < T > . setValue ( thisObj : Any? , property : KProperty <*> , value : T ) { this . value = value } \u901a\u8fc7\u67e5\u770b mutableStateOf \u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 MutableState \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a SnapshotMutableStateImpl \u7c7b\u578b\u5b9e\u4f8b // androidx.compose.runtime.SnapshotState fun < T > mutableStateOf ( value : T , policy : SnapshotMutationPolicy < T > = structuralEqualityPolicy () ): MutableState < T > = createSnapshotMutableState ( value , policy ) // androidx.compose.runtime.ActualAndroid.android internal actual fun < T > createSnapshotMutableState ( value : T , policy : SnapshotMutationPolicy < T > ): SnapshotMutableState < T > = ParcelableSnapshotMutableState ( value , policy ) // androidx.compose.runtime.ParcelableSnapshotMutableState internal class ParcelableSnapshotMutableState < T > ( value : T , policy : SnapshotMutationPolicy < T > ) : SnapshotMutableStateImpl < T > ( value , policy ), Parcelable \u5f53 value \u5c5e\u6027\u53d1\u751f\u6539\u53d8\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e2a\u5c5e\u6027\u7684 setter \uff0c\u5f53\u7136\u5982\u679c\u8bfb\u53d6\u72b6\u6001\u65f6\u4e5f\u4f1a\u8d70 getter\u3002 \u6b64\u65f6\u7684next\u662f\u4e2a StateStateRecord \u5b9e\u4f8b\uff0c\u5176\u771f\u6b63\u8bb0\u5f55\u7740\u5f53\u524dstate\u72b6\u6001\u4fe1\u606f(\u901a\u8fc7\u5f53\u524dvalue\u7684getter\u4e0esetter\u5c31\u53ef\u4ee5\u770b\u51fa)\u3002\u6b64\u65f6\u9996\u5148\u4f1a\u5bf9\u5f53\u524d\u503c\u548c\u8981\u66f4\u65b0\u7684\u503c\u6839\u636e\u89c4\u5219\u8fdb\u884cdiff\u5224\u65ad\u3002\u5f53\u786e\u5b9a\u53d1\u751f\u6539\u53d8\u65f6\u4f1a\u8c03\u7528\u5230 StateStateRecord \u7684 overwritable \u65b9\u6cd5\u3002 // androidx.compose.runtime.SnapshotState internal open class SnapshotMutableStateImpl < T > ( value : T , override val policy : SnapshotMutationPolicy < T > ) : StateObject , SnapshotMutableState < T > { @Suppress ( \"UNCHECKED_CAST\" ) override var value : T get () = next . readable ( this ). value set ( value ) = next . withCurrent { if ( ! policy . equivalent ( it . value , value )) { // \u6b64\u65f6\u7684this\u8fd8\u662f\u5f53\u524dSnapshotMutableStateImpl next . overwritable ( this , it ) { this . value = value // \u6b64\u65f6\u7684this\u6307\u5411\u7684next\uff0c\u8fd9\u90e8\u64cd\u4f5c\u4e5f\u5c31\u662f\u66f4\u65b0next\u5176\u4e2d\u7684value } } } ... private var next : StateStateRecord < T > = StateStateRecord ( value ) } \u63a5\u4e0b\u6765\u4f1a\u901a\u8fc7 Snapshot.current \u83b7\u53d6\u5f53\u524d\u4e0a\u4e0b\u6587\u4e2d\u7684 Snapshot\uff0c\u5982\u679c\u4f60\u5bf9 mutableState \u66f4\u65b0\u64cd\u4f5c\u5728\u5f02\u6b65\u6267\u884c\u4ee3\u7801\u5757\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u77e5\u9053 Snapshot \u662f\u4e00\u4e2a ThreadLocal \u6b64\u65f6\u4f1a\u8fd4\u56de\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684 Snapshot\uff0c\u5f53\u82e5\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684 Snapshot \u4e3a\u7a7a\u65f6\u9ed8\u8ba4\u8fd4\u56de GlobalSnapshot \uff0c\u5982\u679c\u4f60\u5bf9 mutableState \u66f4\u65b0\u64cd\u4f5c\u76f4\u63a5\u5728 Composable \u4e2d\uff0c\u5f53\u524d Composable \u6267\u884c\u7ebf\u7a0b\u7684 Snapshot \u5c31\u662f MutableSnapshot \u3002\u8fd9\u5c06\u4f1a\u5f71\u54cd\u5230\u540e\u7eed recompose \u7684\u6267\u884c\u6d41\u7a0b\u3002 \u26a0\ufe0f Tips\uff1aGlobalSnapshot \u5b9e\u9645\u4e0a\u662f MutableSnapShot \u7684\u5b50\u7c7b // androidx.compose.runtime.snapshots.Snapshot internal inline fun < T : StateRecord , R > T . overwritable ( state : StateObject , candidate : T , block : T .() -> R ): R { var snapshot : Snapshot = snapshotInitializer return sync { snapshot = Snapshot . current this . overwritableRecord ( state , snapshot , candidate ). block () // \u66f4\u65b0 next }. also { notifyWrite ( snapshot , state ) // \u5199\u5165\u901a\u77e5 } } \u6211\u4eec\u8fdb\u5165 overwritableRecord \u770b\u770b\u5176\u4e2d\u505a\u4e86\u4ec0\u4e48\uff0c\u6ce8\u610f\u6b64\u65f6 state \u5176\u5b9e\u662f mutableState\u3002\u5728\u8fd9\u5176\u4e2d\u901a\u8fc7 recordModified \u65b9\u6cd5\u8bb0\u5f55\u4e86\u4fee\u6539\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u5c06\u5f53\u524d\u4fee\u6539\u7684 state \u6dfb\u52a0\u5230\u5f53\u524d Snapshot \u7684 modified \u4e2d\u4e86\uff0c\u8fd9\u4e2a\u540e\u7eed\u4f1a\u7528\u5230\u7684\u3002 // androidx.compose.runtime.snapshots.Snapshot internal fun < T : StateRecord > T . overwritableRecord ( state : StateObject , snapshot : Snapshot , candidate : T ): T { if ( snapshot . readOnly ) { snapshot . recordModified ( state ) } val id = snapshot . id if ( candidate . snapshotId == id ) return candidate val newData = newOverwritableRecord ( state , snapshot ) newData . snapshotId = id snapshot . recordModified ( state ) // \u8bb0\u5f55\u4fee\u6539 return newData } // androidx.compose.runtime.snapshots.Snapshot override fun recordModified ( state : StateObject ) { ( modified ?: HashSet < StateObject > (). also { modified = it }). add ( state ) } \u53ef\u80fd\u4f60\u5bf9 mutableState \u66f4\u65b0\u64cd\u4f5c\u662f\u5426\u5728 ComposeScope \u4e2d\u800c\u611f\u5230\u56f0\u60d1\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u5176\u5b9e\u5c31\u660e\u767d\u4e86\u3002recompose \u80fd\u591f\u6267\u884c\u5230\u5c31\u5728 ComposeScope \u4e2d\uff0c\u4e0d\u80fd\u6267\u884c\u5230\u5c31\u4e0d\u5728 ComposeScope \u4e2d\u3002 \u8fd9\u4e2a\u5728\u540e\u9762 takeMutableSnapshot\u8bfb\u89c2\u5bdf\u8005\u4e0e\u5199\u89c2\u5bdf\u8005 \u90e8\u5206\u662f\u4f1a\u8fdb\u884c\u89e3\u91ca\u3002 var display by mutableStateOf ( \"Init\" ) @Preview @Composable fun Demo () { Text ( text = display , fontSize = 50. sp , modifier = Modifier . clickable { display = \"change\" // recompose\u4e0d\u80fd\u6267\u884c\u5230\uff0c\u6b64\u65f6\u662f GlobalSnapshot } ) display = \"change\" // recompose\u80fd\u591f\u6267\u884c\u5230\uff0c\u6b64\u65f6\u662f MutableSnapShot } \u63a5\u4e0b\u6765\u5c31\u662f\u901a\u8fc7 notifyWrite \u6267\u884c\u4e8b\u4ef6\u901a\u77e5\u6b64\u65f6\u53ef\u4ee5\u770b\u5230\u8c03\u7528\u4e86\u5199\u89c2\u5bdf\u8005 writeObserver \u3002 // androidx.compose.runtime.snapshots.Snapshot @PublishedApi internal fun notifyWrite ( snapshot : Snapshot , state : StateObject ) { snapshot . writeObserver ?. invoke ( state ) } \u6b64\u65f6\u4f1a\u6839\u636e\u5f53\u524d Snapshot \u4e0d\u540c\u800c\u8c03\u7528\u5230\u4e0d\u540c\u7684\u5199\u89c2\u5bdf\u8005 writeObserver \u3002 GlobalSnapshot \u5199\u5165\u901a\u77e5 \u5168\u5c40\u7684\u5199\u5165\u89c2\u5bdf\u8005\u662f\u5728 setContent \u65f6\u5c31\u8fdb\u884c\u4e86\u6ce8\u518c\uff0c \u6b64\u65f6\u4f1a\u56de\u8c03 registerGlobalWriteObserver \u7684\u5c3elambda\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u5c31\u4e00\u4e2achannel (\u6ca1\u9519\u5c31\u662fKotlin\u534f\u7a0b\u90a3\u4e2a\u70ed\u6570\u636e\u901a\u9053Channel)\uff0c\u6211\u95e8\u53ef\u4ee5\u770b\u5230\u5f88\u5bb9\u6613\u770b\u5230\u5728\u4e0a\u65b9\u4ee5AndroidUiDispatcher.Main \u4f5c\u4e3a\u8c03\u5ea6\u5668\u7684 CoroutineScope \u4e2d\u8fdb\u884c\u4e86\u6302\u8d77\u7b49\u5f85\u6d88\u8d39\uff0c\u6240\u4ee5\u6267\u884c\u6d41\u7a0b\u81ea\u7136\u4f1a\u8fdb\u5230\u4e86 sendApplyNotifications() \u3002 \uff08AndroidUiDispatcher.Main \u4e0e Choreographer \u606f\u606f\u76f8\u5173\uff0c\u7bc7\u5e45\u6709\u9650\u5c31\u4e0d\u5c55\u5f00\u8ba8\u8bba\u4e86\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u81ea\u5df1\u53bb\u8ddf\u6e90\u7801\uff09 internal object GlobalSnapshotManager { private val started = AtomicBoolean ( false ) fun ensureStarted () { if ( started . compareAndSet ( false , true )) { val channel = Channel < Unit > ( Channel . CONFLATED ) CoroutineScope ( AndroidUiDispatcher . Main ). launch { channel . consumeEach { Snapshot . sendApplyNotifications () } } Snapshot . registerGlobalWriteObserver { channel . offer ( Unit ) } } } } sendApplyNotifications \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fdb\u5165 sendApplyNotifications() \u5176\u4e2d\u770b\u770b\u505a\u4e86\u4ec0\u4e48\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u4f7f\u7528\u6211\u4eec\u524d\u9762\u63d0\u5230\u7684\u90a3\u4e2a modified \uff0c\u5f53\u53d1\u751f\u4fee\u6539\u65f6 changes \u5fc5\u7136\u4e3a true\uff0c\u6240\u4ee5\u63a5\u7740\u4f1a\u8c03\u7528\u5230 advanceGlobalSnapshot // androidx.compose.runtime.snapshots.Snapshot fun sendApplyNotifications () { val changes = sync { currentGlobalSnapshot . get (). modified ?. isNotEmpty () == true } if ( changes ) advanceGlobalSnapshot () } \u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u8ddf\u4e0b\u53bb\u8d70\u5230\u4e86 advanceGlobalSnapshot \uff0c\u6b64\u65f6\u5c06\u6240\u6709 modified \u53d6\u51fa\u5e76\u4fbf\u5229\u8c03\u7528 applyObservers \u4e2d\u5305\u542b\u7684\u6240\u6709\u89c2\u5bdf\u8005\u3002 // androidx.compose.runtime.snapshots.Snapshot private fun advanceGlobalSnapshot () = advanceGlobalSnapshot { } private fun < T > advanceGlobalSnapshot ( block : ( invalid : SnapshotIdSet ) -> T ): T { val previousGlobalSnapshot = currentGlobalSnapshot . get () val result = sync { takeNewGlobalSnapshot ( previousGlobalSnapshot , block ) } val modified = previousGlobalSnapshot . modified if ( modified != null ) { val observers : List < ( Set < Any > , Snapshot ) -> Unit > = sync { applyObservers . toMutableList () } observers . fastForEach { observer -> observer ( modified , previousGlobalSnapshot ) } } .... return result } applyObservers\u4e4brecompositionRunne \u636e\u6211\u8c03\u67e5\u6b64\u65f6 applyObservers \u4e2d\u5305\u542b\u7684\u89c2\u5bdf\u8005\u4ec5\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f SnapshotStateObserver.applyObserver \u7528\u6765\u66f4\u65b0\u5feb\u7167\u72b6\u6001\u4fe1\u606f\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f recompositionRunner \u7528\u6765\u5904\u7406 recompose\u6d41\u7a0b \u7684\u3002\u7531\u4e8e\u6211\u4eec\u662f\u5728\u7814\u7a76recompose \u6d41\u7a0b\u7684\u6240\u4ee5\u5c31\u4e0d\u5206\u5f00\u53bb\u8ba8\u8bba\u4e86\u3002\u6211\u4eec\u6765\u770b\u770b\u5904\u7406 recompose \u7684 observer \u90fd\u505a\u4e86\u4ec0\u4e48\uff0c\u9996\u5148\u4ed6\u5c06\u6240\u6709\u6539\u53d8\u7684 mutableState \u6dfb\u52a0\u5230\u4e86 snapshotInvalidations \uff0c\u8fd9\u4e2a\u540e\u7eed\u4f1a\u7528\u5230\u3002\u540e\u9762\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2aresume\uff0c\u8bf4\u660elambda\u7684\u6700\u540e\u8c03\u7528\u7684 deriveStateLocked \u8fd4\u56de\u4e86\u4e00\u4e2a\u534f\u7a0b Continuation \u5b9e\u4f8b\u3002\u4f7f\u5f97\u6302\u8d77\u70b9\u4f4d\u7f6e\u6062\u590d\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u8fdb\u5165 deriveStateLocked \u770b\u770b\u8fd9\u4e2a\u534f\u7a0b Continuation \u5b9e\u4f8b\u5230\u5e95\u662f\u8c01\u3002 // androidx.compose.runtime.Recomposer @OptIn ( ExperimentalComposeApi :: class ) private suspend fun recompositionRunner ( block : suspend CoroutineScope .( parentFrameClock : MonotonicFrameClock ) -> Unit ) { withContext ( broadcastFrameClock ) { ... // \u8d1f\u8d23\u5904\u7406 recompose \u7684 observer \u5c31\u662f\u4ed6 val unregisterApplyObserver = Snapshot . registerApplyObserver { changed , _ -> synchronized ( stateLock ) { if ( _state . value >= State . Idle ) { snapshotInvalidations += changed deriveStateLocked () } else null } ?. resume ( Unit ) } .... } } \u901a\u8fc7\u51fd\u6570\u8fd4\u56de\u503c\u53ef\u4ee5\u770b\u5230\u8fd9\u662f\u4e00\u4e2a\u53ef\u53d6\u6d88\u7684Continuation\u5b9e\u4f8b workContinuation \uff0c // androidx.compose.runtime.Recomposer private fun deriveStateLocked (): CancellableContinuation < Unit >? { .... return if ( newState == State . PendingWork ) { workContinuation . also { workContinuation = null } } else null } \u90a3\u8fd9\u4e2aworkContinuation\u662f\u5728\u54ea\u91cc\u8d4b\u503c\u7684\u5462\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u627e\u5230\u4e86\u5176\u552f\u4e00\u88ab\u8d4b\u503c\u7684\u5730\u65b9\u3002\u6b64\u65f6 workContinuation \u5c31\u662f co\uff0c\u6b64\u65f6resume\u4e5f\u5c31\u662f\u6062\u590d\u6267\u884c awaitWorkAvailable \u8c03\u7528\u6302\u8d77\u70b9\u3002 // androidx.compose.runtime.Recomposer private suspend fun awaitWorkAvailable () { if ( ! hasSchedulingWork ) { suspendCancellableCoroutine < Unit > { co -> synchronized ( stateLock ) { if ( hasSchedulingWork ) { co . resume ( Unit ) } else { workContinuation = co } } } } } runRecomposeAndApplyChanges \u4e09\u6b65\u9aa4 \u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5728 runRecomposeAndApplyChanges \u4e2d\u8c03\u7528 awaitWorkAvailable \u800c\u4ea7\u751f\u4e86\u6302\u8d77\uff0c\u6240\u4ee5\u6b64\u65f6\u4f1a\u6062\u590d\u8c03\u7528 runRecomposeAndApplyChanges \uff0c\u8fd9\u91cc\u4e3b\u8981\u6709\u4e09\u6b65\u64cd\u4f5c\u63a5\u4e0b\u6765\u8fdb\u884c\u4ecb\u7ecd // androidx.compose.runtime.Recomposer suspend fun runRecomposeAndApplyChanges () = recompositionRunner { parentFrameClock -> val toRecompose = mutableListOf < ControlledComposition > () val toApply = mutableListOf < ControlledComposition > () while ( shouldKeepRecomposing ) { awaitWorkAvailable () // \u4ece\u8fd9\u5f00\u59cb\u6062\u590d\u6267\u884c if ( synchronized ( stateLock ) { if ( ! hasFrameWorkLocked ) { // \u6b65\u9aa41 recordComposerModificationsLocked () ! hasFrameWorkLocked } else false } ) continue // \u7b49\u5f85Vsync\u4fe1\u53f7\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u7edfView\u7cfb\u7edf\u4e2dscheduleTraversals? parentFrameClock . withFrameNanos { frameTime -> ... trace ( \"Recomposer:recompose\" ) { synchronized ( stateLock ) { recordComposerModificationsLocked () // \u6b65\u9aa42 compositionInvalidations . fastForEach { toRecompose += it } compositionInvalidations . clear () } val modifiedValues = IdentityArraySet < Any > () val alreadyComposed = IdentityArraySet < ControlledComposition > () while ( toRecompose . isNotEmpty ()) { try { toRecompose . fastForEach { composition -> alreadyComposed . add ( composition ) // \u6b65\u9aa43 performRecompose ( composition , modifiedValues ) ?. let { toApply += it } } } finally { toRecompose . clear () } .... } .... } } } } \u5bf9\u4e8e\u8fd9\u4e09\u4e2a\u6b65\u9aa4\uff0c\u6211\u4eec\u5206\u522b\u6765\u770b\u9996\u5148\u662f\u6b65\u9aa41\u8c03\u7528\u4e86 recordComposerModificationsLocked \u65b9\u6cd5\uff0c \u8fd8\u8bb0\u5f97 snapshotInvalidations \u561b, \u4ed6\u8bb0\u5f55\u7740\u6240\u6709\u66f4\u6539\u7684 mutableState\uff0c\u6b64\u65f6\u56de\u8c03\u6240\u6709\u5df2\u77e5composition\u7684 recordModificationsOf \u65b9\u6cd5\u3002 // androidx.compose.runtime.Recomposer private fun recordComposerModificationsLocked () { if ( snapshotInvalidations . isNotEmpty ()) { snapshotInvalidations . fastForEach { changes -> knownCompositions . fastForEach { composition -> composition . recordModificationsOf ( changes ) } } snapshotInvalidations . clear () if ( deriveStateLocked () != null ) { error ( \"called outside of runRecomposeAndApplyChanges\" ) } } } \u7ecf\u8fc7\u4e00\u7cfb\u5217\u8c03\u7528\u4f1a\u5c06\u6240\u6709\u4f9d\u8d56\u5f53\u524d mutableState \u7684\u6240\u6709 Composable Scope \u5b58\u5165\u5230 compositionInvalidations \u8fd9\u4e2a List \u4e2d\u3002 // androidx.compose.runtime.Recomposer internal override fun invalidate ( composition : ControlledComposition ) { synchronized ( stateLock ) { if ( composition !in compositionInvalidations ) { compositionInvalidations += composition deriveStateLocked () } else null } ?. resume ( Unit ) } \u6b65\u9aa42\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u5c06 compositionInvalidations \u7684\u6240\u6709\u5143\u7d20\u8f6c\u79fb\u5230\u4e86 toRecompose\uff0c\u800c\u6b65\u9aa43\u5219\u662f recompose\u7684\u91cd\u4e2d\u4e4b\u91cd\uff0c\u901a\u8fc7 performRecompose \u4f7f\u6240\u6709\u53d7\u5230\u5f71\u54cd\u7684 Composable Scope \u91cd\u65b0\u6267\u884c\u3002 performRecompose \u6211\u4eec\u53ef\u4ee5\u770b\u5230 performRecompose \u4e2d\u95f4\u63a5\u8c03\u7528\u4e86 composing \uff0c\u800c\u5176\u4e2d\u6700\u5173\u952e recompose \u4e5f\u5728\u56de\u8c03\u4e2d\u5b8c\u6210\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u518d\u8fdb\u5165 composing \u770b\u770b\u4ec0\u4e48\u65f6\u5019\u4f1a\u56de\u8c03\u3002 // androidx.compose.runtime.Recomposer private fun performRecompose ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? ): ControlledComposition? { if ( composition . isComposing || composition . isDisposed ) return null return if ( composing ( composition , modifiedValues ) { if ( modifiedValues ?. isNotEmpty () == true ) { composition . prepareCompose { modifiedValues . forEach { composition . recordWriteOf ( it ) } } } composition . recompose () // \u771f\u6b63\u53d1\u751frecompose\u7684\u5730\u65b9 } ) composition else null } composing \u5185\u90e8\u9996\u5148\u62cd\u6444\u4e86\u4e00\u6b21\u5feb\u7167\uff0c\u7136\u540e\u5c06\u6211\u4eec\u7684recompose\u8fc7\u7a0b\u5728\u8fd9\u6b21\u5feb\u7167\u4e2d\u6267\u884c\uff0c\u6700\u540e\u8fdb\u884c\u4e86apply\u3002\u53c8\u5173\u4e8e\u5feb\u7167\u7cfb\u7edf\u7684\u8bb2\u89e3\u8be6\u89c1 \u300aJetpack Compose \u00b7 \u5feb\u7167\u7cfb\u7edf\u300b \u3002 // androidx.compose.runtime.Recomposer private inline fun < T > composing ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? , block : () -> T ): T { val snapshot = Snapshot . takeMutableSnapshot ( readObserverOf ( composition ), writeObserverOf ( composition , modifiedValues ) ) try { return snapshot . enter ( block ) } finally { applyAndCheck ( snapshot ) } } takeMutableSnapshot \u8bfb\u89c2\u5bdf\u8005\u4e0e\u5199\u89c2\u5bdf\u8005 \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u8c03\u7528\u7684 takeMutableSnapshot \u65b9\u6cd5\u540c\u65f6\u4f20\u5165\u4e86\u4e00\u4e2a\u8bfb\u89c2\u5bdf\u8005\u548c\u5199\u89c2\u5bdf\u8005\uff0c\u800c\u8fd9\u4e24\u4e2a\u89c2\u5bdf\u8005\u5728\u4ec0\u4e48\u65f6\u673a\u56de\u8c03\u5462\uff1f\u5f53\u6211\u4eec\u6bcf\u6b21 recompose \u65f6\u90fd\u4f1a\u62cd\u6444\u4e00\u6b21\u5feb\u7167\uff0c\u7136\u540e\u6211\u4eec\u7684\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u5728\u8fd9\u6b21\u5feb\u7167\u4e2d\u6267\u884c\uff0c\u5728\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u4e2d\u5982\u679c\u51fa\u73b0\u4e86 mutableState \u7684\u8bfb\u53d6\u6216\u5199\u5165\u64cd\u4f5c\u90fd\u4f1a\u76f8\u5e94\u7684\u56de\u8c03\u8fd9\u91cc\u7684\u8bfb\u89c2\u5bdf\u8005\u548c\u5199\u89c2\u5bdf\u8005\u3002\u4e5f\u5c31\u8bf4\u660e\u6bcf\u6b21recompose\u90fd\u4f1a\u8fdb\u884c\u91cd\u65b0\u4e00\u6b21\u7ed1\u5b9a\u3002 \u8bfb\u89c2\u5bdf\u8005\u56de\u8c03\u65f6\u673a\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u5199\u89c2\u5bdf\u8005\u5728\u4ec0\u4e48\u65f6\u673a\u56de\u8c03\u5462\uff1f \u8fd8\u8bb0\u5f97\u6211\u4eec\u521a\u5f00\u59cb\u8bf4\u7684 GlobalSnapshot \u548c MutableSnapshot \u561b\uff1f \u5230\u8fd9\u91cc\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u5206\u6790 GlobalSnapshot \u8fd9\u6761\u6267\u884c\u8fc7\u7a0b\uff0c\u901a\u8fc7\u8c03\u7528 takeMutableSnapshot \u5c06\u8fd4\u56de\u4e00\u4e2a MutableSnapshot \u5b9e\u4f8b\uff0c\u6211\u4eec\u7684recompose\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u53d1\u751f\u5728\u5f53\u524d MutableSnapshot \u5b9e\u4f8b\u7684 enter \u65b9\u6cd5\u4e2d\uff0c\u6b64\u65f6\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u8c03\u7528 Snapshot.current \u5c06\u8fd4\u56de\u5f53\u524d MutableSnapshot \u5b9e\u4f8b\uff0c\u6240\u4ee5\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u5199\u64cd\u4f5c\u5c31\u4f1a\u56de\u8c03 takeMutableSnapshot \u6240\u4f20\u5165\u7684\u5199\u89c2\u5bdf\u8005\u3002\u4e5f\u5c31\u662f\u4ee5\u4e0b\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f53 Demo \u53d1\u751frecompose\u65f6 display\u6240\u5728 Snapshot \u5c31\u662f\u62cd\u6444\u7684 MutableSnapshot \u5feb\u7167\u3002 var display by mutableStateOf ( \"Init\" ) @Preview @Composable fun Demo () { Text ( text = display , fontSize = 50. sp ) display = \"change\" // recompose\u80fd\u591f\u6267\u884c\u5230\uff0c\u6b64\u65f6\u662f MutableSnapShot } MutableSnapshot \u5199\u5165\u901a\u77e5 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b takeMutableSnapshot \u7684\u5199\u89c2\u5bdf\u8005\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u6b64\u65f6\u4f1a\u5c06\u66f4\u65b0\u7684\u503c\u4f20\u5165\u5f53\u524drecompose composition \u7684 recordWriteOf \u65b9\u6cd5\u3002 // androidx.compose.runtime.Recomposer private fun writeObserverOf ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? ): ( Any ) -> Unit { return { value -> composition . recordWriteOf ( value ) modifiedValues ?. add ( value ) } } \u901a\u8fc7\u5bf9\u4e8e\u6d41\u7a0b\u5206\u6790\u53d1\u73b0\uff0c\u5b9e\u9645\u4e0a\u5728recompose\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u72b6\u6001\u5199\u5165\u64cd\u4f5c\u65f6\uff0c\u5e76\u4e0d\u4f1a\u901a\u8fc7\u5199\u89c2\u5bdf\u8005\u7acb\u5373\u8fdb\u884crecompose \u8fc7\u7a0b\uff0c\u800c\u662f\u7b49\u5f85\u5230\u5f53\u524drecompose\u8fc7\u7a0b\u7ed3\u675f\u540e\u8fdb\u884c apply \u65f6\u518d\u8fdb\u884c\u91cd\u65b0 recompose\u3002 applyAndCheck \u8ba9\u6211\u4eec\u56de\u5230Recomposer\u7684 composing \u65b9\u6cd5\uff0c\u6211\u4eec\u901a\u8fc7 applyAndCheck \u5b8c\u6210\u540e\u7eed apply \u64cd\u4f5c\u3002 applyAndCheck \u5185\u90e8\u4f7f\u7528\u4e86 MutableSnapshot.apply // androidx.compose.runtime.Recomposer private inline fun < T > composing ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? , block : () -> T ): T { val snapshot = Snapshot . takeMutableSnapshot ( readObserverOf ( composition ), writeObserverOf ( composition , modifiedValues ) ) try { return snapshot . enter ( block ) } finally { applyAndCheck ( snapshot ) // \u5728\u8fd9\u91cc } } private fun applyAndCheck ( snapshot : MutableSnapshot ) { val applyResult = snapshot . apply () if ( applyResult is SnapshotApplyResult . Failure ) { error ( \"Unsupported concurrent change during composition. A state object was \" + \"modified by composition as well as being modified outside composition.\" ) } } apply\u4e2d\u4f7f\u7528\u7684applyObservers \u6211\u4eec\u518d\u8fdb\u5165 MutableSnapshot.apply \u4e00\u63a2\u7a76\u7adf\uff0c\u6b64\u65f6\u5c06\u5f53\u524d modified \u5728 snapshot.recordModified(state) \u5df2\u7ecf\u66f4\u65b0\u8fc7\u4e86\uff0c\u5fd8\u8bb0\u7684\u8bdd\u53ef\u4ee5\u56de\u5934\u770b\u770b\uff0c\u524d\u9762\u5df2\u7ecf\u8bb2\u8fc7\u4e86\u3002\u6b64\u65f6\u4ecd\u7136\u4f7f\u7528\u4e86 applyObservers \u8fdb\u884c\u904d\u5386\u901a\u77e5\u3002\u8fd9\u4e2a applyObservers \u5176\u5b9e\u662f\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u6240\u4ee5\u4e0d\u540c\u7684 GlobalSnapshot \u4e0eMutableSnapshot \u53ef\u4ee5\u5171\u4eab\uff0c\u63a5\u4e0b\u6765\u4ecd\u7136\u901a\u8fc7\u9884\u5148\u8ba2\u9605\u597d\u7684 recompositionRunner \u7528\u6765\u5904\u7406 recompose \u8fc7\u7a0b\uff0c\u8be6\u89c1 applyObservers\u4e4brecompositionRunner \uff0c\u63a5\u4e0b\u6765\u7684recompose\u6d41\u7a0b\u5c31\u5b8c\u5168\u76f8\u540c\u4e86\u3002 // androidx.compose.runtime.snapshots.Snapshot open fun apply (): SnapshotApplyResult { val modified = modified .... val ( observers , globalModified ) = sync { validateOpen ( this ) if ( modified == null || modified . size == 0 ) { .... } else { .... applyObservers . toMutableList () to globalModified } } .... if ( modified != null && modified . isNotEmpty ()) { observers . fastForEach { it ( modified , this ) } } return SnapshotApplyResult . Success }","title":"\u91cd\u7ec4\u7684\u5de5\u4f5c\u6d41\u7a0b"},{"location":"principle/recompose_working_principle/#_1","text":"\u672c\u6587\u901a\u8fc7\u9605\u8bfb\u6e90\u7801\u6765\u89e3\u8bfb recompose \u6d41\u7a0b\uff0c\u9605\u8bfb\u6e90\u7801\u5176\u5b9e\u662f\u4e00\u4e2a\u975e\u5e38\u67af\u71e5\u7684\u8fc7\u7a0b\uff0c\u6e90\u7801\u4e2d\u5b58\u5728\u7740\u5927\u91cf\u903b\u8f91\u5206\u652f\u5bfc\u81f4\u8bb8\u591a\u4eba\u770b\u7740\u770b\u7740\u5c31\u88ab\u7ed5\u6655\u4e86\u3002\u672c\u6587\u5254\u9664\u4e86\u6240\u6709\u4e0e\u4e3b\u7ebf\u6d41\u7a0b\u65e0\u5173\u7684\u903b\u8f91\u5206\u652f\uff0c\u5e76\u7ed3\u5408\u914d\u56fe\u8fdb\u884c\u903b\u8f91\u8868\u8fbe\uff0c\u5e0c\u671b\u80fd\u591f\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3 recompose \u5de5\u4f5c\u539f\u7406\u3002\u901a\u8fc7\u8fd9\u7bc7\u6587\u7ae0\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u5bf9 recompose\u5de5\u4f5c\u539f\u7406\u4ea7\u751f\u4e00\u79cd\u611f\u6027\u8ba4\u77e5\uff0c\u5e76\u5728\u672c\u6587\u7684\u57fa\u7840\u4e0a\u80fd\u591f\u7ee7\u7eed\u6df1\u5165\u63a2\u7d22recompose\u6d41\u7a0b\u4e2d\u7684\u5404\u79cd\u6280\u672f\u7ec6\u8282\u3002 \u26a0\ufe0f Tips\uff1a\u7531\u4e8e recompose \u6d41\u7a0b\u5341\u5206\u590d\u6742\uff0c\u672c\u6587\u76ee\u524d\u4ec5\u5bf9 recompose \u4e3b\u7ebf\u6d41\u7a0b\u8fdb\u884c\u4e86\u63cf\u8ff0\uff0c\u5176\u4e2d\u5305\u542b\u7684\u8bb8\u591a\u6280\u672f\u7ec6\u8282\u6ca1\u6709\u6df1\u6316\u3002\u7531\u4e8e\u672c\u4eba\u91c7\u7528\u52a8\u9759\u7ed3\u5408\u65b9\u5f0f\u8fdb\u884c\u6e90\u7801\u5206\u6790\uff0c\u96be\u514d\u51fa\u73b0\u6709\u4e9bcase\u6d41\u7a0b\u6ca1\u6709\u8986\u76d6\u5230\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6587\u7ae0\u5b58\u5728\u9519\u8bef\u6b22\u8fce\u63d0\u51fa\u3002","title":"\u610f\u4e49"},{"location":"principle/recompose_working_principle/#recompose","text":"","title":"recompose \u6d41\u7a0b\u5206\u6790"},{"location":"principle/recompose_working_principle/#mutablestate","text":"\u5f53\u4f60\u4e3a MutableState \u8d4b\u503c\u65f6\u5c06\u4f1a\u9ed8\u8ba4\u8c03\u7528 MutableState \u7684\u6269\u5c55\u65b9\u6cd5 MutableState.setValue // androidx.compose.runtime.SnapshotState inline operator fun < T > MutableState < T > . setValue ( thisObj : Any? , property : KProperty <*> , value : T ) { this . value = value } \u901a\u8fc7\u67e5\u770b mutableStateOf \u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 MutableState \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a SnapshotMutableStateImpl \u7c7b\u578b\u5b9e\u4f8b // androidx.compose.runtime.SnapshotState fun < T > mutableStateOf ( value : T , policy : SnapshotMutationPolicy < T > = structuralEqualityPolicy () ): MutableState < T > = createSnapshotMutableState ( value , policy ) // androidx.compose.runtime.ActualAndroid.android internal actual fun < T > createSnapshotMutableState ( value : T , policy : SnapshotMutationPolicy < T > ): SnapshotMutableState < T > = ParcelableSnapshotMutableState ( value , policy ) // androidx.compose.runtime.ParcelableSnapshotMutableState internal class ParcelableSnapshotMutableState < T > ( value : T , policy : SnapshotMutationPolicy < T > ) : SnapshotMutableStateImpl < T > ( value , policy ), Parcelable \u5f53 value \u5c5e\u6027\u53d1\u751f\u6539\u53d8\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e2a\u5c5e\u6027\u7684 setter \uff0c\u5f53\u7136\u5982\u679c\u8bfb\u53d6\u72b6\u6001\u65f6\u4e5f\u4f1a\u8d70 getter\u3002 \u6b64\u65f6\u7684next\u662f\u4e2a StateStateRecord \u5b9e\u4f8b\uff0c\u5176\u771f\u6b63\u8bb0\u5f55\u7740\u5f53\u524dstate\u72b6\u6001\u4fe1\u606f(\u901a\u8fc7\u5f53\u524dvalue\u7684getter\u4e0esetter\u5c31\u53ef\u4ee5\u770b\u51fa)\u3002\u6b64\u65f6\u9996\u5148\u4f1a\u5bf9\u5f53\u524d\u503c\u548c\u8981\u66f4\u65b0\u7684\u503c\u6839\u636e\u89c4\u5219\u8fdb\u884cdiff\u5224\u65ad\u3002\u5f53\u786e\u5b9a\u53d1\u751f\u6539\u53d8\u65f6\u4f1a\u8c03\u7528\u5230 StateStateRecord \u7684 overwritable \u65b9\u6cd5\u3002 // androidx.compose.runtime.SnapshotState internal open class SnapshotMutableStateImpl < T > ( value : T , override val policy : SnapshotMutationPolicy < T > ) : StateObject , SnapshotMutableState < T > { @Suppress ( \"UNCHECKED_CAST\" ) override var value : T get () = next . readable ( this ). value set ( value ) = next . withCurrent { if ( ! policy . equivalent ( it . value , value )) { // \u6b64\u65f6\u7684this\u8fd8\u662f\u5f53\u524dSnapshotMutableStateImpl next . overwritable ( this , it ) { this . value = value // \u6b64\u65f6\u7684this\u6307\u5411\u7684next\uff0c\u8fd9\u90e8\u64cd\u4f5c\u4e5f\u5c31\u662f\u66f4\u65b0next\u5176\u4e2d\u7684value } } } ... private var next : StateStateRecord < T > = StateStateRecord ( value ) } \u63a5\u4e0b\u6765\u4f1a\u901a\u8fc7 Snapshot.current \u83b7\u53d6\u5f53\u524d\u4e0a\u4e0b\u6587\u4e2d\u7684 Snapshot\uff0c\u5982\u679c\u4f60\u5bf9 mutableState \u66f4\u65b0\u64cd\u4f5c\u5728\u5f02\u6b65\u6267\u884c\u4ee3\u7801\u5757\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u77e5\u9053 Snapshot \u662f\u4e00\u4e2a ThreadLocal \u6b64\u65f6\u4f1a\u8fd4\u56de\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684 Snapshot\uff0c\u5f53\u82e5\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684 Snapshot \u4e3a\u7a7a\u65f6\u9ed8\u8ba4\u8fd4\u56de GlobalSnapshot \uff0c\u5982\u679c\u4f60\u5bf9 mutableState \u66f4\u65b0\u64cd\u4f5c\u76f4\u63a5\u5728 Composable \u4e2d\uff0c\u5f53\u524d Composable \u6267\u884c\u7ebf\u7a0b\u7684 Snapshot \u5c31\u662f MutableSnapshot \u3002\u8fd9\u5c06\u4f1a\u5f71\u54cd\u5230\u540e\u7eed recompose \u7684\u6267\u884c\u6d41\u7a0b\u3002 \u26a0\ufe0f Tips\uff1aGlobalSnapshot \u5b9e\u9645\u4e0a\u662f MutableSnapShot \u7684\u5b50\u7c7b // androidx.compose.runtime.snapshots.Snapshot internal inline fun < T : StateRecord , R > T . overwritable ( state : StateObject , candidate : T , block : T .() -> R ): R { var snapshot : Snapshot = snapshotInitializer return sync { snapshot = Snapshot . current this . overwritableRecord ( state , snapshot , candidate ). block () // \u66f4\u65b0 next }. also { notifyWrite ( snapshot , state ) // \u5199\u5165\u901a\u77e5 } } \u6211\u4eec\u8fdb\u5165 overwritableRecord \u770b\u770b\u5176\u4e2d\u505a\u4e86\u4ec0\u4e48\uff0c\u6ce8\u610f\u6b64\u65f6 state \u5176\u5b9e\u662f mutableState\u3002\u5728\u8fd9\u5176\u4e2d\u901a\u8fc7 recordModified \u65b9\u6cd5\u8bb0\u5f55\u4e86\u4fee\u6539\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u5c06\u5f53\u524d\u4fee\u6539\u7684 state \u6dfb\u52a0\u5230\u5f53\u524d Snapshot \u7684 modified \u4e2d\u4e86\uff0c\u8fd9\u4e2a\u540e\u7eed\u4f1a\u7528\u5230\u7684\u3002 // androidx.compose.runtime.snapshots.Snapshot internal fun < T : StateRecord > T . overwritableRecord ( state : StateObject , snapshot : Snapshot , candidate : T ): T { if ( snapshot . readOnly ) { snapshot . recordModified ( state ) } val id = snapshot . id if ( candidate . snapshotId == id ) return candidate val newData = newOverwritableRecord ( state , snapshot ) newData . snapshotId = id snapshot . recordModified ( state ) // \u8bb0\u5f55\u4fee\u6539 return newData } // androidx.compose.runtime.snapshots.Snapshot override fun recordModified ( state : StateObject ) { ( modified ?: HashSet < StateObject > (). also { modified = it }). add ( state ) } \u53ef\u80fd\u4f60\u5bf9 mutableState \u66f4\u65b0\u64cd\u4f5c\u662f\u5426\u5728 ComposeScope \u4e2d\u800c\u611f\u5230\u56f0\u60d1\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u5176\u5b9e\u5c31\u660e\u767d\u4e86\u3002recompose \u80fd\u591f\u6267\u884c\u5230\u5c31\u5728 ComposeScope \u4e2d\uff0c\u4e0d\u80fd\u6267\u884c\u5230\u5c31\u4e0d\u5728 ComposeScope \u4e2d\u3002 \u8fd9\u4e2a\u5728\u540e\u9762 takeMutableSnapshot\u8bfb\u89c2\u5bdf\u8005\u4e0e\u5199\u89c2\u5bdf\u8005 \u90e8\u5206\u662f\u4f1a\u8fdb\u884c\u89e3\u91ca\u3002 var display by mutableStateOf ( \"Init\" ) @Preview @Composable fun Demo () { Text ( text = display , fontSize = 50. sp , modifier = Modifier . clickable { display = \"change\" // recompose\u4e0d\u80fd\u6267\u884c\u5230\uff0c\u6b64\u65f6\u662f GlobalSnapshot } ) display = \"change\" // recompose\u80fd\u591f\u6267\u884c\u5230\uff0c\u6b64\u65f6\u662f MutableSnapShot } \u63a5\u4e0b\u6765\u5c31\u662f\u901a\u8fc7 notifyWrite \u6267\u884c\u4e8b\u4ef6\u901a\u77e5\u6b64\u65f6\u53ef\u4ee5\u770b\u5230\u8c03\u7528\u4e86\u5199\u89c2\u5bdf\u8005 writeObserver \u3002 // androidx.compose.runtime.snapshots.Snapshot @PublishedApi internal fun notifyWrite ( snapshot : Snapshot , state : StateObject ) { snapshot . writeObserver ?. invoke ( state ) } \u6b64\u65f6\u4f1a\u6839\u636e\u5f53\u524d Snapshot \u4e0d\u540c\u800c\u8c03\u7528\u5230\u4e0d\u540c\u7684\u5199\u89c2\u5bdf\u8005 writeObserver \u3002","title":"\u4ece MutableState \u66f4\u65b0\u5f00\u59cb"},{"location":"principle/recompose_working_principle/#globalsnapshot","text":"\u5168\u5c40\u7684\u5199\u5165\u89c2\u5bdf\u8005\u662f\u5728 setContent \u65f6\u5c31\u8fdb\u884c\u4e86\u6ce8\u518c\uff0c \u6b64\u65f6\u4f1a\u56de\u8c03 registerGlobalWriteObserver \u7684\u5c3elambda\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u5c31\u4e00\u4e2achannel (\u6ca1\u9519\u5c31\u662fKotlin\u534f\u7a0b\u90a3\u4e2a\u70ed\u6570\u636e\u901a\u9053Channel)\uff0c\u6211\u95e8\u53ef\u4ee5\u770b\u5230\u5f88\u5bb9\u6613\u770b\u5230\u5728\u4e0a\u65b9\u4ee5AndroidUiDispatcher.Main \u4f5c\u4e3a\u8c03\u5ea6\u5668\u7684 CoroutineScope \u4e2d\u8fdb\u884c\u4e86\u6302\u8d77\u7b49\u5f85\u6d88\u8d39\uff0c\u6240\u4ee5\u6267\u884c\u6d41\u7a0b\u81ea\u7136\u4f1a\u8fdb\u5230\u4e86 sendApplyNotifications() \u3002 \uff08AndroidUiDispatcher.Main \u4e0e Choreographer \u606f\u606f\u76f8\u5173\uff0c\u7bc7\u5e45\u6709\u9650\u5c31\u4e0d\u5c55\u5f00\u8ba8\u8bba\u4e86\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u81ea\u5df1\u53bb\u8ddf\u6e90\u7801\uff09 internal object GlobalSnapshotManager { private val started = AtomicBoolean ( false ) fun ensureStarted () { if ( started . compareAndSet ( false , true )) { val channel = Channel < Unit > ( Channel . CONFLATED ) CoroutineScope ( AndroidUiDispatcher . Main ). launch { channel . consumeEach { Snapshot . sendApplyNotifications () } } Snapshot . registerGlobalWriteObserver { channel . offer ( Unit ) } } } }","title":"GlobalSnapshot \u5199\u5165\u901a\u77e5"},{"location":"principle/recompose_working_principle/#sendapplynotifications","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fdb\u5165 sendApplyNotifications() \u5176\u4e2d\u770b\u770b\u505a\u4e86\u4ec0\u4e48\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u4f7f\u7528\u6211\u4eec\u524d\u9762\u63d0\u5230\u7684\u90a3\u4e2a modified \uff0c\u5f53\u53d1\u751f\u4fee\u6539\u65f6 changes \u5fc5\u7136\u4e3a true\uff0c\u6240\u4ee5\u63a5\u7740\u4f1a\u8c03\u7528\u5230 advanceGlobalSnapshot // androidx.compose.runtime.snapshots.Snapshot fun sendApplyNotifications () { val changes = sync { currentGlobalSnapshot . get (). modified ?. isNotEmpty () == true } if ( changes ) advanceGlobalSnapshot () } \u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u8ddf\u4e0b\u53bb\u8d70\u5230\u4e86 advanceGlobalSnapshot \uff0c\u6b64\u65f6\u5c06\u6240\u6709 modified \u53d6\u51fa\u5e76\u4fbf\u5229\u8c03\u7528 applyObservers \u4e2d\u5305\u542b\u7684\u6240\u6709\u89c2\u5bdf\u8005\u3002 // androidx.compose.runtime.snapshots.Snapshot private fun advanceGlobalSnapshot () = advanceGlobalSnapshot { } private fun < T > advanceGlobalSnapshot ( block : ( invalid : SnapshotIdSet ) -> T ): T { val previousGlobalSnapshot = currentGlobalSnapshot . get () val result = sync { takeNewGlobalSnapshot ( previousGlobalSnapshot , block ) } val modified = previousGlobalSnapshot . modified if ( modified != null ) { val observers : List < ( Set < Any > , Snapshot ) -> Unit > = sync { applyObservers . toMutableList () } observers . fastForEach { observer -> observer ( modified , previousGlobalSnapshot ) } } .... return result }","title":"sendApplyNotifications"},{"location":"principle/recompose_working_principle/#applyobserversrecompositionrunne","text":"\u636e\u6211\u8c03\u67e5\u6b64\u65f6 applyObservers \u4e2d\u5305\u542b\u7684\u89c2\u5bdf\u8005\u4ec5\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f SnapshotStateObserver.applyObserver \u7528\u6765\u66f4\u65b0\u5feb\u7167\u72b6\u6001\u4fe1\u606f\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f recompositionRunner \u7528\u6765\u5904\u7406 recompose\u6d41\u7a0b \u7684\u3002\u7531\u4e8e\u6211\u4eec\u662f\u5728\u7814\u7a76recompose \u6d41\u7a0b\u7684\u6240\u4ee5\u5c31\u4e0d\u5206\u5f00\u53bb\u8ba8\u8bba\u4e86\u3002\u6211\u4eec\u6765\u770b\u770b\u5904\u7406 recompose \u7684 observer \u90fd\u505a\u4e86\u4ec0\u4e48\uff0c\u9996\u5148\u4ed6\u5c06\u6240\u6709\u6539\u53d8\u7684 mutableState \u6dfb\u52a0\u5230\u4e86 snapshotInvalidations \uff0c\u8fd9\u4e2a\u540e\u7eed\u4f1a\u7528\u5230\u3002\u540e\u9762\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u4e2aresume\uff0c\u8bf4\u660elambda\u7684\u6700\u540e\u8c03\u7528\u7684 deriveStateLocked \u8fd4\u56de\u4e86\u4e00\u4e2a\u534f\u7a0b Continuation \u5b9e\u4f8b\u3002\u4f7f\u5f97\u6302\u8d77\u70b9\u4f4d\u7f6e\u6062\u590d\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u8fdb\u5165 deriveStateLocked \u770b\u770b\u8fd9\u4e2a\u534f\u7a0b Continuation \u5b9e\u4f8b\u5230\u5e95\u662f\u8c01\u3002 // androidx.compose.runtime.Recomposer @OptIn ( ExperimentalComposeApi :: class ) private suspend fun recompositionRunner ( block : suspend CoroutineScope .( parentFrameClock : MonotonicFrameClock ) -> Unit ) { withContext ( broadcastFrameClock ) { ... // \u8d1f\u8d23\u5904\u7406 recompose \u7684 observer \u5c31\u662f\u4ed6 val unregisterApplyObserver = Snapshot . registerApplyObserver { changed , _ -> synchronized ( stateLock ) { if ( _state . value >= State . Idle ) { snapshotInvalidations += changed deriveStateLocked () } else null } ?. resume ( Unit ) } .... } } \u901a\u8fc7\u51fd\u6570\u8fd4\u56de\u503c\u53ef\u4ee5\u770b\u5230\u8fd9\u662f\u4e00\u4e2a\u53ef\u53d6\u6d88\u7684Continuation\u5b9e\u4f8b workContinuation \uff0c // androidx.compose.runtime.Recomposer private fun deriveStateLocked (): CancellableContinuation < Unit >? { .... return if ( newState == State . PendingWork ) { workContinuation . also { workContinuation = null } } else null } \u90a3\u8fd9\u4e2aworkContinuation\u662f\u5728\u54ea\u91cc\u8d4b\u503c\u7684\u5462\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u627e\u5230\u4e86\u5176\u552f\u4e00\u88ab\u8d4b\u503c\u7684\u5730\u65b9\u3002\u6b64\u65f6 workContinuation \u5c31\u662f co\uff0c\u6b64\u65f6resume\u4e5f\u5c31\u662f\u6062\u590d\u6267\u884c awaitWorkAvailable \u8c03\u7528\u6302\u8d77\u70b9\u3002 // androidx.compose.runtime.Recomposer private suspend fun awaitWorkAvailable () { if ( ! hasSchedulingWork ) { suspendCancellableCoroutine < Unit > { co -> synchronized ( stateLock ) { if ( hasSchedulingWork ) { co . resume ( Unit ) } else { workContinuation = co } } } } }","title":"applyObservers\u4e4brecompositionRunne"},{"location":"principle/recompose_working_principle/#runrecomposeandapplychanges","text":"\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5728 runRecomposeAndApplyChanges \u4e2d\u8c03\u7528 awaitWorkAvailable \u800c\u4ea7\u751f\u4e86\u6302\u8d77\uff0c\u6240\u4ee5\u6b64\u65f6\u4f1a\u6062\u590d\u8c03\u7528 runRecomposeAndApplyChanges \uff0c\u8fd9\u91cc\u4e3b\u8981\u6709\u4e09\u6b65\u64cd\u4f5c\u63a5\u4e0b\u6765\u8fdb\u884c\u4ecb\u7ecd // androidx.compose.runtime.Recomposer suspend fun runRecomposeAndApplyChanges () = recompositionRunner { parentFrameClock -> val toRecompose = mutableListOf < ControlledComposition > () val toApply = mutableListOf < ControlledComposition > () while ( shouldKeepRecomposing ) { awaitWorkAvailable () // \u4ece\u8fd9\u5f00\u59cb\u6062\u590d\u6267\u884c if ( synchronized ( stateLock ) { if ( ! hasFrameWorkLocked ) { // \u6b65\u9aa41 recordComposerModificationsLocked () ! hasFrameWorkLocked } else false } ) continue // \u7b49\u5f85Vsync\u4fe1\u53f7\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u7edfView\u7cfb\u7edf\u4e2dscheduleTraversals? parentFrameClock . withFrameNanos { frameTime -> ... trace ( \"Recomposer:recompose\" ) { synchronized ( stateLock ) { recordComposerModificationsLocked () // \u6b65\u9aa42 compositionInvalidations . fastForEach { toRecompose += it } compositionInvalidations . clear () } val modifiedValues = IdentityArraySet < Any > () val alreadyComposed = IdentityArraySet < ControlledComposition > () while ( toRecompose . isNotEmpty ()) { try { toRecompose . fastForEach { composition -> alreadyComposed . add ( composition ) // \u6b65\u9aa43 performRecompose ( composition , modifiedValues ) ?. let { toApply += it } } } finally { toRecompose . clear () } .... } .... } } } } \u5bf9\u4e8e\u8fd9\u4e09\u4e2a\u6b65\u9aa4\uff0c\u6211\u4eec\u5206\u522b\u6765\u770b\u9996\u5148\u662f\u6b65\u9aa41\u8c03\u7528\u4e86 recordComposerModificationsLocked \u65b9\u6cd5\uff0c \u8fd8\u8bb0\u5f97 snapshotInvalidations \u561b, \u4ed6\u8bb0\u5f55\u7740\u6240\u6709\u66f4\u6539\u7684 mutableState\uff0c\u6b64\u65f6\u56de\u8c03\u6240\u6709\u5df2\u77e5composition\u7684 recordModificationsOf \u65b9\u6cd5\u3002 // androidx.compose.runtime.Recomposer private fun recordComposerModificationsLocked () { if ( snapshotInvalidations . isNotEmpty ()) { snapshotInvalidations . fastForEach { changes -> knownCompositions . fastForEach { composition -> composition . recordModificationsOf ( changes ) } } snapshotInvalidations . clear () if ( deriveStateLocked () != null ) { error ( \"called outside of runRecomposeAndApplyChanges\" ) } } } \u7ecf\u8fc7\u4e00\u7cfb\u5217\u8c03\u7528\u4f1a\u5c06\u6240\u6709\u4f9d\u8d56\u5f53\u524d mutableState \u7684\u6240\u6709 Composable Scope \u5b58\u5165\u5230 compositionInvalidations \u8fd9\u4e2a List \u4e2d\u3002 // androidx.compose.runtime.Recomposer internal override fun invalidate ( composition : ControlledComposition ) { synchronized ( stateLock ) { if ( composition !in compositionInvalidations ) { compositionInvalidations += composition deriveStateLocked () } else null } ?. resume ( Unit ) } \u6b65\u9aa42\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u5c06 compositionInvalidations \u7684\u6240\u6709\u5143\u7d20\u8f6c\u79fb\u5230\u4e86 toRecompose\uff0c\u800c\u6b65\u9aa43\u5219\u662f recompose\u7684\u91cd\u4e2d\u4e4b\u91cd\uff0c\u901a\u8fc7 performRecompose \u4f7f\u6240\u6709\u53d7\u5230\u5f71\u54cd\u7684 Composable Scope \u91cd\u65b0\u6267\u884c\u3002","title":"runRecomposeAndApplyChanges \u4e09\u6b65\u9aa4"},{"location":"principle/recompose_working_principle/#performrecompose","text":"\u6211\u4eec\u53ef\u4ee5\u770b\u5230 performRecompose \u4e2d\u95f4\u63a5\u8c03\u7528\u4e86 composing \uff0c\u800c\u5176\u4e2d\u6700\u5173\u952e recompose \u4e5f\u5728\u56de\u8c03\u4e2d\u5b8c\u6210\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u518d\u8fdb\u5165 composing \u770b\u770b\u4ec0\u4e48\u65f6\u5019\u4f1a\u56de\u8c03\u3002 // androidx.compose.runtime.Recomposer private fun performRecompose ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? ): ControlledComposition? { if ( composition . isComposing || composition . isDisposed ) return null return if ( composing ( composition , modifiedValues ) { if ( modifiedValues ?. isNotEmpty () == true ) { composition . prepareCompose { modifiedValues . forEach { composition . recordWriteOf ( it ) } } } composition . recompose () // \u771f\u6b63\u53d1\u751frecompose\u7684\u5730\u65b9 } ) composition else null } composing \u5185\u90e8\u9996\u5148\u62cd\u6444\u4e86\u4e00\u6b21\u5feb\u7167\uff0c\u7136\u540e\u5c06\u6211\u4eec\u7684recompose\u8fc7\u7a0b\u5728\u8fd9\u6b21\u5feb\u7167\u4e2d\u6267\u884c\uff0c\u6700\u540e\u8fdb\u884c\u4e86apply\u3002\u53c8\u5173\u4e8e\u5feb\u7167\u7cfb\u7edf\u7684\u8bb2\u89e3\u8be6\u89c1 \u300aJetpack Compose \u00b7 \u5feb\u7167\u7cfb\u7edf\u300b \u3002 // androidx.compose.runtime.Recomposer private inline fun < T > composing ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? , block : () -> T ): T { val snapshot = Snapshot . takeMutableSnapshot ( readObserverOf ( composition ), writeObserverOf ( composition , modifiedValues ) ) try { return snapshot . enter ( block ) } finally { applyAndCheck ( snapshot ) } }","title":"performRecompose"},{"location":"principle/recompose_working_principle/#takemutablesnapshot","text":"\u503c\u5f97\u6ce8\u610f\u7684\u662f\u6b64\u65f6\u8c03\u7528\u7684 takeMutableSnapshot \u65b9\u6cd5\u540c\u65f6\u4f20\u5165\u4e86\u4e00\u4e2a\u8bfb\u89c2\u5bdf\u8005\u548c\u5199\u89c2\u5bdf\u8005\uff0c\u800c\u8fd9\u4e24\u4e2a\u89c2\u5bdf\u8005\u5728\u4ec0\u4e48\u65f6\u673a\u56de\u8c03\u5462\uff1f\u5f53\u6211\u4eec\u6bcf\u6b21 recompose \u65f6\u90fd\u4f1a\u62cd\u6444\u4e00\u6b21\u5feb\u7167\uff0c\u7136\u540e\u6211\u4eec\u7684\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u5728\u8fd9\u6b21\u5feb\u7167\u4e2d\u6267\u884c\uff0c\u5728\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u4e2d\u5982\u679c\u51fa\u73b0\u4e86 mutableState \u7684\u8bfb\u53d6\u6216\u5199\u5165\u64cd\u4f5c\u90fd\u4f1a\u76f8\u5e94\u7684\u56de\u8c03\u8fd9\u91cc\u7684\u8bfb\u89c2\u5bdf\u8005\u548c\u5199\u89c2\u5bdf\u8005\u3002\u4e5f\u5c31\u8bf4\u660e\u6bcf\u6b21recompose\u90fd\u4f1a\u8fdb\u884c\u91cd\u65b0\u4e00\u6b21\u7ed1\u5b9a\u3002 \u8bfb\u89c2\u5bdf\u8005\u56de\u8c03\u65f6\u673a\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u5199\u89c2\u5bdf\u8005\u5728\u4ec0\u4e48\u65f6\u673a\u56de\u8c03\u5462\uff1f \u8fd8\u8bb0\u5f97\u6211\u4eec\u521a\u5f00\u59cb\u8bf4\u7684 GlobalSnapshot \u548c MutableSnapshot \u561b\uff1f \u5230\u8fd9\u91cc\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u5206\u6790 GlobalSnapshot \u8fd9\u6761\u6267\u884c\u8fc7\u7a0b\uff0c\u901a\u8fc7\u8c03\u7528 takeMutableSnapshot \u5c06\u8fd4\u56de\u4e00\u4e2a MutableSnapshot \u5b9e\u4f8b\uff0c\u6211\u4eec\u7684recompose\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u53d1\u751f\u5728\u5f53\u524d MutableSnapshot \u5b9e\u4f8b\u7684 enter \u65b9\u6cd5\u4e2d\uff0c\u6b64\u65f6\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u8c03\u7528 Snapshot.current \u5c06\u8fd4\u56de\u5f53\u524d MutableSnapshot \u5b9e\u4f8b\uff0c\u6240\u4ee5\u91cd\u65b0\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u5199\u64cd\u4f5c\u5c31\u4f1a\u56de\u8c03 takeMutableSnapshot \u6240\u4f20\u5165\u7684\u5199\u89c2\u5bdf\u8005\u3002\u4e5f\u5c31\u662f\u4ee5\u4e0b\u8fd9\u79cd\u60c5\u51b5\uff0c\u5f53 Demo \u53d1\u751frecompose\u65f6 display\u6240\u5728 Snapshot \u5c31\u662f\u62cd\u6444\u7684 MutableSnapshot \u5feb\u7167\u3002 var display by mutableStateOf ( \"Init\" ) @Preview @Composable fun Demo () { Text ( text = display , fontSize = 50. sp ) display = \"change\" // recompose\u80fd\u591f\u6267\u884c\u5230\uff0c\u6b64\u65f6\u662f MutableSnapShot }","title":"takeMutableSnapshot \u8bfb\u89c2\u5bdf\u8005\u4e0e\u5199\u89c2\u5bdf\u8005"},{"location":"principle/recompose_working_principle/#mutablesnapshot","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b takeMutableSnapshot \u7684\u5199\u89c2\u5bdf\u8005\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u6b64\u65f6\u4f1a\u5c06\u66f4\u65b0\u7684\u503c\u4f20\u5165\u5f53\u524drecompose composition \u7684 recordWriteOf \u65b9\u6cd5\u3002 // androidx.compose.runtime.Recomposer private fun writeObserverOf ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? ): ( Any ) -> Unit { return { value -> composition . recordWriteOf ( value ) modifiedValues ?. add ( value ) } } \u901a\u8fc7\u5bf9\u4e8e\u6d41\u7a0b\u5206\u6790\u53d1\u73b0\uff0c\u5b9e\u9645\u4e0a\u5728recompose\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u72b6\u6001\u5199\u5165\u64cd\u4f5c\u65f6\uff0c\u5e76\u4e0d\u4f1a\u901a\u8fc7\u5199\u89c2\u5bdf\u8005\u7acb\u5373\u8fdb\u884crecompose \u8fc7\u7a0b\uff0c\u800c\u662f\u7b49\u5f85\u5230\u5f53\u524drecompose\u8fc7\u7a0b\u7ed3\u675f\u540e\u8fdb\u884c apply \u65f6\u518d\u8fdb\u884c\u91cd\u65b0 recompose\u3002","title":"MutableSnapshot \u5199\u5165\u901a\u77e5"},{"location":"principle/recompose_working_principle/#applyandcheck","text":"\u8ba9\u6211\u4eec\u56de\u5230Recomposer\u7684 composing \u65b9\u6cd5\uff0c\u6211\u4eec\u901a\u8fc7 applyAndCheck \u5b8c\u6210\u540e\u7eed apply \u64cd\u4f5c\u3002 applyAndCheck \u5185\u90e8\u4f7f\u7528\u4e86 MutableSnapshot.apply // androidx.compose.runtime.Recomposer private inline fun < T > composing ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? , block : () -> T ): T { val snapshot = Snapshot . takeMutableSnapshot ( readObserverOf ( composition ), writeObserverOf ( composition , modifiedValues ) ) try { return snapshot . enter ( block ) } finally { applyAndCheck ( snapshot ) // \u5728\u8fd9\u91cc } } private fun applyAndCheck ( snapshot : MutableSnapshot ) { val applyResult = snapshot . apply () if ( applyResult is SnapshotApplyResult . Failure ) { error ( \"Unsupported concurrent change during composition. A state object was \" + \"modified by composition as well as being modified outside composition.\" ) } }","title":"applyAndCheck"},{"location":"principle/recompose_working_principle/#applyapplyobservers","text":"\u6211\u4eec\u518d\u8fdb\u5165 MutableSnapshot.apply \u4e00\u63a2\u7a76\u7adf\uff0c\u6b64\u65f6\u5c06\u5f53\u524d modified \u5728 snapshot.recordModified(state) \u5df2\u7ecf\u66f4\u65b0\u8fc7\u4e86\uff0c\u5fd8\u8bb0\u7684\u8bdd\u53ef\u4ee5\u56de\u5934\u770b\u770b\uff0c\u524d\u9762\u5df2\u7ecf\u8bb2\u8fc7\u4e86\u3002\u6b64\u65f6\u4ecd\u7136\u4f7f\u7528\u4e86 applyObservers \u8fdb\u884c\u904d\u5386\u901a\u77e5\u3002\u8fd9\u4e2a applyObservers \u5176\u5b9e\u662f\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u6240\u4ee5\u4e0d\u540c\u7684 GlobalSnapshot \u4e0eMutableSnapshot \u53ef\u4ee5\u5171\u4eab\uff0c\u63a5\u4e0b\u6765\u4ecd\u7136\u901a\u8fc7\u9884\u5148\u8ba2\u9605\u597d\u7684 recompositionRunner \u7528\u6765\u5904\u7406 recompose \u8fc7\u7a0b\uff0c\u8be6\u89c1 applyObservers\u4e4brecompositionRunner \uff0c\u63a5\u4e0b\u6765\u7684recompose\u6d41\u7a0b\u5c31\u5b8c\u5168\u76f8\u540c\u4e86\u3002 // androidx.compose.runtime.snapshots.Snapshot open fun apply (): SnapshotApplyResult { val modified = modified .... val ( observers , globalModified ) = sync { validateOpen ( this ) if ( modified == null || modified . size == 0 ) { .... } else { .... applyObservers . toMutableList () to globalModified } } .... if ( modified != null && modified . isNotEmpty ()) { observers . fastForEach { it ( modified , this ) } } return SnapshotApplyResult . Success }","title":"apply\u4e2d\u4f7f\u7528\u7684applyObservers"},{"location":"principle/recomposition_scope/","text":"\u4e0d\u5c11\u521d\u5b66 Compose \u7684\u540c\u5b66\u90fd\u4f1a\u5bf9 Composable \u7684 Recomposition\uff08\u5b98\u65b9\u6587\u6863\u8bd1\u4e3a\"\u91cd\u7ec4\"\uff09\u5fc3\u751f\u987e\u8651\uff0c\u62c5\u5fc3\u5927\u8303\u56f4\u7684\u91cd\u7ec4\u662f\u5426\u4f1a\u5f71\u54cd\u6027\u80fd\u3002 \u5176\u5b9e\u8fd9\u79cd\u62c5\u5fc3\u5927\u53ef\u4e0d\u5fc5\uff0c Compose \u7f16\u8bd1\u5668\u5728\u80cc\u540e\u505a\u4e86\u5927\u91cf\u5de5\u4f5c\u6765\u4fdd\u8bc1 recomposition \u8303\u56f4\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4ece\u800c\u907f\u514d\u4e86\u65e0\u6548\u5f00\u9500\uff1a Recomposition skips as much as possible When portions of your UI are invalid, Compose does its best to recompose just the portions that need to be updated. https://developer.android.com/jetpack/compose/mental-model#skips \u90a3\u4e48\u5f53\u91cd\u7ec4\u53d1\u751f\u65f6\uff0c\u5176\u4ee3\u7801\u6267\u884c\u7684\u8303\u56f4\u7a76\u7adf\u662f\u600e\u6837\u7684\u5462\uff1f\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u6d4b\u8bd5\u4e00\u4e0b\uff1a @Composable fun Foo () { var text by remember { mutableStateOf ( \"\" ) } Log . d ( TAG , \"Foo\" ) Button ( onClick = { text = \" $ text $ text \" }. also { Log . d ( TAG , \"Button\" ) }) { Log . d ( TAG , \"Button content lambda\" ) Text ( text ). also { Log . d ( TAG , \"Text\" ) } } } \u5982\u4e0a\uff0c\u5f53\u70b9\u51fb button \u65f6\uff0cState \u7684\u53d8\u5316\u4f1a\u89e6\u53d1 recomposition\u3002 \u8bf7\u5927\u5bb6\u601d\u8003\u4e00\u4e0b\u6b64\u65f6\u7684\u65e5\u5fd7\u8f93\u51fa\u662f\u600e\u6837\u7684\uff1f \u3002\u3002\u3002 \u4f60\u53ef\u4ee5\u5728\u6587\u7ae0\u672b\u5c3e\u627e\u5230\u7b54\u6848\u3002 Compose \u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4\uff1f Compose \u5728\u7f16\u8bd1\u671f\u5206\u6790\u51fa\u4f1a\u53d7\u5230\u67d0 state \u53d8\u5316\u5f71\u54cd\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u8bb0\u5f55\u5176\u5f15\u7528\uff0c\u5f53\u6b64 state \u53d8\u5316\u65f6\uff0c\u4f1a\u6839\u636e\u5f15\u7528\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801\u5757\u5e76\u6807\u8bb0\u4e3a Invalid \u3002\u5728\u4e0b\u4e00\u6e32\u67d3\u5e27\u5230\u6765\u4e4b\u524d Compose \u4f1a\u89e6\u53d1 recomposition\uff0c\u5e76\u5728\u91cd\u7ec4\u8fc7\u7a0b\u4e2d\u6267\u884c invalid \u4ee3\u7801\u5757\u3002 Invalid \u4ee3\u7801\u5757\u5373\u7f16\u8bd1\u5668\u627e\u51fa\u7684\u4e0b\u6b21\u91cd\u7ec4\u8303\u56f4\u3002\u80fd\u591f\u88ab\u6807\u8bb0\u4e3a Invalid \u7684\u4ee3\u7801\u5fc5\u987b\u662f \u975e inline \u4e14\u65e0\u8fd4\u56de\u503c \u7684 @Composalbe function/lambda \uff0c\u5fc5\u987b\u9075\u5faa \u91cd\u7ec4\u8303\u56f4\u6700\u5c0f\u5316 \u539f\u5219\u3002 \u4e3a\u4f55\u662f \u975e inline \u4e14\u65e0\u8fd4\u56de\u503c\uff08\u8fd4\u56de Unit\uff09\uff1f \u5bf9\u4e8e inline \u51fd\u6570\uff0c\u7531\u4e8e\u5728\u7f16\u8bd1\u671f\u4f1a\u5728\u8c03\u7528\u5904\u4e2d\u5c55\u5f00\uff0c\u56e0\u6b64\u65e0\u6cd5\u5728\u4e0b\u6b21\u91cd\u7ec4\u65f6\u627e\u5230\u5408\u9002\u7684\u8c03\u7528\u5165\u53e3\uff0c\u53ea\u80fd\u5171\u4eab\u8c03\u7528\u65b9\u7684\u91cd\u7ec4\u8303\u56f4\u3002 \u800c\u5bf9\u4e8e\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u7531\u4e8e\u8fd4\u56de\u503c\u7684\u53d8\u5316\u4f1a\u5f71\u54cd\u8c03\u7528\u65b9\uff0c\u56e0\u6b64\u65e0\u6cd5\u5355\u72ec\u91cd\u7ec4\uff0c\u800c\u5fc5\u987b\u8fde\u540c\u8c03\u7528\u65b9\u4e00\u540c\u53c2\u4e0e\u91cd\u7ec4\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u4f5c\u4e3a\u5165\u53e3\u88ab\u6807\u8bb0\u4e3a invalid \u8303\u56f4\u6700\u5c0f\u5316\u539f\u5219 \u53ea\u6709\u4f1a\u53d7\u5230 state \u53d8\u5316\u5f71\u54cd\u7684\u4ee3\u7801\u5757\u624d\u4f1a\u53c2\u4e0e\u5230\u91cd\u7ec4\uff0c\u4e0d\u4f9d\u8d56 state \u7684\u4ee3\u7801\u4e0d\u53c2\u4e0e\u91cd\u7ec4\u3002 \u5728\u4e86\u89e3 Compose \u91cd\u7ed8\u8303\u56f4\u7684\u57fa\u672c\u89c4\u5219\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u56de\u770b\u6587\u7ae0\u5f00\u5934\u7684\u4f8b\u5b50\uff0c\u5e76\u5c1d\u8bd5\u56de\u7b54\u4e0b\u9762\u7684\u95ee\u9898\uff1a \u4e3a\u4ec0\u4e48\u4e0d\u53ea\u662f Text \u53c2\u4e0e\u91cd\u7ec4\uff1f \u5f53\u70b9\u51fb button \u540e\uff0cMutableState \u53d1\u751f\u53d8\u5316\uff0c\u4ee3\u7801\u4e2d\u552f\u4e00\u8bbf\u95ee\u8fd9\u4e2a state \u7684\u5730\u65b9\u662f Text(...) \uff0c\u4e3a\u4ec0\u4e48\u91cd\u7ec4\u8303\u56f4\u4e0d\u53ea\u662f Text(...) \uff0c\u800c\u662f Button {...} \u7684\u6574\u4e2a\u82b1\u62ec\u53f7\uff1f \u9996\u5148\u8981\u7406\u89e3\u51fa\u73b0\u5728 Text(...) \u53c2\u6570\u4e2d\u7684 text \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a \u8868\u8fbe\u5f0f \u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u5728\u6267\u884c\u987a\u5e8f\u4e0a\u662f\u7b49\u4ef7\u7684 println ( \u201c hello \u201d + \u201c world \u201d ) val arg = \u201c hello \u201d + \u201c world \u201d println ( arg ) \u603b\u662f \u201chello\u201d + \u201cworld\u201d \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u5148\u6267\u884c\uff0c\u7136\u540e\u624d\u662f println \u65b9\u6cd5\u7684\u8c03\u7528\u3002 \u56de\u5230\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u53c2\u6570 text \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u6267\u884c\u7684\u8c03\u7528\u5904\u662f Button \u7684\u5c3elambda\uff0c\u800c\u540e\u624d\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 Text() \u3002 \u6240\u4ee5\u6b64\u65f6\u6700\u5c0f\u91cd\u7ec4\u8303\u56f4\u662f Button \u7684 \u5c3elambda \u800c\u975e Text() Foo \u662f\u5426\u53c2\u52a0\u91cd\u7ec4 \uff1f \u6309\u7167\u8303\u56f4\u6700\u5c0f\u5316\u539f\u5219\uff0c Foo \u4e2d\u6ca1\u6709\u4efb\u4f55\u5bf9 state \u7684\u8bbf\u95ee\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u77e5\u9053 Foo \u4e0d\u5e94\u8be5\u53c2\u4e0e\u91cd\u7ec4\u3002 \u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f8b\u5b50\u4e2d Foo \u901a\u8fc7 by \u7684\u4ee3\u7406\u65b9\u5f0f\u58f0\u660e text \uff0c\u5982\u679c\u6539\u4e3a = \u76f4\u63a5\u4e3a text \u8d4b\u503c\u5462\uff1f @Composable fun Foo () { val text : MutableState < String > = remember { mutableStateOf ( \"\" ) } Button ( onClick = { text = \" $ text $ text \" }) { Text ( text . value ) } } \u7b54\u6848\u662f\u4e00\u6837\u7684\uff0c\u4ecd\u7136\u4e0d\u4f1a\u53c2\u4e0e\u91cd\u7ec4\u3002 \u7b2c\u4e00\uff0cCompose \u5173\u5fc3\u7684\u662f\u4ee3\u7801\u5757\u4e2d\u662f\u5426\u6709\u5bf9 state \u7684 read \uff0c\u800c\u4e0d\u662f write \u3002 \u7b2c\u4e8c\uff0c\u8fd9\u91cc\u7684 = \u5e76\u4e0d\u610f\u5473\u7740 text \u4f1a\u88ab\u8d4b\u503c\u65b0\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a text \u6307\u5411\u7684 MutableState \u5b9e\u4f8b\u662f\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u7684\uff0c\u53d8\u7684\u53ea\u662f\u5185\u90e8\u7684 value \u4e3a\u4ec0\u4e48 Button \u4e0d\u53c2\u4e0e\u91cd\u7ec4\uff1f \u8fd9\u4e2a\u5f88\u597d\u89e3\u91ca\uff0cButton \u7684\u8c03\u7528\u65b9 Foo \u4e0d\u53c2\u4e0e\u91cd\u7ec4\uff0cButton \u81ea\u7136\u4e5f\u4e0d\u4f1a\u53c2\u4e0e\u91cd\u7ec4\uff0c\u53ea\u6709\u5c3e lambda \u53c2\u4e0e\u91cd\u7ec4\u5373\u53ef\u3002 \u6ce8\u610f\uff01\u91cd\u7ec4\u4e2d\u7684 Inline \u9677\u9631\uff01 \u524d\u9762\u8bb2\u4e86\uff0c\u53ea\u6709 \u975einline\u51fd\u6570 \u624d\u6709\u8d44\u683c\u6210\u4e3a\u91cd\u7ec4\u7684\u6700\u5c0f\u8303\u56f4\uff0c\u7406\u89e3\u8fd9\u70b9\u7279\u522b\u91cd\u8981\uff01 \u6211\u4eec\u5c06\u4ee3\u7801\u7a0d\u4f5c\u6539\u52a8\uff0c\u4e3a Text() \u5305\u88f9\u4e00\u4e2a Box{...} @Composable fun Foo () { var text by remember { mutableStateOf ( \"\" ) } Button ( onClick = { text = \" $ text $ text \" }) { Log . d ( TAG , \"Button content lambda\" ) Box { Log . d ( TAG , \"Box\" ) Text ( text ). also { Log . d ( TAG , \"Text\" ) } } } } \u65e5\u5fd7\u5982\u4e0b\uff1a D/Compose: Button content lambda D/Compose: Boxt D/Compose: Text \u4e3a\u4ec0\u4e48\u91cd\u7ec4\u8303\u56f4\u4e0d\u662f\u4eceBox\u5f00\u59cb\uff1f Column \u3001 Row \u3001 Box \u4e43\u81f3 Layout \u8fd9\u79cd\u5bb9\u5668\u7c7b Composable \u90fd\u662f inline \u51fd\u6570\uff0c\u56e0\u6b64\u5b83\u4eec\u53ea\u80fd\u5171\u4eab\u8c03\u7528\u65b9\u7684\u91cd\u7ec4\u8303\u56f4\uff0c\u4e5f\u5c31\u662f Button \u7684 \u5c3elambda \u5982\u679c\u4f60\u5e0c\u671b\u901a\u8fc7\u7f29\u5c0f\u91cd\u7ec4\u8303\u56f4\u63d0\u9ad8\u6027\u80fd\u600e\u4e48\u529e\uff1f @Composable fun Foo () { var text by remember { mutableStateOf ( \"\" ) } Button ( onClick = { text = \" $ text $ text \" }) { Log . d ( TAG , \"Button content lambda\" ) Wrapper { Text ( text ). also { Log . d ( TAG , \"Text\" ) } } } } @Composable fun Wrapper ( content : @Composable () -> Unit ) { Log . d ( TAG , \"Wrapper recomposing\" ) Box { Log . d ( TAG , \"Box\" ) content () } } \u5982\u4e0a\uff0c\u81ea\u5b9a\u4e49\u975e inline \u51fd\u6570\uff0c\u4f7f\u4e4b\u6ee1\u8db3 Compose \u91cd\u7ec4\u8303\u56f4\u6700\u5c0f\u5316\u6761\u4ef6\u3002 \u7ed3\u8bba Just don't rely on side effects from recomposition and compose will do the right thing -- Compose Team \u5173\u4e8e\u91cd\u7ec4\u8303\u56f4\u7684\u5177\u4f53\u89c4\u5219\uff0c\u5b98\u65b9\u6587\u6863\u4e2d\u6ca1\u6709\u505a\u8be6\u7ec6\u8bf4\u660e\u3002\u56e0\u4e3a\u5f00\u53d1\u8005\u53ea\u9700\u8981\u7262\u8bb0 Compose \u901a\u8fc7\u7f16\u8bd1\u671f\u4f18\u5316\u4fdd\u8bc1\u4e86recomposition \u6c38\u8fdc\u6309\u7167\u6700\u5408\u7406\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u4ee5\u6700\u81ea\u7136\u7684\u65b9\u5f0f\u5f00\u53d1\u5c31\u597d\u4e86\uff0c\u65e0\u9700\u9488\u5bf9\u8fd9\u4e9b\u5177\u4f53\u89c4\u5219\u4ed8\u51fa\u989d\u5916\u7684\u5b66\u4e60\u6210\u672c\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u4f5c\u4e3a\u5f00\u53d1\u8005\u4ecd\u8981\u8c28\u8bb0\u4e00\u70b9\uff1a \u4e0d\u8981\u76f4\u63a5\u5728 Composable \u4e2d\u5199\u5305\u542b\u526f\u4f5c\u7528\uff08SideEffect\uff09\u7684\u903b\u8f91\uff01 \u526f\u4f5c\u7528\u4e0d\u80fd\u8ddf\u968f recomposition \u53cd\u590d\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u8bc1 Composable \u7684\u201c\u7eaf\u6d01\u6027\u201d\u3002 \u4f60\u4e0d\u80fd\u9884\u8bbe\u67d0\u4e2a function/lambda \u4e00\u5b9a\u4e0d\u53c2\u4e0e\u91cd\u7ec4\uff0c\u56e0\u800c\u5728\u91cc\u9762\u4fa5\u5e78\u7684\u57cb\u4e86\u4e00\u4e9b\u526f\u4f5c\u7528\u4ee3\u7801\uff0c\u4f7f\u5176\u53d8\u5f97\u4e0d\u7eaf\u6d01\u3002\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u8fd9\u91cc\u662f\u5426\u5b58\u5728 \u201cinline\u9677\u9631\u201d\uff0c\u5373\u4f7f\u80fd\u786e\u5b9a\u4e5f\u4e0d\u4fdd\u8bc1\u73b0\u5728\u7684\u4f18\u5316\u89c4\u5219\u5728\u672a\u6765\u4e0d\u4f1a\u6539\u53d8\u3002 \u6240\u4ee5\u6700\u5b89\u5168\u7684\u505a\u6cd5\u662f\uff0c\u5c06\u526f\u4f5c\u7528\u5199\u5230 LaunchedEffect{} \u3001 DisposableEffect{} \u3001 SideEffect{} \u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528 remeber{} \u3001 derivedStateOf{} \u5904\u7406\u90a3\u4e9b\u8017\u65f6\u7684\u8ba1\u7b97\u3002 \u5f00\u5934\u4f8b\u5b50\u7684\u8fd0\u884c\u7ed3\u679c\uff1a D/Compose: Button content lambda D/Compose: Text","title":"\u4e86\u89e3Compose\u7684\u91cd\u7ec4\u4f5c\u7528\u57df"},{"location":"principle/recomposition_scope/#compose","text":"Compose \u5728\u7f16\u8bd1\u671f\u5206\u6790\u51fa\u4f1a\u53d7\u5230\u67d0 state \u53d8\u5316\u5f71\u54cd\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u8bb0\u5f55\u5176\u5f15\u7528\uff0c\u5f53\u6b64 state \u53d8\u5316\u65f6\uff0c\u4f1a\u6839\u636e\u5f15\u7528\u627e\u5230\u8fd9\u4e9b\u4ee3\u7801\u5757\u5e76\u6807\u8bb0\u4e3a Invalid \u3002\u5728\u4e0b\u4e00\u6e32\u67d3\u5e27\u5230\u6765\u4e4b\u524d Compose \u4f1a\u89e6\u53d1 recomposition\uff0c\u5e76\u5728\u91cd\u7ec4\u8fc7\u7a0b\u4e2d\u6267\u884c invalid \u4ee3\u7801\u5757\u3002 Invalid \u4ee3\u7801\u5757\u5373\u7f16\u8bd1\u5668\u627e\u51fa\u7684\u4e0b\u6b21\u91cd\u7ec4\u8303\u56f4\u3002\u80fd\u591f\u88ab\u6807\u8bb0\u4e3a Invalid \u7684\u4ee3\u7801\u5fc5\u987b\u662f \u975e inline \u4e14\u65e0\u8fd4\u56de\u503c \u7684 @Composalbe function/lambda \uff0c\u5fc5\u987b\u9075\u5faa \u91cd\u7ec4\u8303\u56f4\u6700\u5c0f\u5316 \u539f\u5219\u3002","title":"Compose \u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4\uff1f"},{"location":"principle/recomposition_scope/#inline-unit","text":"\u5bf9\u4e8e inline \u51fd\u6570\uff0c\u7531\u4e8e\u5728\u7f16\u8bd1\u671f\u4f1a\u5728\u8c03\u7528\u5904\u4e2d\u5c55\u5f00\uff0c\u56e0\u6b64\u65e0\u6cd5\u5728\u4e0b\u6b21\u91cd\u7ec4\u65f6\u627e\u5230\u5408\u9002\u7684\u8c03\u7528\u5165\u53e3\uff0c\u53ea\u80fd\u5171\u4eab\u8c03\u7528\u65b9\u7684\u91cd\u7ec4\u8303\u56f4\u3002 \u800c\u5bf9\u4e8e\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u7531\u4e8e\u8fd4\u56de\u503c\u7684\u53d8\u5316\u4f1a\u5f71\u54cd\u8c03\u7528\u65b9\uff0c\u56e0\u6b64\u65e0\u6cd5\u5355\u72ec\u91cd\u7ec4\uff0c\u800c\u5fc5\u987b\u8fde\u540c\u8c03\u7528\u65b9\u4e00\u540c\u53c2\u4e0e\u91cd\u7ec4\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u4f5c\u4e3a\u5165\u53e3\u88ab\u6807\u8bb0\u4e3a invalid","title":"\u4e3a\u4f55\u662f \u975e inline \u4e14\u65e0\u8fd4\u56de\u503c\uff08\u8fd4\u56de Unit\uff09\uff1f"},{"location":"principle/recomposition_scope/#_1","text":"\u53ea\u6709\u4f1a\u53d7\u5230 state \u53d8\u5316\u5f71\u54cd\u7684\u4ee3\u7801\u5757\u624d\u4f1a\u53c2\u4e0e\u5230\u91cd\u7ec4\uff0c\u4e0d\u4f9d\u8d56 state \u7684\u4ee3\u7801\u4e0d\u53c2\u4e0e\u91cd\u7ec4\u3002 \u5728\u4e86\u89e3 Compose \u91cd\u7ed8\u8303\u56f4\u7684\u57fa\u672c\u89c4\u5219\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u56de\u770b\u6587\u7ae0\u5f00\u5934\u7684\u4f8b\u5b50\uff0c\u5e76\u5c1d\u8bd5\u56de\u7b54\u4e0b\u9762\u7684\u95ee\u9898\uff1a","title":"\u8303\u56f4\u6700\u5c0f\u5316\u539f\u5219"},{"location":"principle/recomposition_scope/#text","text":"\u5f53\u70b9\u51fb button \u540e\uff0cMutableState \u53d1\u751f\u53d8\u5316\uff0c\u4ee3\u7801\u4e2d\u552f\u4e00\u8bbf\u95ee\u8fd9\u4e2a state \u7684\u5730\u65b9\u662f Text(...) \uff0c\u4e3a\u4ec0\u4e48\u91cd\u7ec4\u8303\u56f4\u4e0d\u53ea\u662f Text(...) \uff0c\u800c\u662f Button {...} \u7684\u6574\u4e2a\u82b1\u62ec\u53f7\uff1f \u9996\u5148\u8981\u7406\u89e3\u51fa\u73b0\u5728 Text(...) \u53c2\u6570\u4e2d\u7684 text \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a \u8868\u8fbe\u5f0f \u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u5728\u6267\u884c\u987a\u5e8f\u4e0a\u662f\u7b49\u4ef7\u7684 println ( \u201c hello \u201d + \u201c world \u201d ) val arg = \u201c hello \u201d + \u201c world \u201d println ( arg ) \u603b\u662f \u201chello\u201d + \u201cworld\u201d \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u5148\u6267\u884c\uff0c\u7136\u540e\u624d\u662f println \u65b9\u6cd5\u7684\u8c03\u7528\u3002 \u56de\u5230\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u53c2\u6570 text \u4f5c\u4e3a\u8868\u8fbe\u5f0f\u6267\u884c\u7684\u8c03\u7528\u5904\u662f Button \u7684\u5c3elambda\uff0c\u800c\u540e\u624d\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 Text() \u3002 \u6240\u4ee5\u6b64\u65f6\u6700\u5c0f\u91cd\u7ec4\u8303\u56f4\u662f Button \u7684 \u5c3elambda \u800c\u975e Text()","title":"\u4e3a\u4ec0\u4e48\u4e0d\u53ea\u662f Text \u53c2\u4e0e\u91cd\u7ec4\uff1f"},{"location":"principle/recomposition_scope/#foo","text":"\u6309\u7167\u8303\u56f4\u6700\u5c0f\u5316\u539f\u5219\uff0c Foo \u4e2d\u6ca1\u6709\u4efb\u4f55\u5bf9 state \u7684\u8bbf\u95ee\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u77e5\u9053 Foo \u4e0d\u5e94\u8be5\u53c2\u4e0e\u91cd\u7ec4\u3002 \u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f8b\u5b50\u4e2d Foo \u901a\u8fc7 by \u7684\u4ee3\u7406\u65b9\u5f0f\u58f0\u660e text \uff0c\u5982\u679c\u6539\u4e3a = \u76f4\u63a5\u4e3a text \u8d4b\u503c\u5462\uff1f @Composable fun Foo () { val text : MutableState < String > = remember { mutableStateOf ( \"\" ) } Button ( onClick = { text = \" $ text $ text \" }) { Text ( text . value ) } } \u7b54\u6848\u662f\u4e00\u6837\u7684\uff0c\u4ecd\u7136\u4e0d\u4f1a\u53c2\u4e0e\u91cd\u7ec4\u3002 \u7b2c\u4e00\uff0cCompose \u5173\u5fc3\u7684\u662f\u4ee3\u7801\u5757\u4e2d\u662f\u5426\u6709\u5bf9 state \u7684 read \uff0c\u800c\u4e0d\u662f write \u3002 \u7b2c\u4e8c\uff0c\u8fd9\u91cc\u7684 = \u5e76\u4e0d\u610f\u5473\u7740 text \u4f1a\u88ab\u8d4b\u503c\u65b0\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a text \u6307\u5411\u7684 MutableState \u5b9e\u4f8b\u662f\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u7684\uff0c\u53d8\u7684\u53ea\u662f\u5185\u90e8\u7684 value","title":"Foo \u662f\u5426\u53c2\u52a0\u91cd\u7ec4 \uff1f"},{"location":"principle/recomposition_scope/#button","text":"\u8fd9\u4e2a\u5f88\u597d\u89e3\u91ca\uff0cButton \u7684\u8c03\u7528\u65b9 Foo \u4e0d\u53c2\u4e0e\u91cd\u7ec4\uff0cButton \u81ea\u7136\u4e5f\u4e0d\u4f1a\u53c2\u4e0e\u91cd\u7ec4\uff0c\u53ea\u6709\u5c3e lambda \u53c2\u4e0e\u91cd\u7ec4\u5373\u53ef\u3002","title":"\u4e3a\u4ec0\u4e48 Button \u4e0d\u53c2\u4e0e\u91cd\u7ec4\uff1f"},{"location":"principle/recomposition_scope/#inline","text":"\u524d\u9762\u8bb2\u4e86\uff0c\u53ea\u6709 \u975einline\u51fd\u6570 \u624d\u6709\u8d44\u683c\u6210\u4e3a\u91cd\u7ec4\u7684\u6700\u5c0f\u8303\u56f4\uff0c\u7406\u89e3\u8fd9\u70b9\u7279\u522b\u91cd\u8981\uff01 \u6211\u4eec\u5c06\u4ee3\u7801\u7a0d\u4f5c\u6539\u52a8\uff0c\u4e3a Text() \u5305\u88f9\u4e00\u4e2a Box{...} @Composable fun Foo () { var text by remember { mutableStateOf ( \"\" ) } Button ( onClick = { text = \" $ text $ text \" }) { Log . d ( TAG , \"Button content lambda\" ) Box { Log . d ( TAG , \"Box\" ) Text ( text ). also { Log . d ( TAG , \"Text\" ) } } } } \u65e5\u5fd7\u5982\u4e0b\uff1a D/Compose: Button content lambda D/Compose: Boxt D/Compose: Text","title":"\u6ce8\u610f\uff01\u91cd\u7ec4\u4e2d\u7684 Inline \u9677\u9631\uff01"},{"location":"principle/recomposition_scope/#box","text":"Column \u3001 Row \u3001 Box \u4e43\u81f3 Layout \u8fd9\u79cd\u5bb9\u5668\u7c7b Composable \u90fd\u662f inline \u51fd\u6570\uff0c\u56e0\u6b64\u5b83\u4eec\u53ea\u80fd\u5171\u4eab\u8c03\u7528\u65b9\u7684\u91cd\u7ec4\u8303\u56f4\uff0c\u4e5f\u5c31\u662f Button \u7684 \u5c3elambda \u5982\u679c\u4f60\u5e0c\u671b\u901a\u8fc7\u7f29\u5c0f\u91cd\u7ec4\u8303\u56f4\u63d0\u9ad8\u6027\u80fd\u600e\u4e48\u529e\uff1f @Composable fun Foo () { var text by remember { mutableStateOf ( \"\" ) } Button ( onClick = { text = \" $ text $ text \" }) { Log . d ( TAG , \"Button content lambda\" ) Wrapper { Text ( text ). also { Log . d ( TAG , \"Text\" ) } } } } @Composable fun Wrapper ( content : @Composable () -> Unit ) { Log . d ( TAG , \"Wrapper recomposing\" ) Box { Log . d ( TAG , \"Box\" ) content () } } \u5982\u4e0a\uff0c\u81ea\u5b9a\u4e49\u975e inline \u51fd\u6570\uff0c\u4f7f\u4e4b\u6ee1\u8db3 Compose \u91cd\u7ec4\u8303\u56f4\u6700\u5c0f\u5316\u6761\u4ef6\u3002","title":"\u4e3a\u4ec0\u4e48\u91cd\u7ec4\u8303\u56f4\u4e0d\u662f\u4eceBox\u5f00\u59cb\uff1f"},{"location":"principle/recomposition_scope/#_2","text":"Just don't rely on side effects from recomposition and compose will do the right thing -- Compose Team \u5173\u4e8e\u91cd\u7ec4\u8303\u56f4\u7684\u5177\u4f53\u89c4\u5219\uff0c\u5b98\u65b9\u6587\u6863\u4e2d\u6ca1\u6709\u505a\u8be6\u7ec6\u8bf4\u660e\u3002\u56e0\u4e3a\u5f00\u53d1\u8005\u53ea\u9700\u8981\u7262\u8bb0 Compose \u901a\u8fc7\u7f16\u8bd1\u671f\u4f18\u5316\u4fdd\u8bc1\u4e86recomposition \u6c38\u8fdc\u6309\u7167\u6700\u5408\u7406\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u4ee5\u6700\u81ea\u7136\u7684\u65b9\u5f0f\u5f00\u53d1\u5c31\u597d\u4e86\uff0c\u65e0\u9700\u9488\u5bf9\u8fd9\u4e9b\u5177\u4f53\u89c4\u5219\u4ed8\u51fa\u989d\u5916\u7684\u5b66\u4e60\u6210\u672c\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u4f5c\u4e3a\u5f00\u53d1\u8005\u4ecd\u8981\u8c28\u8bb0\u4e00\u70b9\uff1a \u4e0d\u8981\u76f4\u63a5\u5728 Composable \u4e2d\u5199\u5305\u542b\u526f\u4f5c\u7528\uff08SideEffect\uff09\u7684\u903b\u8f91\uff01 \u526f\u4f5c\u7528\u4e0d\u80fd\u8ddf\u968f recomposition \u53cd\u590d\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u8bc1 Composable \u7684\u201c\u7eaf\u6d01\u6027\u201d\u3002 \u4f60\u4e0d\u80fd\u9884\u8bbe\u67d0\u4e2a function/lambda \u4e00\u5b9a\u4e0d\u53c2\u4e0e\u91cd\u7ec4\uff0c\u56e0\u800c\u5728\u91cc\u9762\u4fa5\u5e78\u7684\u57cb\u4e86\u4e00\u4e9b\u526f\u4f5c\u7528\u4ee3\u7801\uff0c\u4f7f\u5176\u53d8\u5f97\u4e0d\u7eaf\u6d01\u3002\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u8fd9\u91cc\u662f\u5426\u5b58\u5728 \u201cinline\u9677\u9631\u201d\uff0c\u5373\u4f7f\u80fd\u786e\u5b9a\u4e5f\u4e0d\u4fdd\u8bc1\u73b0\u5728\u7684\u4f18\u5316\u89c4\u5219\u5728\u672a\u6765\u4e0d\u4f1a\u6539\u53d8\u3002 \u6240\u4ee5\u6700\u5b89\u5168\u7684\u505a\u6cd5\u662f\uff0c\u5c06\u526f\u4f5c\u7528\u5199\u5230 LaunchedEffect{} \u3001 DisposableEffect{} \u3001 SideEffect{} \u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528 remeber{} \u3001 derivedStateOf{} \u5904\u7406\u90a3\u4e9b\u8017\u65f6\u7684\u8ba1\u7b97\u3002","title":"\u7ed3\u8bba"},{"location":"principle/recomposition_scope/#_3","text":"D/Compose: Button content lambda D/Compose: Text","title":"\u5f00\u5934\u4f8b\u5b50\u7684\u8fd0\u884c\u7ed3\u679c\uff1a"},{"location":"principle/snapshot/","text":"\u900f\u8fc7Snapshot\u770b\u91cd\u7ec4 Jetpack Compose \u5f15\u5165\u4e86\u4e00\u79cd\u5904\u7406\u53ef\u89c2\u5bdf\u72b6\u6001\u7684\u65b0\u65b9\u6cd5 \u2014\u2014 Snapsot \uff08\u5feb\u7167\uff09\u3002\u5728 Compose \u4e2d\u6211\u4eec\u901a\u8fc7 state \u7684\u53d8\u5316\u6765\u89e6\u53d1\u91cd\u7ec4\uff0c\u90a3\u4e48\u8bf7\u601d\u8003\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a - \u4e3a\u4ec0\u4e48 state \u53d8\u5316\u80fd\u89e6\u53d1\u91cd\u7ec4\u5462\uff1f - \u5b83\u662f\u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4\u5462\uff1f - \u53ea\u8981 state \u53d8\u5316\u5c31\u4e00\u5b9a\u4f1a\u91cd\u7ec4\u5417\uff1f \u8ba9\u6211\u4eec\u5e26\u7740\u95ee\u9898\u53bb\u5b66\u4e60\uff01 \u672c\u6587\u90e8\u5206\u4f8b\u5b50\u548c\u5185\u5bb9\u6765\u81ea\uff1a Introduction to the Compose Snapshot system Snapshot API \u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u4e86\u89e3\u5feb\u7167\u5982\u4f55\u4f7f\u7528\uff0c\u8fd9\u4e9b\u90fd\u662f\u6846\u67b6\u5e94\u8be5\u505a\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u624b\u52a8\u64cd\u4f5c\u5f88\u53ef\u80fd\u641e\u51fa\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u53ea\u662f\u6f14\u793a\u5feb\u7167\u7684\u4f7f\u7528\uff08\u4e0d\u6d89\u53ca\u5e95\u5c42\u5b9e\u73b0\uff09\uff0c\u8fd9\u6837\u6709\u52a9\u4e8e\u7406\u89e3Compose\u91cd\u7ec4\u7684\u673a\u5236\u3002 Snapshot (\u5feb\u7167)\uff0c\u7b80\u5355\u6bd4\u55bb\u5c31\u662f\u7ed9\u6240\u6709 state \u62cd\u4e86\u4e2a\u7167\uff0c\u56e0\u6b64\u4f60\u80fd\u83b7\u53d6\u5230\u62cd\u6444\u4e4b\u524d\u7684\u72b6\u6001\u3002 \u6211\u4eec\u901a\u8fc7\u4ee3\u7801\u6f14\u793a\u6765\u770b\u770b Snapshot \u5230\u5e95\u662f\u505a\u4ec0\u4e48\u7684: \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a Dog \u7c7b,\u5305\u542b\u4e00\u4e2a state : class Dog { var name : MutableState < String > = mutableStateOf ( \"\" ) } \u521b\u5efa\u5feb\u7167 val dog = Dog () dog . name . value = \u201c Spot \u201d val snapshot = Snapshot . takeSnapshot () dog . name . value = \u201c Fido \u201d println ( dog . name . value ) snapshot . enter { println ( dog . name . value ) } println ( dog . name . value ) // Output: Fido Spot Fido takeSnapshot() \u5c06 \"\u62cd\u6444\" \u7a0b\u5e8f\u4e2d\u6240\u6709 State \u503c\u7684\u5feb\u7167\uff0c\u65e0\u8bba\u5b83\u4eec\u662f\u5728\u4f55\u5904\u521b\u5efa\u7684 enter \u51fd\u6570\u4f1a\u628a\u5feb\u7167\u72b6\u6001\u6062\u590d\u5e76\u5e94\u7528\u5230\u51fd\u6570\u4f53\u4e2d \u56e0\u6b64\u6211\u4eec\u770b\u5230\u4ec5\u5728 enter \u4e2d\u662f\u65e7\u503c\u3002 \u53ef\u53d8\u5feb\u7167 \u6211\u4eec\u5c1d\u8bd5\u5728 enter \u5757\u4e2d\u66f4\u6539\u72d7\u72d7\u7684\u540d\u5b57\uff1a fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot = Snapshot . takeSnapshot () println ( dog . name . value ) snapshot . enter { println ( dog . name . value ) dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) } // Output: Spot Spot java . lang . IllegalStateException : Cannot modify a state object in a read - only snapshot \u4f1a\u53d1\u73b0\u5f53\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539\u503c\u65f6\u62a5\u9519\u4e86\uff0c\u56e0\u4e3a takeSnapshot() \u662f\u53ea\u8bfb\u7684,\u56e0\u6b64\u5728 enter \u5185\u90e8\u6211\u4eec\u53ef\u4ee5\u8bfb\u4f46\u4e0d\u80fd\u5199\uff0c\u5982\u679c\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u53ef\u53d8\u5feb\u7167\u5e94\u4f7f\u7528 takeMutableSnapshot() \u65b9\u6cd5\u3002 fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot = Snapshot . takeMutableSnapshot () println ( dog . name . value ) snapshot . enter { dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) } // Output: Spot Fido Spot \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u6ca1\u6709\u5d29\u6e83\u4e86\uff0c\u4f46\u662f\u5728 enter \u91cc\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u5728\u5176\u8303\u56f4\u4e4b\u5916\u751f\u6548\uff01\u8fd9\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u9694\u79bb\u673a\u5236\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5e94\u7528 enter \u5185\u90e8\u7684\u53d8\u66f4\u9700\u8981\u8c03\u7528 apply() \u65b9\u6cd5\uff1a fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot = Snapshot . takeMutableSnapshot () println ( dog . name . value ) snapshot . enter { dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) snapshot . apply () println ( dog . name . value ) } // Output: Spot Fido Spot Fido \u53ef\u4ee5\u770b\u5230\u8c03\u7528 apply \u4e4b\u540e\uff0c\u65b0\u503c\u5728 enter \u4e4b\u5916\u4e5f\u751f\u6548\u4e86\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f Snapshot.withMutableSnapshot() \u6765\u7b80\u5316\u8c03\u7528\uff1a fun main () { val dog = Dog () dog . name . value = \"Spot\" Snapshot . withMutableSnapshot { println ( dog . name . value ) dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) } \u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u77e5\u9053\u4e86\uff1a - \u62cd\u6444\u6211\u4eec\u6240\u6709\u72b6\u6001\u7684\u5feb\u7167 - \u201c\u6062\u590d\u201d\u72b6\u6001\u5230\u7279\u5b9a\u7684\u4ee3\u7801\u5757 - \u6539\u53d8\u72b6\u6001\u503c \u4f46\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u611f\u77e5\u8bfb\u5199\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u641e\u6e05\u695a\u8fd9\u4e2a\u3002 \u89c2\u5bdf\u8bfb\u53d6\u548c\u5199\u5165 \u65e0\u8bba\u662f LiveData , Flow \u8fd8\u662f State \u90fd\u662f\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u90a3\u4e48\u5c31\u8981\u6709\u89c2\u5bdf\u8005\u548c\u88ab\u89c2\u5bdf\u8005\u3002\u5bf9\u4e8e\u5feb\u7167\u7cfb\u7edf\uff0c\u88ab\u89c2\u5bdf\u8005\u5c31\u662f\u6211\u4eec\u7684 state \uff0c\u800c\u89c2\u5bdf\u8005\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u8bfb\u53d6\u89c2\u5bdf\u8005\uff0c\u4e00\u4e2a\u662f\u5199\u5165\u89c2\u5bdf\u8005\u3002 \u5b9e\u9645\u4e0a takeMutableSnapshot \u6709\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\u7684\uff0c\u5206\u522b\u5728\u8bfb\u548c\u5199\u65f6\u56de\u8c03\uff1a fun takeMutableSnapshot ( readObserver : (( Any ) -> Unit ) ? = null , writeObserver : (( Any ) -> Unit ) ? = null ): MutableSnapshot = ( currentSnapshot () as? MutableSnapshot ) ?. takeNestedMutableSnapshot ( readObserver , writeObserver ) ?: error ( \"Cannot create a mutable snapshot of an read-only snapshot\" ) \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u56de\u8c03\u4e2d\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c,\u5728 Compose \u4e2d\u5c31\u662f\u503c\u8bfb\u53d6\u65f6\u8bb0\u5f55 ComposeScope ,\u5199\u5165\u65f6\u5982\u679c\u6709\u53d8\u5316\u5219\u5c06\u5bf9\u5e94\u7684 Scope \u6807\u8bb0\u4e3a invalid \u3002 \u5168\u5c40\u5feb\u7167 \u5168\u5c40\u5feb\u7167\u662f\u4f4d\u4e8e\u5feb\u7167\u6811\u6839\u90e8\u7684\u53ef\u53d8\u5feb\u7167\u3002\u4e0e\u5fc5\u987b apply \u624d\u80fd\u751f\u6548\u7684\u5e38\u89c4\u53ef\u53d8\u5feb\u7167\u76f8\u6bd4\uff0c\u5168\u5c40\u5feb\u7167\u6ca1\u6709 apply \u64cd\u4f5c\u3002\u6bd4\u5982\u6211\u4eec\u4f1a\u5728 ViewModel \u91cc\u5b9a\u4e49 state ,\u5e76\u4e14\u5728 repository \u8bf7\u6c42\u6570\u636e\u5e76\u7ed9 state \u8d4b\u503c\u3002\u6b64\u65f6\u5c31\u4f1a\u7531 GlobalSnapshot \u53bb\u53d1\u9001\u901a\u77e5\uff1a \u5b83\u901a\u8fc7\u8c03\u7528\uff1a - Snapshot.notifyObjectsInitialized \u3002\u8fd9\u4f1a\u4e3a\u81ea\u4e0a\u6b21\u8c03\u7528\u4ee5\u6765\u66f4\u6539\u7684\u4efb\u4f55\u72b6\u6001\u53d1\u9001\u901a\u77e5\u3002 - Snapshot.sendApplyNotifications() \u3002\u8fd9\u7c7b\u4f3c\u4e8e notifyObjectsInitialized\uff0c\u4f46\u53ea\u6709\u5728\u5b9e\u9645\u53d1\u751f\u66f4\u6539\u65f6\u624d\u4f1a\u63a8\u8fdb\u5feb\u7167\u3002\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u5c06\u4efb\u4f55\u53ef\u53d8\u5feb\u7167\u5e94\u7528\u4e8e\u5168\u5c40\u5feb\u7167\uff0c\u5c31\u4f1a\u9690\u5f0f\u8c03\u7528\u6b64\u51fd\u6570\u3002 internal object GlobalSnapshotManager { private val started = AtomicBoolean ( false ) fun ensureStarted () { if ( started . compareAndSet ( false , true )) { val channel = Channel < Unit > ( Channel . CONFLATED ) CoroutineScope ( AndroidUiDispatcher . Main ). launch { channel . consumeEach { Snapshot . sendApplyNotifications () } } Snapshot . registerGlobalWriteObserver { channel . offer ( Unit ) } } } } \u53ef\u4ee5\u770b\u5230\u5728 android \u5e73\u53f0\u4e0a\u6ce8\u518c\u4e86 writeObserver ,\u5b83\u8fd8\u6709 ApplyObserver \u6211\u4eec\u540e\u9762\u518d\u8bf4\u3002 \u591a\u7ebf\u7a0b \u5728\u7ed9\u5b9a\u7ebf\u7a0b\u7684\u5feb\u7167\u4e2d\uff0c\u5728\u5e94\u7528\u8be5\u5feb\u7167\u4e4b\u524d\uff0c\u4e0d\u4f1a\u770b\u5230\u5176\u4ed6\u7ebf\u7a0b\u5bf9\u72b6\u6001\u503c\u6240\u505a\u7684\u66f4\u6539\u3002\u5feb\u7167\u4e0e\u5176\u4ed6\u5feb\u7167\u201c\u9694\u79bb\u201d\u3002\u5728\u5e94\u7528\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u8fdb\u5168\u5c40\u5feb\u7167\u4e4b\u524d\uff0c\u5bf9\u5feb\u7167\u5185\u7684\u72b6\u6001\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u5bf9\u5176\u4ed6\u7ebf\u7a0b\u90fd\u5c06\u4e0d\u53ef\u89c1\u3002 \u770b\u8fd9\u4e2a\u7c7b\u540d\u5927\u5bb6\u5c31\u61c2\u4e86 SnapshotThreadLocal : internal actual class SnapshotThreadLocal < T > { private val map = AtomicReference < ThreadMap > ( emptyThreadMap ) private val writeMutex = Any () @Suppress ( \"UNCHECKED_CAST\" ) actual fun get (): T? = map . get (). get ( Thread . currentThread (). id ) as T? actual fun set ( value : T?) { val key = Thread . currentThread (). id synchronized ( writeMutex ) { val current = map . get () if ( current . trySet ( key , value )) return map . set ( current . newWith ( key , value )) } } } \u51b2\u7a81 \u5982\u679c\u6211\u4eec\"\u62cd\u6444\"\u4e86\u591a\u4e2a\u5feb\u7167\u5e76\u4e14\u5747\u5e94\u7528\u4fee\u6539\u4f1a\u600e\u6837\u5462\uff1f fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot1 = Snapshot . takeMutableSnapshot () val snapshot2 = Snapshot . takeMutableSnapshot () println ( dog . name . value ) snapshot1 . enter { dog . name . value = \"Fido\" println ( \"in snapshot1: \" + dog . name . value ) } // Don\u2019t apply it yet, let\u2019s try setting a third value first. println ( dog . name . value ) snapshot2 . enter { dog . name . value = \"Fluffy\" println ( \"in snapshot2: \" + dog . name . value ) } // Ok now we can apply both. println ( \"before applying: \" + dog . name . value ) snapshot1 . apply () println ( \"after applying 1: \" + dog . name . value ) snapshot2 . apply () println ( \"after applying 2: \" + dog . name . value ) } // Output: Spot in snapshot1 : Fido Spot in snapshot2 : Fluffy before applying : Spot after applying 1 : Fido after applying 2 : Fido \u4f1a\u53d1\u73b0\u7b2c\u4e8c\u4e2a\u5feb\u7167\u7684\u66f4\u6539\u65e0\u6cd5\u5e94\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u89c6\u56fe\u4ee5\u76f8\u540c\u7684\u521d\u59cb\u503c\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u5feb\u7167\u8981\u4e48\u518d\u6267\u884c\u4e00\u6b21 enter \uff0c\u8981\u4e48\u544a\u8bc9\u5982\u4f55\u89e3\u51b2\u7a81\u3002 Compose \u5b9e\u9645\u4e0a\u6709\u4e00\u4e2a\u7528\u4e8e\u89e3\u51b3\u5408\u5e76\u51b2\u7a81\u7684 API\uff01 mutableStateOf() \u9700\u8981\u4e00\u4e2a\u53ef\u9009\u7684 SnapshotMutationPolicy . \u8be5\u7b56\u7565\u5b9a\u4e49\u4e86\u5982\u4f55\u6bd4\u8f83\u7279\u5b9a\u7c7b\u578b\u7684\u503c (equivalent) \u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u51b2\u7a81 (merge)\u3002\u5e76\u4e14\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u7b56\u7565\uff1a structuralEqualityPolicy \u2013 \u4f7f\u7528\u5bf9\u8c61\u7684 equals \u65b9\u6cd5 ( ==)\u6bd4\u8f83\u5bf9\u8c61\uff0c\u6240\u6709\u5199\u5165\u90fd\u88ab\u8ba4\u4e3a\u662f\u975e\u51b2\u7a81\u7684\u3002 referentialEqualityPolicy \u2013 \u901a\u8fc7\u5f15\u7528 ( ===)\u6bd4\u8f83\u5bf9\u8c61\uff0c\u6240\u6709\u5199\u5165\u90fd\u88ab\u8ba4\u4e3a\u662f\u975e\u51b2\u7a81\u7684\u3002 neverEqualPolicy \u2013 \u5c06\u6240\u6709\u5bf9\u8c61\u89c6\u4e3a\u4e0d\u76f8\u7b49\uff0c\u6240\u6709\u5199\u5165\u90fd\u88ab\u8ba4\u4e3a\u662f\u975e\u51b2\u7a81\u7684\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u89c4\u5219\uff1a class Dog { var name : MutableState < String > = mutableStateOf ( \"\" , policy = object : SnapshotMutationPolicy < String > { override fun equivalent ( a : String , b : String ): Boolean = a == b override fun merge ( previous : String , current : String , applied : String ): String = \" $ applied , briefly known as $ current , originally known as $ previous \" }) } fun main () { // Same as before. } // Output: Spot in snapshot1 : Fido Spot in snapshot2 : Fluffy before applying : Spot after applying 1 : Fido after applying 2 : Fluffy , briefly known as Fido , originally known as Spot \u603b\u7ed3 \u4ee5\u4e0a\u5c31\u662f Snapshot (\u5feb\u7167)\u7684\u57fa\u672c\u4f7f\u7528,\u5b83\u5c31\u76f8\u5f53\u4e8e\u9ad8\u7ea7\u7684 DiffUtil\u3002\u5b83\u7684\u7279\u70b9\u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a - \u54cd\u5e94\u5f0f\uff1a\u6709\u72b6\u6001\u7684\u4ee3\u7801\u59cb\u7ec8\u81ea\u52a8\u4fdd\u6301\u6700\u65b0\u3002\u6211\u4eec\u65e0\u9700\u62c5\u5fc3\u8ba2\u9605\u548c\u53cd\u8ba2\u9605\u3002 - \u9694\u79bb\u6027\uff1a\u6709\u72b6\u6001\u4ee3\u7801\u53ef\u4ee5\u5bf9\u72b6\u6001\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u5728\u4e0d\u540c\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u4f1a\u6539\u53d8\u8be5\u72b6\u6001\u3002 Compose \u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u5b9e\u73b0\u65e7\u7684 View \u7cfb\u7edf\u65e0\u6cd5\u5b9e\u73b0\u7684\u6548\u679c\uff0c\u4f8b\u5982\u5c06\u91cd\u6784\u653e\u5230\u591a\u4e2a\u540e\u53f0\u7ebf\u7a0b\u4e0a\u53bb\u6267\u884c\u3002 \u89e3\u60d1 \u4e3a\u4ec0\u4e48 state \u53d8\u5316\u80fd\u89e6\u53d1\u91cd\u7ec4\u5462\uff1f Jetpack Compose\u5728\u6267\u884c\u65f6\u6ce8\u518c\u4e86 readObserverOf \u548c writeObserverOf : private inline fun < T > composing ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? , block : () -> T ): T { val snapshot = Snapshot . takeMutableSnapshot ( readObserverOf ( composition ), writeObserverOf ( composition , modifiedValues ) ) try { return snapshot . enter ( block ) } finally { applyAndCheck ( snapshot ) } } \u5176\u4e2d\u5728\u8bfb\u53d6\u72b6\u6001\u7684\u5730\u65b9\u4f1a\u6267\u884c\uff1a readObserverOf \u6765\u8bb0\u5f55\u54ea\u4e9b scope \u4f7f\u7528\u4e86\u6b64 state` : override fun recordReadOf ( value : Any ) { if ( ! areChildrenComposing ) { composer . currentRecomposeScope ?. let { it . used = true observations . add ( value , it ) ... } } } writeObserverOf \u800c\u5199\u5165\u65f6\u4f1a\u627e\u51fa\u5bf9\u5e94\u4f7f\u7528\u6b64 state \u7684 scope \u4f7f\u5176 invalidate : override fun recordWriteOf ( value : Any ) = synchronized ( lock ) { invalidateScopeOfLocked ( value ) derivedStates . forEachScopeOf ( value ) { invalidateScopeOfLocked ( it ) } } private fun invalidateScopeOfLocked ( value : Any ) { observations . forEachScopeOf ( value ) { scope -> if ( scope . invalidateForResult ( value ) == InvalidationResult . IMMINENT ) { observationsProcessed . add ( value , scope ) } } } \u5728\u4e0b\u6b21\u5e27\u4fe1\u53f7\u5230\u8fbe\u65f6\u5bf9\u4e8e\u8fd9\u4e9b scope \u6267\u884c\u91cd\u7ec4\u3002 \u5b83\u662f\u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4\u5462\uff1f \u80fd\u591f\u88ab\u6807\u8bb0\u4e3a Invalid \u7684\u4ee3\u7801\u5fc5\u987b\u662f\u975e inline \u4e14\u65e0\u8fd4\u56de\u503c\u7684 @Composalbe function/lambda\uff0c\u5fc5\u987b\u9075\u5faa \u91cd\u7ec4\u8303\u56f4\u6700\u5c0f\u5316 \u539f\u5219\u3002 \u8be6\u7ec6\u53c2\u89c1\uff1a Compose \u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4 \u53ea\u8981 state \u53d8\u5316\u5c31\u4e00\u5b9a\u4f1a\u91cd\u7ec4\u5417\uff1f \u4e0d\u4e00\u5b9a\uff0c\u5177\u4f53\u6848\u4f8b\u8bf7\u770b\u4ee5\u4e0b\u4f8b\u5b50\uff1a 1. \u4f8b\u5b50\u2460 val darkMode = mutableStateOf ( \"hello\" ) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { lifecycleScope . launch { delay ( 100 ) val text = darkMode . value darkMode . value = \"Compose\" } } } \u4e0d\u4f1a\u91cd\u7ec4\uff0c\u56e0\u4e3a delay \u5bfc\u81f4\u72b6\u6001\u7684\u8bfb\u53d6\u662f\u5728 snap.apply \u65b9\u6cd5\u4e4b\u5916\u6267\u884c\u7684, \u56e0\u6b64\u4e5f\u5c31\u4e0d\u4f1a\u6ce8\u518c readObserverOf ,\u81ea\u7136\u4e5f\u5c31\u4e0d\u4f1a\u4e0e composeScope \u6302\u94a9\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u89e6\u53d1\u91cd\u7ec4\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5982\u679c\u662f\u5728 delay \u4e4b\u524d\u8bfb\u53d6\u5219\u4f1a\u91cd\u7ec4\u3002 2. \u4f8b\u5b50\u2461 val darkMode = mutableStateOf ( \"hello\" ) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { thread { val text = darkMode . value darkMode . value = \"Compose\" } } } thread \u4e2d\u7684 state \u5728\u4e0d\u540c\u7ebf\u7a0b\u8bfb\u53d6\uff0c\u7531\u4e8e SnapshotThreadLocal \u673a\u5236\uff0c\u5982\u679c\u6b64\u7ebf\u7a0b\u65e0\u5feb\u7167\uff0c\u5219\u83b7\u53d6 GlobalSnapshot \uff1a internal fun currentSnapshot(): Snapshot = threadSnapshot.get() ?: currentGlobalSnapshot.get() \u7531\u4e8e\u6ca1\u6709\u5bf9\u5e94\u7684 readObserver ,\u56e0\u6b64\u6b64\u4f8b\u5b50\u4e0d\u4f1a\u91cd\u7ec4\u3002\u4f46\u662f\u5982\u679c\u5728 composable \u5185\u8bfb\u53d6\u4e86\u6b64 state \u662f\u4f1a\u91cd\u7ec4\u7684\uff0c\u56e0\u4e3a ReComposer \u6ce8\u518c\u4e86 ApplyObserver ,\u5728 apply \u65f6\u4e5f\u4f1a\u5bf9 globalModified \u8fdb\u884c\u8bb0\u5f55\uff0c\u5728\u4e0b\u4e00\u5e27\u4fe1\u53f7\u5230\u8fbe\u65f6\u53bb\u67e5\u627e\u5bf9\u5e94\u7684 scope \uff08\u5927\u5bb6\u53ef\u4ee5\u65ad\u70b9\u8ddf\u4e00\u4e0b\u6d41\u7a0b\uff09\uff1a val unregisterApplyObserver = Snapshot . registerApplyObserver { changed , _ -> synchronized ( stateLock ) { if ( _state . value >= State . Idle ) { snapshotInvalidations += changed deriveStateLocked () } else null } ?. resume ( Unit ) } 3. \u4f8b\u5b50\u2462 override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { val darkMode = mutableStateOf ( \"hello\" ) Text ( darkMode . value ) darkMode . value = \"Compose\" } } \u8fd9\u4e2a\u4e5f\u6ca1\u89e6\u53d1\u91cd\u7ec4\uff0c\u53ef\u80fd\u5927\u5bb6\u4f1a\u7591\u60d1\uff0c\u8fd9\u4e2a\u6ca1\u5f02\u6b65\uff0c\u65ad\u70b9\u4e5f\u6709 readObserver \u548c writeObserver \u4e3a\u5565\u4e0d\u4f1a\u89e6\u53d1\u91cd\u7ec4\u5462\uff1f \u4e0d\u662f\u8bf4\u72b6\u6001\u53d8\u66f4\u4f1a\u5c06\u4f7f\u7528\u5b83\u7684 scope \u8bb0\u4e3a invalid \u5417\uff1f \u7136\u800c\u5b9e\u9645\u8fd0\u884c\u4e2d\uff0c InvalidationResult \u4e3a IGNORE fun invalidate ( scope : RecomposeScopeImpl , instance : Any? ): InvalidationResult { ... if ( anchor == null || ! slotTable . ownsAnchor ( anchor ) || ! anchor . valid ) // The scope has not yet entered the composition return InvalidationResult . IGNORED ... } \u9996\u5148\u6211\u4eec\u786e\u5b9e\u8bb0\u5f55\u4e0b\u4e86\u4f7f\u7528 state \u7684 scope ,\u4e0d\u7136\u4e5f\u4e0d\u4f1a\u5728\u4fee\u6539\u65f6\u89e6\u53d1 invalidate \u884c\u4e3a\u3002\u4f46\u6b64\u65f6 slotTable \u91cc\u5e76\u8fd8\u6ca1\u6709\u53ef\u91cd\u7ec4\u7684\u533a\u57df\u951a\u70b9\u4fe1\u606f\uff0c\u53ea\u6709\u5728\u7ec4\u5408\u5b8c\u6210\u4e4b\u540e\u624d\u80fd\u62ff\u5230\u6bcf\u4e2a\u533a\u57df\u7684\u951a\u70b9 anchors \u3002 \u7b80\u5355\u63cf\u8ff0\u5c31\u662f Compose \u4f7f\u7528 SlotTable \u6765\u8bb0\u5f55\u6570\u636e\u4fe1\u606f\uff0c\u6b64\u65f6\u7b2c\u4e00\u6b21\u5b8c\u6574\u7684\u7ec4\u5408\u90fd\u6ca1\u5b8c\u6210\uff0c\u4e0d\u77e5\u9053\u8be5\u4ece\u54ea\u4e0b\u624b\u3002 \u6709\u5173 SlotTable \u7684\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\uff1a \u6df1\u5165\u8be6\u89e3JetpackCompose|\u5b9e\u73b0\u539f\u7406 \u5176\u6b21\u5c31\u662f\u7531\u4e8e state \u7684\u521b\u5efa\u662f\u5728 enter \u4ee3\u7801\u5757\u4e2d\uff0c\u6b64\u65f6 state.snapshotId == Snapshot.id ,\u5e76\u4e0d\u4f1a\u8bb0\u5f55 state \u7684\u53d8\u5316\u3002\u6bd5\u7adf\u5feb\u7167\u7684 diff \u662f\u4f5c\u7528\u5728\u4e24\u4e2a\u5feb\u7167\u4e4b\u95f4\u3002 internal fun < T : StateRecord > T . overwritableRecord ( state : StateObject , snapshot : Snapshot , candidate : T ): T { ... val id = snapshot . id //\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\uff0c\u5e76\u6ca1\u6709\u8bb0\u5f55state\u53d8\u5316 if ( candidate . snapshotId == id ) return candidate ... } \u4f46\u662f\u5982\u679c\u4f60\u628a state \u7684\u521b\u5efa\u653e\u5230 setContent \u4e4b\u5916\u5462\uff1f 4. \u4f8b\u5b50\u2463 val darkMode = mutableStateOf ( \"hello\" ) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { Text ( darkMode . value ) darkMode . value = \"Compose\" } } \u7b54\u6848\u662f\u4f1a\u91cd\u7ec4 \u56e0\u4e3a\u8fd9\u4e2a\u72b6\u6001\u662f\u5728\u62cd\u6444\u4e4b\u524d\u521b\u5efa\u7684\uff0c\u6b64\u65f6 state.snapshotId != Snapshot.id ,\u6b64\u671f\u95f4\u5bf9 state \u7684\u4fee\u6539\u867d\u7136\u4e0d\u4f1a\u7acb\u5373\u6807\u8bb0\u4e3a invalid ,\u4f46\u662f\u4f1a\u8ba1\u5165 modified , apply \u4e4b\u540e\uff0c\u7531\u5168\u5c40\u5feb\u7167\u8fdb\u884c\u901a\u77e5: internal fun < T : StateRecord > T . overwritableRecord ( state : StateObject , snapshot : Snapshot , candidate : T ): T { ... val id = snapshot . id if ( candidate . snapshotId == id ) return candidate val newData = newOverwritableRecord ( state , snapshot ) newData . snapshotId = id //\u8bb0\u5f55\u53d8\u5316 snapshot . recordModified ( state ) return newData } \u4f1a\u5728 apply \u65f6\u901a\u77e5\u5230\u89c2\u5bdf\u8005 ApplyObserver \uff08\u521a\u624d\u8fd8\u63d0\u5230 writerObserver \uff09\uff0c\u8bb0\u5f55\u4e0b changed : val unregisterApplyObserver = Snapshot . registerApplyObserver { changed , _ -> synchronized ( stateLock ) { if ( _state . value >= State . Idle ) { // here snapshotInvalidations += changed deriveStateLocked () } else null } ?. resume ( Unit ) } composation \u5219\u4f1a\u627e\u51fa\u89c2\u5bdf\u4e86\u5bf9\u5e94\u53d8\u5316\u72b6\u6001\u7684 scope \u6807\u8bb0\u4e3a invalid \u7b49\u5f85\u91cd\u7ec4\uff1a private fun addPendingInvalidationsLocked ( values : Set < Any > ) { var invalidated : HashSet < RecomposeScopeImpl >? = null fun invalidate ( value : Any ) { observations . forEachScopeOf ( value ) { scope -> if ( ! observationsProcessed . remove ( value , scope ) && scope . invalidateForResult ( value ) != InvalidationResult . IGNORED ) { val set = invalidated ?: HashSet < RecomposeScopeImpl > (). also { invalidated = it } set . add ( scope ) } } } for ( value in values ) { if ( value is RecomposeScopeImpl ) { value . invalidateForResult ( null ) } else { invalidate ( value ) derivedStates . forEachScopeOf ( value ) { invalidate ( it ) } } } invalidated ?. let { observations . removeValueIf { scope -> scope in it } } } 5. \u4f8b\u5b50\u2464 var onlyDisplay = mutableStateOf ( \"onlyDisplay\" ) class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { Text ( text = onlyDisplay . value , fontSize = 50. sp , ) onlyDisplay . value = \"Display\" } } } \u5982\u679c\u628a state \u58f0\u660e\u653e\u5230 kt \u6587\u4ef6\u6700\u5916\u5c42\uff0c\u662f\u5426\u4f1a\u91cd\u7ec4\uff1f \u7b54\u6848\u662f\u4e0d\u4f1a\uff0c\u56e0\u4e3a\u5728 kotlin \u4e2d\u5982\u679c\u628a\u53d8\u91cf\u4e0d\u653e\u5230\u7c7b\u91cc\uff0c\u76f4\u63a5\u653e\u5230\u6587\u4ef6\u9876\u5c42\u3002\u7f16\u8bd1\u4e4b\u540e\u5176\u5b9e\u4f1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u800c\u8fd9\u4e2a\u5c5e\u6027\u5219\u53d8\u6210 static \u7684\u3002 public final class MainActivityKt { static MutableState < String > onlyDisplay = SnapshotStateKt . mutableStateOf$default ( \"onlyDisplay\" , null , 2 , null ); } \u56e0\u6b64\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u6d89\u53ca\u4e86\u7c7b\u7684\u521d\u59cb\u5316\u95ee\u9898\uff1a \u53ea\u6709\u4e3b\u52a8\u8bf7\u6c42\u4e00\u4e2a\u7c7b,\u8fd9\u4e2a\u7c7b\u624d\u4f1a\u521d\u59cb\u5316,\u4ec5\u5305\u542b\u9759\u6001\u53d8\u91cf,\u51fd\u6570,\u7b49\u9759\u6001\u7684\u4e1c\u897f. \u4e5f\u5c31\u662f\u8bf4\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u53ea\u6709\u5728\u8c03\u7528 onlyDisplay \u65f6\uff0c\u624d\u6267\u884c\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u5176 state.snapshotId==snapshot.Id ,\u6b64\u65f6\u9996\u6b21\u7ec4\u5408\u5c1a\u672a\u6267\u884c\u5b8c\u6bd5\uff0c\u672c\u6b21\u7684 invalidateResult==IGNORE \uff0c\u4e5f\u4e0d\u4f1a\u8bb0\u4e3a modified \uff0c\u5c31\u548c\u4f8b\u5b50\u2462 \u4e00\u6837\u7684\u95ee\u9898\u4e86\u3002 \u4ee5\u4e0a\u5c31\u662f\u5feb\u7167\u7cfb\u7edf\u7684\u4f7f\u7528\u548c Jetpack Compose \u91cd\u7ec4\u7684\u673a\u5236\uff0c\u6709\u4efb\u4f55\u4e0d\u6b63\u786e\u7684\u5730\u65b9\u6b22\u8fce\u6307\u6b63\u3002","title":"\u900f\u8fc7Snapshot\u770b\u91cd\u7ec4"},{"location":"principle/snapshot/#snapshot","text":"Jetpack Compose \u5f15\u5165\u4e86\u4e00\u79cd\u5904\u7406\u53ef\u89c2\u5bdf\u72b6\u6001\u7684\u65b0\u65b9\u6cd5 \u2014\u2014 Snapsot \uff08\u5feb\u7167\uff09\u3002\u5728 Compose \u4e2d\u6211\u4eec\u901a\u8fc7 state \u7684\u53d8\u5316\u6765\u89e6\u53d1\u91cd\u7ec4\uff0c\u90a3\u4e48\u8bf7\u601d\u8003\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a - \u4e3a\u4ec0\u4e48 state \u53d8\u5316\u80fd\u89e6\u53d1\u91cd\u7ec4\u5462\uff1f - \u5b83\u662f\u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4\u5462\uff1f - \u53ea\u8981 state \u53d8\u5316\u5c31\u4e00\u5b9a\u4f1a\u91cd\u7ec4\u5417\uff1f \u8ba9\u6211\u4eec\u5e26\u7740\u95ee\u9898\u53bb\u5b66\u4e60\uff01 \u672c\u6587\u90e8\u5206\u4f8b\u5b50\u548c\u5185\u5bb9\u6765\u81ea\uff1a Introduction to the Compose Snapshot system","title":"\u900f\u8fc7Snapshot\u770b\u91cd\u7ec4"},{"location":"principle/snapshot/#snapshot-api","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u9700\u8981\u4e86\u89e3\u5feb\u7167\u5982\u4f55\u4f7f\u7528\uff0c\u8fd9\u4e9b\u90fd\u662f\u6846\u67b6\u5e94\u8be5\u505a\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u624b\u52a8\u64cd\u4f5c\u5f88\u53ef\u80fd\u641e\u51fa\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u53ea\u662f\u6f14\u793a\u5feb\u7167\u7684\u4f7f\u7528\uff08\u4e0d\u6d89\u53ca\u5e95\u5c42\u5b9e\u73b0\uff09\uff0c\u8fd9\u6837\u6709\u52a9\u4e8e\u7406\u89e3Compose\u91cd\u7ec4\u7684\u673a\u5236\u3002 Snapshot (\u5feb\u7167)\uff0c\u7b80\u5355\u6bd4\u55bb\u5c31\u662f\u7ed9\u6240\u6709 state \u62cd\u4e86\u4e2a\u7167\uff0c\u56e0\u6b64\u4f60\u80fd\u83b7\u53d6\u5230\u62cd\u6444\u4e4b\u524d\u7684\u72b6\u6001\u3002 \u6211\u4eec\u901a\u8fc7\u4ee3\u7801\u6f14\u793a\u6765\u770b\u770b Snapshot \u5230\u5e95\u662f\u505a\u4ec0\u4e48\u7684: \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a Dog \u7c7b,\u5305\u542b\u4e00\u4e2a state : class Dog { var name : MutableState < String > = mutableStateOf ( \"\" ) }","title":"Snapshot API"},{"location":"principle/snapshot/#_1","text":"val dog = Dog () dog . name . value = \u201c Spot \u201d val snapshot = Snapshot . takeSnapshot () dog . name . value = \u201c Fido \u201d println ( dog . name . value ) snapshot . enter { println ( dog . name . value ) } println ( dog . name . value ) // Output: Fido Spot Fido takeSnapshot() \u5c06 \"\u62cd\u6444\" \u7a0b\u5e8f\u4e2d\u6240\u6709 State \u503c\u7684\u5feb\u7167\uff0c\u65e0\u8bba\u5b83\u4eec\u662f\u5728\u4f55\u5904\u521b\u5efa\u7684 enter \u51fd\u6570\u4f1a\u628a\u5feb\u7167\u72b6\u6001\u6062\u590d\u5e76\u5e94\u7528\u5230\u51fd\u6570\u4f53\u4e2d \u56e0\u6b64\u6211\u4eec\u770b\u5230\u4ec5\u5728 enter \u4e2d\u662f\u65e7\u503c\u3002","title":"\u521b\u5efa\u5feb\u7167"},{"location":"principle/snapshot/#_2","text":"\u6211\u4eec\u5c1d\u8bd5\u5728 enter \u5757\u4e2d\u66f4\u6539\u72d7\u72d7\u7684\u540d\u5b57\uff1a fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot = Snapshot . takeSnapshot () println ( dog . name . value ) snapshot . enter { println ( dog . name . value ) dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) } // Output: Spot Spot java . lang . IllegalStateException : Cannot modify a state object in a read - only snapshot \u4f1a\u53d1\u73b0\u5f53\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539\u503c\u65f6\u62a5\u9519\u4e86\uff0c\u56e0\u4e3a takeSnapshot() \u662f\u53ea\u8bfb\u7684,\u56e0\u6b64\u5728 enter \u5185\u90e8\u6211\u4eec\u53ef\u4ee5\u8bfb\u4f46\u4e0d\u80fd\u5199\uff0c\u5982\u679c\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u53ef\u53d8\u5feb\u7167\u5e94\u4f7f\u7528 takeMutableSnapshot() \u65b9\u6cd5\u3002 fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot = Snapshot . takeMutableSnapshot () println ( dog . name . value ) snapshot . enter { dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) } // Output: Spot Fido Spot \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u6ca1\u6709\u5d29\u6e83\u4e86\uff0c\u4f46\u662f\u5728 enter \u91cc\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u5728\u5176\u8303\u56f4\u4e4b\u5916\u751f\u6548\uff01\u8fd9\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u9694\u79bb\u673a\u5236\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5e94\u7528 enter \u5185\u90e8\u7684\u53d8\u66f4\u9700\u8981\u8c03\u7528 apply() \u65b9\u6cd5\uff1a fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot = Snapshot . takeMutableSnapshot () println ( dog . name . value ) snapshot . enter { dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) snapshot . apply () println ( dog . name . value ) } // Output: Spot Fido Spot Fido \u53ef\u4ee5\u770b\u5230\u8c03\u7528 apply \u4e4b\u540e\uff0c\u65b0\u503c\u5728 enter \u4e4b\u5916\u4e5f\u751f\u6548\u4e86\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f Snapshot.withMutableSnapshot() \u6765\u7b80\u5316\u8c03\u7528\uff1a fun main () { val dog = Dog () dog . name . value = \"Spot\" Snapshot . withMutableSnapshot { println ( dog . name . value ) dog . name . value = \"Fido\" println ( dog . name . value ) } println ( dog . name . value ) } \u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u77e5\u9053\u4e86\uff1a - \u62cd\u6444\u6211\u4eec\u6240\u6709\u72b6\u6001\u7684\u5feb\u7167 - \u201c\u6062\u590d\u201d\u72b6\u6001\u5230\u7279\u5b9a\u7684\u4ee3\u7801\u5757 - \u6539\u53d8\u72b6\u6001\u503c \u4f46\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u611f\u77e5\u8bfb\u5199\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u641e\u6e05\u695a\u8fd9\u4e2a\u3002","title":"\u53ef\u53d8\u5feb\u7167"},{"location":"principle/snapshot/#_3","text":"\u65e0\u8bba\u662f LiveData , Flow \u8fd8\u662f State \u90fd\u662f\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u90a3\u4e48\u5c31\u8981\u6709\u89c2\u5bdf\u8005\u548c\u88ab\u89c2\u5bdf\u8005\u3002\u5bf9\u4e8e\u5feb\u7167\u7cfb\u7edf\uff0c\u88ab\u89c2\u5bdf\u8005\u5c31\u662f\u6211\u4eec\u7684 state \uff0c\u800c\u89c2\u5bdf\u8005\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u8bfb\u53d6\u89c2\u5bdf\u8005\uff0c\u4e00\u4e2a\u662f\u5199\u5165\u89c2\u5bdf\u8005\u3002 \u5b9e\u9645\u4e0a takeMutableSnapshot \u6709\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\u7684\uff0c\u5206\u522b\u5728\u8bfb\u548c\u5199\u65f6\u56de\u8c03\uff1a fun takeMutableSnapshot ( readObserver : (( Any ) -> Unit ) ? = null , writeObserver : (( Any ) -> Unit ) ? = null ): MutableSnapshot = ( currentSnapshot () as? MutableSnapshot ) ?. takeNestedMutableSnapshot ( readObserver , writeObserver ) ?: error ( \"Cannot create a mutable snapshot of an read-only snapshot\" ) \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u56de\u8c03\u4e2d\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c,\u5728 Compose \u4e2d\u5c31\u662f\u503c\u8bfb\u53d6\u65f6\u8bb0\u5f55 ComposeScope ,\u5199\u5165\u65f6\u5982\u679c\u6709\u53d8\u5316\u5219\u5c06\u5bf9\u5e94\u7684 Scope \u6807\u8bb0\u4e3a invalid \u3002","title":"\u89c2\u5bdf\u8bfb\u53d6\u548c\u5199\u5165"},{"location":"principle/snapshot/#_4","text":"\u5168\u5c40\u5feb\u7167\u662f\u4f4d\u4e8e\u5feb\u7167\u6811\u6839\u90e8\u7684\u53ef\u53d8\u5feb\u7167\u3002\u4e0e\u5fc5\u987b apply \u624d\u80fd\u751f\u6548\u7684\u5e38\u89c4\u53ef\u53d8\u5feb\u7167\u76f8\u6bd4\uff0c\u5168\u5c40\u5feb\u7167\u6ca1\u6709 apply \u64cd\u4f5c\u3002\u6bd4\u5982\u6211\u4eec\u4f1a\u5728 ViewModel \u91cc\u5b9a\u4e49 state ,\u5e76\u4e14\u5728 repository \u8bf7\u6c42\u6570\u636e\u5e76\u7ed9 state \u8d4b\u503c\u3002\u6b64\u65f6\u5c31\u4f1a\u7531 GlobalSnapshot \u53bb\u53d1\u9001\u901a\u77e5\uff1a \u5b83\u901a\u8fc7\u8c03\u7528\uff1a - Snapshot.notifyObjectsInitialized \u3002\u8fd9\u4f1a\u4e3a\u81ea\u4e0a\u6b21\u8c03\u7528\u4ee5\u6765\u66f4\u6539\u7684\u4efb\u4f55\u72b6\u6001\u53d1\u9001\u901a\u77e5\u3002 - Snapshot.sendApplyNotifications() \u3002\u8fd9\u7c7b\u4f3c\u4e8e notifyObjectsInitialized\uff0c\u4f46\u53ea\u6709\u5728\u5b9e\u9645\u53d1\u751f\u66f4\u6539\u65f6\u624d\u4f1a\u63a8\u8fdb\u5feb\u7167\u3002\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u5c06\u4efb\u4f55\u53ef\u53d8\u5feb\u7167\u5e94\u7528\u4e8e\u5168\u5c40\u5feb\u7167\uff0c\u5c31\u4f1a\u9690\u5f0f\u8c03\u7528\u6b64\u51fd\u6570\u3002 internal object GlobalSnapshotManager { private val started = AtomicBoolean ( false ) fun ensureStarted () { if ( started . compareAndSet ( false , true )) { val channel = Channel < Unit > ( Channel . CONFLATED ) CoroutineScope ( AndroidUiDispatcher . Main ). launch { channel . consumeEach { Snapshot . sendApplyNotifications () } } Snapshot . registerGlobalWriteObserver { channel . offer ( Unit ) } } } } \u53ef\u4ee5\u770b\u5230\u5728 android \u5e73\u53f0\u4e0a\u6ce8\u518c\u4e86 writeObserver ,\u5b83\u8fd8\u6709 ApplyObserver \u6211\u4eec\u540e\u9762\u518d\u8bf4\u3002","title":"\u5168\u5c40\u5feb\u7167"},{"location":"principle/snapshot/#_5","text":"\u5728\u7ed9\u5b9a\u7ebf\u7a0b\u7684\u5feb\u7167\u4e2d\uff0c\u5728\u5e94\u7528\u8be5\u5feb\u7167\u4e4b\u524d\uff0c\u4e0d\u4f1a\u770b\u5230\u5176\u4ed6\u7ebf\u7a0b\u5bf9\u72b6\u6001\u503c\u6240\u505a\u7684\u66f4\u6539\u3002\u5feb\u7167\u4e0e\u5176\u4ed6\u5feb\u7167\u201c\u9694\u79bb\u201d\u3002\u5728\u5e94\u7528\u5feb\u7167\u5e76\u81ea\u52a8\u63a8\u8fdb\u5168\u5c40\u5feb\u7167\u4e4b\u524d\uff0c\u5bf9\u5feb\u7167\u5185\u7684\u72b6\u6001\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u5bf9\u5176\u4ed6\u7ebf\u7a0b\u90fd\u5c06\u4e0d\u53ef\u89c1\u3002 \u770b\u8fd9\u4e2a\u7c7b\u540d\u5927\u5bb6\u5c31\u61c2\u4e86 SnapshotThreadLocal : internal actual class SnapshotThreadLocal < T > { private val map = AtomicReference < ThreadMap > ( emptyThreadMap ) private val writeMutex = Any () @Suppress ( \"UNCHECKED_CAST\" ) actual fun get (): T? = map . get (). get ( Thread . currentThread (). id ) as T? actual fun set ( value : T?) { val key = Thread . currentThread (). id synchronized ( writeMutex ) { val current = map . get () if ( current . trySet ( key , value )) return map . set ( current . newWith ( key , value )) } } }","title":"\u591a\u7ebf\u7a0b"},{"location":"principle/snapshot/#_6","text":"\u5982\u679c\u6211\u4eec\"\u62cd\u6444\"\u4e86\u591a\u4e2a\u5feb\u7167\u5e76\u4e14\u5747\u5e94\u7528\u4fee\u6539\u4f1a\u600e\u6837\u5462\uff1f fun main () { val dog = Dog () dog . name . value = \"Spot\" val snapshot1 = Snapshot . takeMutableSnapshot () val snapshot2 = Snapshot . takeMutableSnapshot () println ( dog . name . value ) snapshot1 . enter { dog . name . value = \"Fido\" println ( \"in snapshot1: \" + dog . name . value ) } // Don\u2019t apply it yet, let\u2019s try setting a third value first. println ( dog . name . value ) snapshot2 . enter { dog . name . value = \"Fluffy\" println ( \"in snapshot2: \" + dog . name . value ) } // Ok now we can apply both. println ( \"before applying: \" + dog . name . value ) snapshot1 . apply () println ( \"after applying 1: \" + dog . name . value ) snapshot2 . apply () println ( \"after applying 2: \" + dog . name . value ) } // Output: Spot in snapshot1 : Fido Spot in snapshot2 : Fluffy before applying : Spot after applying 1 : Fido after applying 2 : Fido \u4f1a\u53d1\u73b0\u7b2c\u4e8c\u4e2a\u5feb\u7167\u7684\u66f4\u6539\u65e0\u6cd5\u5e94\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u89c6\u56fe\u4ee5\u76f8\u540c\u7684\u521d\u59cb\u503c\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u5feb\u7167\u8981\u4e48\u518d\u6267\u884c\u4e00\u6b21 enter \uff0c\u8981\u4e48\u544a\u8bc9\u5982\u4f55\u89e3\u51b2\u7a81\u3002 Compose \u5b9e\u9645\u4e0a\u6709\u4e00\u4e2a\u7528\u4e8e\u89e3\u51b3\u5408\u5e76\u51b2\u7a81\u7684 API\uff01 mutableStateOf() \u9700\u8981\u4e00\u4e2a\u53ef\u9009\u7684 SnapshotMutationPolicy . \u8be5\u7b56\u7565\u5b9a\u4e49\u4e86\u5982\u4f55\u6bd4\u8f83\u7279\u5b9a\u7c7b\u578b\u7684\u503c (equivalent) \u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u51b2\u7a81 (merge)\u3002\u5e76\u4e14\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u7b56\u7565\uff1a structuralEqualityPolicy \u2013 \u4f7f\u7528\u5bf9\u8c61\u7684 equals \u65b9\u6cd5 ( ==)\u6bd4\u8f83\u5bf9\u8c61\uff0c\u6240\u6709\u5199\u5165\u90fd\u88ab\u8ba4\u4e3a\u662f\u975e\u51b2\u7a81\u7684\u3002 referentialEqualityPolicy \u2013 \u901a\u8fc7\u5f15\u7528 ( ===)\u6bd4\u8f83\u5bf9\u8c61\uff0c\u6240\u6709\u5199\u5165\u90fd\u88ab\u8ba4\u4e3a\u662f\u975e\u51b2\u7a81\u7684\u3002 neverEqualPolicy \u2013 \u5c06\u6240\u6709\u5bf9\u8c61\u89c6\u4e3a\u4e0d\u76f8\u7b49\uff0c\u6240\u6709\u5199\u5165\u90fd\u88ab\u8ba4\u4e3a\u662f\u975e\u51b2\u7a81\u7684\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u89c4\u5219\uff1a class Dog { var name : MutableState < String > = mutableStateOf ( \"\" , policy = object : SnapshotMutationPolicy < String > { override fun equivalent ( a : String , b : String ): Boolean = a == b override fun merge ( previous : String , current : String , applied : String ): String = \" $ applied , briefly known as $ current , originally known as $ previous \" }) } fun main () { // Same as before. } // Output: Spot in snapshot1 : Fido Spot in snapshot2 : Fluffy before applying : Spot after applying 1 : Fido after applying 2 : Fluffy , briefly known as Fido , originally known as Spot","title":"\u51b2\u7a81"},{"location":"principle/snapshot/#_7","text":"\u4ee5\u4e0a\u5c31\u662f Snapshot (\u5feb\u7167)\u7684\u57fa\u672c\u4f7f\u7528,\u5b83\u5c31\u76f8\u5f53\u4e8e\u9ad8\u7ea7\u7684 DiffUtil\u3002\u5b83\u7684\u7279\u70b9\u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a - \u54cd\u5e94\u5f0f\uff1a\u6709\u72b6\u6001\u7684\u4ee3\u7801\u59cb\u7ec8\u81ea\u52a8\u4fdd\u6301\u6700\u65b0\u3002\u6211\u4eec\u65e0\u9700\u62c5\u5fc3\u8ba2\u9605\u548c\u53cd\u8ba2\u9605\u3002 - \u9694\u79bb\u6027\uff1a\u6709\u72b6\u6001\u4ee3\u7801\u53ef\u4ee5\u5bf9\u72b6\u6001\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u5728\u4e0d\u540c\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u4f1a\u6539\u53d8\u8be5\u72b6\u6001\u3002 Compose \u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u5b9e\u73b0\u65e7\u7684 View \u7cfb\u7edf\u65e0\u6cd5\u5b9e\u73b0\u7684\u6548\u679c\uff0c\u4f8b\u5982\u5c06\u91cd\u6784\u653e\u5230\u591a\u4e2a\u540e\u53f0\u7ebf\u7a0b\u4e0a\u53bb\u6267\u884c\u3002","title":"\u603b\u7ed3"},{"location":"principle/snapshot/#_8","text":"\u4e3a\u4ec0\u4e48 state \u53d8\u5316\u80fd\u89e6\u53d1\u91cd\u7ec4\u5462\uff1f Jetpack Compose\u5728\u6267\u884c\u65f6\u6ce8\u518c\u4e86 readObserverOf \u548c writeObserverOf : private inline fun < T > composing ( composition : ControlledComposition , modifiedValues : IdentityArraySet < Any >? , block : () -> T ): T { val snapshot = Snapshot . takeMutableSnapshot ( readObserverOf ( composition ), writeObserverOf ( composition , modifiedValues ) ) try { return snapshot . enter ( block ) } finally { applyAndCheck ( snapshot ) } } \u5176\u4e2d\u5728\u8bfb\u53d6\u72b6\u6001\u7684\u5730\u65b9\u4f1a\u6267\u884c\uff1a readObserverOf \u6765\u8bb0\u5f55\u54ea\u4e9b scope \u4f7f\u7528\u4e86\u6b64 state` : override fun recordReadOf ( value : Any ) { if ( ! areChildrenComposing ) { composer . currentRecomposeScope ?. let { it . used = true observations . add ( value , it ) ... } } } writeObserverOf \u800c\u5199\u5165\u65f6\u4f1a\u627e\u51fa\u5bf9\u5e94\u4f7f\u7528\u6b64 state \u7684 scope \u4f7f\u5176 invalidate : override fun recordWriteOf ( value : Any ) = synchronized ( lock ) { invalidateScopeOfLocked ( value ) derivedStates . forEachScopeOf ( value ) { invalidateScopeOfLocked ( it ) } } private fun invalidateScopeOfLocked ( value : Any ) { observations . forEachScopeOf ( value ) { scope -> if ( scope . invalidateForResult ( value ) == InvalidationResult . IMMINENT ) { observationsProcessed . add ( value , scope ) } } } \u5728\u4e0b\u6b21\u5e27\u4fe1\u53f7\u5230\u8fbe\u65f6\u5bf9\u4e8e\u8fd9\u4e9b scope \u6267\u884c\u91cd\u7ec4\u3002 \u5b83\u662f\u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4\u5462\uff1f \u80fd\u591f\u88ab\u6807\u8bb0\u4e3a Invalid \u7684\u4ee3\u7801\u5fc5\u987b\u662f\u975e inline \u4e14\u65e0\u8fd4\u56de\u503c\u7684 @Composalbe function/lambda\uff0c\u5fc5\u987b\u9075\u5faa \u91cd\u7ec4\u8303\u56f4\u6700\u5c0f\u5316 \u539f\u5219\u3002 \u8be6\u7ec6\u53c2\u89c1\uff1a Compose \u5982\u4f55\u786e\u5b9a\u91cd\u7ec4\u8303\u56f4 \u53ea\u8981 state \u53d8\u5316\u5c31\u4e00\u5b9a\u4f1a\u91cd\u7ec4\u5417\uff1f \u4e0d\u4e00\u5b9a\uff0c\u5177\u4f53\u6848\u4f8b\u8bf7\u770b\u4ee5\u4e0b\u4f8b\u5b50\uff1a","title":"\u89e3\u60d1"},{"location":"principle/snapshot/#1-1","text":"val darkMode = mutableStateOf ( \"hello\" ) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { lifecycleScope . launch { delay ( 100 ) val text = darkMode . value darkMode . value = \"Compose\" } } } \u4e0d\u4f1a\u91cd\u7ec4\uff0c\u56e0\u4e3a delay \u5bfc\u81f4\u72b6\u6001\u7684\u8bfb\u53d6\u662f\u5728 snap.apply \u65b9\u6cd5\u4e4b\u5916\u6267\u884c\u7684, \u56e0\u6b64\u4e5f\u5c31\u4e0d\u4f1a\u6ce8\u518c readObserverOf ,\u81ea\u7136\u4e5f\u5c31\u4e0d\u4f1a\u4e0e composeScope \u6302\u94a9\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u89e6\u53d1\u91cd\u7ec4\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5982\u679c\u662f\u5728 delay \u4e4b\u524d\u8bfb\u53d6\u5219\u4f1a\u91cd\u7ec4\u3002","title":"1. \u4f8b\u5b50\u2460"},{"location":"principle/snapshot/#2-2","text":"val darkMode = mutableStateOf ( \"hello\" ) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { thread { val text = darkMode . value darkMode . value = \"Compose\" } } } thread \u4e2d\u7684 state \u5728\u4e0d\u540c\u7ebf\u7a0b\u8bfb\u53d6\uff0c\u7531\u4e8e SnapshotThreadLocal \u673a\u5236\uff0c\u5982\u679c\u6b64\u7ebf\u7a0b\u65e0\u5feb\u7167\uff0c\u5219\u83b7\u53d6 GlobalSnapshot \uff1a internal fun currentSnapshot(): Snapshot = threadSnapshot.get() ?: currentGlobalSnapshot.get() \u7531\u4e8e\u6ca1\u6709\u5bf9\u5e94\u7684 readObserver ,\u56e0\u6b64\u6b64\u4f8b\u5b50\u4e0d\u4f1a\u91cd\u7ec4\u3002\u4f46\u662f\u5982\u679c\u5728 composable \u5185\u8bfb\u53d6\u4e86\u6b64 state \u662f\u4f1a\u91cd\u7ec4\u7684\uff0c\u56e0\u4e3a ReComposer \u6ce8\u518c\u4e86 ApplyObserver ,\u5728 apply \u65f6\u4e5f\u4f1a\u5bf9 globalModified \u8fdb\u884c\u8bb0\u5f55\uff0c\u5728\u4e0b\u4e00\u5e27\u4fe1\u53f7\u5230\u8fbe\u65f6\u53bb\u67e5\u627e\u5bf9\u5e94\u7684 scope \uff08\u5927\u5bb6\u53ef\u4ee5\u65ad\u70b9\u8ddf\u4e00\u4e0b\u6d41\u7a0b\uff09\uff1a val unregisterApplyObserver = Snapshot . registerApplyObserver { changed , _ -> synchronized ( stateLock ) { if ( _state . value >= State . Idle ) { snapshotInvalidations += changed deriveStateLocked () } else null } ?. resume ( Unit ) }","title":"2. \u4f8b\u5b50\u2461"},{"location":"principle/snapshot/#3-3","text":"override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { val darkMode = mutableStateOf ( \"hello\" ) Text ( darkMode . value ) darkMode . value = \"Compose\" } } \u8fd9\u4e2a\u4e5f\u6ca1\u89e6\u53d1\u91cd\u7ec4\uff0c\u53ef\u80fd\u5927\u5bb6\u4f1a\u7591\u60d1\uff0c\u8fd9\u4e2a\u6ca1\u5f02\u6b65\uff0c\u65ad\u70b9\u4e5f\u6709 readObserver \u548c writeObserver \u4e3a\u5565\u4e0d\u4f1a\u89e6\u53d1\u91cd\u7ec4\u5462\uff1f \u4e0d\u662f\u8bf4\u72b6\u6001\u53d8\u66f4\u4f1a\u5c06\u4f7f\u7528\u5b83\u7684 scope \u8bb0\u4e3a invalid \u5417\uff1f \u7136\u800c\u5b9e\u9645\u8fd0\u884c\u4e2d\uff0c InvalidationResult \u4e3a IGNORE fun invalidate ( scope : RecomposeScopeImpl , instance : Any? ): InvalidationResult { ... if ( anchor == null || ! slotTable . ownsAnchor ( anchor ) || ! anchor . valid ) // The scope has not yet entered the composition return InvalidationResult . IGNORED ... } \u9996\u5148\u6211\u4eec\u786e\u5b9e\u8bb0\u5f55\u4e0b\u4e86\u4f7f\u7528 state \u7684 scope ,\u4e0d\u7136\u4e5f\u4e0d\u4f1a\u5728\u4fee\u6539\u65f6\u89e6\u53d1 invalidate \u884c\u4e3a\u3002\u4f46\u6b64\u65f6 slotTable \u91cc\u5e76\u8fd8\u6ca1\u6709\u53ef\u91cd\u7ec4\u7684\u533a\u57df\u951a\u70b9\u4fe1\u606f\uff0c\u53ea\u6709\u5728\u7ec4\u5408\u5b8c\u6210\u4e4b\u540e\u624d\u80fd\u62ff\u5230\u6bcf\u4e2a\u533a\u57df\u7684\u951a\u70b9 anchors \u3002 \u7b80\u5355\u63cf\u8ff0\u5c31\u662f Compose \u4f7f\u7528 SlotTable \u6765\u8bb0\u5f55\u6570\u636e\u4fe1\u606f\uff0c\u6b64\u65f6\u7b2c\u4e00\u6b21\u5b8c\u6574\u7684\u7ec4\u5408\u90fd\u6ca1\u5b8c\u6210\uff0c\u4e0d\u77e5\u9053\u8be5\u4ece\u54ea\u4e0b\u624b\u3002 \u6709\u5173 SlotTable \u7684\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\uff1a \u6df1\u5165\u8be6\u89e3JetpackCompose|\u5b9e\u73b0\u539f\u7406 \u5176\u6b21\u5c31\u662f\u7531\u4e8e state \u7684\u521b\u5efa\u662f\u5728 enter \u4ee3\u7801\u5757\u4e2d\uff0c\u6b64\u65f6 state.snapshotId == Snapshot.id ,\u5e76\u4e0d\u4f1a\u8bb0\u5f55 state \u7684\u53d8\u5316\u3002\u6bd5\u7adf\u5feb\u7167\u7684 diff \u662f\u4f5c\u7528\u5728\u4e24\u4e2a\u5feb\u7167\u4e4b\u95f4\u3002 internal fun < T : StateRecord > T . overwritableRecord ( state : StateObject , snapshot : Snapshot , candidate : T ): T { ... val id = snapshot . id //\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\uff0c\u5e76\u6ca1\u6709\u8bb0\u5f55state\u53d8\u5316 if ( candidate . snapshotId == id ) return candidate ... } \u4f46\u662f\u5982\u679c\u4f60\u628a state \u7684\u521b\u5efa\u653e\u5230 setContent \u4e4b\u5916\u5462\uff1f","title":"3. \u4f8b\u5b50\u2462"},{"location":"principle/snapshot/#4-4","text":"val darkMode = mutableStateOf ( \"hello\" ) override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { Text ( darkMode . value ) darkMode . value = \"Compose\" } } \u7b54\u6848\u662f\u4f1a\u91cd\u7ec4 \u56e0\u4e3a\u8fd9\u4e2a\u72b6\u6001\u662f\u5728\u62cd\u6444\u4e4b\u524d\u521b\u5efa\u7684\uff0c\u6b64\u65f6 state.snapshotId != Snapshot.id ,\u6b64\u671f\u95f4\u5bf9 state \u7684\u4fee\u6539\u867d\u7136\u4e0d\u4f1a\u7acb\u5373\u6807\u8bb0\u4e3a invalid ,\u4f46\u662f\u4f1a\u8ba1\u5165 modified , apply \u4e4b\u540e\uff0c\u7531\u5168\u5c40\u5feb\u7167\u8fdb\u884c\u901a\u77e5: internal fun < T : StateRecord > T . overwritableRecord ( state : StateObject , snapshot : Snapshot , candidate : T ): T { ... val id = snapshot . id if ( candidate . snapshotId == id ) return candidate val newData = newOverwritableRecord ( state , snapshot ) newData . snapshotId = id //\u8bb0\u5f55\u53d8\u5316 snapshot . recordModified ( state ) return newData } \u4f1a\u5728 apply \u65f6\u901a\u77e5\u5230\u89c2\u5bdf\u8005 ApplyObserver \uff08\u521a\u624d\u8fd8\u63d0\u5230 writerObserver \uff09\uff0c\u8bb0\u5f55\u4e0b changed : val unregisterApplyObserver = Snapshot . registerApplyObserver { changed , _ -> synchronized ( stateLock ) { if ( _state . value >= State . Idle ) { // here snapshotInvalidations += changed deriveStateLocked () } else null } ?. resume ( Unit ) } composation \u5219\u4f1a\u627e\u51fa\u89c2\u5bdf\u4e86\u5bf9\u5e94\u53d8\u5316\u72b6\u6001\u7684 scope \u6807\u8bb0\u4e3a invalid \u7b49\u5f85\u91cd\u7ec4\uff1a private fun addPendingInvalidationsLocked ( values : Set < Any > ) { var invalidated : HashSet < RecomposeScopeImpl >? = null fun invalidate ( value : Any ) { observations . forEachScopeOf ( value ) { scope -> if ( ! observationsProcessed . remove ( value , scope ) && scope . invalidateForResult ( value ) != InvalidationResult . IGNORED ) { val set = invalidated ?: HashSet < RecomposeScopeImpl > (). also { invalidated = it } set . add ( scope ) } } } for ( value in values ) { if ( value is RecomposeScopeImpl ) { value . invalidateForResult ( null ) } else { invalidate ( value ) derivedStates . forEachScopeOf ( value ) { invalidate ( it ) } } } invalidated ?. let { observations . removeValueIf { scope -> scope in it } } }","title":"4. \u4f8b\u5b50\u2463"},{"location":"principle/snapshot/#5-5","text":"var onlyDisplay = mutableStateOf ( \"onlyDisplay\" ) class MainActivity : ComponentActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContent { Text ( text = onlyDisplay . value , fontSize = 50. sp , ) onlyDisplay . value = \"Display\" } } } \u5982\u679c\u628a state \u58f0\u660e\u653e\u5230 kt \u6587\u4ef6\u6700\u5916\u5c42\uff0c\u662f\u5426\u4f1a\u91cd\u7ec4\uff1f \u7b54\u6848\u662f\u4e0d\u4f1a\uff0c\u56e0\u4e3a\u5728 kotlin \u4e2d\u5982\u679c\u628a\u53d8\u91cf\u4e0d\u653e\u5230\u7c7b\u91cc\uff0c\u76f4\u63a5\u653e\u5230\u6587\u4ef6\u9876\u5c42\u3002\u7f16\u8bd1\u4e4b\u540e\u5176\u5b9e\u4f1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u800c\u8fd9\u4e2a\u5c5e\u6027\u5219\u53d8\u6210 static \u7684\u3002 public final class MainActivityKt { static MutableState < String > onlyDisplay = SnapshotStateKt . mutableStateOf$default ( \"onlyDisplay\" , null , 2 , null ); } \u56e0\u6b64\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u6d89\u53ca\u4e86\u7c7b\u7684\u521d\u59cb\u5316\u95ee\u9898\uff1a \u53ea\u6709\u4e3b\u52a8\u8bf7\u6c42\u4e00\u4e2a\u7c7b,\u8fd9\u4e2a\u7c7b\u624d\u4f1a\u521d\u59cb\u5316,\u4ec5\u5305\u542b\u9759\u6001\u53d8\u91cf,\u51fd\u6570,\u7b49\u9759\u6001\u7684\u4e1c\u897f. \u4e5f\u5c31\u662f\u8bf4\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u53ea\u6709\u5728\u8c03\u7528 onlyDisplay \u65f6\uff0c\u624d\u6267\u884c\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u5176 state.snapshotId==snapshot.Id ,\u6b64\u65f6\u9996\u6b21\u7ec4\u5408\u5c1a\u672a\u6267\u884c\u5b8c\u6bd5\uff0c\u672c\u6b21\u7684 invalidateResult==IGNORE \uff0c\u4e5f\u4e0d\u4f1a\u8bb0\u4e3a modified \uff0c\u5c31\u548c\u4f8b\u5b50\u2462 \u4e00\u6837\u7684\u95ee\u9898\u4e86\u3002 \u4ee5\u4e0a\u5c31\u662f\u5feb\u7167\u7cfb\u7edf\u7684\u4f7f\u7528\u548c Jetpack Compose \u91cd\u7ec4\u7684\u673a\u5236\uff0c\u6709\u4efb\u4f55\u4e0d\u6b63\u786e\u7684\u5730\u65b9\u6b22\u8fce\u6307\u6b63\u3002","title":"5. \u4f8b\u5b50\u2464"},{"location":"third-party-component/accompanist/appcompat_theme/","text":"AppCompat Compose Theme Adapter \u8fd9\u4e2a\u5e93\u5c06\u5141\u8bb8\u5f00\u53d1\u8005\u5c06\u4f20\u7edf AppCompat XML \u4e3b\u9898\u914d\u7f6e\u590d\u7528\u5230 Jetpack Compose \u4e2d Jetpack Compose \u7684\u57fa\u7840\u4e3b\u9898\u914d\u7f6e\u91c7\u7528 MaterialTheme\uff0c \u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e Colors \u3001 Shapes \u3001 Typography \u7b49\u53c2\u6570\u6765\u5b9a\u5236\u4f60\u7684\u4e3b\u9898\u6548\u679c\uff0c\u5177\u4f53\u64cd\u4f5c\u8fc7\u7a0b\u4e0e\u5de5\u4f5c\u539f\u7406\u8be6\u89c1 \u4e3b\u9898 \u7ae0\u8282\u3002 MaterialTheme ( typography = type , colors = colors , shapes = shapes ) { // Surface, Scaffold, etc } AppCompat XML \u4e3b\u9898\u914d\u7f6e\u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7 XML \u6807\u7b7e\u5c5e\u6027\u8fdb\u884c\u7c7b\u4f3c\u4f46\u66f4\u7c97\u7565\u7684\u4e3b\u9898\u8bbe\u7f6e\u3002 <style name= \"Theme.MyApp\" parent= \"Theme.AppCompat.DayNight\" > <item name= \"colorPrimary\" > @color/purple_500 </item> <item name= \"colorAccent\" > @color/green_200 </item> </style> \u8fd9\u4e2a\u5e93\u5c1d\u8bd5\u62c9\u8fd1 AppCompat XML \u4e3b\u9898\u914d\u7f6e\u4e0e Jetpack Compose \u4e3b\u9898\u914d\u7f6e\u7684\u8ddd\u79bb\u3002\u5141\u8bb8 Jetpack Compose \u4e3b\u9898\u914d\u7f6e MaterialTheme \u53ef\u4ee5\u57fa\u4e8e Activity \u7684 XML \u4e3b\u9898\u914d\u7f6e\u3002 AppCompatTheme { // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography // will now contain copies of the context's theme } \u6bcf\u5f53\u4f60\u6253\u7b97\u5c06\u4e00\u4e2a\u73b0\u6709\u5e94\u7528\u7684\u67d0\u4e2a UI \u5bb9\u5668\u8fc1\u79fb\u81f3 Jetpack Compose \uff0c\u8fd9\u4e2a\u5e93\u6240\u63d0\u4f9b\u7684\u4e3b\u9898\u914d\u7f6e\u80fd\u529b\u5c06\u4f1a\u4f7f\u8fc1\u79fb\u8fc7\u7a0b\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002 \u26a0\ufe0f \u6ce8\u610f \u5982\u679c\u4f60\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u4f7f\u7528\u4e86 Material Design Components \uff0c \u4f60\u5e94\u8be5\u4f7f\u7528 MDC Compose Theme Adapter \uff0c\u5b83\u5c06\u4f1a\u66f4\u7cbe\u7ec6\u5730\u8bfb\u53d6\u4f60\u7684\u4e3b\u9898\u914d\u7f6e\u3002 \u5b9a\u5236\u5316\u4e3b\u9898 \u901a\u8fc7\u4f7f\u7528 AppCompatTheme() \u5c06\u4f1a\u81ea\u52a8\u8bfb\u53d6\u5f53\u524d\u5bbf\u4e3b context \u7684 AppCompat XML \u4e3b\u9898\u914d\u7f6e\uff0c\u5e76\u5c06\u5176\u5199\u5165\u5230 MaterialTheme \u4e2d\u3002 \u5982\u679c\u4f60\u60f3\u8bfb\u53d6 AppCompat XML \u4e3b\u9898\u914d\u7f6e\u7684\u6570\u636e\u4fe1\u606f\uff0c\u8fdb\u884c\u6570\u636e\u4fee\u6539\u540e\u518d\u4f20\u5165 MaterialTheme \uff0c\u53ef\u4ee5\u4f7f\u7528 createAppCompatTheme() \u6765\u5b8c\u6210\u3002 val context = LocalContext . current var ( colors , type ) = context . createAppCompatTheme () // Modify colors or type as required. Then pass them // through to MaterialTheme... MaterialTheme ( colors = colors , typography = type ) { // rest of layout } \u751f\u6210\u4e3b\u9898 \u901a\u8fc7\u4e00\u4e2a AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6765\u751f\u6210 MaterialTheme \u5176\u5b9e\u5e76\u4e0d\u5b8c\u7f8e\uff0c\u56e0\u4e3a AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6ca1\u6709\u63d0\u4f9b\u4e0e MaterialTheme \u76f8\u540c\u7684\u5b9a\u5236\u80fd\u529b\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770b MaterialTheme \u6240\u63d0\u4f9b\u7684\u5b9a\u5236\u80fd\u529b\u3002 Colors AppCompat XML \u4e3b\u9898\u914d\u7f6e\u53ea\u6709\u4e00\u4e2a\u6709\u9650\u7684\u9876\u7ea7\u914d\u8272\u5c5e\u6027\u96c6\u5408\uff0c\u8fd9\u610f\u5473\u7740 AppCompatTheme() \u5728\u4e00\u4e9b\u7279\u5b9a\u573a\u666f\u4e2d\u4e0d\u5f97\u4e0d\u751f\u6210\u4e00\u4e2a\u66ff\u4ee3\u914d\u8272\u3002\u5f53\u524d\u5c5e\u6027\u6620\u5c04\u8868\u5982\u4e0b MaterialTheme \u914d\u8272 AppCompat \u914d\u7f6e primary colorPrimary primaryVariant colorPrimaryDark onPrimary \u26a0\ufe0fCalculated black/white secondary colorAccent secondaryVariant colorAccent onSecondary \u26a0\ufe0fCalculated black/white surface Default onSurface android:textColorPrimary , else \u26a0\ufe0fcalculated black/white background android:colorBackground onBackground android:textColorPrimary , else \u26a0\ufe0f calculated black/white error colorError onError \u26a0\ufe0fCalculated black/white \u8868\u4e2d\u6240\u63d0\u5230\u7684 \u26a0\ufe0fCalculated black/white \uff0c\u8fd9\u610f\u5473\u7740\u5f53\u524d\u914d\u8272\u7684\u5177\u4f53\u503c\u53d6\u51b3\u4e8e\u54ea\u79cd\u989c\u8272\u4e0e\u76f8\u5e94\u7684\u80cc\u666f\u989c\u8272\u5f62\u6210\u7684\u5bf9\u6bd4\u503c\u5927\u3002 Typography AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6ca1\u6709\u63d0\u4f9b\u7c7b\u4f3c\u4e0eheadline6\u3001body1\u8fd9\u79cd\u8bed\u4e49\u4e0a\u7684\u6587\u672c\u6837\u5f0f\u8868\u793a\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e\u7279\u6b8a\u7ec4\u4ef6\u6216\u4f7f\u7528\u573a\u666f\u4e0b\u7684\u6587\u672c\u6837\u5f0f\u6807\u8bc6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4ece AppCompat XML \u4e3b\u9898\u914d\u7f6e\u4e2d\u80fd\u591f\u8bfb\u53d6\u5230\u7684\u552f\u4e00\u4e8b\u7269\u53ea\u6709\u9ed8\u8ba4\u7684 app:fontFamily \u6216 android:fontFamily \u3002\u4e3e\u4e2a\u4f8b\u5b50\u3002 <style name= \"Theme.MyApp\" parent= \"Theme.AppCompat\" > <item name= \"fontFamily\" > @font/my_font </item> </style> Compose \u5f53\u524d\u8fd8\u4e0d\u652f\u6301\u53ef\u52a8\u6001\u4ece\u5916\u90e8\u4e0b\u8f7d\u7684\u5b57\u4f53\uff0c\u6240\u4ee5\u4e3b\u9898\u4e2d\u7684\u4efb\u4f55\u5b57\u4f53\u5f15\u7528\u90fd\u9700\u8981\u6765\u81ea\u4f60\u7684\u672c\u5730\u8d44\u6e90\u3002\u8be6\u60c5\u67e5\u770b \u8fd9\u91cc \u83b7\u53d6\u66f4\u591a\u6709\u5173\u4fe1\u606f\u3002 Shape AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6ca1\u6709 Shape \u4e3b\u9898\u914d\u7f6e\u7684\u6982\u5ff5\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u7684\u662f MaterialTheme \u9ed8\u8ba4\u7684 Shape \u4e3b\u9898\u914d\u7f6e\u3002\u5982\u679c\u4f60\u60f3\u63d0\u4f9b\u5b9a\u5236\u7684 Shape \u4e3b\u9898\u914d\u7f6e\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7 AppCompatTheme \u7684 shapes \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\u3002 \u5c40\u9650\u6027 \u76ee\u524d\u8be5\u5e93\u5728\u5b9e\u73b0\u4e0a\u8fd8\u662f\u5b58\u5728\u4e00\u4e9b\u5c40\u9650\u6027\u7684 \u8fd9\u4f9d\u8d56\u4e8e\u4f60\u7684 Activity / Context \u7684\u4e3b\u9898\u914d\u7f6e\u662f\u5426\u62d3\u5c55\u4e86\u67d0\u4e2a AppCompat XML \u4e3b\u9898\u3002 Compose \u8fd8\u4e0d\u652f\u6301 Variable fonts\uff0c\u8fd9\u610f\u5473\u7740 android:fontVariationSettings \u7684\u503c\u76ee\u524d\u88ab\u5ffd\u7565\u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5728 Compose \u4e2d\u4fee\u6539\u4ea7\u751f\u7684MaterialTheme\uff0c\u4f46\u8fd9\u53ea\u5728Compose\u4e2d\u6709\u6548\u3002\u4f60\u6240\u505a\u7684\u4efb\u4f55\u6539\u53d8\u90fd\u4e0d\u4f1a\u53cd\u6620\u5728 Activity \u4e3b\u9898\u914d\u7f6e\u4e2d\u3002 \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-appcompat-theme:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"AppCompat Theme"},{"location":"third-party-component/accompanist/appcompat_theme/#appcompat-compose-theme-adapter","text":"\u8fd9\u4e2a\u5e93\u5c06\u5141\u8bb8\u5f00\u53d1\u8005\u5c06\u4f20\u7edf AppCompat XML \u4e3b\u9898\u914d\u7f6e\u590d\u7528\u5230 Jetpack Compose \u4e2d Jetpack Compose \u7684\u57fa\u7840\u4e3b\u9898\u914d\u7f6e\u91c7\u7528 MaterialTheme\uff0c \u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e Colors \u3001 Shapes \u3001 Typography \u7b49\u53c2\u6570\u6765\u5b9a\u5236\u4f60\u7684\u4e3b\u9898\u6548\u679c\uff0c\u5177\u4f53\u64cd\u4f5c\u8fc7\u7a0b\u4e0e\u5de5\u4f5c\u539f\u7406\u8be6\u89c1 \u4e3b\u9898 \u7ae0\u8282\u3002 MaterialTheme ( typography = type , colors = colors , shapes = shapes ) { // Surface, Scaffold, etc } AppCompat XML \u4e3b\u9898\u914d\u7f6e\u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7 XML \u6807\u7b7e\u5c5e\u6027\u8fdb\u884c\u7c7b\u4f3c\u4f46\u66f4\u7c97\u7565\u7684\u4e3b\u9898\u8bbe\u7f6e\u3002 <style name= \"Theme.MyApp\" parent= \"Theme.AppCompat.DayNight\" > <item name= \"colorPrimary\" > @color/purple_500 </item> <item name= \"colorAccent\" > @color/green_200 </item> </style> \u8fd9\u4e2a\u5e93\u5c1d\u8bd5\u62c9\u8fd1 AppCompat XML \u4e3b\u9898\u914d\u7f6e\u4e0e Jetpack Compose \u4e3b\u9898\u914d\u7f6e\u7684\u8ddd\u79bb\u3002\u5141\u8bb8 Jetpack Compose \u4e3b\u9898\u914d\u7f6e MaterialTheme \u53ef\u4ee5\u57fa\u4e8e Activity \u7684 XML \u4e3b\u9898\u914d\u7f6e\u3002 AppCompatTheme { // MaterialTheme.colors, MaterialTheme.shapes, MaterialTheme.typography // will now contain copies of the context's theme } \u6bcf\u5f53\u4f60\u6253\u7b97\u5c06\u4e00\u4e2a\u73b0\u6709\u5e94\u7528\u7684\u67d0\u4e2a UI \u5bb9\u5668\u8fc1\u79fb\u81f3 Jetpack Compose \uff0c\u8fd9\u4e2a\u5e93\u6240\u63d0\u4f9b\u7684\u4e3b\u9898\u914d\u7f6e\u80fd\u529b\u5c06\u4f1a\u4f7f\u8fc1\u79fb\u8fc7\u7a0b\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002 \u26a0\ufe0f \u6ce8\u610f \u5982\u679c\u4f60\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u4f7f\u7528\u4e86 Material Design Components \uff0c \u4f60\u5e94\u8be5\u4f7f\u7528 MDC Compose Theme Adapter \uff0c\u5b83\u5c06\u4f1a\u66f4\u7cbe\u7ec6\u5730\u8bfb\u53d6\u4f60\u7684\u4e3b\u9898\u914d\u7f6e\u3002","title":"AppCompat Compose Theme Adapter"},{"location":"third-party-component/accompanist/appcompat_theme/#_1","text":"\u901a\u8fc7\u4f7f\u7528 AppCompatTheme() \u5c06\u4f1a\u81ea\u52a8\u8bfb\u53d6\u5f53\u524d\u5bbf\u4e3b context \u7684 AppCompat XML \u4e3b\u9898\u914d\u7f6e\uff0c\u5e76\u5c06\u5176\u5199\u5165\u5230 MaterialTheme \u4e2d\u3002 \u5982\u679c\u4f60\u60f3\u8bfb\u53d6 AppCompat XML \u4e3b\u9898\u914d\u7f6e\u7684\u6570\u636e\u4fe1\u606f\uff0c\u8fdb\u884c\u6570\u636e\u4fee\u6539\u540e\u518d\u4f20\u5165 MaterialTheme \uff0c\u53ef\u4ee5\u4f7f\u7528 createAppCompatTheme() \u6765\u5b8c\u6210\u3002 val context = LocalContext . current var ( colors , type ) = context . createAppCompatTheme () // Modify colors or type as required. Then pass them // through to MaterialTheme... MaterialTheme ( colors = colors , typography = type ) { // rest of layout }","title":"\u5b9a\u5236\u5316\u4e3b\u9898"},{"location":"third-party-component/accompanist/appcompat_theme/#_2","text":"\u901a\u8fc7\u4e00\u4e2a AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6765\u751f\u6210 MaterialTheme \u5176\u5b9e\u5e76\u4e0d\u5b8c\u7f8e\uff0c\u56e0\u4e3a AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6ca1\u6709\u63d0\u4f9b\u4e0e MaterialTheme \u76f8\u540c\u7684\u5b9a\u5236\u80fd\u529b\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770b MaterialTheme \u6240\u63d0\u4f9b\u7684\u5b9a\u5236\u80fd\u529b\u3002","title":"\u751f\u6210\u4e3b\u9898"},{"location":"third-party-component/accompanist/appcompat_theme/#colors","text":"AppCompat XML \u4e3b\u9898\u914d\u7f6e\u53ea\u6709\u4e00\u4e2a\u6709\u9650\u7684\u9876\u7ea7\u914d\u8272\u5c5e\u6027\u96c6\u5408\uff0c\u8fd9\u610f\u5473\u7740 AppCompatTheme() \u5728\u4e00\u4e9b\u7279\u5b9a\u573a\u666f\u4e2d\u4e0d\u5f97\u4e0d\u751f\u6210\u4e00\u4e2a\u66ff\u4ee3\u914d\u8272\u3002\u5f53\u524d\u5c5e\u6027\u6620\u5c04\u8868\u5982\u4e0b MaterialTheme \u914d\u8272 AppCompat \u914d\u7f6e primary colorPrimary primaryVariant colorPrimaryDark onPrimary \u26a0\ufe0fCalculated black/white secondary colorAccent secondaryVariant colorAccent onSecondary \u26a0\ufe0fCalculated black/white surface Default onSurface android:textColorPrimary , else \u26a0\ufe0fcalculated black/white background android:colorBackground onBackground android:textColorPrimary , else \u26a0\ufe0f calculated black/white error colorError onError \u26a0\ufe0fCalculated black/white \u8868\u4e2d\u6240\u63d0\u5230\u7684 \u26a0\ufe0fCalculated black/white \uff0c\u8fd9\u610f\u5473\u7740\u5f53\u524d\u914d\u8272\u7684\u5177\u4f53\u503c\u53d6\u51b3\u4e8e\u54ea\u79cd\u989c\u8272\u4e0e\u76f8\u5e94\u7684\u80cc\u666f\u989c\u8272\u5f62\u6210\u7684\u5bf9\u6bd4\u503c\u5927\u3002","title":"Colors"},{"location":"third-party-component/accompanist/appcompat_theme/#typography","text":"AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6ca1\u6709\u63d0\u4f9b\u7c7b\u4f3c\u4e0eheadline6\u3001body1\u8fd9\u79cd\u8bed\u4e49\u4e0a\u7684\u6587\u672c\u6837\u5f0f\u8868\u793a\uff0c\u800c\u662f\u4f9d\u8d56\u4e8e\u7279\u6b8a\u7ec4\u4ef6\u6216\u4f7f\u7528\u573a\u666f\u4e0b\u7684\u6587\u672c\u6837\u5f0f\u6807\u8bc6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4ece AppCompat XML \u4e3b\u9898\u914d\u7f6e\u4e2d\u80fd\u591f\u8bfb\u53d6\u5230\u7684\u552f\u4e00\u4e8b\u7269\u53ea\u6709\u9ed8\u8ba4\u7684 app:fontFamily \u6216 android:fontFamily \u3002\u4e3e\u4e2a\u4f8b\u5b50\u3002 <style name= \"Theme.MyApp\" parent= \"Theme.AppCompat\" > <item name= \"fontFamily\" > @font/my_font </item> </style> Compose \u5f53\u524d\u8fd8\u4e0d\u652f\u6301\u53ef\u52a8\u6001\u4ece\u5916\u90e8\u4e0b\u8f7d\u7684\u5b57\u4f53\uff0c\u6240\u4ee5\u4e3b\u9898\u4e2d\u7684\u4efb\u4f55\u5b57\u4f53\u5f15\u7528\u90fd\u9700\u8981\u6765\u81ea\u4f60\u7684\u672c\u5730\u8d44\u6e90\u3002\u8be6\u60c5\u67e5\u770b \u8fd9\u91cc \u83b7\u53d6\u66f4\u591a\u6709\u5173\u4fe1\u606f\u3002","title":"Typography"},{"location":"third-party-component/accompanist/appcompat_theme/#shape","text":"AppCompat XML \u4e3b\u9898\u914d\u7f6e\u6ca1\u6709 Shape \u4e3b\u9898\u914d\u7f6e\u7684\u6982\u5ff5\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u7684\u662f MaterialTheme \u9ed8\u8ba4\u7684 Shape \u4e3b\u9898\u914d\u7f6e\u3002\u5982\u679c\u4f60\u60f3\u63d0\u4f9b\u5b9a\u5236\u7684 Shape \u4e3b\u9898\u914d\u7f6e\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7 AppCompatTheme \u7684 shapes \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\u3002","title":"Shape"},{"location":"third-party-component/accompanist/appcompat_theme/#_3","text":"\u76ee\u524d\u8be5\u5e93\u5728\u5b9e\u73b0\u4e0a\u8fd8\u662f\u5b58\u5728\u4e00\u4e9b\u5c40\u9650\u6027\u7684 \u8fd9\u4f9d\u8d56\u4e8e\u4f60\u7684 Activity / Context \u7684\u4e3b\u9898\u914d\u7f6e\u662f\u5426\u62d3\u5c55\u4e86\u67d0\u4e2a AppCompat XML \u4e3b\u9898\u3002 Compose \u8fd8\u4e0d\u652f\u6301 Variable fonts\uff0c\u8fd9\u610f\u5473\u7740 android:fontVariationSettings \u7684\u503c\u76ee\u524d\u88ab\u5ffd\u7565\u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5728 Compose \u4e2d\u4fee\u6539\u4ea7\u751f\u7684MaterialTheme\uff0c\u4f46\u8fd9\u53ea\u5728Compose\u4e2d\u6709\u6548\u3002\u4f60\u6240\u505a\u7684\u4efb\u4f55\u6539\u53d8\u90fd\u4e0d\u4f1a\u53cd\u6620\u5728 Activity \u4e3b\u9898\u914d\u7f6e\u4e2d\u3002","title":"\u5c40\u9650\u6027"},{"location":"third-party-component/accompanist/appcompat_theme/#_4","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-appcompat-theme:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/accompanist/coil/","text":"\u6ce8\u610f\uff0c\u6b64\u5e93\u5df2\u88ab\u8fc1\u79fb\u81f3 Coil \u5b98\u7f51\u5e93\u4e2d\uff0c\u8fd9\u91cc\u4e0d\u518d\u7ef4\u62a4 \u8be6\u60c5\u8bf7\u770b\uff1a Coil \u5b98\u7f51 \u672c\u624b\u518c \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 Coil for Jetpack Compose \u8be5\u5e93\u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\u7684 Painter \uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528 Coil \u56fe\u50cf\u52a0\u8f7d\u5e93\u83b7\u53d6\u5e76\u663e\u793a\u5916\u90e8\u56fe\u50cf\uff08\u4f8b\u5982\u7f51\u7edc\u56fe\u50cf\u7b49\uff09\u3002 rememberCoilPainter() \u4e3b\u8981 API rememberCoilPainter() \u7684\u6700\u7b80\u5355\u7528\u6cd5\u5982\u4e0b\uff1a import androidx.compose.foundation.Image import com.google.accompanist.coil.rememberCoilPainter Image ( painter = rememberCoilPainter ( \"https://picsum.photos/300/300\" ), contentDescription = stringResource ( R . string . image_content_desc ), ) painter \u4f7f\u7528 Coil \u52a0\u8f7d\u4f20\u5165\u7684\u6570\u636e\uff0c\u7136\u540e\u7ed8\u5236\u7ed3\u679c\u56fe\u50cf\u3002 \u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u901a\u8fc7 requestBuilder \u53c2\u6570\u6765\u81ea\u5b9a\u4e49 Coil \u7684 ImageRequest \u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u5982 CircleCropTransformation \u3001 BlurTransformation \u3001 GrayscaleTransformation \u3001 RoundedCornersTransformation \u7b49 transformations \u4e4b\u7c7b\u7684\u6548\u679c\uff1a import androidx.compose.foundation.Image import com.google.accompanist.coil.rememberCoilPainter Image ( painter = rememberCoilPainter ( request = \"https://picsum.photos/300/300\" , requestBuilder = { transformations ( CircleCropTransformation ()) }, ), contentDescription = stringResource ( R . string . image_content_desc ), ) \u6de1\u5165\u52a8\u753b \u8be5\u5e93\u5185\u7f6e\u652f\u6301\u56fe\u50cf\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684 \u6de1\u5165\u52a8\u753b \u3002 rememberCoilPainter \u7684\u51fd\u6570\u53c2\u6570 fadeIn:Boolean \u9ed8\u8ba4\u4e3a false \uff0c\u5f53 fadeIn = true \u65f6\uff0c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6de1\u5165\u52a8\u753b\u5c06\u51fa\u73b0\u5728\u56fe\u7247\u6210\u529f\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u3002 import androidx.compose.foundation.Image import com.google.accompanist.coil.rememberCoilPainter Image ( painter = rememberCoilPainter ( \"https://picsum.photos/300/300\" , fadeIn = true ), contentDescription = stringResource ( R . string . image_content_desc ), ) \u81ea\u5b9a\u4e49\u5185\u5bb9 \u6709\u65f6\u5f00\u53d1\u8005\u53ef\u80fd\u5e0c\u671b\u5728\u56fe\u7247\u52a0\u8f7d\u65f6\u663e\u793a\u5360\u4f4d\u56fe\u7247\u6216\u8005\u5728\u56fe\u7247\u52a0\u8f7d\u5931\u8d25\u65f6\u663e\u793a\u5931\u8d25\u63d0\u793a\u56fe\u7247\uff0c rememberCoilPainter() \u8fd4\u56de\u7684 painter \u662f \u7684\u4e00\u4e2a LoadPainter \u5b9e\u4f8b\uff0c ImageLoadState \u6709\u56db\u79cd\u72b6\u6001\uff1a Empty \u3001 Loading \u3001 Success \u548c Error \uff0c\u5206\u522b\u5bf9\u5e94\u7740\u521d\u59cb\u72b6\u6001\u3001\u52a0\u8f7d\u72b6\u6001\u3001\u52a0\u8f7d\u6210\u529f\u548c\u52a0\u8f7d\u5931\u8d25\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u663e\u793a\u4e0d\u540c\u7684\u5185\u5bb9\uff1a val painter = rememberCoilPainter ( \"https://picsum.photos/300/300\" ) Box { Image ( painter = painter , contentDescription = stringResource ( R . string . image_content_desc ), ) when ( painter . loadState ) { is ImageLoadState . Loading -> { // Display a circular progress indicator whilst loading CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } is ImageLoadState . Error -> { // If you wish to display some content if the request fails } } } \u9884\u89c8 \u4e3a\u4e86\u652f\u6301 Android Studio \u7684 Composable Previews \u529f\u80fd\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 previewPlaceholder \u53c2\u6570\u4f20\u5165\u4e00\u4e2a\u56fe\u7247\u8d44\u6e90 ID \uff0c\u4ee5\u4fbf Android Studio \u9884\u89c8\u5e03\u5c40\u65f6\u6709\u56fe\u7247\u5c55\u793a\uff1a Image ( painter = rememberCoilPainter ( request = \"https://picsum.photos/300/300\" , previewPlaceholder = R . drawable . placeholder , ), contentDescription = stringResource ( R . string . image_content_desc ), ) \u5982\u679c\u5f15\u7528\u7684 drawable \u4ec5\u7528\u4e8e previewPlaceholder \uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u653e\u7f6e\u5728 debug \u6784\u5efa\u53d8\u4f53\u7684\u8d44\u6e90\u4e2d\uff0c\u4f8b\u5982\uff1a app/debug/res/drawable/ \uff0c\u901a\u8fc7\u8fd9\u79cd\u64cd\u4f5c\u5c06 drawable \u6346\u7ed1\u5728\u8c03\u8bd5\u7248\u672c\u4e2d\uff0c\u540c\u65f6\u4e5f\u5c06\u5176\u6392\u9664\u81f3\u53d1\u5e03\u7248\u672c\u5916\u3002 GIF Accompanist Coil \u901a\u8fc7 Coil \u5185\u7f6e GIF \u652f\u6301\u5b9e\u73b0 GIF \u56fe\u7247\u52a0\u8f7d\u3002\u5177\u4f53\u914d\u7f6e\u53c2\u8003 Coil \u5e93\u7684 \u914d\u7f6e\u8bf4\u660e \u3002 \u89c2\u5bdf\u52a0\u8f7d\u72b6\u6001\u53d8\u5316 \u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528 snapshotFlow() \u6765\u89c2\u5bdf painter.loadState \u7684\u53d8\u5316\u60c5\u51b5\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5bf9\u56fe\u7247\u52a0\u8f7d\u72b6\u6001\u7684\u76d1\u542c\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u8c03\u6574\u4ee3\u7801\u903b\u8f91\uff1a val painter = rememberCoilPainter ( \"https://image.url\" ) LaunchedEffect ( painter ) { snapshotFlow { painter . loadState } . filter { it . isFinalState () } . collect { result -> // TODO do something with result } } Image ( painter = painter ) \u81ea\u5b9a\u4e49 ImageLoader \u5982\u679c\u5f00\u53d1\u8005\u5e0c\u671b\u5728\u6240\u6709 rememberCoilPainter() \u8c03\u7528\u4e2d\u4f7f\u7528\u540c\u4e00\u4e2a\u9ed8\u8ba4\u7684 ImageLoader \uff0c\u5c31\u8bf7\u4f7f\u7528 LocalImageLoader \u3002 \u793a\u4f8b\u5982\u4e0b\uff1a val imageLoader = ImageLoader . Builder ( context ) // customize the ImageLoader as needed . build () CompositionLocalProvider ( LocalImageLoader provides imageLoader ) { // This will automatically use the value of LocalImageLoader Image ( painter = rememberCoilPainter (...) ) } \u66f4\u591a\u6709\u5173 CompositionLocal \u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904 \u3002 \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-coil:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"Coil"},{"location":"third-party-component/accompanist/coil/#coil","text":"\u8be6\u60c5\u8bf7\u770b\uff1a Coil \u5b98\u7f51 \u672c\u624b\u518c \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014","title":"\u6ce8\u610f\uff0c\u6b64\u5e93\u5df2\u88ab\u8fc1\u79fb\u81f3 Coil \u5b98\u7f51\u5e93\u4e2d\uff0c\u8fd9\u91cc\u4e0d\u518d\u7ef4\u62a4"},{"location":"third-party-component/accompanist/coil/#coil-for-jetpack-compose","text":"\u8be5\u5e93\u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\u7684 Painter \uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528 Coil \u56fe\u50cf\u52a0\u8f7d\u5e93\u83b7\u53d6\u5e76\u663e\u793a\u5916\u90e8\u56fe\u50cf\uff08\u4f8b\u5982\u7f51\u7edc\u56fe\u50cf\u7b49\uff09\u3002","title":"Coil for Jetpack Compose"},{"location":"third-party-component/accompanist/coil/#remembercoilpainter","text":"\u4e3b\u8981 API rememberCoilPainter() \u7684\u6700\u7b80\u5355\u7528\u6cd5\u5982\u4e0b\uff1a import androidx.compose.foundation.Image import com.google.accompanist.coil.rememberCoilPainter Image ( painter = rememberCoilPainter ( \"https://picsum.photos/300/300\" ), contentDescription = stringResource ( R . string . image_content_desc ), ) painter \u4f7f\u7528 Coil \u52a0\u8f7d\u4f20\u5165\u7684\u6570\u636e\uff0c\u7136\u540e\u7ed8\u5236\u7ed3\u679c\u56fe\u50cf\u3002 \u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u901a\u8fc7 requestBuilder \u53c2\u6570\u6765\u81ea\u5b9a\u4e49 Coil \u7684 ImageRequest \u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u5982 CircleCropTransformation \u3001 BlurTransformation \u3001 GrayscaleTransformation \u3001 RoundedCornersTransformation \u7b49 transformations \u4e4b\u7c7b\u7684\u6548\u679c\uff1a import androidx.compose.foundation.Image import com.google.accompanist.coil.rememberCoilPainter Image ( painter = rememberCoilPainter ( request = \"https://picsum.photos/300/300\" , requestBuilder = { transformations ( CircleCropTransformation ()) }, ), contentDescription = stringResource ( R . string . image_content_desc ), )","title":"rememberCoilPainter()"},{"location":"third-party-component/accompanist/coil/#_1","text":"\u8be5\u5e93\u5185\u7f6e\u652f\u6301\u56fe\u50cf\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684 \u6de1\u5165\u52a8\u753b \u3002 rememberCoilPainter \u7684\u51fd\u6570\u53c2\u6570 fadeIn:Boolean \u9ed8\u8ba4\u4e3a false \uff0c\u5f53 fadeIn = true \u65f6\uff0c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6de1\u5165\u52a8\u753b\u5c06\u51fa\u73b0\u5728\u56fe\u7247\u6210\u529f\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u3002 import androidx.compose.foundation.Image import com.google.accompanist.coil.rememberCoilPainter Image ( painter = rememberCoilPainter ( \"https://picsum.photos/300/300\" , fadeIn = true ), contentDescription = stringResource ( R . string . image_content_desc ), )","title":"\u6de1\u5165\u52a8\u753b"},{"location":"third-party-component/accompanist/coil/#_2","text":"\u6709\u65f6\u5f00\u53d1\u8005\u53ef\u80fd\u5e0c\u671b\u5728\u56fe\u7247\u52a0\u8f7d\u65f6\u663e\u793a\u5360\u4f4d\u56fe\u7247\u6216\u8005\u5728\u56fe\u7247\u52a0\u8f7d\u5931\u8d25\u65f6\u663e\u793a\u5931\u8d25\u63d0\u793a\u56fe\u7247\uff0c rememberCoilPainter() \u8fd4\u56de\u7684 painter \u662f \u7684\u4e00\u4e2a LoadPainter \u5b9e\u4f8b\uff0c ImageLoadState \u6709\u56db\u79cd\u72b6\u6001\uff1a Empty \u3001 Loading \u3001 Success \u548c Error \uff0c\u5206\u522b\u5bf9\u5e94\u7740\u521d\u59cb\u72b6\u6001\u3001\u52a0\u8f7d\u72b6\u6001\u3001\u52a0\u8f7d\u6210\u529f\u548c\u52a0\u8f7d\u5931\u8d25\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u663e\u793a\u4e0d\u540c\u7684\u5185\u5bb9\uff1a val painter = rememberCoilPainter ( \"https://picsum.photos/300/300\" ) Box { Image ( painter = painter , contentDescription = stringResource ( R . string . image_content_desc ), ) when ( painter . loadState ) { is ImageLoadState . Loading -> { // Display a circular progress indicator whilst loading CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } is ImageLoadState . Error -> { // If you wish to display some content if the request fails } } }","title":"\u81ea\u5b9a\u4e49\u5185\u5bb9"},{"location":"third-party-component/accompanist/coil/#_3","text":"\u4e3a\u4e86\u652f\u6301 Android Studio \u7684 Composable Previews \u529f\u80fd\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 previewPlaceholder \u53c2\u6570\u4f20\u5165\u4e00\u4e2a\u56fe\u7247\u8d44\u6e90 ID \uff0c\u4ee5\u4fbf Android Studio \u9884\u89c8\u5e03\u5c40\u65f6\u6709\u56fe\u7247\u5c55\u793a\uff1a Image ( painter = rememberCoilPainter ( request = \"https://picsum.photos/300/300\" , previewPlaceholder = R . drawable . placeholder , ), contentDescription = stringResource ( R . string . image_content_desc ), ) \u5982\u679c\u5f15\u7528\u7684 drawable \u4ec5\u7528\u4e8e previewPlaceholder \uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u653e\u7f6e\u5728 debug \u6784\u5efa\u53d8\u4f53\u7684\u8d44\u6e90\u4e2d\uff0c\u4f8b\u5982\uff1a app/debug/res/drawable/ \uff0c\u901a\u8fc7\u8fd9\u79cd\u64cd\u4f5c\u5c06 drawable \u6346\u7ed1\u5728\u8c03\u8bd5\u7248\u672c\u4e2d\uff0c\u540c\u65f6\u4e5f\u5c06\u5176\u6392\u9664\u81f3\u53d1\u5e03\u7248\u672c\u5916\u3002","title":"\u9884\u89c8"},{"location":"third-party-component/accompanist/coil/#gif","text":"Accompanist Coil \u901a\u8fc7 Coil \u5185\u7f6e GIF \u652f\u6301\u5b9e\u73b0 GIF \u56fe\u7247\u52a0\u8f7d\u3002\u5177\u4f53\u914d\u7f6e\u53c2\u8003 Coil \u5e93\u7684 \u914d\u7f6e\u8bf4\u660e \u3002","title":"GIF"},{"location":"third-party-component/accompanist/coil/#_4","text":"\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528 snapshotFlow() \u6765\u89c2\u5bdf painter.loadState \u7684\u53d8\u5316\u60c5\u51b5\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5bf9\u56fe\u7247\u52a0\u8f7d\u72b6\u6001\u7684\u76d1\u542c\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u8c03\u6574\u4ee3\u7801\u903b\u8f91\uff1a val painter = rememberCoilPainter ( \"https://image.url\" ) LaunchedEffect ( painter ) { snapshotFlow { painter . loadState } . filter { it . isFinalState () } . collect { result -> // TODO do something with result } } Image ( painter = painter )","title":"\u89c2\u5bdf\u52a0\u8f7d\u72b6\u6001\u53d8\u5316"},{"location":"third-party-component/accompanist/coil/#imageloader","text":"\u5982\u679c\u5f00\u53d1\u8005\u5e0c\u671b\u5728\u6240\u6709 rememberCoilPainter() \u8c03\u7528\u4e2d\u4f7f\u7528\u540c\u4e00\u4e2a\u9ed8\u8ba4\u7684 ImageLoader \uff0c\u5c31\u8bf7\u4f7f\u7528 LocalImageLoader \u3002 \u793a\u4f8b\u5982\u4e0b\uff1a val imageLoader = ImageLoader . Builder ( context ) // customize the ImageLoader as needed . build () CompositionLocalProvider ( LocalImageLoader provides imageLoader ) { // This will automatically use the value of LocalImageLoader Image ( painter = rememberCoilPainter (...) ) } \u66f4\u591a\u6709\u5173 CompositionLocal \u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904 \u3002","title":"\u81ea\u5b9a\u4e49 ImageLoader"},{"location":"third-party-component/accompanist/coil/#_5","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-coil:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/accompanist/flow_layouts/","text":"Jetpack Compose Flow Layouts \u8fd9\u4e2a\u5e93\u63d0\u4f9b\u4e86 Jetpack Compose \u7248\u672c\u7684\u6d41\u5f0f\u5e03\u5c40\uff0c\u4e0e\u6807\u51c6 Row \u7ec4\u4ef6\u4e0e Column \u7ec4\u4ef6\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u5b50\u5143\u7d20\u5728\u6392\u5217\u65f6\u5982\u679c\u51fa\u73b0\u53ef\u7528\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\u4f1a\u81ea\u52a8\u62d3\u5c55\u4e3a\u591a\u884c\u6216\u591a\u5217\u3002 \u7528\u6cd5 FlowRow { // row contents } FlowColumn { // column contents } \u4f7f\u7528\u6848\u4f8b\u53c2\u8003 \u8fd9\u91cc \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-flowlayout:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"Flow layouts"},{"location":"third-party-component/accompanist/flow_layouts/#jetpack-compose-flow-layouts","text":"\u8fd9\u4e2a\u5e93\u63d0\u4f9b\u4e86 Jetpack Compose \u7248\u672c\u7684\u6d41\u5f0f\u5e03\u5c40\uff0c\u4e0e\u6807\u51c6 Row \u7ec4\u4ef6\u4e0e Column \u7ec4\u4ef6\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u5b50\u5143\u7d20\u5728\u6392\u5217\u65f6\u5982\u679c\u51fa\u73b0\u53ef\u7528\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\u4f1a\u81ea\u52a8\u62d3\u5c55\u4e3a\u591a\u884c\u6216\u591a\u5217\u3002","title":"Jetpack Compose Flow Layouts"},{"location":"third-party-component/accompanist/flow_layouts/#_1","text":"FlowRow { // row contents } FlowColumn { // column contents } \u4f7f\u7528\u6848\u4f8b\u53c2\u8003 \u8fd9\u91cc","title":"\u7528\u6cd5"},{"location":"third-party-component/accompanist/flow_layouts/#_2","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-flowlayout:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/accompanist/glide/","text":"Glide for Jetpack Compose \u8be5\u5e93\u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\u7684 Painter \uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528 Glide \u56fe\u50cf\u52a0\u8f7d\u5e93\u83b7\u53d6\u5e76\u663e\u793a\u5916\u90e8\u56fe\u50cf\uff08\u4f8b\u5982\u7f51\u7edc\u56fe\u50cf\u7b49\uff09\u3002 \u5c0f\u63d0\u793a\uff1a \u82e5\u975e\u5fc5\u8981\uff0c\u5efa\u8bae\u4f7f\u7528 Coil \u3002 Coil \u662f\u57fa\u4e8e Kotlin \u534f\u7a0b\u5b9e\u73b0\u7684\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u66f4\u597d\u5730\u4e0e Jetpack Compose \u96c6\u6210\uff0c\u56e0\u4e3a\u540e\u8005\u4e5f\u5927\u91cf\u5730\u4f7f\u7528\u4e86\u534f\u7a0b\u3002 rememberGlidePainter() \u4e3b\u8981 API rememberGlidePainter() \u7684\u6700\u7b80\u5355\u7528\u6cd5\u5982\u4e0b\uff1a import androidx.compose.foundation.Image import com.google.accompanist.glide.rememberGlidePainter Image ( painter = rememberGlidePainter ( request = \"https://picsum.photos/300/300\" , previewPlaceholder = R . drawable . placeholder ), contentDescription = stringResource ( R . string . image_content_desc ) ) painter \u4f7f\u7528 Glide \u52a0\u8f7d\u4f20\u5165\u7684\u6570\u636e\uff0c\u7136\u540e\u7ed8\u5236\u7ed3\u679c\u56fe\u50cf\u3002 \u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u901a\u8fc7 requestBuilder \u53c2\u6570\u6765\u81ea\u5b9a\u4e49 Glide \u7684 RequestBuilder \u3002 \u6de1\u5165\u52a8\u753b \u8be5\u5e93\u5185\u7f6e\u652f\u6301\u56fe\u50cf\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684 \u6de1\u5165\u52a8\u753b \u3002 rememberGlidePainter \u7684\u51fd\u6570\u53c2\u6570 fadeIn:Boolean \u9ed8\u8ba4\u4e3a false \uff0c\u5f53 fadeIn = true \u65f6\uff0c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6de1\u5165\u52a8\u753b\u5c06\u51fa\u73b0\u5728\u56fe\u7247\u6210\u529f\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u3002 import androidx.compose.foundation.Image import com.google.accompanist.glide.rememberGlidePainter Image ( painter = rememberGlidePainter ( \"https://picsum.photos/300/300\" , fadeIn = true ), contentDescription = stringResource ( R . string . image_content_desc ), ) \u81ea\u5b9a\u4e49\u5185\u5bb9 \u6709\u65f6\u5f00\u53d1\u8005\u53ef\u80fd\u5e0c\u671b\u5728\u56fe\u7247\u52a0\u8f7d\u65f6\u663e\u793a\u5360\u4f4d\u56fe\u7247\u6216\u8005\u5728\u56fe\u7247\u52a0\u8f7d\u5931\u8d25\u65f6\u663e\u793a\u5931\u8d25\u63d0\u793a\u56fe\u7247\uff0c rememberGlidePainter() \u8fd4\u56de\u7684 painter \u662f \u7684\u4e00\u4e2a LoadPainter \u5b9e\u4f8b\uff0c ImageLoadState \u6709\u56db\u79cd\u72b6\u6001\uff1a Empty \u3001 Loading \u3001 Success \u548c Error \uff0c\u5206\u522b\u5bf9\u5e94\u7740\u521d\u59cb\u72b6\u6001\u3001\u52a0\u8f7d\u72b6\u6001\u3001\u52a0\u8f7d\u6210\u529f\u548c\u52a0\u8f7d\u5931\u8d25\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u663e\u793a\u4e0d\u540c\u7684\u5185\u5bb9\uff1a val painter = rememberGlidePainter ( \"https://picsum.photos/300/300\" ) Box { Image ( painter = painter , contentDescription = stringResource ( R . string . image_content_desc ), ) when ( painter . loadState ) { is ImageLoadState . Loading -> { // Display a circular progress indicator whilst loading CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } is ImageLoadState . Error -> { // If you wish to display some content if the request fails } } } \u9884\u89c8 \u4e3a\u4e86\u652f\u6301 Android Studio \u7684 Composable Previews \u529f\u80fd\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 previewPlaceholder \u53c2\u6570\u4f20\u5165\u4e00\u4e2a\u56fe\u7247\u8d44\u6e90 ID \uff0c\u4ee5\u4fbf Android Studio \u9884\u89c8\u5e03\u5c40\u65f6\u6709\u56fe\u7247\u5c55\u793a\uff1a Image ( painter = rememberGlidePainter ( request = \"https://picsum.photos/300/300\" , previewPlaceholder = R . drawable . placeholder , ), contentDescription = stringResource ( R . string . image_content_desc ), ) \u5982\u679c\u5f15\u7528\u7684 drawable \u4ec5\u7528\u4e8e previewPlaceholder \uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u653e\u7f6e\u5728 debug \u6784\u5efa\u53d8\u4f53\u7684\u8d44\u6e90\u4e2d\uff0c\u4f8b\u5982\uff1a app/debug/res/drawable/ \uff0c\u901a\u8fc7\u8fd9\u79cd\u64cd\u4f5c\u5c06 drawable \u6346\u7ed1\u5728\u8c03\u8bd5\u7248\u672c\u4e2d\uff0c\u540c\u65f6\u4e5f\u5c06\u5176\u6392\u9664\u81f3\u53d1\u5e03\u7248\u672c\u5916\u3002 GIF Accompanist Glide \u901a\u8fc7 Glide \u5185\u7f6e GIF \u652f\u6301\u5b9e\u73b0 GIF \u56fe\u7247\u52a0\u8f7d\u3002\u9ed8\u8ba4\u652f\u6301\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\u3002 \u89c2\u5bdf\u52a0\u8f7d\u72b6\u6001\u53d8\u5316 \u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528 snapshotFlow() \u6765\u89c2\u5bdf painter.loadState \u7684\u53d8\u5316\u60c5\u51b5\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5bf9\u56fe\u7247\u52a0\u8f7d\u72b6\u6001\u7684\u76d1\u542c\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u8c03\u6574\u4ee3\u7801\u903b\u8f91\uff1a val painter = rememberGlidePainter ( \"https://image.url\" ) LaunchedEffect ( painter ) { snapshotFlow { painter . loadState } . filter { it . isFinalState () } . collect { result -> // TODO do something with result } } Image ( painter = painter ) \u81ea\u5b9a\u4e49 RequestManager \u5982\u679c\u5f00\u53d1\u8005\u5e0c\u671b\u5728\u6240\u6709 rememberGlidePainter() \u8c03\u7528\u4e2d\u4f7f\u7528\u540c\u4e00\u4e2a\u9ed8\u8ba4\u7684 RequestManager \uff0c\u5c31\u8bf7\u4f7f\u7528 LocalRequestManager \u3002 \u793a\u4f8b\u5982\u4e0b\uff1a val requestManager = Glide . with (...) // customize the RequestManager as needed . build () CompositionLocalProvider ( LocalRequestManager provides requestManager ) { // This will automatically use the value of LocalRequestManager Image ( painter = rememberGlidePainter (...) ) } \u66f4\u591a\u6709\u5173 CompositionLocal \u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904 \u3002 \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-glide:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"Glide"},{"location":"third-party-component/accompanist/glide/#glide-for-jetpack-compose","text":"\u8be5\u5e93\u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\u7684 Painter \uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528 Glide \u56fe\u50cf\u52a0\u8f7d\u5e93\u83b7\u53d6\u5e76\u663e\u793a\u5916\u90e8\u56fe\u50cf\uff08\u4f8b\u5982\u7f51\u7edc\u56fe\u50cf\u7b49\uff09\u3002 \u5c0f\u63d0\u793a\uff1a \u82e5\u975e\u5fc5\u8981\uff0c\u5efa\u8bae\u4f7f\u7528 Coil \u3002 Coil \u662f\u57fa\u4e8e Kotlin \u534f\u7a0b\u5b9e\u73b0\u7684\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u66f4\u597d\u5730\u4e0e Jetpack Compose \u96c6\u6210\uff0c\u56e0\u4e3a\u540e\u8005\u4e5f\u5927\u91cf\u5730\u4f7f\u7528\u4e86\u534f\u7a0b\u3002","title":"Glide for Jetpack Compose"},{"location":"third-party-component/accompanist/glide/#rememberglidepainter","text":"\u4e3b\u8981 API rememberGlidePainter() \u7684\u6700\u7b80\u5355\u7528\u6cd5\u5982\u4e0b\uff1a import androidx.compose.foundation.Image import com.google.accompanist.glide.rememberGlidePainter Image ( painter = rememberGlidePainter ( request = \"https://picsum.photos/300/300\" , previewPlaceholder = R . drawable . placeholder ), contentDescription = stringResource ( R . string . image_content_desc ) ) painter \u4f7f\u7528 Glide \u52a0\u8f7d\u4f20\u5165\u7684\u6570\u636e\uff0c\u7136\u540e\u7ed8\u5236\u7ed3\u679c\u56fe\u50cf\u3002 \u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u901a\u8fc7 requestBuilder \u53c2\u6570\u6765\u81ea\u5b9a\u4e49 Glide \u7684 RequestBuilder \u3002","title":"rememberGlidePainter()"},{"location":"third-party-component/accompanist/glide/#_1","text":"\u8be5\u5e93\u5185\u7f6e\u652f\u6301\u56fe\u50cf\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684 \u6de1\u5165\u52a8\u753b \u3002 rememberGlidePainter \u7684\u51fd\u6570\u53c2\u6570 fadeIn:Boolean \u9ed8\u8ba4\u4e3a false \uff0c\u5f53 fadeIn = true \u65f6\uff0c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6de1\u5165\u52a8\u753b\u5c06\u51fa\u73b0\u5728\u56fe\u7247\u6210\u529f\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u3002 import androidx.compose.foundation.Image import com.google.accompanist.glide.rememberGlidePainter Image ( painter = rememberGlidePainter ( \"https://picsum.photos/300/300\" , fadeIn = true ), contentDescription = stringResource ( R . string . image_content_desc ), )","title":"\u6de1\u5165\u52a8\u753b"},{"location":"third-party-component/accompanist/glide/#_2","text":"\u6709\u65f6\u5f00\u53d1\u8005\u53ef\u80fd\u5e0c\u671b\u5728\u56fe\u7247\u52a0\u8f7d\u65f6\u663e\u793a\u5360\u4f4d\u56fe\u7247\u6216\u8005\u5728\u56fe\u7247\u52a0\u8f7d\u5931\u8d25\u65f6\u663e\u793a\u5931\u8d25\u63d0\u793a\u56fe\u7247\uff0c rememberGlidePainter() \u8fd4\u56de\u7684 painter \u662f \u7684\u4e00\u4e2a LoadPainter \u5b9e\u4f8b\uff0c ImageLoadState \u6709\u56db\u79cd\u72b6\u6001\uff1a Empty \u3001 Loading \u3001 Success \u548c Error \uff0c\u5206\u522b\u5bf9\u5e94\u7740\u521d\u59cb\u72b6\u6001\u3001\u52a0\u8f7d\u72b6\u6001\u3001\u52a0\u8f7d\u6210\u529f\u548c\u52a0\u8f7d\u5931\u8d25\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u6839\u636e\u9700\u8981\u663e\u793a\u4e0d\u540c\u7684\u5185\u5bb9\uff1a val painter = rememberGlidePainter ( \"https://picsum.photos/300/300\" ) Box { Image ( painter = painter , contentDescription = stringResource ( R . string . image_content_desc ), ) when ( painter . loadState ) { is ImageLoadState . Loading -> { // Display a circular progress indicator whilst loading CircularProgressIndicator ( Modifier . align ( Alignment . Center )) } is ImageLoadState . Error -> { // If you wish to display some content if the request fails } } }","title":"\u81ea\u5b9a\u4e49\u5185\u5bb9"},{"location":"third-party-component/accompanist/glide/#_3","text":"\u4e3a\u4e86\u652f\u6301 Android Studio \u7684 Composable Previews \u529f\u80fd\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7 previewPlaceholder \u53c2\u6570\u4f20\u5165\u4e00\u4e2a\u56fe\u7247\u8d44\u6e90 ID \uff0c\u4ee5\u4fbf Android Studio \u9884\u89c8\u5e03\u5c40\u65f6\u6709\u56fe\u7247\u5c55\u793a\uff1a Image ( painter = rememberGlidePainter ( request = \"https://picsum.photos/300/300\" , previewPlaceholder = R . drawable . placeholder , ), contentDescription = stringResource ( R . string . image_content_desc ), ) \u5982\u679c\u5f15\u7528\u7684 drawable \u4ec5\u7528\u4e8e previewPlaceholder \uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u653e\u7f6e\u5728 debug \u6784\u5efa\u53d8\u4f53\u7684\u8d44\u6e90\u4e2d\uff0c\u4f8b\u5982\uff1a app/debug/res/drawable/ \uff0c\u901a\u8fc7\u8fd9\u79cd\u64cd\u4f5c\u5c06 drawable \u6346\u7ed1\u5728\u8c03\u8bd5\u7248\u672c\u4e2d\uff0c\u540c\u65f6\u4e5f\u5c06\u5176\u6392\u9664\u81f3\u53d1\u5e03\u7248\u672c\u5916\u3002","title":"\u9884\u89c8"},{"location":"third-party-component/accompanist/glide/#gif","text":"Accompanist Glide \u901a\u8fc7 Glide \u5185\u7f6e GIF \u652f\u6301\u5b9e\u73b0 GIF \u56fe\u7247\u52a0\u8f7d\u3002\u9ed8\u8ba4\u652f\u6301\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\u3002","title":"GIF"},{"location":"third-party-component/accompanist/glide/#_4","text":"\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528 snapshotFlow() \u6765\u89c2\u5bdf painter.loadState \u7684\u53d8\u5316\u60c5\u51b5\uff0c\u4ee5\u6b64\u5b9e\u73b0\u5bf9\u56fe\u7247\u52a0\u8f7d\u72b6\u6001\u7684\u76d1\u542c\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u8c03\u6574\u4ee3\u7801\u903b\u8f91\uff1a val painter = rememberGlidePainter ( \"https://image.url\" ) LaunchedEffect ( painter ) { snapshotFlow { painter . loadState } . filter { it . isFinalState () } . collect { result -> // TODO do something with result } } Image ( painter = painter )","title":"\u89c2\u5bdf\u52a0\u8f7d\u72b6\u6001\u53d8\u5316"},{"location":"third-party-component/accompanist/glide/#requestmanager","text":"\u5982\u679c\u5f00\u53d1\u8005\u5e0c\u671b\u5728\u6240\u6709 rememberGlidePainter() \u8c03\u7528\u4e2d\u4f7f\u7528\u540c\u4e00\u4e2a\u9ed8\u8ba4\u7684 RequestManager \uff0c\u5c31\u8bf7\u4f7f\u7528 LocalRequestManager \u3002 \u793a\u4f8b\u5982\u4e0b\uff1a val requestManager = Glide . with (...) // customize the RequestManager as needed . build () CompositionLocalProvider ( LocalRequestManager provides requestManager ) { // This will automatically use the value of LocalRequestManager Image ( painter = rememberGlidePainter (...) ) } \u66f4\u591a\u6709\u5173 CompositionLocal \u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904 \u3002","title":"\u81ea\u5b9a\u4e49 RequestManager"},{"location":"third-party-component/accompanist/glide/#_5","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-glide:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/accompanist/insets/","text":"Insets for Jetpack Compose Jetpack Compose \u7684 Insets \u91c7\u7528\u4e86 View \u7cfb\u7edf\u4e2d Insetter \u7ec4\u4ef6\u5e93\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u4f7f\u5176\u53ef\u4ee5\u5728 composables \u4e2d\u88ab\u4f7f\u7528\u3002 \u7528\u6cd5 \u4e3a\u4e86\u80fd\u5728\u4f60\u7684 composables \u4e2d\u4f7f\u7528 Insets , \u4f60\u9700\u8981\u4f7f\u7528 ProvideWindowInsets \u65b9\u6cd5\u5e76\u5c06\u4f60\u7684\u89c6\u56fe\u5185\u5bb9\u58f0\u660e\u5728\u5c3e\u90e8lambda\u4e2d\u3002\u8fd9\u6b65\u64cd\u4f5c\u901a\u5e38\u8981\u5728\u4f60\u7684composable\u5c42\u7ea7\u7684\u9876\u90e8\u9644\u8fd1\u8fdb\u884c\u3002 setContent { MaterialTheme { ProvideWindowInsets { // your content } } } \u26a0\ufe0f \u4e3a\u4e86\u4f7f\u4f60\u7684 view \u5c42\u7ea7\u80fd\u591f\u83b7\u53d6\u5230 Insets\uff0c \u4f60\u9700\u8981\u786e\u4fdd\u5728\u4f60Activity\u4e2d\u4f7f\u7528 WindowCompat.setDecorFitsSystemWindows(window, false) \u3002\u5982\u679c\u4f60\u8fd8\u60f3\u4e3a\u4f60\u7684\u7cfb\u7edf\u72b6\u6001\u680f\u8bbe\u7f6e\u989c\u8272\uff0c\u53ef\u4ee5\u4f7f\u7528Accompanist\u7ec4\u4ef6\u5e93\u63d0\u4f9b\u7684 \u7cfb\u7edfUI\u63a7\u5236\u5668 \u6765\u5b8c\u6210\u3002 \u901a\u8fc7\u4f7f\u7528 ProvideWindowInsets \u5c06\u5141\u8bb8\u672c\u7ec4\u4ef6\u5728 content \u4e2d\u8bbe\u7f6e\u4e00\u4e2a OnApplyWindowInsetsListener \uff0c\u8fd9\u4e2aListener\u5c06\u4f1a\u88ab\u7528\u6765\u66f4\u65b0 LocalWindowInsets \u8fd9\u4e2a CompositionLocal\u3002 LocalWindowInsets \u6301\u6709\u4e86\u4e00\u4e2a WindowInsets \u5b9e\u4f8b\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5404\u79cd WindowInsets types \u6570\u503c\u4fe1\u606f\uff0c\u4f8b\u5982\u72b6\u6001\u680f\u3001\u5bfc\u822a\u680f\u3001\u8f93\u5165\u6cd5\u7b49\u3002\u4f60\u901a\u5e38\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u8fd9\u4e9b\u6570\u503c\u4fe1\u606f\u3002 Composable fun ImeAvoidingBox () { val insets = LocalWindowInsets . current // \u5207\u8bb0\uff0c\u8fd9\u4e9b\u4fe1\u606f\u90fd\u662fpx\u5355\u4f4d\uff0c\u4f7f\u7528\u65f6\u8981\u6839\u636e\u9700\u6c42\u8f6c\u6362\u5355\u4f4d val imeBottom = with ( LocalDensity . current ) { insets . ime . bottom . toDp () } Box ( Modifier . padding ( bottom = imeBottom )) } \u4f46\u662f\u672c\u7ec4\u4ef6\u540c\u6837\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6613\u4e8e\u4f7f\u7528\u7684Modifier\u3002 Modifiers \u672c\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e24\u79cd modifier \u7c7b\u578b\u7528\u4e8e\u8f7b\u677e\u9002\u914d\u7279\u5b9a insets \u7684 padding \u4e0e size. Padding Modifier \u4f7f\u7528 Padding Modifier \u5c06\u5141\u8bb8\u4e3a\u4f60\u7684 composable \u65bd\u52a0 padding\u6765\u9002\u914d\u4e00\u4e9b\u7279\u5b9a\u7684 insets\uff0c\u5f53\u524d\u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u6269\u5c55\u65b9\u6cd5\u3002 Modifier.statusBarsPadding() Modifier.navigationBarsPadding() Modifier.systemBarsPadding() Modifier.imePadding() Modifier.navigationBarsWithImePadding() \u8fd9\u4e9b\u65b9\u6cd5\u901a\u5e38\u4f1a\u88ab\u7528\u6765\u5c06 composable \u79fb\u51fa\u7cfb\u7edf\u72b6\u6001\u680f\u6216\u5bfc\u822a\u680f\u7b49\uff0c FloatingActionButton \u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\uff0c\u901a\u5e38\u6211\u4eec\u90fd\u5e0c\u671b\u5c06\u8fd9\u4e2a\u60ac\u6d6e\u6309\u94ae\u79fb\u52a8\u81f3\u7cfb\u7edf\u5bfc\u822a\u680f\u4e0a\u65b9, \u4e0d\u5e0c\u671b\u88ab\u7cfb\u7edf\u5bfc\u822a\u680f\u906e\u76d6\u3002 FloatingActionButton ( onClick = { /* TODO */ }, modifier = Modifier . align ( Alignment . BottomEnd ) . padding ( 16. dp ) // normal 16dp of padding for FABs . navigationBarsPadding () // Move it out from under the nav bar ) { Icon ( imageVector = Icons . Default . Add , contentDescription = null ) } Size Modifier \u901a\u8fc7 Size Modifier \u5c06\u5141\u8bb8\u4e3a\u4f60\u7684 composable \u65bd\u52a0 size \u6765\u9002\u914d\u4e00\u4e9b\u7279\u5b9a\u7684 insets\uff0c\u5f53\u524d\u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u6269\u5c55\u65b9\u6cd5\u3002 Modifier.statusBarsHeight() Modifier.navigationBarsHeight() Modifier.navigationBarsWidth() \u6211\u95e8\u901a\u5e38\u53ef\u4ee5\u8ba9 composable \u4e3a\u7cfb\u7edf\u680f\u63d0\u4f9b\u80cc\u666f\uff0c\u7c7b\u4f3c\u5982\u4e0b\u3002 Spacer ( Modifier . background ( Color . Black . copy ( alpha = 0.7f )) . statusBarsHeight () // Match the height of the status bar . fillMaxWidth () ) PaddingValues Compose \u63d0\u4f9b\u4e86 PaddingValues \u7684\u7406\u5ff5\uff0c\u8be5\u6570\u636e\u7c7b\u5305\u542b\u7740\u6240\u6709\u8981\u88ab\u65bd\u52a0\u7684 padding \u4fe1\u606f(\u7c7b\u4f3c\u4e8e\u4e00\u4e2a Rect)\u3002\u901a\u5e38\u4f1a\u88ab\u7528\u4e8e\u4e00\u4e9b\u5bb9\u5668\u7c7b\u578b composables\uff0c\u4f8b\u5982\u4e3a LazyColumn \u8bbe\u7f6e\u5185\u5bb9 padding\u3002 \u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u67d0\u4e2a\u5177\u4f53 Inset \u4fe1\u606f\u4f5c\u4e3a\u5185\u5bb9 padding\uff0c\u6240\u4ee5\u672c\u7ec4\u4ef6\u63d0\u4f9b\u4e86 rememberInsetsPaddingValues() \u6269\u5c55\u65b9\u6cd5\u7528\u4e8e\u5c06 Inset \u8f6c\u5316\u4e3a PaddingValues\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u83b7\u53d6\u4e86\u7cfb\u7edf\u680fInset\u4fe1\u606f\u3002 LazyColumn ( contentPadding = rememberInsetsPaddingValues ( insets = LocalWindowInsets . current . systemBars , applyTop = true , applyBottom = true , ) ) { // content } \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u67e5\u9605\u4f8b\u5b50 EdgeToEdgeLazyColumn \u53ef\u611f\u77e5 Inset \u7684 Layouts (insets-ui) \u4e0d\u5e78\u7684\u662f\uff0c\u76ee\u524d\u5927\u591a\u6570 Compose \u6240\u63d0\u4f9b\u7684 Material \u98ce\u683c\u7684 Layout \u8fd8\u4e0d\u652f\u6301\u4f7f\u7528\u5185\u5bb9 padding\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u80fd\u4e0d\u4f1a\u4ea7\u751f\u4e0e\u4f60\u7684\u9884\u671f\u76f8\u540c\u7684\u7ed3\u679c\u3002 // \ud83d\ude25 This likely doesn't do what you want TopAppBar( // content modifier = Modifier.statusBarsPadding() ) \u4e3a\u4e86\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 insets-ui \u8fd9\u4e2a\u5144\u5f1f\u7ec4\u4ef6\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5e38\u7528\u5e03\u5c40\uff0c\u5e76\u589e\u52a0\u4e86\u4e00\u4e2a\u540d\u4e3a contentPadding \u7684\u53c2\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u662f\u4e3a TopAppBar \u63d0\u4f9b\u72b6\u6001\u680f\u7684Inset\u4fe1\u606f\u4f5c\u4e3a\u5185\u5bb9\u7684 padding\u3002 import com.google.accompanist.insets.ui.TopAppBar TopAppBar ( contentPadding = rememberInsetsPaddingValues ( insets = LocalWindowInsets . current . statusBars , applyStart = true , applyTop = true , applyEnd = true , ) ) { // content } \u8fd9\u4e2a\u5144\u5f1f\u7ec4\u4ef6\u5e93\u8fd8\u63d0\u4f9b\u4e86 Scaffold \u7684\u4fee\u6539\u7248\uff0c\u901a\u8fc7\u5728 content \u4e2d\u7ed8\u5236\u9876\u90e8\u548c\u5e95\u90e8\u680f\uff0c\u66f4\u597d\u5730\u652f\u6301\u8fb9\u9760\u8fb9\u7684\u5e03\u5c40\u3002 Scaffold ( topBar = { // We use TopAppBar from accompanist-insets-ui which allows us to provide // content padding matching the system bars insets. TopAppBar ( title = { Text ( stringResource ( R . string . insets_title_list )) }, backgroundColor = MaterialTheme . colors . surface . copy ( alpha = 0.9f ), contentPadding = rememberInsetsPaddingValues ( LocalWindowInsets . current . statusBars , applyBottom = false , ), ) }, bottomBar = { // We add a spacer as a bottom bar, which is the same height as // the navigation bar Spacer ( Modifier . navigationBarsHeight (). fillMaxWidth ()) }, ) { contentPadding -> // We apply the contentPadding passed to us from the Scaffold Box ( Modifier . padding ( contentPadding )) { // content } } \u6709\u5173\u5e93\u4e2d\u63d0\u4f9b\u7684\u5176\u4ed6\u5e03\u5c40\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u89c1 API \u6587\u6863 \u3002 \ud83d\udea7\u8bd5\u9a8c\u6027\u529f\u80fd \u63a5\u4e0b\u6765\u7684\u529f\u80fd\u8fd8\u5728\u8bd5\u9a8c\u4e2d\uff0c\u9700\u8981\u5f00\u53d1\u8005\u9009\u62e9\u6027\u4f7f\u7528\u3002 Insets\u52a8\u753b\u652f\u6301 \u529f\u80fd\u4ecb\u7ecd \u672c\u7ec4\u4ef6\u5e93\u5f53\u524d\u8bd5\u9a8c\u6027\u652f\u6301 WindowInsetsAnimations \uff0c \u8fd9\u5c06\u5141\u8bb8\u4f60\u7684UI\u5185\u5bb9\u53ef\u4ee5\u6839\u636eInsets\u52a8\u753b\u53d1\u751f\u6539\u53d8\uff0c\u4f8b\u5982\u5f53\u8f6f\u952e\u76d8\u5f39\u51fa\u6216\u5173\u95ed\u65f6\uff0c imePadding() \u6216 navigationBarsWithImePadding() \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\u5c31\u53ef\u4ee5\u88ab\u4f7f\u7528\u4e86\u3002 \u5728 API >= 21 \u7684\u8bbe\u5907\u4e0a\uff0c\u65e0\u8bba WindowInsetsAnimationCompat \u662f\u5426\u5de5\u4f5c\uff0c\u5728\u4efb\u610f\u65f6\u523b\u90fd\u8fdb\u884c\u4f7f\u7528\u3002 \u4e3a\u4e86\u80fd\u591f\u4f7f\u7528Insets\u52a8\u753b\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u4f7f\u7528 ProvideWindowInsets \u7684\u91cd\u8f7d\u65b9\u6cd5\uff0c\u5e76\u4e14\u8bbe\u7f6e windowInsetsAnimationsEnabled = true \u4f7f\u7528\u65b9\u6cd5 ProvideWindowInsets ( windowInsetsAnimationsEnabled = true ) { // content } \u4f60\u80fd\u591f\u50cf\u8fd9\u6837\u4f7f\u7528 navigationBarsWithImePadding() OutlinedTextField( // other params, modifier = Modifier.navigationBarsWithImePadding() ) \u53ef\u4ee5\u67e5\u9605\u4f8b\u5b50 ImeAnimationSample \u8f6f\u952e\u76d8\u52a8\u753b \u529f\u80fd\u4ecb\u7ecd \u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528 Insets \u52a8\u753b\u652f\u6301\u8f6f\u952e\u76d8\u52a8\u753b\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728 AndroidManifest \u6e05\u5355\u4e2d\u914d\u7f6e\u5f53\u524d Activity \u7684 windowSoftInputMode \u5c5e\u6027\u4e3a adjustResize \u3002 < activity android : name = \".MyActivity\" android : windowSoftInputMode = \"adjustResize\" > </ activity > windowSoftInputMode \u9ed8\u8ba4\u503c\u5e94\u8be5\u4e5f\u6709\u6548\uff0c\u4f46\u662fCompose\u5f53\u524d\u6ca1\u6709\u8bbe\u7f6e\u5fc5\u8981\u7684\u6807\u8bc6 (\u8be6\u60c5\u770b \u8fd9\u91cc ) \u672c\u7ec4\u4ef6\u5e93\u5df2\u7ecf\u652f\u6301\u901a\u8fc7\u624b\u52bf\u64cd\u4f5c\u6765\u63a7\u5236\u8f6f\u952e\u76d8\uff0c\u8fd9\u5c06\u5141\u8bb8\u4f60\u7684\u53ef\u6eda\u52a8\u7684\u7ec4\u4ef6\u5c06\u8f6f\u952e\u76d8\u62c9\u8fdb\u6216\u62c9\u51fa\u5c4f\u5e55\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u5d4c\u5957\u624b\u52bf\u6ed1\u52a8\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7684 NestedScrollConnection \u63a5\u53e3\u8fdb\u884c\u5b9e\u73b0\uff0c\u672c\u7ec4\u4ef6\u63d0\u4f9b\u4e86 rememberImeNestedScrollConnection() \u65b9\u6cd5\u76f4\u63a5\u83b7\u53d6\u8fd9\u79cd\u8f6f\u952e\u76d8\u52a8\u753b\u573a\u666f\u7684\u5d4c\u5957\u624b\u52bf\u6ed1\u52a8\u5b9e\u73b0\u7c7b\u3002 \u26a0\ufe0f \u6b64\u529f\u80fd\u4ec5\u5728 API >= 30 \u7684\u8bbe\u5907\u4e0a\u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u4f7f\u7528\u65b9\u6cd5 // Here we're using ScrollableColumn, but it also works with LazyColumn, etc. ScrollableColumn ( // We use the nestedScroll modifier, passing in the // the connection from rememberImeNestedScrollConnection() modifier = Modifier . nestedScroll ( connection = rememberImeNestedScrollConnection () ) ) { // list content } \u53ef\u4ee5\u67e5\u9605\u4f8b\u5b50 ImeAnimationSample \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-insets:<version>\" // If using insets-ui implementation \"com.google.accompanist:accompanist-insets-ui:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002 \u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898 \u5982\u679c\u4f60\u53d1\u73b0\u8fd0\u884c\u65f6\u51fa\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u9519\u8bef\u6e05\u5355\u53ef\u4ee5\u67e5\u9605\u3002 \u786e\u4fdd\u4f60\u5728Activity\u4e2d\u6267\u884c\u4e86 WindowCompat.setDecorFitsSystemWindows(window, false) \u3002\u9664\u975e\u4f60\u8fd9\u4e48\u505a\u4e86\uff0c\u5426\u5219 DecorView \u5c06\u6d88\u8d39\u8fd9\u4e9binsets\uff0c\u4ed6\u4eec\u7684\u4fe1\u606f\u4e0d\u56de\u88ab\u5206\u914d\u5230 content \u4e2d\u3002 \u5982\u679c\u6709\u4ec0\u4e48\u8ddf\u8f6f\u952e\u76d8\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u786e\u4fdd AndroidManifest \u6e05\u5355\u4e2d\u5f53\u524d Activity \u7684 windowSoftInputMode \u5c5e\u6027\u88ab\u8bbe\u7f6e\u4e3a adjustResize \u3002\u5426\u5219 IME \u7684\u53ef\u89c1\u6027\u53d8\u5316\u5c06\u4e0d\u4f1a\u4f5c\u4e3aInsets \u53d8\u5316\u800c\u53d1\u9001\u3002 \u76f8\u4f3c\u7684\uff0c\u5982\u679c\u4f60\u8bbe\u7f6e android:windowFullscreen \u5c5e\u6027\u4e3a true (\u6216\u4f7f\u7528\u4e86 .Fullscreen \u4e3b\u9898) \u3002\u5f53\u53d1\u73b0 adjustResize \u6ca1\u6709\u6b63\u5e38\u5de5\u4f5c\uff0c\u8bf7 \u67e5\u9605\u6587\u6863 \u4ee5\u4e86\u89e3\u66ff\u4ee3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u5728\u89c6\u56fe\u7cfb\u7edf\u7684\u591a\u4e2a\u5c42\u7ea7\u4e2d(\u540c\u65f6\u5728Activity\u4e0e\u5176\u4e2d\u7684Fragment\u4e2d) \u4f7f\u7528\u4e86 ProvideWindowInsets (\u6216 ViewWindowInsetObserver) \uff0c\u4f60\u9700\u8981\u5173\u95ed Insets \u7684\u6d88\u8d39\u3002\u5f53\u6267\u884c ProvideWindowInsets (\u6216 ViewWindowInsetObserver) \u65f6\u4f1a\u5b8c\u5168\u6d88\u8d39\u6240\u6709\u7ecf\u8fc7\u7684 Insets\u3002\u5728Activity\u4e0e\u5176\u4e2d\u7684Fragment\u540c\u65f6\u4f7f\u7528 ProvideWindowInsets (\u6216 ViewWindowInsetObserver) \u65f6\u610f\u5473\u7740Activity\u5c06\u83b7\u53d6\u5230 Insets\uff0c\u4f46\u662fFragment\u5c06\u4e0d\u56de\uff0c\u4e3a\u4e86\u7981\u7528\u6d88\u8d39\u9700\u8981\u8bbe\u7f6e ProvideWindowInsets \u65b9\u6cd5\u53c2\u6570 consumeWindowInsets = false \u6216\u8005\u4f7f\u7528 ViewWindowInsetObserver.start() \u3002","title":"Insets"},{"location":"third-party-component/accompanist/insets/#insets-for-jetpack-compose","text":"Jetpack Compose \u7684 Insets \u91c7\u7528\u4e86 View \u7cfb\u7edf\u4e2d Insetter \u7ec4\u4ef6\u5e93\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u4f7f\u5176\u53ef\u4ee5\u5728 composables \u4e2d\u88ab\u4f7f\u7528\u3002","title":"Insets for Jetpack Compose"},{"location":"third-party-component/accompanist/insets/#_1","text":"\u4e3a\u4e86\u80fd\u5728\u4f60\u7684 composables \u4e2d\u4f7f\u7528 Insets , \u4f60\u9700\u8981\u4f7f\u7528 ProvideWindowInsets \u65b9\u6cd5\u5e76\u5c06\u4f60\u7684\u89c6\u56fe\u5185\u5bb9\u58f0\u660e\u5728\u5c3e\u90e8lambda\u4e2d\u3002\u8fd9\u6b65\u64cd\u4f5c\u901a\u5e38\u8981\u5728\u4f60\u7684composable\u5c42\u7ea7\u7684\u9876\u90e8\u9644\u8fd1\u8fdb\u884c\u3002 setContent { MaterialTheme { ProvideWindowInsets { // your content } } } \u26a0\ufe0f \u4e3a\u4e86\u4f7f\u4f60\u7684 view \u5c42\u7ea7\u80fd\u591f\u83b7\u53d6\u5230 Insets\uff0c \u4f60\u9700\u8981\u786e\u4fdd\u5728\u4f60Activity\u4e2d\u4f7f\u7528 WindowCompat.setDecorFitsSystemWindows(window, false) \u3002\u5982\u679c\u4f60\u8fd8\u60f3\u4e3a\u4f60\u7684\u7cfb\u7edf\u72b6\u6001\u680f\u8bbe\u7f6e\u989c\u8272\uff0c\u53ef\u4ee5\u4f7f\u7528Accompanist\u7ec4\u4ef6\u5e93\u63d0\u4f9b\u7684 \u7cfb\u7edfUI\u63a7\u5236\u5668 \u6765\u5b8c\u6210\u3002 \u901a\u8fc7\u4f7f\u7528 ProvideWindowInsets \u5c06\u5141\u8bb8\u672c\u7ec4\u4ef6\u5728 content \u4e2d\u8bbe\u7f6e\u4e00\u4e2a OnApplyWindowInsetsListener \uff0c\u8fd9\u4e2aListener\u5c06\u4f1a\u88ab\u7528\u6765\u66f4\u65b0 LocalWindowInsets \u8fd9\u4e2a CompositionLocal\u3002 LocalWindowInsets \u6301\u6709\u4e86\u4e00\u4e2a WindowInsets \u5b9e\u4f8b\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5404\u79cd WindowInsets types \u6570\u503c\u4fe1\u606f\uff0c\u4f8b\u5982\u72b6\u6001\u680f\u3001\u5bfc\u822a\u680f\u3001\u8f93\u5165\u6cd5\u7b49\u3002\u4f60\u901a\u5e38\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u8fd9\u4e9b\u6570\u503c\u4fe1\u606f\u3002 Composable fun ImeAvoidingBox () { val insets = LocalWindowInsets . current // \u5207\u8bb0\uff0c\u8fd9\u4e9b\u4fe1\u606f\u90fd\u662fpx\u5355\u4f4d\uff0c\u4f7f\u7528\u65f6\u8981\u6839\u636e\u9700\u6c42\u8f6c\u6362\u5355\u4f4d val imeBottom = with ( LocalDensity . current ) { insets . ime . bottom . toDp () } Box ( Modifier . padding ( bottom = imeBottom )) } \u4f46\u662f\u672c\u7ec4\u4ef6\u540c\u6837\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6613\u4e8e\u4f7f\u7528\u7684Modifier\u3002","title":"\u7528\u6cd5"},{"location":"third-party-component/accompanist/insets/#modifiers","text":"\u672c\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e24\u79cd modifier \u7c7b\u578b\u7528\u4e8e\u8f7b\u677e\u9002\u914d\u7279\u5b9a insets \u7684 padding \u4e0e size.","title":"Modifiers"},{"location":"third-party-component/accompanist/insets/#padding-modifier","text":"\u4f7f\u7528 Padding Modifier \u5c06\u5141\u8bb8\u4e3a\u4f60\u7684 composable \u65bd\u52a0 padding\u6765\u9002\u914d\u4e00\u4e9b\u7279\u5b9a\u7684 insets\uff0c\u5f53\u524d\u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u6269\u5c55\u65b9\u6cd5\u3002 Modifier.statusBarsPadding() Modifier.navigationBarsPadding() Modifier.systemBarsPadding() Modifier.imePadding() Modifier.navigationBarsWithImePadding() \u8fd9\u4e9b\u65b9\u6cd5\u901a\u5e38\u4f1a\u88ab\u7528\u6765\u5c06 composable \u79fb\u51fa\u7cfb\u7edf\u72b6\u6001\u680f\u6216\u5bfc\u822a\u680f\u7b49\uff0c FloatingActionButton \u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\uff0c\u901a\u5e38\u6211\u4eec\u90fd\u5e0c\u671b\u5c06\u8fd9\u4e2a\u60ac\u6d6e\u6309\u94ae\u79fb\u52a8\u81f3\u7cfb\u7edf\u5bfc\u822a\u680f\u4e0a\u65b9, \u4e0d\u5e0c\u671b\u88ab\u7cfb\u7edf\u5bfc\u822a\u680f\u906e\u76d6\u3002 FloatingActionButton ( onClick = { /* TODO */ }, modifier = Modifier . align ( Alignment . BottomEnd ) . padding ( 16. dp ) // normal 16dp of padding for FABs . navigationBarsPadding () // Move it out from under the nav bar ) { Icon ( imageVector = Icons . Default . Add , contentDescription = null ) }","title":"Padding Modifier"},{"location":"third-party-component/accompanist/insets/#size-modifier","text":"\u901a\u8fc7 Size Modifier \u5c06\u5141\u8bb8\u4e3a\u4f60\u7684 composable \u65bd\u52a0 size \u6765\u9002\u914d\u4e00\u4e9b\u7279\u5b9a\u7684 insets\uff0c\u5f53\u524d\u63d0\u4f9b\u4e86\u5982\u4e0b\u51e0\u79cd\u6269\u5c55\u65b9\u6cd5\u3002 Modifier.statusBarsHeight() Modifier.navigationBarsHeight() Modifier.navigationBarsWidth() \u6211\u95e8\u901a\u5e38\u53ef\u4ee5\u8ba9 composable \u4e3a\u7cfb\u7edf\u680f\u63d0\u4f9b\u80cc\u666f\uff0c\u7c7b\u4f3c\u5982\u4e0b\u3002 Spacer ( Modifier . background ( Color . Black . copy ( alpha = 0.7f )) . statusBarsHeight () // Match the height of the status bar . fillMaxWidth () )","title":"Size Modifier"},{"location":"third-party-component/accompanist/insets/#paddingvalues","text":"Compose \u63d0\u4f9b\u4e86 PaddingValues \u7684\u7406\u5ff5\uff0c\u8be5\u6570\u636e\u7c7b\u5305\u542b\u7740\u6240\u6709\u8981\u88ab\u65bd\u52a0\u7684 padding \u4fe1\u606f(\u7c7b\u4f3c\u4e8e\u4e00\u4e2a Rect)\u3002\u901a\u5e38\u4f1a\u88ab\u7528\u4e8e\u4e00\u4e9b\u5bb9\u5668\u7c7b\u578b composables\uff0c\u4f8b\u5982\u4e3a LazyColumn \u8bbe\u7f6e\u5185\u5bb9 padding\u3002 \u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u67d0\u4e2a\u5177\u4f53 Inset \u4fe1\u606f\u4f5c\u4e3a\u5185\u5bb9 padding\uff0c\u6240\u4ee5\u672c\u7ec4\u4ef6\u63d0\u4f9b\u4e86 rememberInsetsPaddingValues() \u6269\u5c55\u65b9\u6cd5\u7528\u4e8e\u5c06 Inset \u8f6c\u5316\u4e3a PaddingValues\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u83b7\u53d6\u4e86\u7cfb\u7edf\u680fInset\u4fe1\u606f\u3002 LazyColumn ( contentPadding = rememberInsetsPaddingValues ( insets = LocalWindowInsets . current . systemBars , applyTop = true , applyBottom = true , ) ) { // content } \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u67e5\u9605\u4f8b\u5b50 EdgeToEdgeLazyColumn","title":"PaddingValues"},{"location":"third-party-component/accompanist/insets/#inset-layouts-insets-ui","text":"\u4e0d\u5e78\u7684\u662f\uff0c\u76ee\u524d\u5927\u591a\u6570 Compose \u6240\u63d0\u4f9b\u7684 Material \u98ce\u683c\u7684 Layout \u8fd8\u4e0d\u652f\u6301\u4f7f\u7528\u5185\u5bb9 padding\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u80fd\u4e0d\u4f1a\u4ea7\u751f\u4e0e\u4f60\u7684\u9884\u671f\u76f8\u540c\u7684\u7ed3\u679c\u3002 // \ud83d\ude25 This likely doesn't do what you want TopAppBar( // content modifier = Modifier.statusBarsPadding() ) \u4e3a\u4e86\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 insets-ui \u8fd9\u4e2a\u5144\u5f1f\u7ec4\u4ef6\u5e93\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u5e38\u7528\u5e03\u5c40\uff0c\u5e76\u589e\u52a0\u4e86\u4e00\u4e2a\u540d\u4e3a contentPadding \u7684\u53c2\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u662f\u4e3a TopAppBar \u63d0\u4f9b\u72b6\u6001\u680f\u7684Inset\u4fe1\u606f\u4f5c\u4e3a\u5185\u5bb9\u7684 padding\u3002 import com.google.accompanist.insets.ui.TopAppBar TopAppBar ( contentPadding = rememberInsetsPaddingValues ( insets = LocalWindowInsets . current . statusBars , applyStart = true , applyTop = true , applyEnd = true , ) ) { // content } \u8fd9\u4e2a\u5144\u5f1f\u7ec4\u4ef6\u5e93\u8fd8\u63d0\u4f9b\u4e86 Scaffold \u7684\u4fee\u6539\u7248\uff0c\u901a\u8fc7\u5728 content \u4e2d\u7ed8\u5236\u9876\u90e8\u548c\u5e95\u90e8\u680f\uff0c\u66f4\u597d\u5730\u652f\u6301\u8fb9\u9760\u8fb9\u7684\u5e03\u5c40\u3002 Scaffold ( topBar = { // We use TopAppBar from accompanist-insets-ui which allows us to provide // content padding matching the system bars insets. TopAppBar ( title = { Text ( stringResource ( R . string . insets_title_list )) }, backgroundColor = MaterialTheme . colors . surface . copy ( alpha = 0.9f ), contentPadding = rememberInsetsPaddingValues ( LocalWindowInsets . current . statusBars , applyBottom = false , ), ) }, bottomBar = { // We add a spacer as a bottom bar, which is the same height as // the navigation bar Spacer ( Modifier . navigationBarsHeight (). fillMaxWidth ()) }, ) { contentPadding -> // We apply the contentPadding passed to us from the Scaffold Box ( Modifier . padding ( contentPadding )) { // content } } \u6709\u5173\u5e93\u4e2d\u63d0\u4f9b\u7684\u5176\u4ed6\u5e03\u5c40\u7684\u5217\u8868\uff0c\u8bf7\u53c2\u89c1 API \u6587\u6863 \u3002","title":"\u53ef\u611f\u77e5 Inset \u7684 Layouts (insets-ui)"},{"location":"third-party-component/accompanist/insets/#_2","text":"\u63a5\u4e0b\u6765\u7684\u529f\u80fd\u8fd8\u5728\u8bd5\u9a8c\u4e2d\uff0c\u9700\u8981\u5f00\u53d1\u8005\u9009\u62e9\u6027\u4f7f\u7528\u3002","title":"\ud83d\udea7\u8bd5\u9a8c\u6027\u529f\u80fd"},{"location":"third-party-component/accompanist/insets/#insets","text":"","title":"Insets\u52a8\u753b\u652f\u6301"},{"location":"third-party-component/accompanist/insets/#_3","text":"\u672c\u7ec4\u4ef6\u5e93\u5f53\u524d\u8bd5\u9a8c\u6027\u652f\u6301 WindowInsetsAnimations \uff0c \u8fd9\u5c06\u5141\u8bb8\u4f60\u7684UI\u5185\u5bb9\u53ef\u4ee5\u6839\u636eInsets\u52a8\u753b\u53d1\u751f\u6539\u53d8\uff0c\u4f8b\u5982\u5f53\u8f6f\u952e\u76d8\u5f39\u51fa\u6216\u5173\u95ed\u65f6\uff0c imePadding() \u6216 navigationBarsWithImePadding() \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\u5c31\u53ef\u4ee5\u88ab\u4f7f\u7528\u4e86\u3002 \u5728 API >= 21 \u7684\u8bbe\u5907\u4e0a\uff0c\u65e0\u8bba WindowInsetsAnimationCompat \u662f\u5426\u5de5\u4f5c\uff0c\u5728\u4efb\u610f\u65f6\u523b\u90fd\u8fdb\u884c\u4f7f\u7528\u3002 \u4e3a\u4e86\u80fd\u591f\u4f7f\u7528Insets\u52a8\u753b\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u4f7f\u7528 ProvideWindowInsets \u7684\u91cd\u8f7d\u65b9\u6cd5\uff0c\u5e76\u4e14\u8bbe\u7f6e windowInsetsAnimationsEnabled = true","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"third-party-component/accompanist/insets/#_4","text":"ProvideWindowInsets ( windowInsetsAnimationsEnabled = true ) { // content } \u4f60\u80fd\u591f\u50cf\u8fd9\u6837\u4f7f\u7528 navigationBarsWithImePadding() OutlinedTextField( // other params, modifier = Modifier.navigationBarsWithImePadding() ) \u53ef\u4ee5\u67e5\u9605\u4f8b\u5b50 ImeAnimationSample","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"third-party-component/accompanist/insets/#_5","text":"","title":"\u8f6f\u952e\u76d8\u52a8\u753b"},{"location":"third-party-component/accompanist/insets/#_6","text":"\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528 Insets \u52a8\u753b\u652f\u6301\u8f6f\u952e\u76d8\u52a8\u753b\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728 AndroidManifest \u6e05\u5355\u4e2d\u914d\u7f6e\u5f53\u524d Activity \u7684 windowSoftInputMode \u5c5e\u6027\u4e3a adjustResize \u3002 < activity android : name = \".MyActivity\" android : windowSoftInputMode = \"adjustResize\" > </ activity > windowSoftInputMode \u9ed8\u8ba4\u503c\u5e94\u8be5\u4e5f\u6709\u6548\uff0c\u4f46\u662fCompose\u5f53\u524d\u6ca1\u6709\u8bbe\u7f6e\u5fc5\u8981\u7684\u6807\u8bc6 (\u8be6\u60c5\u770b \u8fd9\u91cc ) \u672c\u7ec4\u4ef6\u5e93\u5df2\u7ecf\u652f\u6301\u901a\u8fc7\u624b\u52bf\u64cd\u4f5c\u6765\u63a7\u5236\u8f6f\u952e\u76d8\uff0c\u8fd9\u5c06\u5141\u8bb8\u4f60\u7684\u53ef\u6eda\u52a8\u7684\u7ec4\u4ef6\u5c06\u8f6f\u952e\u76d8\u62c9\u8fdb\u6216\u62c9\u51fa\u5c4f\u5e55\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u5d4c\u5957\u624b\u52bf\u6ed1\u52a8\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7684 NestedScrollConnection \u63a5\u53e3\u8fdb\u884c\u5b9e\u73b0\uff0c\u672c\u7ec4\u4ef6\u63d0\u4f9b\u4e86 rememberImeNestedScrollConnection() \u65b9\u6cd5\u76f4\u63a5\u83b7\u53d6\u8fd9\u79cd\u8f6f\u952e\u76d8\u52a8\u753b\u573a\u666f\u7684\u5d4c\u5957\u624b\u52bf\u6ed1\u52a8\u5b9e\u73b0\u7c7b\u3002 \u26a0\ufe0f \u6b64\u529f\u80fd\u4ec5\u5728 API >= 30 \u7684\u8bbe\u5907\u4e0a\u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"third-party-component/accompanist/insets/#_7","text":"// Here we're using ScrollableColumn, but it also works with LazyColumn, etc. ScrollableColumn ( // We use the nestedScroll modifier, passing in the // the connection from rememberImeNestedScrollConnection() modifier = Modifier . nestedScroll ( connection = rememberImeNestedScrollConnection () ) ) { // list content } \u53ef\u4ee5\u67e5\u9605\u4f8b\u5b50 ImeAnimationSample","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"third-party-component/accompanist/insets/#_8","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-insets:<version>\" // If using insets-ui implementation \"com.google.accompanist:accompanist-insets-ui:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/accompanist/insets/#_9","text":"\u5982\u679c\u4f60\u53d1\u73b0\u8fd0\u884c\u65f6\u51fa\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u9519\u8bef\u6e05\u5355\u53ef\u4ee5\u67e5\u9605\u3002 \u786e\u4fdd\u4f60\u5728Activity\u4e2d\u6267\u884c\u4e86 WindowCompat.setDecorFitsSystemWindows(window, false) \u3002\u9664\u975e\u4f60\u8fd9\u4e48\u505a\u4e86\uff0c\u5426\u5219 DecorView \u5c06\u6d88\u8d39\u8fd9\u4e9binsets\uff0c\u4ed6\u4eec\u7684\u4fe1\u606f\u4e0d\u56de\u88ab\u5206\u914d\u5230 content \u4e2d\u3002 \u5982\u679c\u6709\u4ec0\u4e48\u8ddf\u8f6f\u952e\u76d8\u76f8\u5173\u7684\u64cd\u4f5c\uff0c\u786e\u4fdd AndroidManifest \u6e05\u5355\u4e2d\u5f53\u524d Activity \u7684 windowSoftInputMode \u5c5e\u6027\u88ab\u8bbe\u7f6e\u4e3a adjustResize \u3002\u5426\u5219 IME \u7684\u53ef\u89c1\u6027\u53d8\u5316\u5c06\u4e0d\u4f1a\u4f5c\u4e3aInsets \u53d8\u5316\u800c\u53d1\u9001\u3002 \u76f8\u4f3c\u7684\uff0c\u5982\u679c\u4f60\u8bbe\u7f6e android:windowFullscreen \u5c5e\u6027\u4e3a true (\u6216\u4f7f\u7528\u4e86 .Fullscreen \u4e3b\u9898) \u3002\u5f53\u53d1\u73b0 adjustResize \u6ca1\u6709\u6b63\u5e38\u5de5\u4f5c\uff0c\u8bf7 \u67e5\u9605\u6587\u6863 \u4ee5\u4e86\u89e3\u66ff\u4ee3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u5728\u89c6\u56fe\u7cfb\u7edf\u7684\u591a\u4e2a\u5c42\u7ea7\u4e2d(\u540c\u65f6\u5728Activity\u4e0e\u5176\u4e2d\u7684Fragment\u4e2d) \u4f7f\u7528\u4e86 ProvideWindowInsets (\u6216 ViewWindowInsetObserver) \uff0c\u4f60\u9700\u8981\u5173\u95ed Insets \u7684\u6d88\u8d39\u3002\u5f53\u6267\u884c ProvideWindowInsets (\u6216 ViewWindowInsetObserver) \u65f6\u4f1a\u5b8c\u5168\u6d88\u8d39\u6240\u6709\u7ecf\u8fc7\u7684 Insets\u3002\u5728Activity\u4e0e\u5176\u4e2d\u7684Fragment\u540c\u65f6\u4f7f\u7528 ProvideWindowInsets (\u6216 ViewWindowInsetObserver) \u65f6\u610f\u5473\u7740Activity\u5c06\u83b7\u53d6\u5230 Insets\uff0c\u4f46\u662fFragment\u5c06\u4e0d\u56de\uff0c\u4e3a\u4e86\u7981\u7528\u6d88\u8d39\u9700\u8981\u8bbe\u7f6e ProvideWindowInsets \u65b9\u6cd5\u53c2\u6570 consumeWindowInsets = false \u6216\u8005\u4f7f\u7528 ViewWindowInsetObserver.start() \u3002","title":"\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898"},{"location":"third-party-component/accompanist/overview/","text":"Accompanist \u662f\u4ec0\u4e48\uff1f Accompanist \u662f\u4e00\u7ec4\u65e8\u5728\u6269\u5145 Jetpack Compose \u529f\u80fd\u7684\u7b2c\u4e09\u65b9\u5e93\u96c6\u5408\uff0c\u8fd9\u4e2a\u5e93\u4e2d\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u662f\u5f00\u53d1\u8005\u666e\u904d\u9700\u8981\u7684\u3002\u76ee\u524d Accompanist \u4e2d\u5305\u542b\u7684\u5b50\u5e93\u6709\uff1a \ud83d\uddbc\ufe0f \u56fe\u7247\u52a0\u8f7d \u4e00\u4e9b\u80fd\u591f\u652f\u6301\u5728 Jetpack Compose \u4e2d\u4f7f\u7528\u76ee\u524d\u6d41\u884c\u56fe\u7247\u52a0\u8f7d\u5e93\u7684\u7b2c\u4e09\u65b9\u652f\u6301\u5e93\uff1a\u4f8b\u5982 Coil \u4e0e Glide \ud83d\udcd0 \u63d2\u56fe \u4e00\u4e2a\u4e3a Jetpack Compose \u5e26\u6765 WindowInsets \u652f\u6301\u7684\u5e93\u3002 \ud83c\udf6b \u7cfb\u7edfUI\u63a7\u5236\u5668 \u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u7cfb\u7edfUI\u63a7\u5236\u5e93\uff0c\u7528\u4e8e\u66f4\u65b0 Jetpack Compose \u7684\u7cfb\u7edfUI(\u72b6\u6001\u548c\u5bfc\u822a\u680f)\u7684\u989c\u8272\u3002 \ud83c\udfa8 AppCompat \u4e3b\u9898\u9002\u914d\u5668 \u4e00\u4e2a\u80fd\u591f\u5728 Jetpack Compose \u4e2d\u590d\u7528\u4f20\u7edf AppCompat XML \u4e3b\u9898\u7684\u5e93\u3002 \ud83d\udcd6 \u5206\u9875 \u4e00\u4e2a\u4e3a Jetpack Compose \u63d0\u4f9b\u5206\u9875\u5e03\u5c40\u7684\u5e93\uff0c\u7c7b\u4f3c\u4e8e Android \u7684 ViewPager\u3002 \ud83c\udf0a \u6d41\u5f0f\u5e03\u5c40 \u4e00\u4e2a\u4e3a Jetpack Compose \u6dfb\u52a0\u7c7b\u4f3c \"flexbox \"\u5e03\u5c40\u7684\u5e93\u3002 \u2b06\ufe0f \u6ed1\u52a8\u5237\u65b0 \u4e00\u4e2a\u4e3a Jetpack Compose \u63d0\u4f9b\u4e86\u6ed1\u52a8\u5237\u65b0Layout\u7684\u5e93\uff0c\u7c7b\u4f3c\u4e8e Android \u7684 SwipeRefreshLayout\u3002 \u5173\u4e8e\u66f4\u65b0 Jetpack Compose \u662f\u4e00\u4e2a\u5feb\u901f\u53d1\u5c55\u7684\u9879\u76ee\uff0c\u6211\u4eec\u7684\u76ee\u6807\u8ba9\u8fd9\u4e9b\u5e93\u7684\u7248\u672c\u66f4\u65b0\u5c3d\u5feb\u4e0e Jetpack Compose \u6700\u65b0\u7248\u672c\u4fdd\u6301\u540c\u6b65\u3002\u6bcf\u4e2a\u5b50\u5e93\u7684\u7248\u672c\u90fd\u63cf\u8ff0\u4e86\u5176\u6240\u4f9d\u8d56\u7684 Jetpack Compose \u7248\u672c\u3002 \u5173\u4e8e\u672a\u6765 \u8fd9\u4e9b\u5b50\u5e93\u6240\u63d0\u4f9b\u7684\u4efb\u4f55\u529f\u80fd\u5728\u672a\u6765\u53ef\u80fd\u90fd\u4f1a\u8fc7\u65f6\uff0c\u5230\u90a3\u65f6\u4ed6\u4eec\u53ef\u80fd\u5c06\u88ab\u5e9f\u5f03\u3002\u5c4a\u65f6\uff0c\u6211\u4eec\u5c06\u4f1a\u5c3d\u53ef\u80fd\u5730\u63d0\u4f9b\u4e00\u4e2a\u8fc1\u79fb\u8def\u7ebf\u4ee5\u53d6\u4ee3\u4efb\u4f55\u529f\u80fd\u3002 \u5173\u4e8e\u5feb\u7167 \u76ee\u524dAccompanist\u7684\u7248\u672c\u5feb\u7167\u662f\u53ef\u7528\u7684\uff0c\u5b83\u5c06\u8ddf\u8e2a\u6700\u65b0\u7684\u63d0\u4ea4\u3002 \u70b9\u51fb\u67e5\u770b\u66f4\u591a\u4fe1\u606f \u3002 \u5173\u4e8e\u540d\u5b57 \u7531\u4e8e\u8fd9\u4e2a\u5e93\u662f\u56f4\u7ed5\u7740 Jetpack Compose \u6dfb\u52a0\u7684\u4e00\u4e9b\u5b9e\u7528\u5de5\u5177\u3002Compose\u5728\u82f1\u8bed\u4e2d\u6709\u53e6\u4e00\u542b\u4e49\u4e3a\u4f5c\u66f2\uff0c\u4f5c\u66f2\u662f\u7531\u4f5c\u66f2\u5bb6\u5b8c\u6210\u7684\uff0c\u800c\u8fd9\u4e2a\u5e93\u662f\u7528\u6765\u652f\u6301\u4f5c\u66f2\u5bb6\u5b8c\u6210\u4f5c\u66f2\u7684\uff0c\u6240\u4ee5\u4f34\u594f\u8005\u662f\u4e00\u4e2a\u597d\u540d\u5b57\u3002 \u5173\u4e8e\u8d21\u732e \u6211\u4eec\u5c06\u5f88\u4e50\u610f\u5ba1\u67e5\u4efb\u4f55PR\u8bf7\u6c42\u3002\u4f46\u8bf7\u786e\u4fdd\u9996\u5148\u9605\u8bfb \u8d21\u732e \u9875\u9762\u3002 License Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"\u6982\u8ff0"},{"location":"third-party-component/accompanist/overview/#accompanist","text":"Accompanist \u662f\u4e00\u7ec4\u65e8\u5728\u6269\u5145 Jetpack Compose \u529f\u80fd\u7684\u7b2c\u4e09\u65b9\u5e93\u96c6\u5408\uff0c\u8fd9\u4e2a\u5e93\u4e2d\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u662f\u5f00\u53d1\u8005\u666e\u904d\u9700\u8981\u7684\u3002\u76ee\u524d Accompanist \u4e2d\u5305\u542b\u7684\u5b50\u5e93\u6709\uff1a","title":"Accompanist \u662f\u4ec0\u4e48\uff1f"},{"location":"third-party-component/accompanist/overview/#_1","text":"\u4e00\u4e9b\u80fd\u591f\u652f\u6301\u5728 Jetpack Compose \u4e2d\u4f7f\u7528\u76ee\u524d\u6d41\u884c\u56fe\u7247\u52a0\u8f7d\u5e93\u7684\u7b2c\u4e09\u65b9\u652f\u6301\u5e93\uff1a\u4f8b\u5982 Coil \u4e0e Glide","title":"\ud83d\uddbc\ufe0f  \u56fe\u7247\u52a0\u8f7d"},{"location":"third-party-component/accompanist/overview/#_2","text":"\u4e00\u4e2a\u4e3a Jetpack Compose \u5e26\u6765 WindowInsets \u652f\u6301\u7684\u5e93\u3002","title":"\ud83d\udcd0  \u63d2\u56fe"},{"location":"third-party-component/accompanist/overview/#ui","text":"\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u7cfb\u7edfUI\u63a7\u5236\u5e93\uff0c\u7528\u4e8e\u66f4\u65b0 Jetpack Compose \u7684\u7cfb\u7edfUI(\u72b6\u6001\u548c\u5bfc\u822a\u680f)\u7684\u989c\u8272\u3002","title":"\ud83c\udf6b  \u7cfb\u7edfUI\u63a7\u5236\u5668"},{"location":"third-party-component/accompanist/overview/#appcompat","text":"\u4e00\u4e2a\u80fd\u591f\u5728 Jetpack Compose \u4e2d\u590d\u7528\u4f20\u7edf AppCompat XML \u4e3b\u9898\u7684\u5e93\u3002","title":"\ud83c\udfa8  AppCompat \u4e3b\u9898\u9002\u914d\u5668"},{"location":"third-party-component/accompanist/overview/#_3","text":"\u4e00\u4e2a\u4e3a Jetpack Compose \u63d0\u4f9b\u5206\u9875\u5e03\u5c40\u7684\u5e93\uff0c\u7c7b\u4f3c\u4e8e Android \u7684 ViewPager\u3002","title":"\ud83d\udcd6  \u5206\u9875"},{"location":"third-party-component/accompanist/overview/#_4","text":"\u4e00\u4e2a\u4e3a Jetpack Compose \u6dfb\u52a0\u7c7b\u4f3c \"flexbox \"\u5e03\u5c40\u7684\u5e93\u3002","title":"\ud83c\udf0a  \u6d41\u5f0f\u5e03\u5c40"},{"location":"third-party-component/accompanist/overview/#_5","text":"\u4e00\u4e2a\u4e3a Jetpack Compose \u63d0\u4f9b\u4e86\u6ed1\u52a8\u5237\u65b0Layout\u7684\u5e93\uff0c\u7c7b\u4f3c\u4e8e Android \u7684 SwipeRefreshLayout\u3002","title":"\u2b06\ufe0f  \u6ed1\u52a8\u5237\u65b0"},{"location":"third-party-component/accompanist/overview/#_6","text":"Jetpack Compose \u662f\u4e00\u4e2a\u5feb\u901f\u53d1\u5c55\u7684\u9879\u76ee\uff0c\u6211\u4eec\u7684\u76ee\u6807\u8ba9\u8fd9\u4e9b\u5e93\u7684\u7248\u672c\u66f4\u65b0\u5c3d\u5feb\u4e0e Jetpack Compose \u6700\u65b0\u7248\u672c\u4fdd\u6301\u540c\u6b65\u3002\u6bcf\u4e2a\u5b50\u5e93\u7684\u7248\u672c\u90fd\u63cf\u8ff0\u4e86\u5176\u6240\u4f9d\u8d56\u7684 Jetpack Compose \u7248\u672c\u3002","title":"\u5173\u4e8e\u66f4\u65b0"},{"location":"third-party-component/accompanist/overview/#_7","text":"\u8fd9\u4e9b\u5b50\u5e93\u6240\u63d0\u4f9b\u7684\u4efb\u4f55\u529f\u80fd\u5728\u672a\u6765\u53ef\u80fd\u90fd\u4f1a\u8fc7\u65f6\uff0c\u5230\u90a3\u65f6\u4ed6\u4eec\u53ef\u80fd\u5c06\u88ab\u5e9f\u5f03\u3002\u5c4a\u65f6\uff0c\u6211\u4eec\u5c06\u4f1a\u5c3d\u53ef\u80fd\u5730\u63d0\u4f9b\u4e00\u4e2a\u8fc1\u79fb\u8def\u7ebf\u4ee5\u53d6\u4ee3\u4efb\u4f55\u529f\u80fd\u3002","title":"\u5173\u4e8e\u672a\u6765"},{"location":"third-party-component/accompanist/overview/#_8","text":"\u76ee\u524dAccompanist\u7684\u7248\u672c\u5feb\u7167\u662f\u53ef\u7528\u7684\uff0c\u5b83\u5c06\u8ddf\u8e2a\u6700\u65b0\u7684\u63d0\u4ea4\u3002 \u70b9\u51fb\u67e5\u770b\u66f4\u591a\u4fe1\u606f \u3002","title":"\u5173\u4e8e\u5feb\u7167"},{"location":"third-party-component/accompanist/overview/#_9","text":"\u7531\u4e8e\u8fd9\u4e2a\u5e93\u662f\u56f4\u7ed5\u7740 Jetpack Compose \u6dfb\u52a0\u7684\u4e00\u4e9b\u5b9e\u7528\u5de5\u5177\u3002Compose\u5728\u82f1\u8bed\u4e2d\u6709\u53e6\u4e00\u542b\u4e49\u4e3a\u4f5c\u66f2\uff0c\u4f5c\u66f2\u662f\u7531\u4f5c\u66f2\u5bb6\u5b8c\u6210\u7684\uff0c\u800c\u8fd9\u4e2a\u5e93\u662f\u7528\u6765\u652f\u6301\u4f5c\u66f2\u5bb6\u5b8c\u6210\u4f5c\u66f2\u7684\uff0c\u6240\u4ee5\u4f34\u594f\u8005\u662f\u4e00\u4e2a\u597d\u540d\u5b57\u3002","title":"\u5173\u4e8e\u540d\u5b57"},{"location":"third-party-component/accompanist/overview/#_10","text":"\u6211\u4eec\u5c06\u5f88\u4e50\u610f\u5ba1\u67e5\u4efb\u4f55PR\u8bf7\u6c42\u3002\u4f46\u8bf7\u786e\u4fdd\u9996\u5148\u9605\u8bfb \u8d21\u732e \u9875\u9762\u3002","title":"\u5173\u4e8e\u8d21\u732e"},{"location":"third-party-component/accompanist/overview/#license","text":"Copyright 2020 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"third-party-component/accompanist/pager_layouts/","text":"Pager layouts \u8fd9\u4e2a\u5e93\u4e3a Jetpack Compose \u63d0\u4f9b\u4e86 pager \u7ec4\u4ef6\uff0c\u5982\u679c\u4f60\u4e4b\u524d\u4f7f\u7528\u8fc7 ViewPager \uff0c\u90a3\u4e48\u8fd9\u7c7b\u7ec4\u4ef6\u6709\u7740\u76f8\u4f3c\u7684\u7279\u6027\u3002 \u26a0\ufe0f \u8b66\u544a \u5206\u9875\u7c7b\u7ec4\u4ef6\u73b0\u5728\u8fd8\u5904\u4e8e\u8bd5\u9a8c\u9636\u6bb5\uff0c\u76f8\u5173API\u968f\u65f6\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u6240\u6709API\u90fd\u88ab\u6807\u8bb0\u4e86 @ExperimentalPagerApi \u6ce8\u89e3 HorizontalPager HorizontalPager \u662f\u5176\u4e2d\u4e00\u79cd\u5e03\u5c40\uff0c\u4ed6\u5c06\u6240\u6709\u5b50\u9879\u6446\u653e\u5728\u4e00\u6761\u6c34\u5e73\u884c\u4e0a\uff0c\u5141\u8bb8\u7528\u6237\u5728\u5b50\u9879\u4e4b\u95f4\u6c34\u5e73\u6ed1\u52a8\u3002 \u6700\u7b80\u5355\u7528\u6cd5\u5982\u4e0b\u6240\u793a\uff1a // Display 10 items val pagerState = rememberPagerState ( pageCount = 10 ) HorizontalPager ( state = pagerState ) { page -> // Our page content Text ( text = \"Page: $ page \" , modifier = Modifier . fillMaxWidth () ) } \u5982\u679c\u4f60\u60f3\u8df3\u8f6c\u5230\u67d0\u4e00\u4e2a\u7279\u5b9a\u9875\u9762\uff0c\u4f60\u53ef\u4ee5\u5728 CoroutineScope \u4e2d\u9009\u62e9\u4f7f\u7528 pagerState.scrollToPage(index) \u6216 pagerState.animateScrollToPage(index) \u4e8c\u8005\u5176\u4e00\u5373\u53ef\u3002 VerticalPager VerticalPager \u4e0e HorizontalPager \u975e\u5e38\u76f8\u4f3c\uff0c\u4ed6\u5c06\u6240\u6709\u5b50\u9879\u6446\u653e\u5728\u4e00\u6761\u5782\u76f4\u5217\u4e0a\uff0c\u5141\u8bb8\u7528\u6237\u5728\u5b50\u9879\u4e4b\u95f4\u5782\u76f4\u6ed1\u52a8\u3002 // Display 10 items val pagerState = rememberPagerState ( pageCount = 10 ) VerticalPager ( state = pagerState ) { page -> // Our page content Text ( text = \"Page: $ page \" , modifier = Modifier . fillMaxWidth () ) } \u5ef6\u8fdf\u521b\u5efa HorizontalPager \u4e0e VerticalPager \u4e2d\u7684\u6240\u6709\u9875\u9762\u90fd\u662f\u6309\u7167\u5e03\u5c40\u7684\u8981\u6c42\u5ef6\u8fdf\u7684\u7ec4\u6210\u4e0e\u5e03\u7f6e\u7684\u3002\u5f53\u7528\u6237\u5728\u9875\u9762\u95f4\u6ed1\u52a8\u65f6\uff0c\u4efb\u4f55\u4e0d\u518d\u88ab\u9700\u8981\u7684\u9875\u9762\u90fd\u4f1a\u88ab\u52a8\u6001\u79fb\u9664\u3002 \u5e55\u540e\u9650\u5236 PagerState \u6240\u63d0\u4f9b API \u5141\u8bb8 initOffscreenLimit \u7684\u8bbe\u7f6e\uff0c\u8fd9\u5b9a\u4e49\u4e86\u5f53\u524d\u9875\u4e24\u4fa7\u7684\u9875\u6570\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u9650\u5236\u7684\u9875\u9762\u5c06\u4f1a\u88ab\u79fb\u9664\uff0c\u6839\u636e\u9700\u6c42\u91cd\u65b0\u521b\u5efa\u3002\u8fd9\u4e2a\u503c\u9ed8\u8ba4\u4e3a1\uff0c\u4f46\u53ef\u4ee5\u589e\u52a0\u4ee5\u627f\u8f7d\u66f4\u591a\u7684\u5185\u5bb9\u3002 val pagerState = rememberPagerState ( pageCount = 10 , initialOffscreenLimit = 2 , ) HorizontalPager ( state = pagerState ) { page -> // ... } \u5b50\u9879\u6eda\u52a8\u6548\u679c \u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u662f\u5c06\u6548\u679c\u65bd\u52a0\u5230\u9875\u9762\u5b50\u9879\u4e2d\uff0c\u901a\u8fc7\u6eda\u52a8\u6765\u89e6\u53d1\u8fd9\u4e9b\u6548\u679c\u3002 HorizontalPagerTransitionSample \u793a\u4f8b\u4e2d\u6f14\u793a\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u5728 pager \u7ec4\u4ef6\u7684 content scope \u4e2d\u5141\u8bb8\u5f00\u53d1\u8005\u5f88\u8f7b\u677e\u5730\u62ff\u5230 currentPage \u4e0e currentPageOffset \u5f15\u7528\u3002\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u503c\u6765\u8ba1\u7b97\u6548\u679c\u3002\u6211\u4eec\u63d0\u4f9b\u4e86 calculateCurrentOffsetForPage() \u6269\u5c55\u51fd\u6570\u53bb\u8ba1\u7b97\u67d0\u4e00\u4e2a\u7279\u5b9a\u9875\u9762\u7684\u504f\u79fb\u91cf\u3002 import com.google.accompanist.pager.calculateCurrentOffsetForPage HorizontalPager ( state = pagerState ) { page -> Card ( Modifier . graphicsLayer { // Calculate the absolute offset for the current page from the // scroll position. We use the absolute value which allows us to mirror // any effects for both directions val pageOffset = calculateCurrentOffsetForPage ( page ). absoluteValue // We animate the scaleX + scaleY, between 85% and 100% lerp ( start = 0.85f , stop = 1f , fraction = 1f - pageOffset . coerceIn ( 0f , 1f ) ). also { scale -> scaleX = scale scaleY = scale } // We animate the alpha, between 50% and 100% alpha = lerp ( start = 0.5f , stop = 1f , fraction = 1f - pageOffset . coerceIn ( 0f , 1f ) ) } ) { // Card content } } \u9875\u9762\u6539\u53d8\u54cd\u5e94 \u6bcf\u5f53\u9009\u5b9a\u7684\u9875\u9762\u53d1\u751f\u53d8\u5316\u65f6\uff0c PagerState.currentPage \u5c5e\u6027\u5c31\u4f1a\u66f4\u65b0\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 snapshowFlow \u65b9\u6cd5\u53bb\u76d1\u542c\u6539\u53d8\u901a\u8fc7 flow\uff1a LaunchedEffect ( pagerState ) { snapshotFlow { pagerState . currentPage }. collect { page -> // Selected page has changed... } } \u6307\u793a\u5668 \u6211\u4eec\u8fd8\u53d1\u5e03\u4e86\u4e00\u4e2a\u540d\u4e3a pager-indicators \u7684\u5144\u5f1f\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b80\u5355\u6307\u793a\u5668\u7ec4\u5408\uff0c\u4f9b HorizontalPager \u548c VerticalPager \u4f7f\u7528\u3002 HorizontalPagerWithIndicatorSample \u4e0e VerticalPagerWithIndicatorSample \u5c06\u5411\u4f60\u5c55\u793a\u5982\u4f55\u53bb\u4f7f\u7528\u8fd9\u4e9b\u6307\u793a\u5668\u3002 \u96c6\u6210Tab \u5bf9\u4e8e HorizontalPager \u6765\u8bf4\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u662f\u88ab\u7528\u6765\u4e0e TabRow \u6216 ScrollableTabRow \u7ed3\u5408\u4f7f\u7528\u3002 \u5728 pager-indicators \u5e93\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2aModifier\u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528\u5728 tab \u6307\u793a\u5668\u4e0a\u3002 val pagerState = rememberPagerState ( pageCount = pages . size ) TabRow ( // Our selected tab is our current page selectedTabIndex = pagerState . currentPage , // Override the indicator, using the provided pagerTabIndicatorOffset modifier indicator = { tabPositions -> TabRowDefaults . Indicator ( Modifier . pagerTabIndicatorOffset ( pagerState , tabPositions ) ) } ) { // Add tabs for all of our pages pages . forEachIndexed { index , title -> Tab ( text = { Text ( title ) }, selected = pagerState . currentPage == index , onClick = { /* TODO */ }, ) } } HorizontalPager ( state = pagerState ) { page -> // TODO: page content } \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-pager:<version>\" // If using indicators, also depend on implementation \"com.google.accompanist:accompanist-pager-indicators:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"Pager layouts"},{"location":"third-party-component/accompanist/pager_layouts/#pager-layouts","text":"\u8fd9\u4e2a\u5e93\u4e3a Jetpack Compose \u63d0\u4f9b\u4e86 pager \u7ec4\u4ef6\uff0c\u5982\u679c\u4f60\u4e4b\u524d\u4f7f\u7528\u8fc7 ViewPager \uff0c\u90a3\u4e48\u8fd9\u7c7b\u7ec4\u4ef6\u6709\u7740\u76f8\u4f3c\u7684\u7279\u6027\u3002 \u26a0\ufe0f \u8b66\u544a \u5206\u9875\u7c7b\u7ec4\u4ef6\u73b0\u5728\u8fd8\u5904\u4e8e\u8bd5\u9a8c\u9636\u6bb5\uff0c\u76f8\u5173API\u968f\u65f6\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u6240\u6709API\u90fd\u88ab\u6807\u8bb0\u4e86 @ExperimentalPagerApi \u6ce8\u89e3","title":"Pager layouts"},{"location":"third-party-component/accompanist/pager_layouts/#horizontalpager","text":"HorizontalPager \u662f\u5176\u4e2d\u4e00\u79cd\u5e03\u5c40\uff0c\u4ed6\u5c06\u6240\u6709\u5b50\u9879\u6446\u653e\u5728\u4e00\u6761\u6c34\u5e73\u884c\u4e0a\uff0c\u5141\u8bb8\u7528\u6237\u5728\u5b50\u9879\u4e4b\u95f4\u6c34\u5e73\u6ed1\u52a8\u3002 \u6700\u7b80\u5355\u7528\u6cd5\u5982\u4e0b\u6240\u793a\uff1a // Display 10 items val pagerState = rememberPagerState ( pageCount = 10 ) HorizontalPager ( state = pagerState ) { page -> // Our page content Text ( text = \"Page: $ page \" , modifier = Modifier . fillMaxWidth () ) } \u5982\u679c\u4f60\u60f3\u8df3\u8f6c\u5230\u67d0\u4e00\u4e2a\u7279\u5b9a\u9875\u9762\uff0c\u4f60\u53ef\u4ee5\u5728 CoroutineScope \u4e2d\u9009\u62e9\u4f7f\u7528 pagerState.scrollToPage(index) \u6216 pagerState.animateScrollToPage(index) \u4e8c\u8005\u5176\u4e00\u5373\u53ef\u3002","title":"HorizontalPager"},{"location":"third-party-component/accompanist/pager_layouts/#verticalpager","text":"VerticalPager \u4e0e HorizontalPager \u975e\u5e38\u76f8\u4f3c\uff0c\u4ed6\u5c06\u6240\u6709\u5b50\u9879\u6446\u653e\u5728\u4e00\u6761\u5782\u76f4\u5217\u4e0a\uff0c\u5141\u8bb8\u7528\u6237\u5728\u5b50\u9879\u4e4b\u95f4\u5782\u76f4\u6ed1\u52a8\u3002 // Display 10 items val pagerState = rememberPagerState ( pageCount = 10 ) VerticalPager ( state = pagerState ) { page -> // Our page content Text ( text = \"Page: $ page \" , modifier = Modifier . fillMaxWidth () ) }","title":"VerticalPager"},{"location":"third-party-component/accompanist/pager_layouts/#_1","text":"HorizontalPager \u4e0e VerticalPager \u4e2d\u7684\u6240\u6709\u9875\u9762\u90fd\u662f\u6309\u7167\u5e03\u5c40\u7684\u8981\u6c42\u5ef6\u8fdf\u7684\u7ec4\u6210\u4e0e\u5e03\u7f6e\u7684\u3002\u5f53\u7528\u6237\u5728\u9875\u9762\u95f4\u6ed1\u52a8\u65f6\uff0c\u4efb\u4f55\u4e0d\u518d\u88ab\u9700\u8981\u7684\u9875\u9762\u90fd\u4f1a\u88ab\u52a8\u6001\u79fb\u9664\u3002","title":"\u5ef6\u8fdf\u521b\u5efa"},{"location":"third-party-component/accompanist/pager_layouts/#_2","text":"PagerState \u6240\u63d0\u4f9b API \u5141\u8bb8 initOffscreenLimit \u7684\u8bbe\u7f6e\uff0c\u8fd9\u5b9a\u4e49\u4e86\u5f53\u524d\u9875\u4e24\u4fa7\u7684\u9875\u6570\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u9650\u5236\u7684\u9875\u9762\u5c06\u4f1a\u88ab\u79fb\u9664\uff0c\u6839\u636e\u9700\u6c42\u91cd\u65b0\u521b\u5efa\u3002\u8fd9\u4e2a\u503c\u9ed8\u8ba4\u4e3a1\uff0c\u4f46\u53ef\u4ee5\u589e\u52a0\u4ee5\u627f\u8f7d\u66f4\u591a\u7684\u5185\u5bb9\u3002 val pagerState = rememberPagerState ( pageCount = 10 , initialOffscreenLimit = 2 , ) HorizontalPager ( state = pagerState ) { page -> // ... }","title":"\u5e55\u540e\u9650\u5236"},{"location":"third-party-component/accompanist/pager_layouts/#_3","text":"\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u662f\u5c06\u6548\u679c\u65bd\u52a0\u5230\u9875\u9762\u5b50\u9879\u4e2d\uff0c\u901a\u8fc7\u6eda\u52a8\u6765\u89e6\u53d1\u8fd9\u4e9b\u6548\u679c\u3002 HorizontalPagerTransitionSample \u793a\u4f8b\u4e2d\u6f14\u793a\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u5728 pager \u7ec4\u4ef6\u7684 content scope \u4e2d\u5141\u8bb8\u5f00\u53d1\u8005\u5f88\u8f7b\u677e\u5730\u62ff\u5230 currentPage \u4e0e currentPageOffset \u5f15\u7528\u3002\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u503c\u6765\u8ba1\u7b97\u6548\u679c\u3002\u6211\u4eec\u63d0\u4f9b\u4e86 calculateCurrentOffsetForPage() \u6269\u5c55\u51fd\u6570\u53bb\u8ba1\u7b97\u67d0\u4e00\u4e2a\u7279\u5b9a\u9875\u9762\u7684\u504f\u79fb\u91cf\u3002 import com.google.accompanist.pager.calculateCurrentOffsetForPage HorizontalPager ( state = pagerState ) { page -> Card ( Modifier . graphicsLayer { // Calculate the absolute offset for the current page from the // scroll position. We use the absolute value which allows us to mirror // any effects for both directions val pageOffset = calculateCurrentOffsetForPage ( page ). absoluteValue // We animate the scaleX + scaleY, between 85% and 100% lerp ( start = 0.85f , stop = 1f , fraction = 1f - pageOffset . coerceIn ( 0f , 1f ) ). also { scale -> scaleX = scale scaleY = scale } // We animate the alpha, between 50% and 100% alpha = lerp ( start = 0.5f , stop = 1f , fraction = 1f - pageOffset . coerceIn ( 0f , 1f ) ) } ) { // Card content } }","title":"\u5b50\u9879\u6eda\u52a8\u6548\u679c"},{"location":"third-party-component/accompanist/pager_layouts/#_4","text":"\u6bcf\u5f53\u9009\u5b9a\u7684\u9875\u9762\u53d1\u751f\u53d8\u5316\u65f6\uff0c PagerState.currentPage \u5c5e\u6027\u5c31\u4f1a\u66f4\u65b0\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 snapshowFlow \u65b9\u6cd5\u53bb\u76d1\u542c\u6539\u53d8\u901a\u8fc7 flow\uff1a LaunchedEffect ( pagerState ) { snapshotFlow { pagerState . currentPage }. collect { page -> // Selected page has changed... } }","title":"\u9875\u9762\u6539\u53d8\u54cd\u5e94"},{"location":"third-party-component/accompanist/pager_layouts/#_5","text":"\u6211\u4eec\u8fd8\u53d1\u5e03\u4e86\u4e00\u4e2a\u540d\u4e3a pager-indicators \u7684\u5144\u5f1f\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b80\u5355\u6307\u793a\u5668\u7ec4\u5408\uff0c\u4f9b HorizontalPager \u548c VerticalPager \u4f7f\u7528\u3002 HorizontalPagerWithIndicatorSample \u4e0e VerticalPagerWithIndicatorSample \u5c06\u5411\u4f60\u5c55\u793a\u5982\u4f55\u53bb\u4f7f\u7528\u8fd9\u4e9b\u6307\u793a\u5668\u3002","title":"\u6307\u793a\u5668"},{"location":"third-party-component/accompanist/pager_layouts/#tab","text":"\u5bf9\u4e8e HorizontalPager \u6765\u8bf4\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u662f\u88ab\u7528\u6765\u4e0e TabRow \u6216 ScrollableTabRow \u7ed3\u5408\u4f7f\u7528\u3002 \u5728 pager-indicators \u5e93\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2aModifier\u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528\u5728 tab \u6307\u793a\u5668\u4e0a\u3002 val pagerState = rememberPagerState ( pageCount = pages . size ) TabRow ( // Our selected tab is our current page selectedTabIndex = pagerState . currentPage , // Override the indicator, using the provided pagerTabIndicatorOffset modifier indicator = { tabPositions -> TabRowDefaults . Indicator ( Modifier . pagerTabIndicatorOffset ( pagerState , tabPositions ) ) } ) { // Add tabs for all of our pages pages . forEachIndexed { index , title -> Tab ( text = { Text ( title ) }, selected = pagerState . currentPage == index , onClick = { /* TODO */ }, ) } } HorizontalPager ( state = pagerState ) { page -> // TODO: page content }","title":"\u96c6\u6210Tab"},{"location":"third-party-component/accompanist/pager_layouts/#_6","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-pager:<version>\" // If using indicators, also depend on implementation \"com.google.accompanist:accompanist-pager-indicators:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/accompanist/swipe_refresh/","text":"Swipe Refresh for Jetpack Compose \u8fd9\u4e2a\u5e93\u63d0\u4f9b\u4e86\u8f83\u4e3a\u5e38\u7528\u7684\u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u7edfView\u7cfb\u7edf\u4e2d\u7684 SwipeRefreshLayout \u3002 \u7528\u6cd5 \u4e3a\u4e86\u80fd\u591f\u4f7f\u7528\u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\uff0c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u5173\u952eAPI\uff0c SwipeRefresh \u4e3a\u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u5e03\u5c40\u4fe1\u606f\uff0c rememberSwipeRefreshState() \u63d0\u4f9b\u4e86\u6ed1\u52a8\u5237\u65b0\u72b6\u6001\u4fe1\u606f\u3002 \u5728\u4f7f\u7528\u4e86 ViewModel \u7684\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u4e00\u822c\u8fd9\u4e48\u4f7f\u7528 SwipeRefresh \u3002 val viewModel : MyViewModel = viewModel () val isRefreshing by viewModel . isRefreshing . collectAsState () SwipeRefresh ( state = rememberSwipeRefreshState ( isRefreshing ), onRefresh = { viewModel . refresh () }, ) { LazyColumn { items ( 30 ) { index -> // TODO: list items } } } \u8fd9\u4e2a\u4f8b\u5b50\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u5305\u62ec ViewModel \u7684\u5b9e\u73b0\u53ef\u4ee5\u5728 \u8fd9\u91cc \u88ab\u627e\u5230\u3002 \u5185\u5bb9\u9700\u8981\u662f\u53ef\u6eda\u52a8\u7684\uff0c\u4ee5\u4fbf SwipeRefresh \u80fd\u591f\u5bf9\u6ed1\u52a8\u624b\u52bf\u4f5c\u51fa\u76f8\u5bf9\u5e94\u7684\u884c\u4e3a\u3002 \u50cf LazyColumn \u8fd9\u7c7b\u53ef\u4ee5\u901a\u8fc7\u624b\u52bf\u6ed1\u52a8\u81ea\u52a8\u8fdb\u884c\u6eda\u52a8\u7684\u7ec4\u4ef6\u5c31\u662f\u53ef\u4ee5\u7684\u3002\u800c\u50cf Column \u8fd9\u7c7b\u56fa\u5b9a\u7684\u7ec4\u4ef6\u5219\u4e0d\u884c\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u7ec4\u4ef6\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a Modifier.verticalScroll \u4fee\u9970\u7b26\u4e3a\u5176\u62d3\u5c55\u53ef\u6eda\u52a8\u7684\u80fd\u529b\u3002 SwipeRefresh ( // ... ) { Column ( Modifier . verticalScroll ( rememberScrollState ())) { // content } } \u65e0\u9700\u624b\u52bf\u6ed1\u52a8\u6570\u636e\u5237\u65b0 \u6ed1\u52a8\u5237\u65b0\u901a\u8fc7\u4e00\u4e2a\u72ec\u7acb\u72b6\u6001\u8fdb\u884c\u7ba1\u7406\uff0c\u5373\u4f7f\u6ca1\u6709\u624b\u52bf\u6ed1\u52a8\u4e5f\u53ef\u4ee5\u663e\u793a\u5237\u65b0\u6307\u793a\u5668\u3002 \u4e0b\u9762\u8fd9\u4e2a\u4e0d\u5207\u5b9e\u9645\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u4e00\u4e2a\u6c38\u8fdc\u5728\u5237\u65b0\u7684\u6307\u793a\u5668\u3002 val swipeRefreshState = rememberSwipeRefreshState ( true ) SwipeRefresh ( state = swipeRefreshState , onRefresh = { /* todo */ }, ) { LazyColumn { items ( 30 ) { index -> // TODO: list items } } } \u5237\u65b0\u6307\u793a\u5668 \u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5237\u65b0\u6307\u793a\u5668 SwipeRefreshIndicator() \uff0c SwipeRefresh \u7ec4\u4ef6\u4e2d\u81ea\u52a8\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u5237\u65b0\u6307\u793a\u5668\u3002 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5b9a\u5236\u81ea\u5df1\u7684\u5237\u65b0\u6307\u793a\u5668\uff0c \u5c06\u4f60\u7684\u5237\u65b0\u6307\u793a\u5668\u914d\u7f6e \u5230 SwipeRefresh \u7684 indicator \u53c2\u6570\u5373\u53ef\u3002 \u5b9a\u5236\u9ed8\u8ba4\u6307\u793a\u5668 \u4e3a\u5b9e\u73b0\u9ed8\u8ba4\u6307\u793a\u5668\u7684\u5b9a\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u6211\u4eec\u81ea\u5df1\u7684 indicator \u5185\u5bb9\u4ee3\u7801\u5757\uff0c\u9700\u8981\u5728 indicator lambda\u53c2\u6570\u7ed3\u5c3e\u8c03\u7528 SwipeRefreshIndicator() \uff0c\u5e76\u5728\u5176\u4e2d\u914d\u7f6e\u5b9a\u5236\u5316\u53c2\u6570\u3002 \u4f7f\u7528\u6848\u4f8b\u53c2\u8003 \u8fd9\u91cc \u5b9a\u5236\u6307\u793a\u5668 \u6b63\u5982\u524d\u6587\u6240\u8bf4\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4f60\u7684\u5b9a\u5236 indicator \u5185\u5bb9\u4ee3\u7801\u5757\u3002 SwipeRefreshState \u88ab\u63d0\u4f9b\u5230 indicator \u5185\u5bb9\u4ee3\u7801\u5757\uff0c \u8fd9\u5176\u4e2d\u5305\u542b\u4e86\u5fc5\u8981\u4fe1\u606f\u53bb\u5b9e\u73b0\u6ed1\u52a8\u5237\u65b0\u624b\u52bf\u3002 \u5b9a\u5236\u6307\u793a\u5668\u7684\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-swiperefresh:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"Swipe Refresh"},{"location":"third-party-component/accompanist/swipe_refresh/#swipe-refresh-for-jetpack-compose","text":"\u8fd9\u4e2a\u5e93\u63d0\u4f9b\u4e86\u8f83\u4e3a\u5e38\u7528\u7684\u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\uff0c\u7c7b\u4f3c\u4e8e\u4f20\u7edfView\u7cfb\u7edf\u4e2d\u7684 SwipeRefreshLayout \u3002","title":"Swipe Refresh for Jetpack Compose"},{"location":"third-party-component/accompanist/swipe_refresh/#_1","text":"\u4e3a\u4e86\u80fd\u591f\u4f7f\u7528\u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\uff0c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u5173\u952eAPI\uff0c SwipeRefresh \u4e3a\u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u5e03\u5c40\u4fe1\u606f\uff0c rememberSwipeRefreshState() \u63d0\u4f9b\u4e86\u6ed1\u52a8\u5237\u65b0\u72b6\u6001\u4fe1\u606f\u3002 \u5728\u4f7f\u7528\u4e86 ViewModel \u7684\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u4e00\u822c\u8fd9\u4e48\u4f7f\u7528 SwipeRefresh \u3002 val viewModel : MyViewModel = viewModel () val isRefreshing by viewModel . isRefreshing . collectAsState () SwipeRefresh ( state = rememberSwipeRefreshState ( isRefreshing ), onRefresh = { viewModel . refresh () }, ) { LazyColumn { items ( 30 ) { index -> // TODO: list items } } } \u8fd9\u4e2a\u4f8b\u5b50\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u5305\u62ec ViewModel \u7684\u5b9e\u73b0\u53ef\u4ee5\u5728 \u8fd9\u91cc \u88ab\u627e\u5230\u3002 \u5185\u5bb9\u9700\u8981\u662f\u53ef\u6eda\u52a8\u7684\uff0c\u4ee5\u4fbf SwipeRefresh \u80fd\u591f\u5bf9\u6ed1\u52a8\u624b\u52bf\u4f5c\u51fa\u76f8\u5bf9\u5e94\u7684\u884c\u4e3a\u3002 \u50cf LazyColumn \u8fd9\u7c7b\u53ef\u4ee5\u901a\u8fc7\u624b\u52bf\u6ed1\u52a8\u81ea\u52a8\u8fdb\u884c\u6eda\u52a8\u7684\u7ec4\u4ef6\u5c31\u662f\u53ef\u4ee5\u7684\u3002\u800c\u50cf Column \u8fd9\u7c7b\u56fa\u5b9a\u7684\u7ec4\u4ef6\u5219\u4e0d\u884c\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u7ec4\u4ef6\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a Modifier.verticalScroll \u4fee\u9970\u7b26\u4e3a\u5176\u62d3\u5c55\u53ef\u6eda\u52a8\u7684\u80fd\u529b\u3002 SwipeRefresh ( // ... ) { Column ( Modifier . verticalScroll ( rememberScrollState ())) { // content } }","title":"\u7528\u6cd5"},{"location":"third-party-component/accompanist/swipe_refresh/#_2","text":"\u6ed1\u52a8\u5237\u65b0\u901a\u8fc7\u4e00\u4e2a\u72ec\u7acb\u72b6\u6001\u8fdb\u884c\u7ba1\u7406\uff0c\u5373\u4f7f\u6ca1\u6709\u624b\u52bf\u6ed1\u52a8\u4e5f\u53ef\u4ee5\u663e\u793a\u5237\u65b0\u6307\u793a\u5668\u3002 \u4e0b\u9762\u8fd9\u4e2a\u4e0d\u5207\u5b9e\u9645\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u4e00\u4e2a\u6c38\u8fdc\u5728\u5237\u65b0\u7684\u6307\u793a\u5668\u3002 val swipeRefreshState = rememberSwipeRefreshState ( true ) SwipeRefresh ( state = swipeRefreshState , onRefresh = { /* todo */ }, ) { LazyColumn { items ( 30 ) { index -> // TODO: list items } } }","title":"\u65e0\u9700\u624b\u52bf\u6ed1\u52a8\u6570\u636e\u5237\u65b0"},{"location":"third-party-component/accompanist/swipe_refresh/#_3","text":"\u6ed1\u52a8\u5237\u65b0\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5237\u65b0\u6307\u793a\u5668 SwipeRefreshIndicator() \uff0c SwipeRefresh \u7ec4\u4ef6\u4e2d\u81ea\u52a8\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u5237\u65b0\u6307\u793a\u5668\u3002 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5b9a\u5236\u81ea\u5df1\u7684\u5237\u65b0\u6307\u793a\u5668\uff0c \u5c06\u4f60\u7684\u5237\u65b0\u6307\u793a\u5668\u914d\u7f6e \u5230 SwipeRefresh \u7684 indicator \u53c2\u6570\u5373\u53ef\u3002","title":"\u5237\u65b0\u6307\u793a\u5668"},{"location":"third-party-component/accompanist/swipe_refresh/#_4","text":"\u4e3a\u5b9e\u73b0\u9ed8\u8ba4\u6307\u793a\u5668\u7684\u5b9a\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u6211\u4eec\u81ea\u5df1\u7684 indicator \u5185\u5bb9\u4ee3\u7801\u5757\uff0c\u9700\u8981\u5728 indicator lambda\u53c2\u6570\u7ed3\u5c3e\u8c03\u7528 SwipeRefreshIndicator() \uff0c\u5e76\u5728\u5176\u4e2d\u914d\u7f6e\u5b9a\u5236\u5316\u53c2\u6570\u3002 \u4f7f\u7528\u6848\u4f8b\u53c2\u8003 \u8fd9\u91cc","title":"\u5b9a\u5236\u9ed8\u8ba4\u6307\u793a\u5668"},{"location":"third-party-component/accompanist/swipe_refresh/#_5","text":"\u6b63\u5982\u524d\u6587\u6240\u8bf4\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u4f60\u7684\u5b9a\u5236 indicator \u5185\u5bb9\u4ee3\u7801\u5757\u3002 SwipeRefreshState \u88ab\u63d0\u4f9b\u5230 indicator \u5185\u5bb9\u4ee3\u7801\u5757\uff0c \u8fd9\u5176\u4e2d\u5305\u542b\u4e86\u5fc5\u8981\u4fe1\u606f\u53bb\u5b9e\u73b0\u6ed1\u52a8\u5237\u65b0\u624b\u52bf\u3002 \u5b9a\u5236\u6307\u793a\u5668\u7684\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc","title":"\u5b9a\u5236\u6307\u793a\u5668"},{"location":"third-party-component/accompanist/swipe_refresh/#_6","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-swiperefresh:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/accompanist/system_ui_controller/","text":"System UI Controller for Jetpack Compose System UI Controller \u63d0\u4f9b\u7b80\u5355\u6613\u7528\u7684\u65b9\u6cd5\u5e2e\u52a9\u5f00\u53d1\u8005\u5728 Jetpack Compose \u4e2d\u66f4\u65b0\u7cfb\u7edf\u680f\uff08Android \u5e73\u53f0\u4e0a\u6307\u72b6\u6001\u680f\u548c\u5bfc\u822a\u680f\uff09\u7684\u989c\u8272\u3002 \u7528\u6cd5 \u5f00\u53d1\u8005\u82e5\u60f3\u5728 Compose \u5e03\u5c40\u4e2d\u63a7\u5236 System UI\uff0c\u5c31\u5fc5\u987b\u83b7\u53d6 SystemUiController \u5bf9\u8c61\u3002\u901a\u8fc7\u8be5\u5e93\u63d0\u4f9b rememberSystemUiController \u51fd\u6570\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\uff08\u76ee\u524d\u4ec5\u652f\u6301 Android \u7cfb\u7edf\uff09\u7684 SystemUiController \u5bf9\u8c61\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u5728\u5e03\u5c40\u4e2d\u66f4\u65b0\u7cfb\u7edf\u680f\uff08Android \u5e73\u53f0\u4e0a\u6307\u72b6\u6001\u680f\u548c\u5bfc\u822a\u680f\uff09\u7684\u989c\u8272\uff1a // Remember a SystemUiController val systemUiController = rememberSystemUiController () val useDarkIcons = MaterialTheme . colors . isLight SideEffect { // Update all of the system bar colors to be transparent, and use // dark icons if we're in light theme systemUiController . setSystemBarsColor ( color = Color . Transparent , darkIcons = useDarkIcons ) // setStatusBarsColor() and setNavigationBarsColor() also exist } \u72b6\u6001\u680f\u56fe\u6807\u989c\u8272 \u8be5\u5e93\u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528\u65f6\uff0c\u53ef\u81ea\u52a8\u5904\u7406 API \u7248\u672c\u5dee\u5f02\u3002\u6bd4\u5982\uff0cAndroid \u539f\u751f\u4ece API 23 \u624d\u5f00\u59cb\u652f\u6301\u72b6\u6001\u680f\u6df1\u8272\u56fe\u6807\uff0c\u90a3\u4e48\u9488\u5bf9\u4f4e\u7248\u672c\u8bbe\u5907\uff0c\u8be5\u5e93\u901a\u8fc7\u4f7f\u7528 Scrim \u81ea\u52a8\u8c03\u6574\u72b6\u6001\u680f\u989c\u8272\u4ee5\u6b64\u6765\u4fdd\u6301\u72b6\u6001\u680f\u6574\u4f53\u7684\u5bf9\u6bd4\u5ea6\uff1a \u540c\u7406\uff0c\u7531\u4e8eAndroid \u539f\u751f\u4ece API 26 \u4ee5\u540e\u624d\u652f\u6301\u5bfc\u822a\u680f\u6df1\u8272\u56fe\u6807\uff0c\u9488\u5bf9\u4f4e\u7248\u672c\u8bbe\u5907 SystemUiController \u4e5f\u4f1a\u91c7\u7528\u76f8\u540c\u7684\u5904\u7406\u65b9\u5f0f\u3002 \u8c03\u6574 Scrim \u903b\u8f91 \u5982\u679c\u5f00\u53d1\u8005\u5bf9 SystemUiController \u81ea\u52a8\u5904\u7406\u7684\u989c\u8272\u4e0d\u592a\u6ee1\u610f\uff0c\u4ea6\u53ef\u81ea\u884c\u5904\u7406\uff1a systemUiController . setStatusBarsColor ( color = Color . Transparent , darkIcons = true ) { requestedColor -> // TODO: return a darkened color to be used when the system doesn't // natively support dark icons } \u793a\u4f8b Insets \u793a\u4f8b \u4e2d\u7684\u900f\u660e\u7cfb\u7edf\u680f\uff08Android \u5e73\u53f0\u4e0a\u6307\u72b6\u6001\u680f\u548c\u5bfc\u822a\u680f\uff09\u90fd\u662f\u901a\u8fc7 SystemUiController \u5b9e\u73b0\uff0c\u82e5\u6709\u9700\u8981\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u3002 \u4e0b\u8f7d repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-systemuicontroller:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"System UI Controller"},{"location":"third-party-component/accompanist/system_ui_controller/#system-ui-controller-for-jetpack-compose","text":"System UI Controller \u63d0\u4f9b\u7b80\u5355\u6613\u7528\u7684\u65b9\u6cd5\u5e2e\u52a9\u5f00\u53d1\u8005\u5728 Jetpack Compose \u4e2d\u66f4\u65b0\u7cfb\u7edf\u680f\uff08Android \u5e73\u53f0\u4e0a\u6307\u72b6\u6001\u680f\u548c\u5bfc\u822a\u680f\uff09\u7684\u989c\u8272\u3002","title":"System UI Controller for Jetpack Compose"},{"location":"third-party-component/accompanist/system_ui_controller/#_1","text":"\u5f00\u53d1\u8005\u82e5\u60f3\u5728 Compose \u5e03\u5c40\u4e2d\u63a7\u5236 System UI\uff0c\u5c31\u5fc5\u987b\u83b7\u53d6 SystemUiController \u5bf9\u8c61\u3002\u901a\u8fc7\u8be5\u5e93\u63d0\u4f9b rememberSystemUiController \u51fd\u6570\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\uff08\u76ee\u524d\u4ec5\u652f\u6301 Android \u7cfb\u7edf\uff09\u7684 SystemUiController \u5bf9\u8c61\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u5728\u5e03\u5c40\u4e2d\u66f4\u65b0\u7cfb\u7edf\u680f\uff08Android \u5e73\u53f0\u4e0a\u6307\u72b6\u6001\u680f\u548c\u5bfc\u822a\u680f\uff09\u7684\u989c\u8272\uff1a // Remember a SystemUiController val systemUiController = rememberSystemUiController () val useDarkIcons = MaterialTheme . colors . isLight SideEffect { // Update all of the system bar colors to be transparent, and use // dark icons if we're in light theme systemUiController . setSystemBarsColor ( color = Color . Transparent , darkIcons = useDarkIcons ) // setStatusBarsColor() and setNavigationBarsColor() also exist }","title":"\u7528\u6cd5"},{"location":"third-party-component/accompanist/system_ui_controller/#_2","text":"\u8be5\u5e93\u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528\u65f6\uff0c\u53ef\u81ea\u52a8\u5904\u7406 API \u7248\u672c\u5dee\u5f02\u3002\u6bd4\u5982\uff0cAndroid \u539f\u751f\u4ece API 23 \u624d\u5f00\u59cb\u652f\u6301\u72b6\u6001\u680f\u6df1\u8272\u56fe\u6807\uff0c\u90a3\u4e48\u9488\u5bf9\u4f4e\u7248\u672c\u8bbe\u5907\uff0c\u8be5\u5e93\u901a\u8fc7\u4f7f\u7528 Scrim \u81ea\u52a8\u8c03\u6574\u72b6\u6001\u680f\u989c\u8272\u4ee5\u6b64\u6765\u4fdd\u6301\u72b6\u6001\u680f\u6574\u4f53\u7684\u5bf9\u6bd4\u5ea6\uff1a \u540c\u7406\uff0c\u7531\u4e8eAndroid \u539f\u751f\u4ece API 26 \u4ee5\u540e\u624d\u652f\u6301\u5bfc\u822a\u680f\u6df1\u8272\u56fe\u6807\uff0c\u9488\u5bf9\u4f4e\u7248\u672c\u8bbe\u5907 SystemUiController \u4e5f\u4f1a\u91c7\u7528\u76f8\u540c\u7684\u5904\u7406\u65b9\u5f0f\u3002","title":"\u72b6\u6001\u680f\u56fe\u6807\u989c\u8272"},{"location":"third-party-component/accompanist/system_ui_controller/#scrim","text":"\u5982\u679c\u5f00\u53d1\u8005\u5bf9 SystemUiController \u81ea\u52a8\u5904\u7406\u7684\u989c\u8272\u4e0d\u592a\u6ee1\u610f\uff0c\u4ea6\u53ef\u81ea\u884c\u5904\u7406\uff1a systemUiController . setStatusBarsColor ( color = Color . Transparent , darkIcons = true ) { requestedColor -> // TODO: return a darkened color to be used when the system doesn't // natively support dark icons }","title":"\u8c03\u6574 Scrim \u903b\u8f91"},{"location":"third-party-component/accompanist/system_ui_controller/#_3","text":"Insets \u793a\u4f8b \u4e2d\u7684\u900f\u660e\u7cfb\u7edf\u680f\uff08Android \u5e73\u53f0\u4e0a\u6307\u72b6\u6001\u680f\u548c\u5bfc\u822a\u680f\uff09\u90fd\u662f\u901a\u8fc7 SystemUiController \u5b9e\u73b0\uff0c\u82e5\u6709\u9700\u8981\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u3002","title":"\u793a\u4f8b"},{"location":"third-party-component/accompanist/system_ui_controller/#_4","text":"repositories { mavenCentral () } dependencies { implementation \"com.google.accompanist:accompanist-systemuicontroller:<version>\" } \u6bcf\u4e2a\u7248\u672c\u53ef\u4ee5\u5728 \u5feb\u7167\u4ed3\u5e93 \u4e2d\u88ab\u627e\u5230\uff0c\u6bcf\u6b21\u63d0\u4ea4\u65f6\u90fd\u4f1a\u66f4\u65b0\u3002","title":"\u4e0b\u8f7d"},{"location":"third-party-component/coil/","text":"Jetpack Compose \u8981\u6dfb\u52a0\u5bf9 Jetpack Compose \u7684\u652f\u6301\uff0c\u8bf7\u5bfc\u5165\u6269\u5c55\u5e93\uff1a implementation ( \"io.coil-kt:coil-compose:1.3.2\" ) \u7136\u540e\u4f7f\u7528 rememberImagePainter \u51fd\u6570\u53bb\u521b\u5efa\u4e00\u4e2a\u80fd\u88ab Image \u53ef\u7ec4\u5408\u51fd\u6570\u7ed8\u5236\u7684 ImagePainter // \u57fa\u672c\u4f7f\u7528 Image ( painter = rememberImagePainter ( \"https://www.example.com/image.jpg\" ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) // \u8fdb\u9636\u4f7f\u7528 Image ( painter = rememberImagePainter ( data = \"https://www.example.com/image.jpg\" , builder = { transformations ( CircleCropTransformation ()) } ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) ImagePainter \u7ba1\u7406\u56fe\u50cf\u8bf7\u6c42\uff0c\u5e76\u6839\u636e\u8bf7\u6c42\u7ed3\u679c\u7684\u4e0d\u540c\u5206\u522b\u5904\u7406\u5360\u4f4d\u3001\u6210\u529f\u548c\u9519\u8bef\u7b49\u60c5\u51b5\u7684\u56fe\u50cf\u7ed8\u5236\u3002 Transitions \u901a\u8fc7\u4f7f\u7528 ImageRequest.Builder.crossfade \uff0c\u6211\u4eec\u53ef\u4ee5\u542f\u7528\u5185\u7f6e\u7684\u6de1\u5165\u6de1\u51fa\u8fc7\u6e21\u52a8\u753b\u6548\u679c\u3002 Image ( painter = rememberImagePainter ( data = \"https://www.example.com/image.jpg\" , builder = { crossfade ( true ) } ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) \u81ea\u5b9a\u4e49\u7684 \u8fc7\u6e21\u52a8\u753b \u5728 rememberImagePainter \u4e0b\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u9700\u8981 View \u5f15\u7528\u3002 CrossfadeTransition \u6de1\u5165\u6de1\u51fa\u6548\u679c\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u662f\u56e0\u4e3a\u7279\u6b8a\u7684\u5185\u90e8\u652f\u6301\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u89c2\u5bdf ImagePainter \u7684\u72b6\u6001\u624d\u80fd\u5728 Compose \u4e2d\u521b\u5efa\u81ea\u5b9a\u4e49\u8fc7\u6e21\u52a8\u753b\uff1a val painter = rememberImagePainter ( \"https://www.example.com/image.jpg\" ) val state = painter . state if ( state is ImagePainter . State . Success && state . metadata . dataSource != DataSource . MEMORY_CACHE }) { // \u6267\u884c\u8fc7\u6e21\u52a8\u753b\u3002 } Image ( painter = painter , contentDescription = null , modifier = Modifier . size ( 128. dp ) ) \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f53 ImagePainter \u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c composable \u4f1a\u91cd\u65b0\u7ec4\u5408\u3002\u5982\u679c\u56fe\u50cf\u8bf7\u6c42\u6210\u529f\u5e76\u4e14\u6ca1\u6709\u4ece\u5185\u5b58\u7f13\u5b58\u4e2d\u83b7\u5f97\uff0c\u5b83\u5c06\u5728 if \u8bed\u53e5\u4e2d\u6267\u884c\u52a8\u753b\u3002 LocalImageLoader Coil \u5e93\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u4f2a CompositionLocal \uff08\u610f\u5373\u7c7b\u4f3c\u4e8e\uff09\uff0c\u53ef\u4ee5\u4ece\u672c\u5730\u4e2d\u83b7\u5f97 ImageLoader \u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u672c\u5730\u7684 ImageLoader \u5c06\u662f ImageLoader \u5355\u4f8b\uff0c\u4f46\u662f\u5982\u679c\u6709\u5fc5\u8981\uff0c\u53ef\u4ee5\u4f7f\u7528 CompositionLocalProvider \u8986\u76d6\u672c\u5730\u7684 ImageLoader \u3002 // \u83b7\u53d6 val imageLoader = LocalImageLoader . current // \u8bbe\u7f6e CompositionLocalProvider ( LocalImageLoader provides ImageLoader ( context )) { // UI \u7684\u5176\u4f59\u90e8\u5206 } \u6ce8\u610f \u8fd8\u6709\u4e00\u4e2a coil-compose-base \uff0c\u5b83\u662f coil-compose \u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u5b83\u4e0d\u5305\u542b LocalImageLoader \u548c ImageLoader \u5355\u4f8b\u3002 \u4ece Accompanist \u8fc1\u79fb Coil \u7684 Jetpack Compose \u96c6\u6210\u662f\u57fa\u4e8e Accompanist \u7684 Coil \u96c6\u6210\uff0c\u4f46\u6709\u4ee5\u4e0b\u53d8\u5316\uff1a rememberCoilPainter \u88ab\u91cd\u547d\u540d\u4e3a rememberImagePainter \uff0c\u5176\u53c2\u6570\u4e5f\u6709\u53d8\u5316\u3002 shouldRefetchOnSizeChange \u88ab\u66ff\u6362\u4e3a onExecute \uff0c\u5b83\u5bf9\u56fe\u50cf\u8bf7\u6c42\u662f\u5426\u88ab\u6267\u884c\u6216\u8df3\u8fc7\u6709\u66f4\u591a\u63a7\u5236\u3002 requestBuilder \u88ab\u6539\u540d\u4e3a builder \u3002 fadeIn \u548c fadeInDurationMs \u88ab\u79fb\u9664\u3002\u8fc1\u79fb\u5230 ImageRequest.Builder.crossfade \uff08\u89c1 Transitions \uff09\u3002 previewPlaceholder \u88ab\u79fb\u9664\u3002\u5982\u679c\u542f\u7528 inspection \u6a21\u5f0f\uff0c ImageRequest.placeholder \u73b0\u5728\u4f1a\u81ea\u52a8\u4f7f\u7528\u3002 LoadPainter \u91cd\u547d\u540d\u4e3a ImagePainter \u3002 \u5982\u679c onDraw \u6ca1\u6709\u88ab\u8c03\u7528\uff0c ImagePainter \u4e0d\u518d\u9000\u56de\u5230\u4ee5\u6839\u89c6\u56fe\u7684\u5c3a\u5bf8\u6267\u884c\u56fe\u50cf\u8bf7\u6c42\u3002\u5982\u679c\u4f60\u5728 Image \u5927\u5c0f\u4e0d\u53d7\u9650\u5236\u7684 LazyColumn \u4e2d\u4f7f\u7528 ImagePainter \uff0c\u4f60\u5e94\u8be5\u4f1a\u611f\u53d7\u5230\u8fd9\u4e2a\u53d8\u5316\u3002 Loader \u548c rememberLoadPainter \u88ab\u79fb\u9664\u3002 LocalImageLoader.current \u662f\u975e null \u7684\uff0c\u5e76\u4e14\u9ed8\u8ba4\u8fd4\u56de ImageLoader \u5355\u4f8b\u3002 DrawablePainter \u548c rememberDrawablePainter \u73b0\u5728\u4e3a private \u3002 \u4ee5\u4e0b\u662f\u8fc1\u79fb\u7684\u793a\u4f8b\uff1a // accompanist-coil Image ( painter = rememberCoilPainter ( request = \"https://www.example.com/image.jpg\" , requestBuilder = { transformations ( CircleCropTransformation ()) }, shouldRefetchOnSizeChange = ShouldRefetchOnSizeChange { _ , _ -> true }, fadeIn = true , previewPlaceholder = R . drawable . placeholder ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) // coil-compose Image ( painter = rememberImagePainter ( data = \"https://www.example.com/image.jpg\" , onExecute = ExecuteCallback { _ , _ -> true }, builder = { crossfade ( true ) placeholder ( R . drawable . placeholder ) transformations ( CircleCropTransformation ()) } ), contentDescription = null , modifier = Modifier . size ( 128. dp ) )","title":"Coil"},{"location":"third-party-component/coil/#jetpack-compose","text":"\u8981\u6dfb\u52a0\u5bf9 Jetpack Compose \u7684\u652f\u6301\uff0c\u8bf7\u5bfc\u5165\u6269\u5c55\u5e93\uff1a implementation ( \"io.coil-kt:coil-compose:1.3.2\" ) \u7136\u540e\u4f7f\u7528 rememberImagePainter \u51fd\u6570\u53bb\u521b\u5efa\u4e00\u4e2a\u80fd\u88ab Image \u53ef\u7ec4\u5408\u51fd\u6570\u7ed8\u5236\u7684 ImagePainter // \u57fa\u672c\u4f7f\u7528 Image ( painter = rememberImagePainter ( \"https://www.example.com/image.jpg\" ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) // \u8fdb\u9636\u4f7f\u7528 Image ( painter = rememberImagePainter ( data = \"https://www.example.com/image.jpg\" , builder = { transformations ( CircleCropTransformation ()) } ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) ImagePainter \u7ba1\u7406\u56fe\u50cf\u8bf7\u6c42\uff0c\u5e76\u6839\u636e\u8bf7\u6c42\u7ed3\u679c\u7684\u4e0d\u540c\u5206\u522b\u5904\u7406\u5360\u4f4d\u3001\u6210\u529f\u548c\u9519\u8bef\u7b49\u60c5\u51b5\u7684\u56fe\u50cf\u7ed8\u5236\u3002","title":"Jetpack Compose"},{"location":"third-party-component/coil/#transitions","text":"\u901a\u8fc7\u4f7f\u7528 ImageRequest.Builder.crossfade \uff0c\u6211\u4eec\u53ef\u4ee5\u542f\u7528\u5185\u7f6e\u7684\u6de1\u5165\u6de1\u51fa\u8fc7\u6e21\u52a8\u753b\u6548\u679c\u3002 Image ( painter = rememberImagePainter ( data = \"https://www.example.com/image.jpg\" , builder = { crossfade ( true ) } ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) \u81ea\u5b9a\u4e49\u7684 \u8fc7\u6e21\u52a8\u753b \u5728 rememberImagePainter \u4e0b\u65e0\u6cd5\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u9700\u8981 View \u5f15\u7528\u3002 CrossfadeTransition \u6de1\u5165\u6de1\u51fa\u6548\u679c\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u662f\u56e0\u4e3a\u7279\u6b8a\u7684\u5185\u90e8\u652f\u6301\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u89c2\u5bdf ImagePainter \u7684\u72b6\u6001\u624d\u80fd\u5728 Compose \u4e2d\u521b\u5efa\u81ea\u5b9a\u4e49\u8fc7\u6e21\u52a8\u753b\uff1a val painter = rememberImagePainter ( \"https://www.example.com/image.jpg\" ) val state = painter . state if ( state is ImagePainter . State . Success && state . metadata . dataSource != DataSource . MEMORY_CACHE }) { // \u6267\u884c\u8fc7\u6e21\u52a8\u753b\u3002 } Image ( painter = painter , contentDescription = null , modifier = Modifier . size ( 128. dp ) ) \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f53 ImagePainter \u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c composable \u4f1a\u91cd\u65b0\u7ec4\u5408\u3002\u5982\u679c\u56fe\u50cf\u8bf7\u6c42\u6210\u529f\u5e76\u4e14\u6ca1\u6709\u4ece\u5185\u5b58\u7f13\u5b58\u4e2d\u83b7\u5f97\uff0c\u5b83\u5c06\u5728 if \u8bed\u53e5\u4e2d\u6267\u884c\u52a8\u753b\u3002","title":"Transitions"},{"location":"third-party-component/coil/#localimageloader","text":"Coil \u5e93\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u4f2a CompositionLocal \uff08\u610f\u5373\u7c7b\u4f3c\u4e8e\uff09\uff0c\u53ef\u4ee5\u4ece\u672c\u5730\u4e2d\u83b7\u5f97 ImageLoader \u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u672c\u5730\u7684 ImageLoader \u5c06\u662f ImageLoader \u5355\u4f8b\uff0c\u4f46\u662f\u5982\u679c\u6709\u5fc5\u8981\uff0c\u53ef\u4ee5\u4f7f\u7528 CompositionLocalProvider \u8986\u76d6\u672c\u5730\u7684 ImageLoader \u3002 // \u83b7\u53d6 val imageLoader = LocalImageLoader . current // \u8bbe\u7f6e CompositionLocalProvider ( LocalImageLoader provides ImageLoader ( context )) { // UI \u7684\u5176\u4f59\u90e8\u5206 } \u6ce8\u610f \u8fd8\u6709\u4e00\u4e2a coil-compose-base \uff0c\u5b83\u662f coil-compose \u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u5b83\u4e0d\u5305\u542b LocalImageLoader \u548c ImageLoader \u5355\u4f8b\u3002","title":"LocalImageLoader"},{"location":"third-party-component/coil/#accompanist","text":"Coil \u7684 Jetpack Compose \u96c6\u6210\u662f\u57fa\u4e8e Accompanist \u7684 Coil \u96c6\u6210\uff0c\u4f46\u6709\u4ee5\u4e0b\u53d8\u5316\uff1a rememberCoilPainter \u88ab\u91cd\u547d\u540d\u4e3a rememberImagePainter \uff0c\u5176\u53c2\u6570\u4e5f\u6709\u53d8\u5316\u3002 shouldRefetchOnSizeChange \u88ab\u66ff\u6362\u4e3a onExecute \uff0c\u5b83\u5bf9\u56fe\u50cf\u8bf7\u6c42\u662f\u5426\u88ab\u6267\u884c\u6216\u8df3\u8fc7\u6709\u66f4\u591a\u63a7\u5236\u3002 requestBuilder \u88ab\u6539\u540d\u4e3a builder \u3002 fadeIn \u548c fadeInDurationMs \u88ab\u79fb\u9664\u3002\u8fc1\u79fb\u5230 ImageRequest.Builder.crossfade \uff08\u89c1 Transitions \uff09\u3002 previewPlaceholder \u88ab\u79fb\u9664\u3002\u5982\u679c\u542f\u7528 inspection \u6a21\u5f0f\uff0c ImageRequest.placeholder \u73b0\u5728\u4f1a\u81ea\u52a8\u4f7f\u7528\u3002 LoadPainter \u91cd\u547d\u540d\u4e3a ImagePainter \u3002 \u5982\u679c onDraw \u6ca1\u6709\u88ab\u8c03\u7528\uff0c ImagePainter \u4e0d\u518d\u9000\u56de\u5230\u4ee5\u6839\u89c6\u56fe\u7684\u5c3a\u5bf8\u6267\u884c\u56fe\u50cf\u8bf7\u6c42\u3002\u5982\u679c\u4f60\u5728 Image \u5927\u5c0f\u4e0d\u53d7\u9650\u5236\u7684 LazyColumn \u4e2d\u4f7f\u7528 ImagePainter \uff0c\u4f60\u5e94\u8be5\u4f1a\u611f\u53d7\u5230\u8fd9\u4e2a\u53d8\u5316\u3002 Loader \u548c rememberLoadPainter \u88ab\u79fb\u9664\u3002 LocalImageLoader.current \u662f\u975e null \u7684\uff0c\u5e76\u4e14\u9ed8\u8ba4\u8fd4\u56de ImageLoader \u5355\u4f8b\u3002 DrawablePainter \u548c rememberDrawablePainter \u73b0\u5728\u4e3a private \u3002 \u4ee5\u4e0b\u662f\u8fc1\u79fb\u7684\u793a\u4f8b\uff1a // accompanist-coil Image ( painter = rememberCoilPainter ( request = \"https://www.example.com/image.jpg\" , requestBuilder = { transformations ( CircleCropTransformation ()) }, shouldRefetchOnSizeChange = ShouldRefetchOnSizeChange { _ , _ -> true }, fadeIn = true , previewPlaceholder = R . drawable . placeholder ), contentDescription = null , modifier = Modifier . size ( 128. dp ) ) // coil-compose Image ( painter = rememberImagePainter ( data = \"https://www.example.com/image.jpg\" , onExecute = ExecuteCallback { _ , _ -> true }, builder = { crossfade ( true ) placeholder ( R . drawable . placeholder ) transformations ( CircleCropTransformation ()) } ), contentDescription = null , modifier = Modifier . size ( 128. dp ) )","title":"\u4ece Accompanist \u8fc1\u79fb"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/","text":"\u524d\u8a00 \u4e0b\u62c9\u5237\u65b0\u662f\u6211\u4eec\u5f00\u53d1\u4e2d\u7684\u5e38\u89c1\u7684\u9700\u6c42\uff0c\u5b98\u65b9\u63d0\u4f9b\u4e86 SwipeRefreshLayout \u6765\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\uff0c\u4f46\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5b9a\u5236 Header \u6216\u8005 Header \u4e0e\u5185\u5bb9\u4e00\u8d77\u5411\u4e0b\u6eda\u52a8\uff0c\u56e0\u6b64 SwipeRefreshLayout \u5f80\u5f80\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42 \u5728\u4f7f\u7528 XML \u5f00\u53d1\u65f6, Github \u4e0a\u6709\u4e0d\u5c11\u5f00\u6e90\u5e93\u5982 SmartRefreshLayout \u5b9e\u73b0\u4e86\u4e0b\u62c9\u5237\u65b0\u529f\u80fd\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9a\u5236\u5316 Header \u4e0e\u6eda\u52a8\u65b9\u5f0f \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 Compose \u7248 SmartRefreshLayout ,\u5feb\u901f\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\u529f\u80fd\uff0c\u5982\u679c\u5bf9\u60a8\u6709\u6240\u5e2e\u52a9\u53ef\u4ee5\u70b9\u4e2a Star : Compose\u7248SmartRefreshLayout \u6548\u679c\u56fe \u6211\u4eec\u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe \u57fa\u672c\u4f7f\u7528 \u81ea\u5b9a\u4e49Header Lottie Header FixedBehind(\u56fa\u5b9a\u5728\u80cc\u540e) FixedFront(\u56fa\u5b9a\u5728\u524d\u9762) FixedContent(\u5185\u5bb9\u56fa\u5b9a) \u7279\u6027 \u63a5\u5165\u65b9\u4fbf\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u5feb\u901f\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\u529f\u80fd \u652f\u6301\u81ea\u5b9a\u4e49 Header , Header \u53ef\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5e76\u66f4\u65b0 UI \u81ea\u5b9a\u4e49 Header \u652f\u6301 Lottie ,\u5e76\u652f\u6301\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5f00\u59cb\u4e0e\u6682\u505c\u52a8\u753b \u652f\u6301\u81ea\u5b9a\u4e49 Translate , FixedBehind , FixedFront , FixedContent \u7b49\u6eda\u52a8\u65b9\u5f0f \u652f\u6301\u4e0e Paging \u7ed3\u5408\u5b9e\u73b0\u4e0a\u6ed1\u52a0\u8f7d\u66f4\u591a\u529f\u80fd \u4f7f\u7528 \u63a5\u5165 \u7b2c 1 \u6b65:\u5728\u5de5\u7a0b\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a allprojects { repositories { ... mavenCentral () } } \u7b2c2\u6b65\uff1a\u5728\u5e94\u7528\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a dependencies { implementation 'io.github.shenzhen2017:compose-refreshlayout:1.0.0' } \u7b80\u5355\u4f7f\u7528 SwipeRefreshLayout \u51fd\u6570\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u53c2\u6570: 1. isRefreshing : \u662f\u5426\u6b63\u5728\u5237\u65b0 2. onRefresh : \u89e6\u53d1\u5237\u65b0\u56de\u8c03 3. modifier : \u6837\u5f0f\u4fee\u9970\u7b26 4. swipeStyle : \u4e0b\u62c9\u5237\u65b0\u65b9\u5f0f 5. swipeEnabled : \u662f\u5426\u5141\u8bb8\u4e0b\u62c9\u5237\u65b0 6. refreshTriggerRate : \u5237\u65b0\u751f\u6548\u9ad8\u5ea6\u4e0e indicator \u9ad8\u5ea6\u7684\u6bd4\u4f8b 7. maxDragRate : \u6700\u5927\u5237\u65b0\u8ddd\u79bb\u4e0e indicator \u9ad8\u5ea6\u7684\u6bd4\u4f8b 8. indicator : \u81ea\u5b9a\u4e49\u7684 indicator ,\u6709\u9ed8\u8ba4\u503c \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f20\u5165 isRefreshing (\u662f\u5426\u6b63\u5728\u5237\u65b0)\u4e0e onRefresh \u89e6\u53d1\u5237\u65b0\u56de\u8c03\u4e24\u4e2a\u53c2\u6570\u5373\u53ef @Composable fun BasicSample () { var refreshing by remember { mutableStateOf ( false ) } LaunchedEffect ( refreshing ) { if ( refreshing ) { delay ( 2000 ) refreshing = false } } SwipeRefreshLayout ( isRefreshing = refreshing , onRefresh = { refreshing = true }) { //... } } \u5982\u4e0a\u6240\u793a:\u5728\u89e6\u53d1\u5237\u65b0\u56de\u8c03\u65f6\u5c06 refreshing \u8bbe\u7f6e\u4e3a true ,\u5e76\u5728\u5237\u65b0\u5b8c\u6210\u540e\u8bbe\u7f6e\u4e3a false \u5373\u53ef\u5b9e\u73b0\u7b80\u5355\u7684\u4e0b\u62c9\u5237\u65b0\u529f\u80fd \u81ea\u5b9a\u4e49 Header SwipeRefreshLayout \u652f\u6301\u4f20\u5165\u81ea\u5b9a\u4e49\u7684 Header \uff0c\u5982\u4e0b\u6240\u793a\uff1a @Composable fun CustomHeaderSample () { var refreshing by remember { mutableStateOf ( false ) } LaunchedEffect ( refreshing ) { if ( refreshing ) { delay ( 2000 ) refreshing = false } } SwipeRefreshLayout ( isRefreshing = refreshing , onRefresh = { refreshing = true }, indicator = { BallRefreshHeader ( state = it ) }) { //... } } \u5982\u4e0a\u6240\u793a\uff1a BallRefreshHeader \u5373\u4e3a\u81ea\u5b9a\u4e49\u7684 Header , Header \u4e2d\u4f1a\u4f20\u5165 SwipeRefreshState \uff0c\u6211\u4eec\u901a\u8fc7 SwipeRefreshState \u53ef\u83b7\u5f97\u4ee5\u4e0b\u53c2\u6570 1. isRefreshing : \u662f\u5426\u6b63\u5728\u5237\u65b0 2. isSwipeInProgress : \u662f\u5426\u6b63\u5728\u6eda\u52a8 3. maxDrag : \u6700\u5927\u4e0b\u62c9\u8ddd\u79bb 4. refreshTrigger : \u5237\u65b0\u89e6\u53d1\u8ddd\u79bb 5. headerState : \u5237\u65b0\u72b6\u6001\uff0c\u5305\u62ec PullDownToRefresh , Refreshing , ReleaseToRefresh \u4e09\u4e2a\u72b6\u6001 6. indicatorOffset : Header \u504f\u79fb\u91cf \u8fd9\u4e9b\u53c2\u6570\u90fd\u662f MutableState \u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u8fd9\u4e9b\u53c2\u6570\u7684\u53d8\u5316\u4ee5\u5b9e\u73b0 Header UI \u7684\u66f4\u65b0 \u81ea\u5b9a\u4e49 Lottile Header Compose \u76ee\u524d\u5df2\u652f\u6301 Lottie \uff0c\u6211\u4eec\u63a5\u5165 Lottie \u4f9d\u8d56\u540e\uff0c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0\u4e00\u4e2a Lottie Header \uff0c\u5e76\u4e14\u5728\u6b63\u5728\u5237\u65b0\u65f6\u64ad\u653e\u52a8\u753b\uff0c\u5176\u5b83\u65f6\u95f4\u6682\u505c\u52a8\u753b\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a @Composable fun LottieHeaderOne ( state : SwipeRefreshState ) { var isPlaying by remember { mutableStateOf ( false ) } val speed by remember { mutableStateOf ( 1f ) } isPlaying = state . isRefreshing val lottieComposition by rememberLottieComposition ( spec = LottieCompositionSpec . RawRes ( R . raw . refresh_one ), ) val lottieAnimationState by animateLottieCompositionAsState ( composition = lottieComposition , // \u52a8\u753b\u8d44\u6e90\u53e5\u67c4 iterations = LottieConstants . IterateForever , // \u8fed\u4ee3\u6b21\u6570 isPlaying = isPlaying , // \u52a8\u753b\u64ad\u653e\u72b6\u6001 speed = speed , // \u52a8\u753b\u901f\u5ea6\u72b6\u6001 restartOnPlay = false // \u6682\u505c\u540e\u91cd\u65b0\u64ad\u653e\u662f\u5426\u4ece\u5934\u5f00\u59cb ) Box ( modifier = Modifier . fillMaxWidth () . wrapContentHeight (), contentAlignment = Alignment . Center ) { LottieAnimation ( lottieComposition , lottieAnimationState , modifier = Modifier . size ( 150. dp ) ) } } \u81ea\u5b9a\u4e49\u4e0b\u6ed1\u65b9\u5f0f SwipeRefreshLayout \u652f\u6301\u4ee5\u4e0b4\u79cd\u4e0b\u6ed1\u65b9\u5f0f enum class SwipeRefreshStyle { Translate , //\u5e73\u79fb\uff0c\u5373\u5185\u5bb9\u4e0eHeader\u4e00\u8d77\u5411\u4e0b\u6ed1\u52a8\uff0cTranslate\u4e3a\u9ed8\u8ba4\u6837\u5f0f FixedBehind , //\u56fa\u5b9a\u5728\u80cc\u540e\uff0c\u5373\u5185\u5bb9\u5411\u4e0b\u6ed1\u52a8\uff0cHeader\u4e0d\u52a8 FixedFront , //\u56fa\u5b9a\u5728\u524d\u9762, \u5373Header\u56fa\u5b9a\u5728\u524d\uff0cHeader\u4e0eContent\u90fd\u4e0d\u6ed1\u52a8 FixedContent //\u5185\u5bb9\u56fa\u5b9a,Header\u5411\u4e0b\u6ed1\u52a8,\u5373\u5b98\u65b9\u6837\u5f0f } \u5982\u4e0a\u6240\u793a\uff0c\u5176\u4e2d\u9ed8\u8ba4\u65b9\u5f0f\u4e3a Translate ,\u5373\u5185\u5bb9\u4e0e Header \u4e00\u8d77\u5411\u4e0b\u6ed1\u52a8 \u5404\u4f4d\u53ef\u6839\u636e\u9700\u6c42\u9009\u62e9\u76f8\u5e94\u7684\u4e0b\u6ed1\u65b9\u5f0f\uff0c\u6bd4\u5982\u8981\u5b9e\u73b0\u7c7b\u4f3c\u5b98\u65b9\u7684\u4e0b\u6ed1\u6548\u679c\uff0c\u5373\u53ef\u4f7f\u7528 FixedContent \u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a \u5728 Compose \u4e2d\uff0c\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\u76f4\u63a5\u4f7f\u7528 Paging3 \u770b\u8d77\u6765\u5df2\u7ecf\u8db3\u591f\u7528\u4e86\uff0c\u56e0\u6b64\u672c\u5e93\u6ca1\u6709\u5b9e\u73b0\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\u76f8\u5173\u529f\u80fd \u56e0\u6b64\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\uff0c\u53ef\u81ea\u884c\u7ed3\u5408 Paging3 \u4f7f\u7528 \u4e3b\u8981\u539f\u7406 \u4e0b\u62c9\u5237\u65b0\u529f\u80fd\uff0c\u5176\u5b9e\u4e3b\u8981\u662f\u5d4c\u5957\u6eda\u52a8\u7684\u95ee\u9898,\u6211\u4eec\u5c06 Header \u4e0e Content \u653e\u5230\u4e00\u4e2a\u7236\u5e03\u5c40\u4e2d\u7edf\u4e00\u7ba1\u7406\uff0c\u7136\u540e\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b 1. \u5f53\u6211\u4eec\u7684\u624b\u6307\u5411\u4e0b\u6eda\u52a8\u65f6\uff0c\u9996\u5148\u4ea4\u7531 Content \u5904\u7406\uff0c\u5982\u679c Content \u6eda\u52a8\u5230\u9876\u90e8\u4e86\uff0c\u518d\u4ea4\u7531\u7236\u5e03\u5c40\u5904\u7406\uff0c\u7136\u540e\u7236\u5e03\u5c40\u6839\u636e\u624b\u52bf\u8fdb\u884c\u4e00\u5b9a\u7684\u504f\u79fb,\u589e\u52a0 offset 2. \u5f53\u6211\u4eec\u677e\u624b\u65f6\uff0c\u5224\u65ad\u504f\u79fb\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u5927\u4e8e\u5237\u65b0\u89e6\u53d1\u8ddd\u79bb\u5219\u89e6\u53d1\u5237\u65b0\uff0c\u5426\u5219\u56de\u5f39\u5230\u9876\u90e8( offset \u7f6e\u4e3a0) 3. \u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6eda\u52a8\u65f6\uff0c\u9996\u5148\u4ea4\u7531\u7236\u5e03\u5c40\u5904\u7406\uff0c\u5982\u679c\u7236\u5e03\u5c40\u7684 offset >0\u5219\u7531\u7236\u5e03\u5c40\u5904\u7406\uff0c\u51cf\u5c11 offset \uff0c\u5426\u5219\u5219\u7531 Content \u6d88\u8d39\u624b\u52bf NestedScrollConnection \u4ecb\u7ecd \u4e3a\u4e86\u5b9e\u73b0\u4e0a\u9762\u8bf4\u7684\u9700\u6c42\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6eda\u52a8\u8fdb\u884c\u62e6\u622a\uff0c Compose \u63d0\u4f9b\u4e86 NestedScrollConnection \u6765\u5b9e\u73b0\u5d4c\u5957\u6eda\u52a8 interface NestedScrollConnection { fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset = Offset . Zero fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset = Offset . Zero suspend fun onPreFling ( available : Velocity ): Velocity = Velocity . Zero suspend fun onPostFling ( consumed : Velocity , available : Velocity ) = return Velocity . Zero } \u5982\u4e0a\u6240\u793a\uff0c NestedScrollConnection \u4e3b\u8981\u63d0\u4f9b\u4e864\u4e2a\u63a5\u53e3 1. onPreScroll : \u5148\u62e6\u622a\u6ed1\u52a8\u4e8b\u4ef6\uff0c\u6d88\u8d39\u540e\u518d\u4ea4\u7ed9\u5b50\u5e03\u5c40 2. onPostScroll : \u5b50\u5e03\u5c40\u5904\u7406\u5b8c\u6ed1\u52a8\u4e8b\u4ef6\u540e\u518d\u4ea4\u7ed9\u7236\u5e03\u5c40\uff0c\u53ef\u83b7\u53d6\u5f53\u524d\u8fd8\u5269\u4e0b\u591a\u5c11\u53ef\u7528\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf 3. onPreFling : Fling \u5f00\u59cb\u524d\u56de\u8c03 4. onPostFling : Fling \u5b8c\u6210\u540e\u56de\u8c03 Fling \u542b\u4e49\uff1a\u5f53\u6211\u4eec\u624b\u6307\u5728\u6ed1\u52a8\u5217\u8868\u65f6\uff0c\u5982\u679c\u662f\u5feb\u901f\u6ed1\u52a8\u5e76\u62ac\u8d77\uff0c\u5219\u5217\u8868\u4f1a\u6839\u636e\u60ef\u6027\u7ee7\u7eed\u98d8\u4e00\u6bb5\u8ddd\u79bb\u540e\u505c\u4e0b\uff0c\u8fd9\u4e2a\u884c\u4e3a\u5c31\u662f Fling \uff0c onPreFling \u5728\u4f60\u624b\u6307\u521a\u62ac\u8d77\u65f6\u4fbf\u4f1a\u56de\u8c03\uff0c\u800c onPostFling \u4f1a\u5728\u98d8\u4e00\u6bb5\u8ddd\u79bb\u505c\u4e0b\u540e\u56de\u8c03\u3002 \u5177\u4f53\u5b9e\u73b0 \u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u603b\u4f53\u601d\u8def\u4e0e NestedScrollConnection API \uff0c\u7136\u540e\u6211\u4eec\u5e94\u8be5\u9700\u8981\u91cd\u5199\u4ee5\u4e0b\u65b9\u6cd5 1. onPostScroll : \u5f53 Content \u6ed1\u52a8\u5230\u9876\u90e8\u65f6\uff0c\u5982\u679c\u7ee7\u7eed\u5f80\u4e0a\u6ed1\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u589e\u52a0\u7236\u5e03\u5c40\u7684 offset ,\u56e0\u6b64\u5728 onPostScroll \u4e2d\u5224\u65ad available.y > 0 \uff0c\u7136\u540e\u8fdb\u884c\u76f8\u5e94\u7684\u504f\u79fb,\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u4e2a\u5408\u9002\u7684\u65f6\u673a 2. onPreScroll : \u5f53\u6211\u4eec\u4e0a\u6ed1\u65f6\uff0c\u5982\u679c offset>0 ,\u5219\u8bf4\u660e\u7236\u5e03\u5c40\u6709\u504f\u79fb\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u5148\u51cf\u5c0f\u7236\u5e03\u5c40\u7684 offset \u76f4\u52300,\u7136\u540e\u5c06\u5269\u4f59\u7684\u504f\u79fb\u91cf\u4f20\u9012\u7ed9 Content \uff0c\u56e0\u6b64\u4e0b\u6ed1\u65f6\u5e94\u8be5\u4f7f\u7528 onPreScroll \u62e6\u622a\u5224\u65ad 3. onPreFling : \u5f53\u6211\u4eec\u677e\u5f00\u624b\u65f6\uff0c\u5e94\u5224\u65ad\u5f53\u524d\u7684\u504f\u79fb\u91cf\u662f\u5426\u5927\u4e8e\u5237\u65b0\u89e6\u53d1\u8ddd\u79bb\uff0c\u5982\u679c\u5927\u4e8e\u5219\u89e6\u53d1\u5237\u65b0\uff0c\u5426\u5219\u7236\u5e03\u5c40\u7684 offset \u7f6e\u4e3a 0,\u8fd9\u4e2a\u5224\u65ad\u5728 onPreFling \u65f6\u505a\u6bd4\u8f83\u5408\u9002 \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a internal class SwipeRefreshNestedScrollConnection () : NestedScrollConnection { override fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset = when { // \u5982\u679c\u7528\u6237\u6b63\u5728\u4e0a\u6ed1\uff0c\u9700\u8981\u5728\u8fd9\u91cc\u62e6\u622a\u5904\u7406 source == NestedScrollSource . Drag && available . y < 0 -> onScroll ( available ) else -> Offset . Zero } override fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset = when { // \u5982\u679c\u7528\u6237\u6b63\u5728\u4e0b\u62c9\uff0c\u5728\u8fd9\u91cc\u5904\u7406\u5269\u4f59\u7684\u504f\u79fb\u91cf source == NestedScrollSource . Drag && available . y > 0 -> onScroll ( available ) else -> Offset . Zero } override suspend fun onPreFling ( available : Velocity ): Velocity { //\u5982\u679c\u504f\u79fb\u91cf\u5927\u4e8e\u5237\u65b0\u89e6\u53d1\u8ddd\u79bb\uff0c\u5219\u89e6\u53d1\u5237\u65b0 if ( ! state . isRefreshing && state . indicatorOffset >= refreshTrigger ) { onRefresh () } //\u4e0d\u6d88\u8d39\u901f\u5ea6\uff0c\u76f4\u63a5\u8fd4\u56de0 return Velocity . Zero } } \u603b\u7ed3 \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u53ca\u5b9e\u73b0\u4e00\u4e2a Compose \u7248\u7684 SmartRefreshLayout \uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u6027: 1. \u63a5\u5165\u65b9\u4fbf\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u5feb\u901f\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\u529f\u80fd 2. \u652f\u6301\u81ea\u5b9a\u4e49 Header , Header \u53ef\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5e76\u66f4\u65b0 UI 3. \u81ea\u5b9a\u4e49 Header \u652f\u6301 Lottie ,\u5e76\u652f\u6301\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5f00\u59cb\u4e0e\u6682\u505c\u52a8\u753b 4. \u652f\u6301\u81ea\u5b9a\u4e49 Translate , FixedBehind , FixedFront , FixedContent \u7b49\u6eda\u52a8\u65b9\u5f0f 5. \u652f\u6301\u4e0e Paging \u7ed3\u5408\u5b9e\u73b0\u4e0a\u6ed1\u52a0\u8f7d\u66f4\u591a\u529f\u80fd \u9879\u76ee\u5730\u5740 Compose\u7248SmartRefreshLayout \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~","title":"Compose\u7248SmartRefreshLayout"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_1","text":"\u4e0b\u62c9\u5237\u65b0\u662f\u6211\u4eec\u5f00\u53d1\u4e2d\u7684\u5e38\u89c1\u7684\u9700\u6c42\uff0c\u5b98\u65b9\u63d0\u4f9b\u4e86 SwipeRefreshLayout \u6765\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\uff0c\u4f46\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5b9a\u5236 Header \u6216\u8005 Header \u4e0e\u5185\u5bb9\u4e00\u8d77\u5411\u4e0b\u6eda\u52a8\uff0c\u56e0\u6b64 SwipeRefreshLayout \u5f80\u5f80\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42 \u5728\u4f7f\u7528 XML \u5f00\u53d1\u65f6, Github \u4e0a\u6709\u4e0d\u5c11\u5f00\u6e90\u5e93\u5982 SmartRefreshLayout \u5b9e\u73b0\u4e86\u4e0b\u62c9\u5237\u65b0\u529f\u80fd\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9a\u5236\u5316 Header \u4e0e\u6eda\u52a8\u65b9\u5f0f \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 Compose \u7248 SmartRefreshLayout ,\u5feb\u901f\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\u529f\u80fd\uff0c\u5982\u679c\u5bf9\u60a8\u6709\u6240\u5e2e\u52a9\u53ef\u4ee5\u70b9\u4e2a Star : Compose\u7248SmartRefreshLayout","title":"\u524d\u8a00"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_2","text":"\u6211\u4eec\u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe \u57fa\u672c\u4f7f\u7528 \u81ea\u5b9a\u4e49Header Lottie Header FixedBehind(\u56fa\u5b9a\u5728\u80cc\u540e) FixedFront(\u56fa\u5b9a\u5728\u524d\u9762) FixedContent(\u5185\u5bb9\u56fa\u5b9a)","title":"\u6548\u679c\u56fe"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_3","text":"\u63a5\u5165\u65b9\u4fbf\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u5feb\u901f\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\u529f\u80fd \u652f\u6301\u81ea\u5b9a\u4e49 Header , Header \u53ef\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5e76\u66f4\u65b0 UI \u81ea\u5b9a\u4e49 Header \u652f\u6301 Lottie ,\u5e76\u652f\u6301\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5f00\u59cb\u4e0e\u6682\u505c\u52a8\u753b \u652f\u6301\u81ea\u5b9a\u4e49 Translate , FixedBehind , FixedFront , FixedContent \u7b49\u6eda\u52a8\u65b9\u5f0f \u652f\u6301\u4e0e Paging \u7ed3\u5408\u5b9e\u73b0\u4e0a\u6ed1\u52a0\u8f7d\u66f4\u591a\u529f\u80fd","title":"\u7279\u6027"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_4","text":"","title":"\u4f7f\u7528"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_5","text":"\u7b2c 1 \u6b65:\u5728\u5de5\u7a0b\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a allprojects { repositories { ... mavenCentral () } } \u7b2c2\u6b65\uff1a\u5728\u5e94\u7528\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a dependencies { implementation 'io.github.shenzhen2017:compose-refreshlayout:1.0.0' }","title":"\u63a5\u5165"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_6","text":"SwipeRefreshLayout \u51fd\u6570\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u53c2\u6570: 1. isRefreshing : \u662f\u5426\u6b63\u5728\u5237\u65b0 2. onRefresh : \u89e6\u53d1\u5237\u65b0\u56de\u8c03 3. modifier : \u6837\u5f0f\u4fee\u9970\u7b26 4. swipeStyle : \u4e0b\u62c9\u5237\u65b0\u65b9\u5f0f 5. swipeEnabled : \u662f\u5426\u5141\u8bb8\u4e0b\u62c9\u5237\u65b0 6. refreshTriggerRate : \u5237\u65b0\u751f\u6548\u9ad8\u5ea6\u4e0e indicator \u9ad8\u5ea6\u7684\u6bd4\u4f8b 7. maxDragRate : \u6700\u5927\u5237\u65b0\u8ddd\u79bb\u4e0e indicator \u9ad8\u5ea6\u7684\u6bd4\u4f8b 8. indicator : \u81ea\u5b9a\u4e49\u7684 indicator ,\u6709\u9ed8\u8ba4\u503c \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f20\u5165 isRefreshing (\u662f\u5426\u6b63\u5728\u5237\u65b0)\u4e0e onRefresh \u89e6\u53d1\u5237\u65b0\u56de\u8c03\u4e24\u4e2a\u53c2\u6570\u5373\u53ef @Composable fun BasicSample () { var refreshing by remember { mutableStateOf ( false ) } LaunchedEffect ( refreshing ) { if ( refreshing ) { delay ( 2000 ) refreshing = false } } SwipeRefreshLayout ( isRefreshing = refreshing , onRefresh = { refreshing = true }) { //... } } \u5982\u4e0a\u6240\u793a:\u5728\u89e6\u53d1\u5237\u65b0\u56de\u8c03\u65f6\u5c06 refreshing \u8bbe\u7f6e\u4e3a true ,\u5e76\u5728\u5237\u65b0\u5b8c\u6210\u540e\u8bbe\u7f6e\u4e3a false \u5373\u53ef\u5b9e\u73b0\u7b80\u5355\u7684\u4e0b\u62c9\u5237\u65b0\u529f\u80fd","title":"\u7b80\u5355\u4f7f\u7528"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#header","text":"SwipeRefreshLayout \u652f\u6301\u4f20\u5165\u81ea\u5b9a\u4e49\u7684 Header \uff0c\u5982\u4e0b\u6240\u793a\uff1a @Composable fun CustomHeaderSample () { var refreshing by remember { mutableStateOf ( false ) } LaunchedEffect ( refreshing ) { if ( refreshing ) { delay ( 2000 ) refreshing = false } } SwipeRefreshLayout ( isRefreshing = refreshing , onRefresh = { refreshing = true }, indicator = { BallRefreshHeader ( state = it ) }) { //... } } \u5982\u4e0a\u6240\u793a\uff1a BallRefreshHeader \u5373\u4e3a\u81ea\u5b9a\u4e49\u7684 Header , Header \u4e2d\u4f1a\u4f20\u5165 SwipeRefreshState \uff0c\u6211\u4eec\u901a\u8fc7 SwipeRefreshState \u53ef\u83b7\u5f97\u4ee5\u4e0b\u53c2\u6570 1. isRefreshing : \u662f\u5426\u6b63\u5728\u5237\u65b0 2. isSwipeInProgress : \u662f\u5426\u6b63\u5728\u6eda\u52a8 3. maxDrag : \u6700\u5927\u4e0b\u62c9\u8ddd\u79bb 4. refreshTrigger : \u5237\u65b0\u89e6\u53d1\u8ddd\u79bb 5. headerState : \u5237\u65b0\u72b6\u6001\uff0c\u5305\u62ec PullDownToRefresh , Refreshing , ReleaseToRefresh \u4e09\u4e2a\u72b6\u6001 6. indicatorOffset : Header \u504f\u79fb\u91cf \u8fd9\u4e9b\u53c2\u6570\u90fd\u662f MutableState \u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u8fd9\u4e9b\u53c2\u6570\u7684\u53d8\u5316\u4ee5\u5b9e\u73b0 Header UI \u7684\u66f4\u65b0","title":"\u81ea\u5b9a\u4e49 Header"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#lottile-header","text":"Compose \u76ee\u524d\u5df2\u652f\u6301 Lottie \uff0c\u6211\u4eec\u63a5\u5165 Lottie \u4f9d\u8d56\u540e\uff0c\u5c31\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0\u4e00\u4e2a Lottie Header \uff0c\u5e76\u4e14\u5728\u6b63\u5728\u5237\u65b0\u65f6\u64ad\u653e\u52a8\u753b\uff0c\u5176\u5b83\u65f6\u95f4\u6682\u505c\u52a8\u753b\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a @Composable fun LottieHeaderOne ( state : SwipeRefreshState ) { var isPlaying by remember { mutableStateOf ( false ) } val speed by remember { mutableStateOf ( 1f ) } isPlaying = state . isRefreshing val lottieComposition by rememberLottieComposition ( spec = LottieCompositionSpec . RawRes ( R . raw . refresh_one ), ) val lottieAnimationState by animateLottieCompositionAsState ( composition = lottieComposition , // \u52a8\u753b\u8d44\u6e90\u53e5\u67c4 iterations = LottieConstants . IterateForever , // \u8fed\u4ee3\u6b21\u6570 isPlaying = isPlaying , // \u52a8\u753b\u64ad\u653e\u72b6\u6001 speed = speed , // \u52a8\u753b\u901f\u5ea6\u72b6\u6001 restartOnPlay = false // \u6682\u505c\u540e\u91cd\u65b0\u64ad\u653e\u662f\u5426\u4ece\u5934\u5f00\u59cb ) Box ( modifier = Modifier . fillMaxWidth () . wrapContentHeight (), contentAlignment = Alignment . Center ) { LottieAnimation ( lottieComposition , lottieAnimationState , modifier = Modifier . size ( 150. dp ) ) } }","title":"\u81ea\u5b9a\u4e49 Lottile Header"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_7","text":"SwipeRefreshLayout \u652f\u6301\u4ee5\u4e0b4\u79cd\u4e0b\u6ed1\u65b9\u5f0f enum class SwipeRefreshStyle { Translate , //\u5e73\u79fb\uff0c\u5373\u5185\u5bb9\u4e0eHeader\u4e00\u8d77\u5411\u4e0b\u6ed1\u52a8\uff0cTranslate\u4e3a\u9ed8\u8ba4\u6837\u5f0f FixedBehind , //\u56fa\u5b9a\u5728\u80cc\u540e\uff0c\u5373\u5185\u5bb9\u5411\u4e0b\u6ed1\u52a8\uff0cHeader\u4e0d\u52a8 FixedFront , //\u56fa\u5b9a\u5728\u524d\u9762, \u5373Header\u56fa\u5b9a\u5728\u524d\uff0cHeader\u4e0eContent\u90fd\u4e0d\u6ed1\u52a8 FixedContent //\u5185\u5bb9\u56fa\u5b9a,Header\u5411\u4e0b\u6ed1\u52a8,\u5373\u5b98\u65b9\u6837\u5f0f } \u5982\u4e0a\u6240\u793a\uff0c\u5176\u4e2d\u9ed8\u8ba4\u65b9\u5f0f\u4e3a Translate ,\u5373\u5185\u5bb9\u4e0e Header \u4e00\u8d77\u5411\u4e0b\u6ed1\u52a8 \u5404\u4f4d\u53ef\u6839\u636e\u9700\u6c42\u9009\u62e9\u76f8\u5e94\u7684\u4e0b\u6ed1\u65b9\u5f0f\uff0c\u6bd4\u5982\u8981\u5b9e\u73b0\u7c7b\u4f3c\u5b98\u65b9\u7684\u4e0b\u6ed1\u6548\u679c\uff0c\u5373\u53ef\u4f7f\u7528 FixedContent","title":"\u81ea\u5b9a\u4e49\u4e0b\u6ed1\u65b9\u5f0f"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_8","text":"\u5728 Compose \u4e2d\uff0c\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\u76f4\u63a5\u4f7f\u7528 Paging3 \u770b\u8d77\u6765\u5df2\u7ecf\u8db3\u591f\u7528\u4e86\uff0c\u56e0\u6b64\u672c\u5e93\u6ca1\u6709\u5b9e\u73b0\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\u76f8\u5173\u529f\u80fd \u56e0\u6b64\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a\uff0c\u53ef\u81ea\u884c\u7ed3\u5408 Paging3 \u4f7f\u7528","title":"\u4e0a\u62c9\u52a0\u8f7d\u66f4\u591a"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_9","text":"\u4e0b\u62c9\u5237\u65b0\u529f\u80fd\uff0c\u5176\u5b9e\u4e3b\u8981\u662f\u5d4c\u5957\u6eda\u52a8\u7684\u95ee\u9898,\u6211\u4eec\u5c06 Header \u4e0e Content \u653e\u5230\u4e00\u4e2a\u7236\u5e03\u5c40\u4e2d\u7edf\u4e00\u7ba1\u7406\uff0c\u7136\u540e\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b 1. \u5f53\u6211\u4eec\u7684\u624b\u6307\u5411\u4e0b\u6eda\u52a8\u65f6\uff0c\u9996\u5148\u4ea4\u7531 Content \u5904\u7406\uff0c\u5982\u679c Content \u6eda\u52a8\u5230\u9876\u90e8\u4e86\uff0c\u518d\u4ea4\u7531\u7236\u5e03\u5c40\u5904\u7406\uff0c\u7136\u540e\u7236\u5e03\u5c40\u6839\u636e\u624b\u52bf\u8fdb\u884c\u4e00\u5b9a\u7684\u504f\u79fb,\u589e\u52a0 offset 2. \u5f53\u6211\u4eec\u677e\u624b\u65f6\uff0c\u5224\u65ad\u504f\u79fb\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u5927\u4e8e\u5237\u65b0\u89e6\u53d1\u8ddd\u79bb\u5219\u89e6\u53d1\u5237\u65b0\uff0c\u5426\u5219\u56de\u5f39\u5230\u9876\u90e8( offset \u7f6e\u4e3a0) 3. \u5f53\u6211\u4eec\u624b\u6307\u5411\u4e0a\u6eda\u52a8\u65f6\uff0c\u9996\u5148\u4ea4\u7531\u7236\u5e03\u5c40\u5904\u7406\uff0c\u5982\u679c\u7236\u5e03\u5c40\u7684 offset >0\u5219\u7531\u7236\u5e03\u5c40\u5904\u7406\uff0c\u51cf\u5c11 offset \uff0c\u5426\u5219\u5219\u7531 Content \u6d88\u8d39\u624b\u52bf","title":"\u4e3b\u8981\u539f\u7406"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#nestedscrollconnection","text":"\u4e3a\u4e86\u5b9e\u73b0\u4e0a\u9762\u8bf4\u7684\u9700\u6c42\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6eda\u52a8\u8fdb\u884c\u62e6\u622a\uff0c Compose \u63d0\u4f9b\u4e86 NestedScrollConnection \u6765\u5b9e\u73b0\u5d4c\u5957\u6eda\u52a8 interface NestedScrollConnection { fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset = Offset . Zero fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset = Offset . Zero suspend fun onPreFling ( available : Velocity ): Velocity = Velocity . Zero suspend fun onPostFling ( consumed : Velocity , available : Velocity ) = return Velocity . Zero } \u5982\u4e0a\u6240\u793a\uff0c NestedScrollConnection \u4e3b\u8981\u63d0\u4f9b\u4e864\u4e2a\u63a5\u53e3 1. onPreScroll : \u5148\u62e6\u622a\u6ed1\u52a8\u4e8b\u4ef6\uff0c\u6d88\u8d39\u540e\u518d\u4ea4\u7ed9\u5b50\u5e03\u5c40 2. onPostScroll : \u5b50\u5e03\u5c40\u5904\u7406\u5b8c\u6ed1\u52a8\u4e8b\u4ef6\u540e\u518d\u4ea4\u7ed9\u7236\u5e03\u5c40\uff0c\u53ef\u83b7\u53d6\u5f53\u524d\u8fd8\u5269\u4e0b\u591a\u5c11\u53ef\u7528\u7684\u6ed1\u52a8\u4e8b\u4ef6\u504f\u79fb\u91cf 3. onPreFling : Fling \u5f00\u59cb\u524d\u56de\u8c03 4. onPostFling : Fling \u5b8c\u6210\u540e\u56de\u8c03 Fling \u542b\u4e49\uff1a\u5f53\u6211\u4eec\u624b\u6307\u5728\u6ed1\u52a8\u5217\u8868\u65f6\uff0c\u5982\u679c\u662f\u5feb\u901f\u6ed1\u52a8\u5e76\u62ac\u8d77\uff0c\u5219\u5217\u8868\u4f1a\u6839\u636e\u60ef\u6027\u7ee7\u7eed\u98d8\u4e00\u6bb5\u8ddd\u79bb\u540e\u505c\u4e0b\uff0c\u8fd9\u4e2a\u884c\u4e3a\u5c31\u662f Fling \uff0c onPreFling \u5728\u4f60\u624b\u6307\u521a\u62ac\u8d77\u65f6\u4fbf\u4f1a\u56de\u8c03\uff0c\u800c onPostFling \u4f1a\u5728\u98d8\u4e00\u6bb5\u8ddd\u79bb\u505c\u4e0b\u540e\u56de\u8c03\u3002","title":"NestedScrollConnection \u4ecb\u7ecd"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_10","text":"\u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u603b\u4f53\u601d\u8def\u4e0e NestedScrollConnection API \uff0c\u7136\u540e\u6211\u4eec\u5e94\u8be5\u9700\u8981\u91cd\u5199\u4ee5\u4e0b\u65b9\u6cd5 1. onPostScroll : \u5f53 Content \u6ed1\u52a8\u5230\u9876\u90e8\u65f6\uff0c\u5982\u679c\u7ee7\u7eed\u5f80\u4e0a\u6ed1\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u589e\u52a0\u7236\u5e03\u5c40\u7684 offset ,\u56e0\u6b64\u5728 onPostScroll \u4e2d\u5224\u65ad available.y > 0 \uff0c\u7136\u540e\u8fdb\u884c\u76f8\u5e94\u7684\u504f\u79fb,\u5bf9\u6211\u4eec\u6765\u8bf4\u662f\u4e2a\u5408\u9002\u7684\u65f6\u673a 2. onPreScroll : \u5f53\u6211\u4eec\u4e0a\u6ed1\u65f6\uff0c\u5982\u679c offset>0 ,\u5219\u8bf4\u660e\u7236\u5e03\u5c40\u6709\u504f\u79fb\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u5148\u51cf\u5c0f\u7236\u5e03\u5c40\u7684 offset \u76f4\u52300,\u7136\u540e\u5c06\u5269\u4f59\u7684\u504f\u79fb\u91cf\u4f20\u9012\u7ed9 Content \uff0c\u56e0\u6b64\u4e0b\u6ed1\u65f6\u5e94\u8be5\u4f7f\u7528 onPreScroll \u62e6\u622a\u5224\u65ad 3. onPreFling : \u5f53\u6211\u4eec\u677e\u5f00\u624b\u65f6\uff0c\u5e94\u5224\u65ad\u5f53\u524d\u7684\u504f\u79fb\u91cf\u662f\u5426\u5927\u4e8e\u5237\u65b0\u89e6\u53d1\u8ddd\u79bb\uff0c\u5982\u679c\u5927\u4e8e\u5219\u89e6\u53d1\u5237\u65b0\uff0c\u5426\u5219\u7236\u5e03\u5c40\u7684 offset \u7f6e\u4e3a 0,\u8fd9\u4e2a\u5224\u65ad\u5728 onPreFling \u65f6\u505a\u6bd4\u8f83\u5408\u9002 \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a internal class SwipeRefreshNestedScrollConnection () : NestedScrollConnection { override fun onPreScroll ( available : Offset , source : NestedScrollSource ): Offset = when { // \u5982\u679c\u7528\u6237\u6b63\u5728\u4e0a\u6ed1\uff0c\u9700\u8981\u5728\u8fd9\u91cc\u62e6\u622a\u5904\u7406 source == NestedScrollSource . Drag && available . y < 0 -> onScroll ( available ) else -> Offset . Zero } override fun onPostScroll ( consumed : Offset , available : Offset , source : NestedScrollSource ): Offset = when { // \u5982\u679c\u7528\u6237\u6b63\u5728\u4e0b\u62c9\uff0c\u5728\u8fd9\u91cc\u5904\u7406\u5269\u4f59\u7684\u504f\u79fb\u91cf source == NestedScrollSource . Drag && available . y > 0 -> onScroll ( available ) else -> Offset . Zero } override suspend fun onPreFling ( available : Velocity ): Velocity { //\u5982\u679c\u504f\u79fb\u91cf\u5927\u4e8e\u5237\u65b0\u89e6\u53d1\u8ddd\u79bb\uff0c\u5219\u89e6\u53d1\u5237\u65b0 if ( ! state . isRefreshing && state . indicatorOffset >= refreshTrigger ) { onRefresh () } //\u4e0d\u6d88\u8d39\u901f\u5ea6\uff0c\u76f4\u63a5\u8fd4\u56de0 return Velocity . Zero } }","title":"\u5177\u4f53\u5b9e\u73b0"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_11","text":"\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u53ca\u5b9e\u73b0\u4e00\u4e2a Compose \u7248\u7684 SmartRefreshLayout \uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u6027: 1. \u63a5\u5165\u65b9\u4fbf\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u5feb\u901f\u5b9e\u73b0\u4e0b\u62c9\u5237\u65b0\u529f\u80fd 2. \u652f\u6301\u81ea\u5b9a\u4e49 Header , Header \u53ef\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5e76\u66f4\u65b0 UI 3. \u81ea\u5b9a\u4e49 Header \u652f\u6301 Lottie ,\u5e76\u652f\u6301\u89c2\u5bdf\u4e0b\u62c9\u72b6\u6001\u5f00\u59cb\u4e0e\u6682\u505c\u52a8\u753b 4. \u652f\u6301\u81ea\u5b9a\u4e49 Translate , FixedBehind , FixedFront , FixedContent \u7b49\u6eda\u52a8\u65b9\u5f0f 5. \u652f\u6301\u4e0e Paging \u7ed3\u5408\u5b9e\u73b0\u4e0a\u6ed1\u52a0\u8f7d\u66f4\u591a\u529f\u80fd","title":"\u603b\u7ed3"},{"location":"third-party-component/refreshlayout/compose_refreshlayout/#_12","text":"Compose\u7248SmartRefreshLayout \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~","title":"\u9879\u76ee\u5730\u5740"},{"location":"third-party-component/shimmer/compose_shimmer/","text":"\u524d\u8a00 \u9aa8\u67b6\u5c4f\u662f\u9875\u9762\u7684\u4e00\u4e2a\u7a7a\u767d\u7248\u672c\uff0c\u901a\u5e38\u4f1a\u5728\u9875\u9762\u5b8c\u5168\u6e32\u67d3\u4e4b\u524d\uff0c\u901a\u8fc7\u4e00\u4e9b\u7070\u8272\u7684\u533a\u5757\u5927\u81f4\u52fe\u52d2\u51fa\u8f6e\u5ed3\uff0c\u5f85\u6570\u636e\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u518d\u66ff\u6362\u6210\u771f\u5b9e\u7684\u5185\u5bb9\u3002\u9aa8\u67b6\u5c4f\u52a0\u8f7d\u4e2d\u6548\u679c\uff0c\u6bd4\u8d77\u4f20\u7edf\u7684\u52a0\u8f7d\u4e2d\u6548\u679c\u53ef\u4ee5\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u7528\u6237\u4f53\u9a8c\u66f4\u597d\uff0c\u56e0\u6b64\u4e5f\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Compose \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u9aa8\u67b6\u5c4f\u6548\u679c,\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star \uff1a Compose\u7248\u9aa8\u67b6\u5c4f \u6548\u679c\u56fe \u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe \u7279\u6027 \u7b80\u5355\u6613\u7528\uff0c\u53ef\u590d\u7528\u9875\u9762 UI ,\u4e0d\u9700\u8981\u9488\u5bf9\u9aa8\u67b6\u5c4f\u5b9a\u5236 UI \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u662f\u5426\u663e\u793a\uff0c\u4e00\u822c\u7ed3\u5408\u52a0\u8f7d\u72b6\u6001\u4f7f\u7528 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u80cc\u666f\u4e0e\u9ad8\u4eae\u989c\u8272 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u9ad8\u5ea6\u90e8\u5206\u5bbd\u5ea6\uff0c\u6e10\u53d8\u90e8\u5206\u5bbd\u5ea6 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u52a8\u753b\u7684\u89d2\u5ea6\u4e0e\u65b9\u5411 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u52a8\u753b\u7684\u65f6\u95f4\u4e0e\u4e24\u6b21\u52a8\u753b\u95f4\u9694 \u4f7f\u7528 \u63a5\u5165 \u7b2c 1 \u6b65:\u5728\u5de5\u7a0b\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a allprojects { repositories { ... mavenCentral () } } \u7b2c2\u6b65\uff1a\u5728\u5e94\u7528\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a dependencies { implementation 'io.github.shenzhen2017:shimmer:1.0.0' } \u7b80\u5355\u4f7f\u7528 @Composable fun ShimmerSample () { var loading : Boolean by remember { mutableStateOf ( true ) } Column ( modifier = Modifier . fillMaxWidth () . shimmer ( loading , config = ShimmerConfig ()) ) { repeat ( 3 ) { PlaceHolderItem () Spacer ( modifier = Modifier . height ( 10. dp )) } } } \u5982\u4e0a\u6240\u793a: 1. \u53ea\u9700\u8981\u5728 Column \u7684 Modifier \u4e2d\u52a0\u4e0a shimmer \uff0c Column \u4e0b\u7684\u6240\u6709\u7ec4\u4ef6\u5373\u53ef\u5b9e\u73b0\u9aa8\u67b6\u5c4f\u6548\u679c 2. \u53ef\u901a\u8fc7 loading \u53c2\u6570\uff0c\u63a7\u5236\u9aa8\u67b6\u5c4f\u6548\u679c\u662f\u5426\u663e\u793a 3. \u5982\u679c\u9700\u8981\u5b9a\u5236\u9aa8\u67b6\u5c4f\u52a8\u753b\u6548\u679c\uff0c\u4e5f\u53ef\u901a\u8fc7\u4e00\u4e9b\u53c2\u6570\u914d\u7f6e \u5177\u4f53\u4e3b\u8981\u6709\u4ee5\u4e0b\u8fd9\u4e9b\u53c2\u6570 data class ShimmerConfig ( // \u672a\u9ad8\u4eae\u90e8\u5206\u989c\u8272 val contentColor : Color = Color . LightGray . copy ( alpha = 0.3f ), // \u9ad8\u4eae\u90e8\u5206\u989c\u8272 val higLightColor : Color = Color . LightGray . copy ( alpha = 0.9f ), // \u6e10\u53d8\u90e8\u5206\u5bbd\u5ea6 @FloatRange ( from = 0.0 , to = 1.0 ) val dropOff : Float = 0.5f , // \u9ad8\u4eae\u90e8\u5206\u5bbd\u5ea6 @FloatRange ( from = 0.0 , to = 1.0 ) val intensity : Float = 0.2f , //\u9aa8\u67b6\u5c4f\u52a8\u753b\u65b9\u5411 val direction : ShimmerDirection = ShimmerDirection . LeftToRight , //\u52a8\u753b\u65cb\u8f6c\u89d2\u5ea6 val angle : Float = 20f , //\u52a8\u753b\u65f6\u957f val duration : Float = 1000f , //\u4e24\u6b21\u52a8\u753b\u95f4\u9694 val delay : Float = 200f ) \u4e3b\u8981\u539f\u7406 \u901a\u8fc7\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u590d\u7528\u9875\u9762 UI \u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u9aa8\u67b6\u5c4f\u6548\u679c\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f\u9700\u8981\u6309\u7167\u9875\u9762\u7684\u7ed3\u6784\u518d\u5199\u4e00\u5957 UI \uff0c\u7136\u540e\u5728\u52a0\u8f7d\u4e2d\u7684\u65f6\u5019\uff0c\u663e\u793a\u8fd9\u5957 UI \uff0c\u5426\u5219\u9690\u85cf \u4e00\u822c\u7684\u52a0\u8f7d\u4e2d\u6548\u679c\u90fd\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff0c\u4f46\u8fd9\u6837\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff0c\u4e0d\u540c\u7684\u9875\u9762\u7ed3\u6784\u4e0d\u540c\uff0c\u90a3\u6211\u4eec\u5c82\u4e0d\u662f\u8981\u4e00\u4e2a\u9875\u9762\u5c31\u91cd\u5199\u4e00\u5957 UI ?\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u63a5\u53d7\u7684 \u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u9875\u9762\u7684\u7ed3\u6784\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u5199\u8fc7\u4e00\u904d\u4e86\uff0c\u5982\u679c\u6211\u4eec\u80fd\u590d\u7528\u6211\u4eec\u5199\u7684\u9875\u9762\u7ed3\u6784\u4e0d\u5c31\u597d\u4e86\u5417\uff1f \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9 \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u5b9a\u4e49\u7684\u662f\uff0c\u5f53\u4e24\u4e2a\u56fe\u50cf\u5408\u6210\u65f6\uff0c\u56fe\u50cf\u6700\u7ec8\u7684\u5c55\u793a\u65b9\u5f0f\u3002\u5728 Androd \u4e2d\uff0c\u6709\u76f8\u5e94\u7684 API \u63a5\u53e3\u6765\u652f\u6301\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\uff0c\u5373 Xfermode . \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u4e3b\u8981\u6709\u4ee5\u4e0b 16 \u79cd,\u4ee5\u4e0b\u8fd9\u5f20\u56fe\u7247\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5f62\u8c61\u5730\u8bf4\u660e\u4e86\u56fe\u50cf\u6df7\u5408\u7684\u4f5c\u7528\uff0c\u4e24\u4e2a\u56fe\u5f62\u4e00\u5706\u4e00\u65b9\u901a\u8fc7\u4e00\u5b9a\u7684\u8ba1\u7b97\u4ea7\u751f\u4e0d\u540c\u7684\u7ec4\u5408\u6548\u679c\uff0c\u5177\u4f53\u5982\u4e0b \u6211\u4eec\u4ecb\u7ecd\u51e0\u4e2a\u5e38\u7528\u7684,\u5176\u5b83\u7684\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u81ea\u884c\u67e5\u9605 - SRC_IN :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u6e90\u56fe\u50cf\u3011 - DST_IN :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u76ee\u6807\u56fe\u50cf\u3011\uff0c\u7ed8\u5236\u6548\u679c\u53d7\u5230\u6e90\u56fe\u50cf\u5bf9\u5e94\u5730\u65b9\u900f\u660e\u5ea6\u5f71\u54cd - SRC_OUT :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u4e0d\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u6e90\u56fe\u50cf\u3011\uff0c\u76f8\u4ea4\u7684\u5730\u65b9\u6839\u636e\u76ee\u6807\u56fe\u50cf\u7684\u5bf9\u5e94\u5730\u65b9\u7684 alpha \u8fdb\u884c\u8fc7\u6ee4\uff0c\u76ee\u6807\u56fe\u50cf\u5b8c\u5168\u4e0d\u900f\u660e\u5219\u5b8c\u5168\u8fc7\u6ee4\uff0c\u5b8c\u5168\u900f\u660e\u5219\u4e0d\u8fc7\u6ee4 - DST_OUT :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u4e0d\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u76ee\u6807\u56fe\u50cf\u3011\uff0c\u5728\u76f8\u4ea4\u7684\u5730\u65b9\u6839\u636e\u6e90\u56fe\u50cf\u7684 alpha \u8fdb\u884c\u8fc7\u6ee4\uff0c\u6e90\u56fe\u50cf\u5b8c\u5168\u4e0d\u900f\u660e\u5219\u5b8c\u5168\u8fc7\u6ee4\uff0c\u5b8c\u5168\u900f\u660e\u5219\u4e0d\u8fc7\u6ee4 \u5982\u679c\u6211\u4eec\u628a\u9875\u9762\u7684 UI \u7ed3\u6784\u4f5c\u4e3a\u76ee\u6807\u56fe\u50cf\uff0c\u9aa8\u67b6\u5c4f\u6548\u679c\u4f5c\u4e3a\u6e90\u56fe\u50cf\uff0c\u7136\u540e\u4f7f\u7528 SRC_IN \u6df7\u5408\u6a21\u5f0f \u5c31\u53ef\u4ee5\u5b9e\u73b0\u53ea\u5728\u9875\u9762\u7684\u7ed3\u6784\u4e0a\u663e\u793a\u9aa8\u67b6\u5c4f\uff0c\u5728\u7a7a\u767d\u90e8\u5206\u4e0d\u663e\u793a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u5199 UI \u4e86 \u901a\u8fc7\u5e73\u79fb\u5b9e\u73b0\u52a8\u753b\u6548\u679c \u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5728\u9875\u9762\u7ed3\u6784\u4e0a\u663e\u793a\u9aa8\u67b6\u5c4f\uff0c\u4f46\u662f\u9aa8\u67b6\u5c4f\u6548\u679c\u8fd8\u6709\u4e00\u4e2a\u52a8\u753b\u6548\u679c \u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u7ed9\u9aa8\u67b6\u5c4f\u8bbe\u7f6e\u4e00\u4e2a\u6e10\u53d8\u6548\u679c\uff0c\u7136\u540e\u505a\u4e00\u4e2a\u5e73\u79fb\u52a8\u753b\uff0c\u7136\u540e\u770b\u8d77\u6765\u5c31\u662f\u73b0\u5728\u7684\u9aa8\u67b6\u5c4f\u95ea\u5149\u52a8\u753b\u4e86 fun Modifier . shimmer (): Modifier = composed { var progress : Float by remember { mutableStateOf ( 0f ) } val infiniteTransition = rememberInfiniteTransition () progress = infiniteTransition . animateFloat (). value // \u52a8\u753b\u6548\u679c\uff0c\u8ba1\u7b97\u767e\u5206\u6bd4 ShimmerModifier ( visible = visible , progress = progress , config = config ) } internal class ShimmerModifier ( progress : Float ) : DrawModifier , LayoutModifier { private val paint = Paint (). apply { blendMode = BlendMode . SrcIn //\u8bbe\u7f6e\u6df7\u5408\u6a21\u5f0f shader = LinearGradientShader ( Offset ( 0f , 0f ), toOffset , colors , colorStops ) //\u8bbe\u7f6e\u6e10\u53d8\u8272 } override fun ContentDrawScope . draw () { drawContent () val ( dx , dy ) = getOffset ( progress ) //\u6839\u636eprogress\uff0c\u8bbe\u7f6e\u5e73\u79fb\u7684\u4f4d\u7f6e paint . shader ?. postTranslate ( dx , dy ) // \u5e73\u79fb\u64cd\u4f5c it . drawRect ( Rect ( 0f , 0f , size . width , size . height ), paint = paint ) //\u7ed8\u5236\u9aa8\u67b6\u5c4f\u6548\u679c } } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u662f\u51e0\u6b65\uff1a 1. \u542f\u52a8\u52a8\u753b\uff0c\u83b7\u5f97\u5f53\u524d\u8fdb\u5ea6 progress \uff0c\u5e76\u6839\u636e progress \u83b7\u5f97\u5f53\u524d\u5e73\u79fb\u7684\u4f4d\u7f6e 2. \u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u7684\u80cc\u666f\u6e10\u53d8\u989c\u8272\u4e0e\u6df7\u5408\u6a21\u5f0f 3. \u7ed8\u5236\u9aa8\u67b6\u5c4f\u6548\u679c \u81ea\u5b9a\u4e49\u9aa8\u67b6\u5c4f\u6548\u679c \u4e0a\u9762\u4ecb\u7ecd\u4e86\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53c2\u6570\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u9aa8\u67b6\u5c4f\u7684\u6548\u679c\uff0c\u5176\u5b83\u53c2\u6570\u90fd\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u4e3b\u8981\u662f\u4ee5\u4e0b\u4e24\u4e2a\u53c2\u6570\u6709\u70b9\u96be\u7406\u89e3 1. dropOff \uff1a\u6e10\u53d8\u90e8\u5206\u5bbd\u5ea6 2. intensity : \u9ad8\u4eae\u90e8\u5206\u5bbd\u5ea6 \u6211\u4eec\u77e5\u9053\uff0c\u53ef\u4ee5\u901a\u8fc7 contentColor \u81ea\u5b9a\u4e49\u666e\u901a\u90e8\u5206\u989c\u8272, higLightColor \u81ea\u5b9a\u4e49\u9ad8\u4eae\u90e8\u5206\u989c\u8272 \u4f46\u662f\u8fd9\u4e24\u79cd\u989c\u8272\u662f\u5982\u4f55\u5206\u5e03\u7684\u5462\uff1f\u6e10\u53d8\u7684\u6bd4\u4f8b\u662f\u600e\u6837\u7684\u5462\uff1f\u53ef\u4ee5\u770b\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a private val paint = Paint (). apply { shader = LinearGradientShader ( Offset ( 0f , 0f ), toOffset , colors , colorStops ) //\u8bbe\u7f6e\u6e10\u53d8\u8272 } private val colors = listOf ( config . contentColor , config . higLightColor , config . higLightColor , config . contentColor ) private val colorStops : List < Float > = listOf ( (( 1f - intensity - dropOff ) / 2f ). coerceIn ( 0f , 1f ), (( 1f - intensity - 0.001f ) / 2f ). coerceIn ( 0f , 1f ), (( 1f + intensity + 0.001f ) / 2f ). coerceIn ( 0f , 1f ), (( 1f + intensity + dropOff ) / 2f ). coerceIn ( 0f , 1f ) ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u989c\u8272\u6e10\u53d8\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a 1. \u6e10\u53d8\u989c\u8272\u5206\u5e03\u4e3a\uff1a contentColor -> higLightColor -> higLightColor -> contentColor 2. LinearGradientShader \u4f7f\u7528 colors \u5b9a\u4e49\u989c\u8272, colorStops \u5b9a\u4e49\u989c\u8272\u6e10\u53d8\u7684\u5206\u5e03, colorStops \u7531 intensity \u4e0e dropoff \u8ba1\u7b97\u5f97\u6765 3. intensity \u51b3\u5b9a\u4e86\u9ad8\u4eae\u90e8\u5206\u7684\u5bbd\u5ea6\uff0c\u5373 intensity \u8d8a\u5927\uff0c\u9ad8\u4eae\u90e8\u5206\u8d8a\u5927 4. dropOff \u51b3\u5b9a\u4e86\u6e10\u53d8\u90e8\u5206\u7684\u5bbd\u5ea6\uff0c\u5373 dropOff \u8d8a\u5927\uff0c\u6e10\u53d8\u90e8\u5206\u8d8a\u5927 \u603b\u7ed3 \u7279\u522b\u9e23\u8c22 \u5728\u5b9e\u73b0 Compose \u7248\u672c\u9aa8\u67b6\u5c4f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e3b\u8981\u501f\u9274\u4e86\u4ee5\u4e0b\u5f00\u6e90\u6846\u67b6\u7684\u601d\u60f3\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u4e86\u89e3\u4e0b Facebook \u5f00\u6e90\u7684 shimmer-android Habib Kazemi \u5f00\u6e90\u7684 compose-shimmer \u9879\u76ee\u5730\u5740 \u7b80\u5355\u6613\u7528\u7684 Compose \u7248\u9aa8\u67b6\u5c4f \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~","title":"Compose\u7248\u9aa8\u67b6\u5c4f"},{"location":"third-party-component/shimmer/compose_shimmer/#_1","text":"\u9aa8\u67b6\u5c4f\u662f\u9875\u9762\u7684\u4e00\u4e2a\u7a7a\u767d\u7248\u672c\uff0c\u901a\u5e38\u4f1a\u5728\u9875\u9762\u5b8c\u5168\u6e32\u67d3\u4e4b\u524d\uff0c\u901a\u8fc7\u4e00\u4e9b\u7070\u8272\u7684\u533a\u5757\u5927\u81f4\u52fe\u52d2\u51fa\u8f6e\u5ed3\uff0c\u5f85\u6570\u636e\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u518d\u66ff\u6362\u6210\u771f\u5b9e\u7684\u5185\u5bb9\u3002\u9aa8\u67b6\u5c4f\u52a0\u8f7d\u4e2d\u6548\u679c\uff0c\u6bd4\u8d77\u4f20\u7edf\u7684\u52a0\u8f7d\u4e2d\u6548\u679c\u53ef\u4ee5\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u7528\u6237\u4f53\u9a8c\u66f4\u597d\uff0c\u56e0\u6b64\u4e5f\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Compose \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u9aa8\u67b6\u5c4f\u6548\u679c,\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star \uff1a Compose\u7248\u9aa8\u67b6\u5c4f","title":"\u524d\u8a00"},{"location":"third-party-component/shimmer/compose_shimmer/#_2","text":"\u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe","title":"\u6548\u679c\u56fe"},{"location":"third-party-component/shimmer/compose_shimmer/#_3","text":"\u7b80\u5355\u6613\u7528\uff0c\u53ef\u590d\u7528\u9875\u9762 UI ,\u4e0d\u9700\u8981\u9488\u5bf9\u9aa8\u67b6\u5c4f\u5b9a\u5236 UI \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u662f\u5426\u663e\u793a\uff0c\u4e00\u822c\u7ed3\u5408\u52a0\u8f7d\u72b6\u6001\u4f7f\u7528 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u80cc\u666f\u4e0e\u9ad8\u4eae\u989c\u8272 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u9ad8\u5ea6\u90e8\u5206\u5bbd\u5ea6\uff0c\u6e10\u53d8\u90e8\u5206\u5bbd\u5ea6 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u52a8\u753b\u7684\u89d2\u5ea6\u4e0e\u65b9\u5411 \u652f\u6301\u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u52a8\u753b\u7684\u65f6\u95f4\u4e0e\u4e24\u6b21\u52a8\u753b\u95f4\u9694","title":"\u7279\u6027"},{"location":"third-party-component/shimmer/compose_shimmer/#_4","text":"","title":"\u4f7f\u7528"},{"location":"third-party-component/shimmer/compose_shimmer/#_5","text":"\u7b2c 1 \u6b65:\u5728\u5de5\u7a0b\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a allprojects { repositories { ... mavenCentral () } } \u7b2c2\u6b65\uff1a\u5728\u5e94\u7528\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a dependencies { implementation 'io.github.shenzhen2017:shimmer:1.0.0' }","title":"\u63a5\u5165"},{"location":"third-party-component/shimmer/compose_shimmer/#_6","text":"@Composable fun ShimmerSample () { var loading : Boolean by remember { mutableStateOf ( true ) } Column ( modifier = Modifier . fillMaxWidth () . shimmer ( loading , config = ShimmerConfig ()) ) { repeat ( 3 ) { PlaceHolderItem () Spacer ( modifier = Modifier . height ( 10. dp )) } } } \u5982\u4e0a\u6240\u793a: 1. \u53ea\u9700\u8981\u5728 Column \u7684 Modifier \u4e2d\u52a0\u4e0a shimmer \uff0c Column \u4e0b\u7684\u6240\u6709\u7ec4\u4ef6\u5373\u53ef\u5b9e\u73b0\u9aa8\u67b6\u5c4f\u6548\u679c 2. \u53ef\u901a\u8fc7 loading \u53c2\u6570\uff0c\u63a7\u5236\u9aa8\u67b6\u5c4f\u6548\u679c\u662f\u5426\u663e\u793a 3. \u5982\u679c\u9700\u8981\u5b9a\u5236\u9aa8\u67b6\u5c4f\u52a8\u753b\u6548\u679c\uff0c\u4e5f\u53ef\u901a\u8fc7\u4e00\u4e9b\u53c2\u6570\u914d\u7f6e \u5177\u4f53\u4e3b\u8981\u6709\u4ee5\u4e0b\u8fd9\u4e9b\u53c2\u6570 data class ShimmerConfig ( // \u672a\u9ad8\u4eae\u90e8\u5206\u989c\u8272 val contentColor : Color = Color . LightGray . copy ( alpha = 0.3f ), // \u9ad8\u4eae\u90e8\u5206\u989c\u8272 val higLightColor : Color = Color . LightGray . copy ( alpha = 0.9f ), // \u6e10\u53d8\u90e8\u5206\u5bbd\u5ea6 @FloatRange ( from = 0.0 , to = 1.0 ) val dropOff : Float = 0.5f , // \u9ad8\u4eae\u90e8\u5206\u5bbd\u5ea6 @FloatRange ( from = 0.0 , to = 1.0 ) val intensity : Float = 0.2f , //\u9aa8\u67b6\u5c4f\u52a8\u753b\u65b9\u5411 val direction : ShimmerDirection = ShimmerDirection . LeftToRight , //\u52a8\u753b\u65cb\u8f6c\u89d2\u5ea6 val angle : Float = 20f , //\u52a8\u753b\u65f6\u957f val duration : Float = 1000f , //\u4e24\u6b21\u52a8\u753b\u95f4\u9694 val delay : Float = 200f )","title":"\u7b80\u5355\u4f7f\u7528"},{"location":"third-party-component/shimmer/compose_shimmer/#_7","text":"","title":"\u4e3b\u8981\u539f\u7406"},{"location":"third-party-component/shimmer/compose_shimmer/#ui","text":"\u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u9aa8\u67b6\u5c4f\u6548\u679c\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f\u9700\u8981\u6309\u7167\u9875\u9762\u7684\u7ed3\u6784\u518d\u5199\u4e00\u5957 UI \uff0c\u7136\u540e\u5728\u52a0\u8f7d\u4e2d\u7684\u65f6\u5019\uff0c\u663e\u793a\u8fd9\u5957 UI \uff0c\u5426\u5219\u9690\u85cf \u4e00\u822c\u7684\u52a0\u8f7d\u4e2d\u6548\u679c\u90fd\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff0c\u4f46\u8fd9\u6837\u4f1a\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\uff0c\u4e0d\u540c\u7684\u9875\u9762\u7ed3\u6784\u4e0d\u540c\uff0c\u90a3\u6211\u4eec\u5c82\u4e0d\u662f\u8981\u4e00\u4e2a\u9875\u9762\u5c31\u91cd\u5199\u4e00\u5957 UI ?\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u63a5\u53d7\u7684 \u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u9875\u9762\u7684\u7ed3\u6784\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u5199\u8fc7\u4e00\u904d\u4e86\uff0c\u5982\u679c\u6211\u4eec\u80fd\u590d\u7528\u6211\u4eec\u5199\u7684\u9875\u9762\u7ed3\u6784\u4e0d\u5c31\u597d\u4e86\u5417\uff1f \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9 \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u5b9a\u4e49\u7684\u662f\uff0c\u5f53\u4e24\u4e2a\u56fe\u50cf\u5408\u6210\u65f6\uff0c\u56fe\u50cf\u6700\u7ec8\u7684\u5c55\u793a\u65b9\u5f0f\u3002\u5728 Androd \u4e2d\uff0c\u6709\u76f8\u5e94\u7684 API \u63a5\u53e3\u6765\u652f\u6301\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\uff0c\u5373 Xfermode . \u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u4e3b\u8981\u6709\u4ee5\u4e0b 16 \u79cd,\u4ee5\u4e0b\u8fd9\u5f20\u56fe\u7247\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5f62\u8c61\u5730\u8bf4\u660e\u4e86\u56fe\u50cf\u6df7\u5408\u7684\u4f5c\u7528\uff0c\u4e24\u4e2a\u56fe\u5f62\u4e00\u5706\u4e00\u65b9\u901a\u8fc7\u4e00\u5b9a\u7684\u8ba1\u7b97\u4ea7\u751f\u4e0d\u540c\u7684\u7ec4\u5408\u6548\u679c\uff0c\u5177\u4f53\u5982\u4e0b \u6211\u4eec\u4ecb\u7ecd\u51e0\u4e2a\u5e38\u7528\u7684,\u5176\u5b83\u7684\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u81ea\u884c\u67e5\u9605 - SRC_IN :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u6e90\u56fe\u50cf\u3011 - DST_IN :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u76ee\u6807\u56fe\u50cf\u3011\uff0c\u7ed8\u5236\u6548\u679c\u53d7\u5230\u6e90\u56fe\u50cf\u5bf9\u5e94\u5730\u65b9\u900f\u660e\u5ea6\u5f71\u54cd - SRC_OUT :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u4e0d\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u6e90\u56fe\u50cf\u3011\uff0c\u76f8\u4ea4\u7684\u5730\u65b9\u6839\u636e\u76ee\u6807\u56fe\u50cf\u7684\u5bf9\u5e94\u5730\u65b9\u7684 alpha \u8fdb\u884c\u8fc7\u6ee4\uff0c\u76ee\u6807\u56fe\u50cf\u5b8c\u5168\u4e0d\u900f\u660e\u5219\u5b8c\u5168\u8fc7\u6ee4\uff0c\u5b8c\u5168\u900f\u660e\u5219\u4e0d\u8fc7\u6ee4 - DST_OUT :\u53ea\u5728\u6e90\u56fe\u50cf\u548c\u76ee\u6807\u56fe\u50cf\u4e0d\u76f8\u4ea4\u7684\u5730\u65b9\u7ed8\u5236\u3010\u76ee\u6807\u56fe\u50cf\u3011\uff0c\u5728\u76f8\u4ea4\u7684\u5730\u65b9\u6839\u636e\u6e90\u56fe\u50cf\u7684 alpha \u8fdb\u884c\u8fc7\u6ee4\uff0c\u6e90\u56fe\u50cf\u5b8c\u5168\u4e0d\u900f\u660e\u5219\u5b8c\u5168\u8fc7\u6ee4\uff0c\u5b8c\u5168\u900f\u660e\u5219\u4e0d\u8fc7\u6ee4 \u5982\u679c\u6211\u4eec\u628a\u9875\u9762\u7684 UI \u7ed3\u6784\u4f5c\u4e3a\u76ee\u6807\u56fe\u50cf\uff0c\u9aa8\u67b6\u5c4f\u6548\u679c\u4f5c\u4e3a\u6e90\u56fe\u50cf\uff0c\u7136\u540e\u4f7f\u7528 SRC_IN \u6df7\u5408\u6a21\u5f0f \u5c31\u53ef\u4ee5\u5b9e\u73b0\u53ea\u5728\u9875\u9762\u7684\u7ed3\u6784\u4e0a\u663e\u793a\u9aa8\u67b6\u5c4f\uff0c\u5728\u7a7a\u767d\u90e8\u5206\u4e0d\u663e\u793a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u91cd\u590d\u5199 UI \u4e86","title":"\u901a\u8fc7\u56fe\u50cf\u6df7\u5408\u6a21\u5f0f\u590d\u7528\u9875\u9762 UI"},{"location":"third-party-component/shimmer/compose_shimmer/#_8","text":"\u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5728\u9875\u9762\u7ed3\u6784\u4e0a\u663e\u793a\u9aa8\u67b6\u5c4f\uff0c\u4f46\u662f\u9aa8\u67b6\u5c4f\u6548\u679c\u8fd8\u6709\u4e00\u4e2a\u52a8\u753b\u6548\u679c \u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u7ed9\u9aa8\u67b6\u5c4f\u8bbe\u7f6e\u4e00\u4e2a\u6e10\u53d8\u6548\u679c\uff0c\u7136\u540e\u505a\u4e00\u4e2a\u5e73\u79fb\u52a8\u753b\uff0c\u7136\u540e\u770b\u8d77\u6765\u5c31\u662f\u73b0\u5728\u7684\u9aa8\u67b6\u5c4f\u95ea\u5149\u52a8\u753b\u4e86 fun Modifier . shimmer (): Modifier = composed { var progress : Float by remember { mutableStateOf ( 0f ) } val infiniteTransition = rememberInfiniteTransition () progress = infiniteTransition . animateFloat (). value // \u52a8\u753b\u6548\u679c\uff0c\u8ba1\u7b97\u767e\u5206\u6bd4 ShimmerModifier ( visible = visible , progress = progress , config = config ) } internal class ShimmerModifier ( progress : Float ) : DrawModifier , LayoutModifier { private val paint = Paint (). apply { blendMode = BlendMode . SrcIn //\u8bbe\u7f6e\u6df7\u5408\u6a21\u5f0f shader = LinearGradientShader ( Offset ( 0f , 0f ), toOffset , colors , colorStops ) //\u8bbe\u7f6e\u6e10\u53d8\u8272 } override fun ContentDrawScope . draw () { drawContent () val ( dx , dy ) = getOffset ( progress ) //\u6839\u636eprogress\uff0c\u8bbe\u7f6e\u5e73\u79fb\u7684\u4f4d\u7f6e paint . shader ?. postTranslate ( dx , dy ) // \u5e73\u79fb\u64cd\u4f5c it . drawRect ( Rect ( 0f , 0f , size . width , size . height ), paint = paint ) //\u7ed8\u5236\u9aa8\u67b6\u5c4f\u6548\u679c } } \u5982\u4e0a\u6240\u793a\uff0c\u4e3b\u8981\u662f\u51e0\u6b65\uff1a 1. \u542f\u52a8\u52a8\u753b\uff0c\u83b7\u5f97\u5f53\u524d\u8fdb\u5ea6 progress \uff0c\u5e76\u6839\u636e progress \u83b7\u5f97\u5f53\u524d\u5e73\u79fb\u7684\u4f4d\u7f6e 2. \u8bbe\u7f6e\u9aa8\u67b6\u5c4f\u7684\u80cc\u666f\u6e10\u53d8\u989c\u8272\u4e0e\u6df7\u5408\u6a21\u5f0f 3. \u7ed8\u5236\u9aa8\u67b6\u5c4f\u6548\u679c","title":"\u901a\u8fc7\u5e73\u79fb\u5b9e\u73b0\u52a8\u753b\u6548\u679c"},{"location":"third-party-component/shimmer/compose_shimmer/#_9","text":"\u4e0a\u9762\u4ecb\u7ecd\u4e86\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53c2\u6570\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u9aa8\u67b6\u5c4f\u7684\u6548\u679c\uff0c\u5176\u5b83\u53c2\u6570\u90fd\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u4e3b\u8981\u662f\u4ee5\u4e0b\u4e24\u4e2a\u53c2\u6570\u6709\u70b9\u96be\u7406\u89e3 1. dropOff \uff1a\u6e10\u53d8\u90e8\u5206\u5bbd\u5ea6 2. intensity : \u9ad8\u4eae\u90e8\u5206\u5bbd\u5ea6 \u6211\u4eec\u77e5\u9053\uff0c\u53ef\u4ee5\u901a\u8fc7 contentColor \u81ea\u5b9a\u4e49\u666e\u901a\u90e8\u5206\u989c\u8272, higLightColor \u81ea\u5b9a\u4e49\u9ad8\u4eae\u90e8\u5206\u989c\u8272 \u4f46\u662f\u8fd9\u4e24\u79cd\u989c\u8272\u662f\u5982\u4f55\u5206\u5e03\u7684\u5462\uff1f\u6e10\u53d8\u7684\u6bd4\u4f8b\u662f\u600e\u6837\u7684\u5462\uff1f\u53ef\u4ee5\u770b\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a private val paint = Paint (). apply { shader = LinearGradientShader ( Offset ( 0f , 0f ), toOffset , colors , colorStops ) //\u8bbe\u7f6e\u6e10\u53d8\u8272 } private val colors = listOf ( config . contentColor , config . higLightColor , config . higLightColor , config . contentColor ) private val colorStops : List < Float > = listOf ( (( 1f - intensity - dropOff ) / 2f ). coerceIn ( 0f , 1f ), (( 1f - intensity - 0.001f ) / 2f ). coerceIn ( 0f , 1f ), (( 1f + intensity + 0.001f ) / 2f ). coerceIn ( 0f , 1f ), (( 1f + intensity + dropOff ) / 2f ). coerceIn ( 0f , 1f ) ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u989c\u8272\u6e10\u53d8\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a 1. \u6e10\u53d8\u989c\u8272\u5206\u5e03\u4e3a\uff1a contentColor -> higLightColor -> higLightColor -> contentColor 2. LinearGradientShader \u4f7f\u7528 colors \u5b9a\u4e49\u989c\u8272, colorStops \u5b9a\u4e49\u989c\u8272\u6e10\u53d8\u7684\u5206\u5e03, colorStops \u7531 intensity \u4e0e dropoff \u8ba1\u7b97\u5f97\u6765 3. intensity \u51b3\u5b9a\u4e86\u9ad8\u4eae\u90e8\u5206\u7684\u5bbd\u5ea6\uff0c\u5373 intensity \u8d8a\u5927\uff0c\u9ad8\u4eae\u90e8\u5206\u8d8a\u5927 4. dropOff \u51b3\u5b9a\u4e86\u6e10\u53d8\u90e8\u5206\u7684\u5bbd\u5ea6\uff0c\u5373 dropOff \u8d8a\u5927\uff0c\u6e10\u53d8\u90e8\u5206\u8d8a\u5927","title":"\u81ea\u5b9a\u4e49\u9aa8\u67b6\u5c4f\u6548\u679c"},{"location":"third-party-component/shimmer/compose_shimmer/#_10","text":"","title":"\u603b\u7ed3"},{"location":"third-party-component/shimmer/compose_shimmer/#_11","text":"\u5728\u5b9e\u73b0 Compose \u7248\u672c\u9aa8\u67b6\u5c4f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e3b\u8981\u501f\u9274\u4e86\u4ee5\u4e0b\u5f00\u6e90\u6846\u67b6\u7684\u601d\u60f3\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u4e86\u89e3\u4e0b Facebook \u5f00\u6e90\u7684 shimmer-android Habib Kazemi \u5f00\u6e90\u7684 compose-shimmer","title":"\u7279\u522b\u9e23\u8c22"},{"location":"third-party-component/shimmer/compose_shimmer/#_12","text":"\u7b80\u5355\u6613\u7528\u7684 Compose \u7248\u9aa8\u67b6\u5c4f \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e, Star ,\u6536\u85cf~","title":"\u9879\u76ee\u5730\u5740"},{"location":"third-party-component/statelayout/compose_statelayout/","text":"\u524d\u8a00 \u5728\u9875\u9762\u4e2d\u5e38\u5e38\u9700\u8981\u5c55\u793a\u7f51\u7edc\u8bf7\u6c42\u72b6\u6001\uff0c\u4ee5\u5e26\u6765\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u5177\u4f53\u6765\u8bf4\u901a\u5e38\u6709 \u52a0\u8f7d\u4e2d \uff0c \u52a0\u8f7d\u5931\u8d25 \uff0c \u52a0\u8f7d\u4e3a\u7a7a \uff0c \u52a0\u8f7d\u6210\u529f \u7b49\u72b6\u6001. \u5728 XML \u4e2d\u6211\u4eec\u901a\u5e38\u7528\u4e00\u4e2a ViewGroup \u5c01\u88c5\u5404\u79cd\u72b6\u6001\u6765\u5b9e\u73b0\uff0c\u90a3\u4e48\u4f7f\u7528 Compose \u8be5\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u6548\u679c\u5462? \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd Compose \u5982\u4f55\u5c01\u88c5\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 StateLayout ,\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star : Compose\u7248StateLayout \u6548\u679c\u56fe \u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe \u7279\u6027 \u652f\u6301\u914d\u7f6e\u5168\u5c40\u9ed8\u8ba4\u5e03\u5c40,\u5982\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u9ed8\u8ba4\u6210\u529f\u5931\u8d25\u7b49 \u652f\u6301\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u6837\u5f0f\u6587\u6848\uff0c\u56fe\u7247\u7b49\u7ec6\u8282 \u652f\u6301\u5b8c\u5168\u81ea\u5b9a\u4e49\u6837\u5f0f\uff0c\u5982\u81ea\u5b9a\u4e49\u52a0\u8f7d\u4e2d\u6837\u5f0f \u652f\u6301\u81ea\u5b9a\u4e49\u5904\u7406\u70b9\u51fb\u91cd\u8bd5\u4e8b\u4ef6 \u5b8c\u5168\u4f7f\u7528\u6570\u636e\u9a71\u52a8\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u63a5\u5165\u65b9\u4fbf \u4f7f\u7528 \u63a5\u5165 \u7b2c 1 \u6b65:\u5728\u5de5\u7a0b\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a allprojects { repositories { ... mavenCentral () } } \u7b2c2\u6b65\uff1a\u5728\u5e94\u7528\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a dependencies { implementation 'io.github.shenzhen2017:compose-statelayout:1.0.0' } \u7b80\u5355\u4f7f\u7528 \u5b9a\u4e49\u5168\u5c40\u6837\u5f0f \u5728\u6846\u67b6\u4e2d\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u9ed8\u8ba4\u6837\u5f0f\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u52a0\u8f7d\u5931\u8d25\u7b49\u9875\u9762\u6837\u5f0f \u540c\u65f6\u9700\u8981\u81ea\u5b9a\u4e49\u4f20\u7ed9\u81ea\u5b9a\u4e49\u6837\u5f0f\u7684\u6570\u636e\u7ed3\u6784\u7c7b\u578b\uff0c\u65b9\u4fbf\u6570\u636e\u9a71\u52a8 data class StateData ( val tipTex : String? = null , val tipImg : Int? = null , val btnText : String? = null ) @Composable fun DefaultStateLayout ( modifier : Modifier = Modifier , pageStateData : PageStateData , onRetry : OnRetry = { }, loading : @Composable ( StateLayoutData ) -> Unit = { DefaultLoadingLayout ( it ) }, empty : @Composable ( StateLayoutData ) -> Unit = { DefaultEmptyLayout ( it ) }, error : @Composable ( StateLayoutData ) -> Unit = { DefaultErrorLayout ( it ) }, content : @Composable () -> Unit = { } ) { ComposeStateLayout ( modifier = modifier , pageStateData = pageStateData , onRetry = onRetry , loading = { loading ( it ) }, empty = { empty ( it ) }, error = { error ( it ) }, content = content ) } \u5982\u4e0a\u6240\u793a,\u521d\u59cb\u5316\u65f6\u6211\u4eec\u4e3b\u8981\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b 1. \u81ea\u5b9a\u4e49\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u52a0\u8f7d\u5931\u8d25\uff0c\u52a0\u8f7d\u4e3a\u7a7a\u7b49\u6837\u5f0f 2. \u81ea\u5b9a\u4e49 StateData \uff0c\u5373\u4f20\u7ed9\u9ed8\u8ba4\u6837\u5f0f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u6587\u6848\uff0c\u56fe\u7247\u7b49\uff0c\u8fd9\u6837\u540e\u7eed\u9700\u8981\u4fee\u6539\u7684\u65f6\u5019\u53ea\u9700\u4fee\u6539 StateData \u5373\u53ef \u76f4\u63a5\u4f7f\u7528 \u5982\u679c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u6837\u5f0f\uff0c\u76f4\u63a5\u5982\u4e0b\u4f7f\u7528\u5373\u53ef @Composable fun StateDemo () { var pageStateData by remember { mutableStateOf ( PageState . CONTENT . bindData ()) } DefaultStateLayout ( modifier = Modifier . fillMaxSize (), pageStateData = pageStateData , onRetry = { pageStateData = PageState . LOADING . bindData () } ) { //Content } } \u5982\u4e0a\u6240\u793a\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u72b6\u6001\uff0c\u4fee\u6539 pageStateData \u5373\u53ef \u81ea\u5b9a\u4e49\u6587\u6848 \u5982\u679c\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u6587\u6848\u6216\u8005\u56fe\u7247\u7b49\u7ec6\u8282\uff0c\u53ef\u7b80\u5355\u76f4\u63a5\u4fee\u6539 StateData \u5373\u53ef fun StateDemo () { var pageStateData by remember { mutableStateOf ( PageState . CONTENT . bindData ()) } //.... pageStateData = PageState . LOADING . bindData ( StateData ( tipTex = \"\u81ea\u5b9a\u4e49\u52a0\u8f7d\u4e2d\u6587\u6848\" )) } \u81ea\u5b9a\u4e49\u5e03\u5c40 \u6709\u65f6\u9875\u9762\u7684\u52a0\u8f7d\u4e2d\u6837\u5f0f\u4e0e\u5168\u5c40\u7684\u5e76\u4e0d\u4e00\u6837\uff0c\u8fd9\u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u5e03\u5c40\u6837\u5f0f\u4e86 @Composable fun StateDemo () { var pageStateData by remember { mutableStateOf ( PageState . CONTENT . bindData ()) } DefaultStateLayout ( modifier = Modifier . fillMaxSize (), pageStateData = pageStateData , loading = { CustomLoadingLayout ( it ) }, onRetry = { pageStateData = PageState . LOADING . bindData () } ) { //Content } } \u4e3b\u8981\u539f\u7406 \u5176\u5b9e Compose \u8981\u5b9e\u73b0\u4e0d\u540c\u7684\u72b6\u6001\u975e\u5e38\u7b80\u5355\uff0c\u4f20\u5165\u4e0d\u540c\u7684\u6570\u636e\u5373\u53ef\uff0c\u5982\u4e0b\u6240\u793a: Box ( modifier = modifier ) { when ( pageStateData . status ) { PageState . LOADING -> loading () PageState . EMPTY -> empty () PageState . ERROR -> error () PageState . CONTENT -> content () } } \u5176\u5b9e\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e2a\u901a\u7528\u903b\u8f91\uff0c\u5982\u679c\u6bcf\u4e2a\u9875\u9762\u90fd\u8981\u5199\u8fd9\u4e00\u6bb5\u4ee3\u7801\u53ef\u80fd\u4e5f\u633a\u70e6\u7684 \u6240\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u662f\u6a21\u677f\u4ee3\u7801\uff0c\u6211\u4eec\u60f3\u5230 Scaffold \u811a\u624b\u67b6\uff0c\u63d0\u4f9b\u4e86\u7ec4\u5408\u5404\u4e2a\u7ec4\u4ef6\u7684 API \uff0c\u5305\u62ec\u6807\u9898\u680f\u3001\u5e95\u90e8\u680f\u3001 SnackBar \uff08\u7c7b\u4f3c\u5410\u53f8\u529f\u80fd\uff09\u3001\u6d6e\u52a8\u6309\u94ae\u3001\u62bd\u5c49\u7ec4\u4ef6\u3001\u5269\u4f59\u5185\u5bb9\u5e03\u5c40\u7b49\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5b9a\u4e49\u4e00\u4e2a\u57fa\u672c\u7684\u9875\u9762\u7ed3\u6784\u3002 \u4eff\u7167 Scaffold ,\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6a21\u677f\u7ec4\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u4f20\u5165\u81ea\u5b9a\u4e49\u7684 looading , empty , error , content \u7b49\u7ec4\u4ef6\uff0c\u518d\u5c06\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86 ComposeStateLayout data class PageStateData ( val status : PageState , val tag : Any? = null ) data class StateLayoutData ( val pageStateData : PageStateData , val retry : OnRetry = {}) typealias OnRetry = ( PageStateData ) -> Unit @Composable fun ComposeStateLayout ( modifier : Modifier = Modifier , pageStateData : PageStateData , onRetry : OnRetry = { }, loading : @Composable ( StateLayoutData ) -> Unit = {}, empty : @Composable ( StateLayoutData ) -> Unit = {}, error : @Composable ( StateLayoutData ) -> Unit = {}, content : @Composable () -> Unit = { } ) { val stateLayoutData = StateLayoutData ( pageStateData , onRetry ) Box ( modifier = modifier ) { when ( pageStateData . status ) { PageState . LOADING -> loading ( stateLayoutData ) PageState . EMPTY -> empty ( stateLayoutData ) PageState . ERROR -> error ( stateLayoutData ) PageState . CONTENT -> content () } } } \u5982\u4e0a\u6240\u793a\uff0c\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a 1. PageStateData \u7684 tag \u5373\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49 loading \u7b49\u9875\u9762\u7684\u4fe1\u606f\uff0c\u4e3a Any \u7c7b\u578b\uff0c\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u7528\u6237\u53ef\u7075\u6d3b\u5904\u7406 2. \u81ea\u5b9a\u4e49 loading \u7b49\u9875\u9762\u4e5f\u4f20\u5165\u4e86 OnRetry ,\u56e0\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u5904\u7406\u81ea\u5b9a\u4e49\u70b9\u51fb\u4e8b\u4ef6 \u603b\u7ed3 \u672c\u6587\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a Compose \u7248\u7684 StateLayout \uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u6027 1. \u652f\u6301\u914d\u7f6e\u5168\u5c40\u9ed8\u8ba4\u5e03\u5c40,\u5982\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u9ed8\u8ba4\u6210\u529f\u5931\u8d25\u7b49 2. \u652f\u6301\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u6837\u5f0f\u6587\u6848\uff0c\u56fe\u7247\u7b49\u7ec6\u8282 3. \u652f\u6301\u5b8c\u5168\u81ea\u5b9a\u4e49\u6837\u5f0f\uff0c\u5982\u81ea\u5b9a\u4e49\u52a0\u8f7d\u4e2d\u6837\u5f0f 4. \u652f\u6301\u81ea\u5b9a\u4e49\u5904\u7406\u70b9\u51fb\u91cd\u8bd5\u4e8b\u4ef6 5. \u5b8c\u5168\u4f7f\u7528\u6570\u636e\u9a71\u52a8\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u63a5\u5165\u65b9\u4fbf \u9879\u76ee\u5730\u5740 \u7b80\u5355\u6613\u7528\u7684Compose\u7248StateLayout \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e,Star,\u6536\u85cf~","title":"Compose\u7248StateLayout"},{"location":"third-party-component/statelayout/compose_statelayout/#_1","text":"\u5728\u9875\u9762\u4e2d\u5e38\u5e38\u9700\u8981\u5c55\u793a\u7f51\u7edc\u8bf7\u6c42\u72b6\u6001\uff0c\u4ee5\u5e26\u6765\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u5177\u4f53\u6765\u8bf4\u901a\u5e38\u6709 \u52a0\u8f7d\u4e2d \uff0c \u52a0\u8f7d\u5931\u8d25 \uff0c \u52a0\u8f7d\u4e3a\u7a7a \uff0c \u52a0\u8f7d\u6210\u529f \u7b49\u72b6\u6001. \u5728 XML \u4e2d\u6211\u4eec\u901a\u5e38\u7528\u4e00\u4e2a ViewGroup \u5c01\u88c5\u5404\u79cd\u72b6\u6001\u6765\u5b9e\u73b0\uff0c\u90a3\u4e48\u4f7f\u7528 Compose \u8be5\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u6548\u679c\u5462? \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd Compose \u5982\u4f55\u5c01\u88c5\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 StateLayout ,\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u4e2a Star : Compose\u7248StateLayout","title":"\u524d\u8a00"},{"location":"third-party-component/statelayout/compose_statelayout/#_2","text":"\u9996\u5148\u770b\u4e0b\u6700\u7ec8\u7684\u6548\u679c\u56fe","title":"\u6548\u679c\u56fe"},{"location":"third-party-component/statelayout/compose_statelayout/#_3","text":"\u652f\u6301\u914d\u7f6e\u5168\u5c40\u9ed8\u8ba4\u5e03\u5c40,\u5982\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u9ed8\u8ba4\u6210\u529f\u5931\u8d25\u7b49 \u652f\u6301\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u6837\u5f0f\u6587\u6848\uff0c\u56fe\u7247\u7b49\u7ec6\u8282 \u652f\u6301\u5b8c\u5168\u81ea\u5b9a\u4e49\u6837\u5f0f\uff0c\u5982\u81ea\u5b9a\u4e49\u52a0\u8f7d\u4e2d\u6837\u5f0f \u652f\u6301\u81ea\u5b9a\u4e49\u5904\u7406\u70b9\u51fb\u91cd\u8bd5\u4e8b\u4ef6 \u5b8c\u5168\u4f7f\u7528\u6570\u636e\u9a71\u52a8\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u63a5\u5165\u65b9\u4fbf","title":"\u7279\u6027"},{"location":"third-party-component/statelayout/compose_statelayout/#_4","text":"","title":"\u4f7f\u7528"},{"location":"third-party-component/statelayout/compose_statelayout/#_5","text":"\u7b2c 1 \u6b65:\u5728\u5de5\u7a0b\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a allprojects { repositories { ... mavenCentral () } } \u7b2c2\u6b65\uff1a\u5728\u5e94\u7528\u7684 build.gradle \u4e2d\u6dfb\u52a0\uff1a dependencies { implementation 'io.github.shenzhen2017:compose-statelayout:1.0.0' }","title":"\u63a5\u5165"},{"location":"third-party-component/statelayout/compose_statelayout/#_6","text":"","title":"\u7b80\u5355\u4f7f\u7528"},{"location":"third-party-component/statelayout/compose_statelayout/#_7","text":"\u5728\u6846\u67b6\u4e2d\u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u9ed8\u8ba4\u6837\u5f0f\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u52a0\u8f7d\u5931\u8d25\u7b49\u9875\u9762\u6837\u5f0f \u540c\u65f6\u9700\u8981\u81ea\u5b9a\u4e49\u4f20\u7ed9\u81ea\u5b9a\u4e49\u6837\u5f0f\u7684\u6570\u636e\u7ed3\u6784\u7c7b\u578b\uff0c\u65b9\u4fbf\u6570\u636e\u9a71\u52a8 data class StateData ( val tipTex : String? = null , val tipImg : Int? = null , val btnText : String? = null ) @Composable fun DefaultStateLayout ( modifier : Modifier = Modifier , pageStateData : PageStateData , onRetry : OnRetry = { }, loading : @Composable ( StateLayoutData ) -> Unit = { DefaultLoadingLayout ( it ) }, empty : @Composable ( StateLayoutData ) -> Unit = { DefaultEmptyLayout ( it ) }, error : @Composable ( StateLayoutData ) -> Unit = { DefaultErrorLayout ( it ) }, content : @Composable () -> Unit = { } ) { ComposeStateLayout ( modifier = modifier , pageStateData = pageStateData , onRetry = onRetry , loading = { loading ( it ) }, empty = { empty ( it ) }, error = { error ( it ) }, content = content ) } \u5982\u4e0a\u6240\u793a,\u521d\u59cb\u5316\u65f6\u6211\u4eec\u4e3b\u8981\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b 1. \u81ea\u5b9a\u4e49\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u52a0\u8f7d\u5931\u8d25\uff0c\u52a0\u8f7d\u4e3a\u7a7a\u7b49\u6837\u5f0f 2. \u81ea\u5b9a\u4e49 StateData \uff0c\u5373\u4f20\u7ed9\u9ed8\u8ba4\u6837\u5f0f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u6587\u6848\uff0c\u56fe\u7247\u7b49\uff0c\u8fd9\u6837\u540e\u7eed\u9700\u8981\u4fee\u6539\u7684\u65f6\u5019\u53ea\u9700\u4fee\u6539 StateData \u5373\u53ef","title":"\u5b9a\u4e49\u5168\u5c40\u6837\u5f0f"},{"location":"third-party-component/statelayout/compose_statelayout/#_8","text":"\u5982\u679c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u6837\u5f0f\uff0c\u76f4\u63a5\u5982\u4e0b\u4f7f\u7528\u5373\u53ef @Composable fun StateDemo () { var pageStateData by remember { mutableStateOf ( PageState . CONTENT . bindData ()) } DefaultStateLayout ( modifier = Modifier . fillMaxSize (), pageStateData = pageStateData , onRetry = { pageStateData = PageState . LOADING . bindData () } ) { //Content } } \u5982\u4e0a\u6240\u793a\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u72b6\u6001\uff0c\u4fee\u6539 pageStateData \u5373\u53ef","title":"\u76f4\u63a5\u4f7f\u7528"},{"location":"third-party-component/statelayout/compose_statelayout/#_9","text":"\u5982\u679c\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u6587\u6848\u6216\u8005\u56fe\u7247\u7b49\u7ec6\u8282\uff0c\u53ef\u7b80\u5355\u76f4\u63a5\u4fee\u6539 StateData \u5373\u53ef fun StateDemo () { var pageStateData by remember { mutableStateOf ( PageState . CONTENT . bindData ()) } //.... pageStateData = PageState . LOADING . bindData ( StateData ( tipTex = \"\u81ea\u5b9a\u4e49\u52a0\u8f7d\u4e2d\u6587\u6848\" )) }","title":"\u81ea\u5b9a\u4e49\u6587\u6848"},{"location":"third-party-component/statelayout/compose_statelayout/#_10","text":"\u6709\u65f6\u9875\u9762\u7684\u52a0\u8f7d\u4e2d\u6837\u5f0f\u4e0e\u5168\u5c40\u7684\u5e76\u4e0d\u4e00\u6837\uff0c\u8fd9\u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u5e03\u5c40\u6837\u5f0f\u4e86 @Composable fun StateDemo () { var pageStateData by remember { mutableStateOf ( PageState . CONTENT . bindData ()) } DefaultStateLayout ( modifier = Modifier . fillMaxSize (), pageStateData = pageStateData , loading = { CustomLoadingLayout ( it ) }, onRetry = { pageStateData = PageState . LOADING . bindData () } ) { //Content } }","title":"\u81ea\u5b9a\u4e49\u5e03\u5c40"},{"location":"third-party-component/statelayout/compose_statelayout/#_11","text":"\u5176\u5b9e Compose \u8981\u5b9e\u73b0\u4e0d\u540c\u7684\u72b6\u6001\u975e\u5e38\u7b80\u5355\uff0c\u4f20\u5165\u4e0d\u540c\u7684\u6570\u636e\u5373\u53ef\uff0c\u5982\u4e0b\u6240\u793a: Box ( modifier = modifier ) { when ( pageStateData . status ) { PageState . LOADING -> loading () PageState . EMPTY -> empty () PageState . ERROR -> error () PageState . CONTENT -> content () } } \u5176\u5b9e\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e2a\u901a\u7528\u903b\u8f91\uff0c\u5982\u679c\u6bcf\u4e2a\u9875\u9762\u90fd\u8981\u5199\u8fd9\u4e00\u6bb5\u4ee3\u7801\u53ef\u80fd\u4e5f\u633a\u70e6\u7684 \u6240\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u662f\u6a21\u677f\u4ee3\u7801\uff0c\u6211\u4eec\u60f3\u5230 Scaffold \u811a\u624b\u67b6\uff0c\u63d0\u4f9b\u4e86\u7ec4\u5408\u5404\u4e2a\u7ec4\u4ef6\u7684 API \uff0c\u5305\u62ec\u6807\u9898\u680f\u3001\u5e95\u90e8\u680f\u3001 SnackBar \uff08\u7c7b\u4f3c\u5410\u53f8\u529f\u80fd\uff09\u3001\u6d6e\u52a8\u6309\u94ae\u3001\u62bd\u5c49\u7ec4\u4ef6\u3001\u5269\u4f59\u5185\u5bb9\u5e03\u5c40\u7b49\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5b9a\u4e49\u4e00\u4e2a\u57fa\u672c\u7684\u9875\u9762\u7ed3\u6784\u3002 \u4eff\u7167 Scaffold ,\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6a21\u677f\u7ec4\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u4f20\u5165\u81ea\u5b9a\u4e49\u7684 looading , empty , error , content \u7b49\u7ec4\u4ef6\uff0c\u518d\u5c06\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86 ComposeStateLayout data class PageStateData ( val status : PageState , val tag : Any? = null ) data class StateLayoutData ( val pageStateData : PageStateData , val retry : OnRetry = {}) typealias OnRetry = ( PageStateData ) -> Unit @Composable fun ComposeStateLayout ( modifier : Modifier = Modifier , pageStateData : PageStateData , onRetry : OnRetry = { }, loading : @Composable ( StateLayoutData ) -> Unit = {}, empty : @Composable ( StateLayoutData ) -> Unit = {}, error : @Composable ( StateLayoutData ) -> Unit = {}, content : @Composable () -> Unit = { } ) { val stateLayoutData = StateLayoutData ( pageStateData , onRetry ) Box ( modifier = modifier ) { when ( pageStateData . status ) { PageState . LOADING -> loading ( stateLayoutData ) PageState . EMPTY -> empty ( stateLayoutData ) PageState . ERROR -> error ( stateLayoutData ) PageState . CONTENT -> content () } } } \u5982\u4e0a\u6240\u793a\uff0c\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a 1. PageStateData \u7684 tag \u5373\u4f20\u9012\u7ed9\u81ea\u5b9a\u4e49 loading \u7b49\u9875\u9762\u7684\u4fe1\u606f\uff0c\u4e3a Any \u7c7b\u578b\uff0c\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u7528\u6237\u53ef\u7075\u6d3b\u5904\u7406 2. \u81ea\u5b9a\u4e49 loading \u7b49\u9875\u9762\u4e5f\u4f20\u5165\u4e86 OnRetry ,\u56e0\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u5904\u7406\u81ea\u5b9a\u4e49\u70b9\u51fb\u4e8b\u4ef6","title":"\u4e3b\u8981\u539f\u7406"},{"location":"third-party-component/statelayout/compose_statelayout/#_12","text":"\u672c\u6587\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a Compose \u7248\u7684 StateLayout \uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u6027 1. \u652f\u6301\u914d\u7f6e\u5168\u5c40\u9ed8\u8ba4\u5e03\u5c40,\u5982\u9ed8\u8ba4\u52a0\u8f7d\u4e2d\uff0c\u9ed8\u8ba4\u6210\u529f\u5931\u8d25\u7b49 2. \u652f\u6301\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u6837\u5f0f\u6587\u6848\uff0c\u56fe\u7247\u7b49\u7ec6\u8282 3. \u652f\u6301\u5b8c\u5168\u81ea\u5b9a\u4e49\u6837\u5f0f\uff0c\u5982\u81ea\u5b9a\u4e49\u52a0\u8f7d\u4e2d\u6837\u5f0f 4. \u652f\u6301\u81ea\u5b9a\u4e49\u5904\u7406\u70b9\u51fb\u91cd\u8bd5\u4e8b\u4ef6 5. \u5b8c\u5168\u4f7f\u7528\u6570\u636e\u9a71\u52a8\uff0c\u4f7f\u7528\u7b80\u5355\uff0c\u63a5\u5165\u65b9\u4fbf","title":"\u603b\u7ed3"},{"location":"third-party-component/statelayout/compose_statelayout/#_13","text":"\u7b80\u5355\u6613\u7528\u7684Compose\u7248StateLayout \u5f00\u6e90\u4e0d\u6613\uff0c\u5982\u679c\u9879\u76ee\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\uff0c\u6b22\u8fce\u70b9\u8d5e,Star,\u6536\u85cf~","title":"\u9879\u76ee\u5730\u5740"}]}