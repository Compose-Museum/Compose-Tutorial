"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[956],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,g=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return t?a.createElement(g,o(o({ref:n},u),{},{components:t})):a.createElement(g,o({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9904:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],l={id:"composeRemoteImage",title:"\u5982\u4f55\u4e3aCompose Image\u63d0\u4f9b\u7f51\u7edc\u56fe\u7247\u52a0\u8f7d\u652f\u6301"},s=void 0,p={unversionedId:"principle/composeRemoteImage",id:"principle/composeRemoteImage",title:"\u5982\u4f55\u4e3aCompose Image\u63d0\u4f9b\u7f51\u7edc\u56fe\u7247\u52a0\u8f7d\u652f\u6301",description:"\u524d\u8a00",source:"@site/docs/principle/composeRemoteImage.mdx",sourceDirName:"principle",slug:"/principle/composeRemoteImage",permalink:"/docs/principle/composeRemoteImage",draft:!1,editUrl:"https://github.com/compose-museum/jetpack-compose-book/tree/master/docs/principle/composeRemoteImage.mdx",tags:[],version:"current",frontMatter:{id:"composeRemoteImage",title:"\u5982\u4f55\u4e3aCompose Image\u63d0\u4f9b\u7f51\u7edc\u56fe\u7247\u52a0\u8f7d\u652f\u6301"},sidebar:"docs",previous:{title:"Composeble \u6ce8\u89e3\u5230\u5e95\u505a\u4e86\u4ec0\u4e48\uff1f",permalink:"/docs/principle/composeAnnotation"}},u={},m=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"Picasso(in version 0.6.2)",id:"picassoin-version-062",level:2},{value:"Glide(in version 0.13.0)",id:"glidein-version-0130",level:2},{value:"Coil",id:"coil",level:2}],d={toc:m};function c(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,i.kt)("p",null,"\u5982\u4f55\u4e3aCompose Image\u63d0\u4f9b\u7f51\u7edc\u56fe\u7247\u52a0\u8f7d\u652f\u6301\uff1f\u76ee\u524d\uff08Compose 1.0.5\uff09\u6700\u597d\u7684\u9009\u62e9\u662f\u4f7f\u7528\u56fe\u7247\u6846\u67b6Coil\uff0cCoil\u5bf9Jetpack Compose\u76f8\u5173\u7684\u652f\u6301\u6587\u6863",(0,i.kt)("a",{parentName:"p",href:"https://coil-kt.github.io/coil/compose/"},"\u5728\u8fd9"),"\u3002"),(0,i.kt)("p",null,"Compose\u5185\u7684Image\u7ec4\u4ef6\u7c7b\u4f3c\u4e8eImageView\uff0c\u4ec5\u652f\u6301\u4ece\u672c\u5730\u52a0\u8f7d\u56fe\u7247\u8d44\u6e90\uff0c\u8981\u60f3\u4ece\u7f51\u7edc\u4e2d\u83b7\u53d6\u56fe\u7247\u5e76\u52a0\u8f7d\uff0c\u6211\u4eec\u9996\u5148\u5c31\u5f97\u8981\u4f7f\u7528\u80fd\u591f\u5904\u7406\u7f51\u7edc\u8bf7\u6c42\u7684\u6846\u67b6\uff0c\u5c06\u8fdc\u7a0b\u56fe\u7247\u8d44\u6e90\u8f7d\u5165\u5230\u672c\u5730\u624d\u884c\u3002\u76ee\u524d\u4e3b\u6d41\u7684\u56fe\u7247\u52a0\u8f7d\u6846\u67b6Picasso\u3001Glide\u3001Coil\u7b49\uff0c\u5b83\u4eec\u66f4\u591a\u9762\u5bf9\u7684\u4ecd\u662f\u4f20\u7edf\u7684View\u7cfb\u7edf\u4e0b\uff0c\u5c06\u56fe\u7247\u52a0\u8f7d\u5230ImageView\u4e2d\u5e76\u663e\u793a\u8fd9\u6837\u7684\u5e94\u7528\u573a\u666f\uff0c\u800c\u4e0d\u662f\u4e3aCompose\u91cf\u8eab\u6253\u9020\u7684\uff0c\u57fa\u4e8e\u6b64\uff0cAccompanist\u5e93\u66fe\u63d0\u4f9b\u4e86\u4e00\u4e9b\u56fe\u7247\u52a0\u8f7d\u6846\u67b6\u7684\u6269\u5c55\u5e93\uff0c\u4e3aCompose\u7684Image\u663e\u793a\u7f51\u7edc\u56fe\u7247\u8fdb\u884c\u7b80\u4fbf\u652f\u6301\u3002\u65f6\u8fc7\u5883\u8fc1\uff0c\u540e\u6765Coil\u4e3aImage\u52a0\u8f7d\u56fe\u7247\u63d0\u4f9b\u4e86\u76f8\u5173\u652f\u6301\uff0c\u6545Accompanist\u4ee5\u524d\u5173\u4e8e\u56fe\u7247\u52a0\u8f7d\u6846\u67b6\u6269\u5c55\u7684\u4f9d\u8d56\u90fd\u88ab\u5e9f\u5f03\u5e76\u4e0d\u63a8\u8350\u4f7f\u7528\u4e86\u3002\uff08Picasso\u53ef\u80fd\u5728\u957f\u671f\u5185\u90fd\u4e0d\u4f1a\u652f\u6301Compose Image\uff0c",(0,i.kt)("a",{parentName:"p",href:"https://github.com/square/picasso/issues/2203"},"\u8be6\u60c5"),"\uff09"),(0,i.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5206\u6790Accompanist\u66fe\u7ecf\u662f\u5982\u4f55\u5bf9\u56fe\u7247\u6846\u67b6\u505a\u6269\u5c55\u9002\u914d\uff0c\u4f7f\u4e4b\u80fd\u591f\u4e0eCompose\u914d\u5408\u5de5\u4f5c\u7684\u3002"),(0,i.kt)("h2",{id:"picassoin-version-062"},"Picasso(in version 0.6.2)"),(0,i.kt)("p",null,"Accompanist\u57280.3.0\u7248\u672c\u5c31\u63d0\u4f9b\u4e86Picasso\u7684\u652f\u6301\uff0c\u4e0d\u8fc7\uff0c\u5728\u7248\u672c0.7.0\u8be5\u96c6\u6210\u88ab\u79fb\u9664\uff08\u76f8\u5173\u7684pull\u53c2\u89c1",(0,i.kt)("a",{parentName:"p",href:"https://github.com/google/accompanist/pull/253"},"https://github.com/google/accompanist/pull/253"),"\uff09"),(0,i.kt)("p",null,"\u57280.6.2\u7248\u672c\u4e2d\uff0c\u60f3\u8981\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\uff0c\u4f60\u53ef\u80fd\u4f1a\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'PicassoImage(\n    data = "http://..."\n    modifier = Modifier.size(50.dp),\n) { imageLoadState ->\n    when(imageLoadState) {\n        ...\n    }\n}\nCoilImage(\n    data = "https://i.imgur.com/StXm8nf.jpg",\n    contentDescription = null,\n    onRequestCompleted = {\n        println("LoadingCoilImage onRequestCompleted $it")\n    },\n    contentScale = ContentScale.Crop,\n    modifier = Modifier.fillMaxWidth(),\n) {\n    ...\n}\n')),(0,i.kt)("p",null,"\u5728version 0.6.2\u4e2d\uff0c\u52a0\u8f7d\u8fdc\u7a0b\u56fe\u7247\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4e13\u7528\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"Image"),"\u7ec4\u4ef6\uff0c\u4f7f\u7528Picasso\u6846\u67b6\u7684\u8c03\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"PicassoImage"),"\uff0c\u4f7f\u7528Coil\u7684\u5219\u8c03\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"CoilImage"),"\uff0c\u7b49\u7b49\u3002\u5b83\u4eec\u90fd\u4f9d\u8d56\u4e8e\u4e00\u4e2aimageloader-core\u7684\u6838\u5fc3\u5e93\u6765\u8fdb\u884c\u56fe\u7247\u52a0\u8f7d\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u8c61\u8fd9\u4e2a\u52a0\u8f7d\u56fe\u7247\u7684\u65b9\u6cd5\uff0c\u4e3a\u4e86\u7cc5\u5408\u5404\u7c7b\u6846\u67b6\uff0c\u80af\u5b9a\u8981\u7528\u4e0d\u5c11\u6cdb\u578b\uff0c\u4e8b\u5b9e\u4e0a\u5b83\u957f\u4e0b\u9762\u8fd9\u6837\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun <R : Any, TR : Any> ImageLoad(\n    request: R,\n    executeRequest: suspend (TR) -> ImageLoadState,\n    modifier: Modifier = Modifier,\n    requestKey: Any = request,\n    transformRequestForSize: (R, IntSize) -> TR?,\n    shouldRefetchOnSizeChange: (currentResult: ImageLoadState, size: IntSize) -> Boolean = DefaultRefetchOnSizeChangeLambda,\n    onRequestCompleted: (ImageLoadState) -> Unit = EmptyRequestCompleteLambda,\n    content: @Composable BoxScope.(imageLoadState: ImageLoadState) -> Unit\n) {\n    ...\n}\n")),(0,i.kt)("p",null,"\u6cdb\u578bR\u4ee3\u8868\u8bf7\u6c42\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u4e4b\u6240\u4ee5\u662f\u6cdb\u578b\uff0c\u662f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5404\u79cd\u6846\u67b6\u90fd\u652f\u6301\u591a\u7c7b\u578b\u7684\u56fe\u7247\u52a0\u8f7d\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u53ef\u80fd\u662f\u57fa\u4e8e\u4e00\u4e2aURL\u7684String\uff0c\u4e5f\u53ef\u80fd\u5355\u7eaf\u662f\u4e00\u4e2aresource\u7684id\uff0c\u6216\u8005\u5c31\u662f\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap"),"\uff0c\u7b49\u7b49\u3002\u6cdb\u578bTR\u4ee3\u8868\u4e86\u4e0d\u540c\u56fe\u7247\u6846\u67b6\u5185\u6536\u96c6\u672c\u6b21\u56fe\u7247\u8bf7\u6c42\u4fe1\u606f\u7684\u5b9e\u4f53\u7c7b\uff08\u6216\u8005\u662fBuilder\uff09\uff0c\u5728Picasso\u4e2d\u8fd9\u4e2a\u7c7b\u53eb",(0,i.kt)("inlineCode",{parentName:"p"},"RequestCreator"),"\uff0c\u5728Glide\u4e2d\u8fd9\u4e2a\u7c7b\u53eb",(0,i.kt)("inlineCode",{parentName:"p"},"RequestBuilder"),"\u3002"),(0,i.kt)("p",null,"\u6211\u4eec\u7ee7\u7eed\u89c2\u5bdf\u5b83\u7684\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun <R : Any, TR : Any> ImageLoad(\n    request: R,\n    executeRequest: suspend (TR) -> ImageLoadState,\n    modifier: Modifier = Modifier,\n    requestKey: Any = request,\n    transformRequestForSize: (R, IntSize) -> TR?,\n    shouldRefetchOnSizeChange: (currentResult: ImageLoadState, size: IntSize) -> Boolean = DefaultRefetchOnSizeChangeLambda,\n    onRequestCompleted: (ImageLoadState) -> Unit = EmptyRequestCompleteLambda,\n    content: @Composable BoxScope.(imageLoadState: ImageLoadState) -> Unit\n) {\n    // \u4e09\u4e2arememberUpdatedState\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u66f4\u6539\u540e\u91cd\u7ec4\n    val updatedOnRequestCompleted by rememberUpdatedState(onRequestCompleted)\n    val updatedTransformRequestForSize by rememberUpdatedState(transformRequestForSize)\n    val updatedExecuteRequest by rememberUpdatedState(executeRequest)\n\n    // \u8fd9\u4e2astate\u62ff\u6765\u7f13\u5b58\u63a7\u4ef6\u5927\u5c0f\uff0c\u56e0\u4e3a\u63a7\u4ef6\u5927\u5c0f\u8981\u7b49\u5230Compose\u5185\u5bb9\u4f20\u5165constraints\u624d\u80fd\u786e\u5b9a\n    var requestSize by remember(requestKey) { mutableStateOf<IntSize?>(null) }\n\n    // \u91cd\u70b9\uff0c\u8fd9\u91cc\u4f7f\u7528produceState\u5c06executeRequest\u8fd4\u56de\u7684\u975eCompose\u72b6\u6001\u8f6c\u6362\u4e3a\u4e00\u4e2aState\n    // \u4e4b\u6240\u4ee5\u8fde\u52a0\u8f7d\u56fe\u7247\u7684\u8fc7\u7a0b\u90fd\u62bd\u8c61\u6210\u4e00\u4e2a\u53ebexecuteRequest\u7684lambda\uff0c\u8fd8\u662f\u56e0\u4e3a\u8981\u7cc5\u5408\u591a\u4e2a\u6846\u67b6\n    val loadState by produceState<ImageLoadState>(\n        initialValue = ImageLoadState.Loading,\n        key1 = requestKey,\n        key2 = requestSize,\n    ) {\n        // value\u4e00\u5f00\u59cb\u80af\u5b9a\u88ab\u8d4b\u503c\u4e3aImageLoadState.Loading\uff0c\u56e0\u4e3arequestSize\u4e3a\u7a7a\u3002\n        // \u5f53requestSize\u88ab\u8d4b\u503c\u540e\uff0c\u9996\u5148\u5c06\u5f00\u59cb\u6267\u884ctransformRequestForSize\u8fd9\u4e2alambda\n        // \u4f20\u5165\u539f\u6765\u7684request\u548c\u65b0\u83b7\u5f97\u7684size\uff0c\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u7c7b\u4f3cRequestBuilder\u7684\u7ed3\u679c\n        value = requestSize?.let { updatedTransformRequestForSize(request, it) }\n            ?.let { transformedRequest ->\n                   // \u8fd9\u91cc\u4f20\u5165\u521a\u624d\u7684RequestBuilder\n                try {\n                    // \u53d1\u8d77\u56fe\u7247\u52a0\u8f7d\u8bf7\u6c42\uff0c\u8fd9\u91cc\u53ef\u80fd\u4f1a\u6302\u8d77\n                    updatedExecuteRequest(transformedRequest)\n                } catch (e: CancellationException) {\n                    // We specifically don't do anything for the request coroutine being\n                    // cancelled: https://github.com/google/accompanist/issues/217\n                    // \u5982\u679c\u6211\u4eec\u54cd\u5e94\u4e86\u534f\u7a0b\u7684CancellationException\uff0c\u8ba9ImageLoadState\u53d8\u6210\u4e86Error\n                    // \u6709\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff0c\u56e0\u4e3a\u5982\u679c\u53d6\u6d88\u7684\u534f\u7a0b\u5728\u65b0\u534f\u7a0b\u5b8c\u6210\u540e\u6267\u884c\uff0c\n                    // \u4f1a\u5bfc\u81f4\u65b0\u7684\u56fe\u7247\u72b6\u6001\uff08Success\uff09\u88ab\u4e0a\u6b21\u53d6\u6d88\u7684\u7ed3\u679c\uff08Error\uff09\u8986\u76d6\n                    throw e\n                } catch (e: Error) {\n                    // Re-throw all Errors\n                    throw e\n                } catch (e: IllegalStateException) {\n                    // Re-throw all IllegalStateExceptions\n                    throw e\n                } catch (t: Throwable) {\n                    // Anything else, we wrap in a Error state instance\n                    // \u9664\u4e86CancellationException\u3001Error\u3001IllegalStateException\u4e4b\u5916\uff0c\n                    // \u5176\u4f59\u7684\u9519\u8bef\u5c06\u4f1a\u4ee4\u72b6\u6001\u8f6c\u53d8\u4e3aError\n                    ImageLoadState.Error(painter = null, throwable = t)\n                    // also\u5185\uff0c\u52a0\u8f7d\u5b8c\u6210\uff0c\u56de\u8c03onRequestCompleted\n                }.also(updatedOnRequestCompleted)\n            } ?: ImageLoadState.Loading\n    }\n\n    BoxWithConstraints(\n        modifier = modifier,\n        propagateMinConstraints = true,\n    ) {\n        val size = IntSize(\n            width = if (constraints.hasBoundedWidth) constraints.maxWidth else -1,\n            height = if (constraints.hasBoundedHeight) constraints.maxHeight else -1\n        )\n        if (requestSize == null ||\n            (requestSize != size && shouldRefetchOnSizeChange(loadState, size))\n        ) {\n            requestSize = size\n        }\n\n        content(loadState)\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ImageLoad"),"\u7684\u601d\u8def\u6e05\u6670\u660e\u4e86\uff1a\u8c03\u7528\u65b9\u544a\u8bc9\u5b83\u5982\u4f55build\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5e76\u5728\u4f7f\u7528\u56fe\u7247\u6846\u67b6\u7684\u8fc7\u7a0b\u4e2d\u4ea7\u751f",(0,i.kt)("inlineCode",{parentName:"p"},"ImageLoadState"),"\u72b6\u6001\uff0c\u5b83\u4f1a\u628a",(0,i.kt)("inlineCode",{parentName:"p"},"ImageLoadState"),"\u8f6c\u6362\u4e3a\u53ef\u4ee5\u89c2\u5bdf\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"State<ImageLoadState>"),"\u3002"),(0,i.kt)("p",null,"\u76f4\u63a5\u4f7f\u7528\u901a\u7528\u5b9e\u73b0\u7684\u7f3a\u70b9\u5728\u4e8e\u4f1a\u4ea7\u751f\u5f88\u591a\u6a21\u677f\u4ee3\u7801\uff0c\u53ef\u4ee5\u57fa\u4e8e\u901a\u7528\u5b9e\u73b0\u8fdb\u884c\u66f4\u7b80\u6d01\u7684\u5c01\u88c5\uff0c\u6211\u4eec\u4ee5\u7279\u5b9a\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"PicassoImage"),"\u7684\u5b9e\u73b0\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// \u8fd9\u4e2aAPI\u5c01\u88c5\u66f4\u5f7b\u5e95\uff0c\u4e0d\u9700\u8981\u5199when(state)\uff0c\u76f4\u63a5\u5728\u51fd\u6570\u4e2d\u4f20\u5165error\u3001loading\u7684\u5185\u5bb9\u5373\u53ef\n@Composable\nfun PicassoImage(\n    data: Any,\n    contentDescription: String?,\n    modifier: Modifier = Modifier,\n    alignment: Alignment = Alignment.Center,\n    contentScale: ContentScale = ContentScale.Fit,\n    colorFilter: ColorFilter? = null,\n    fadeIn: Boolean = false,\n    picasso: Picasso = LocalPicasso.current,\n    requestBuilder: (RequestCreator.(size: IntSize) -> RequestCreator)? = null,\n    shouldRefetchOnSizeChange: (currentResult: ImageLoadState, size: IntSize) -> Boolean = DefaultRefetchOnSizeChangeLambda,\n    onRequestCompleted: (ImageLoadState) -> Unit = EmptyRequestCompleteLambda,\n    error: @Composable (BoxScope.(ImageLoadState.Error) -> Unit)? = null,\n    loading: @Composable (BoxScope.() -> Unit)? = null,\n) {\n    PicassoImage(\n        data = data,\n        modifier = modifier,\n        requestBuilder = requestBuilder,\n        picasso = picasso,\n        shouldRefetchOnSizeChange = shouldRefetchOnSizeChange,\n        onRequestCompleted = onRequestCompleted,\n    ) { imageState ->\n        when (imageState) {\n            is ImageLoadState.Success -> {\n                // MaterialLoadingImage\u662f0.6.2\u7248\u672c\u4e2d\u5b58\u5728\u7684\u4e00\u4e2a\u5b9e\u73b0fadeIn\u6548\u679c\u7684\u63a7\u4ef6\n                // \u539f\u7406\u662f\u4f7f\u7528Compose\u52a8\u753b\u4e2d\u7684Transition\u6258\u7ba1\u4e09\u4e2a\u52a8\u753b\n                // alpha(\u900f\u660e\u5ea6),brightness(\u4eae\u5ea6),saturation(\u9971\u548c\u5ea6), \n                // \u540c\u65f6\u4fee\u6539\u4f20\u5165Image\u5185\u7684colorFliter\u7684\u8fd9\u4e09\u4e2a\u503c\uff0c\u4ece\u800c\u5b9e\u73b0\u6e10\u5165\u6548\u679c\n                MaterialLoadingImage(\n                    result = imageState,\n                    contentDescription = contentDescription,\n                    fadeInEnabled = fadeIn,\n                    alignment = alignment,\n                    contentScale = contentScale,\n                    colorFilter = colorFilter\n                )\n            }\n            is ImageLoadState.Error -> if (error != null) error(imageState)\n            ImageLoadState.Loading -> if (loading != null) loading()\n            ImageLoadState.Empty -> Unit\n        }\n    }\n}\n\n\n@Composable\nfun PicassoImage(\n    data: Any,\n    modifier: Modifier = Modifier,\n    picasso: Picasso = LocalPicasso.current,\n    requestBuilder: (RequestCreator.(size: IntSize) -> RequestCreator)? = null,\n    shouldRefetchOnSizeChange: (currentResult: ImageLoadState, size: IntSize) -> Boolean = DefaultRefetchOnSizeChangeLambda,\n    onRequestCompleted: (ImageLoadState) -> Unit = EmptyRequestCompleteLambda,\n    content: @Composable BoxScope.(imageLoadState: ImageLoadState) -> Unit\n) {\n    ImageLoad(\n        request = data.toRequestCreator(picasso),\n        requestKey = data, // Picasso RequestCreator doesn't support equality so we use the data\n        executeRequest = { r ->\n            @OptIn(ExperimentalCoroutinesApi::class)\n            suspendCancellableCoroutine { cont ->\n                // \u521d\u59cb\u5316\u4e86\u4e00\u4e2aTarget\uff0c\u8fd9\u4e2aTarget\u7528\u6765\u83b7\u53d6\u56fe\u7247\u52a0\u8f7d\u7ed3\u679c\n                val target = object : com.squareup.picasso.Target {\n                    override fun onBitmapLoaded(bitmap: Bitmap, from: Picasso.LoadedFrom) {\n                        val state = ImageLoadState.Success(\n                            painter = BitmapPainter(bitmap.asImageBitmap()),\n                            source = from.toDataSource()\n                        )\n                        // \u534f\u7a0b\u6062\u590d\n                        cont.resume(state) {\n                            // Not much we can do here. Ignore this\n                        }\n                    }\n\n                    override fun onBitmapFailed(exception: Exception, errorDrawable: Drawable?) {\n                        val state = ImageLoadState.Error(\n                            throwable = exception,\n                            painter = errorDrawable?.toPainter(),\n                        )\n                        // \u534f\u7a0b\u6062\u590d\n                        cont.resume(state) {\n                            // Not much we can do here. Ignore this\n                        }\n                    }\n\n                    override fun onPrepareLoad(placeholder: Drawable?) = Unit\n                }\n\n                cont.invokeOnCancellation {\n                    // \u53d6\u6d88\u56fe\u7247\u52a0\u8f7d\n                    picasso.cancelRequest(target)\n                }\n\n                // Now kick off the image load into our target\n                r.into(target)\n            }\n        },\n        transformRequestForSize = { r, size ->\n            val sizedRequest = when {\n                // \u5982\u679c\u5c3a\u5bf8\u5305\u542b\u672a\u6307\u5b9a\u5c3a\u5bf8\u7684\u5c3a\u5bf8\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728Coil\u8bf7\u6c42\u4e2d\u6307\u5b9a\u5c3a\u5bf8\n                size.width < 0 || size.height < 0 -> r\n               \n                size != IntSize.Zero -> {\n                    r.resize(size.width, size.height)\n                        .centerInside()\n                        .onlyScaleDown()\n                }\n                // Otherwise we have a zero size, so no point executing a request\n                // \u672a\u83b7\u5f97size\uff0c\u56e0\u6b64\u6682\u65f6\u65e0\u6cd5\u751f\u6210\u8bf7\u6c42\n                else -> null\n            }\n\n            // \u6839\u636e\u53c2\u6570\u6765build\u8bf7\u6c42\n            if (sizedRequest != null && requestBuilder != null) {\n                // If we have a transformed request and builder, let it run\n                requestBuilder(sizedRequest, size)\n            } else {\n                // Otherwise we just return the sizedRequest\n                sizedRequest\n            }\n        },\n        shouldRefetchOnSizeChange = shouldRefetchOnSizeChange,\n        onRequestCompleted = onRequestCompleted,\n        modifier = modifier,\n        content = content\n    )\n}\n")),(0,i.kt)("p",null,"\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u603b\u7ed3\u4e00\u4e0b\uff0c\u57280.6.2\u7248\u672c\uff0c\u5b9e\u73b0\u7f51\u7edc\u56fe\u7247\u52a0\u8f7d\u7684\u96c6\u6210\u5e93\u601d\u8def\u5982\u4e0b\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u56fe\u7247\u52a0\u8f7d\uff1a\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"li"},"Target"),"\u56de\u8c03\u83b7\u53d6\u52a0\u8f7d\u7684\u7ed3\u679c\uff08\u5404\u4e2a\u6846\u67b6\u90fd\u6709\u7c7b\u4f3c\u7684\u62bd\u8c61\u7684",(0,i.kt)("inlineCode",{parentName:"li"},"Target"),"\u800c\u4e0d\u662f\u9650\u5236\u76ee\u6807\u5fc5\u987b\u662f",(0,i.kt)("inlineCode",{parentName:"li"},"ImageView"),"\uff09\u3002\u7ed3\u679c\u8fd4\u56de\u7684\u8fc7\u7a0b\u662f\u963b\u585e\u5f0f\uff0c\u534f\u7a0b\u5c06\u5728",(0,i.kt)("inlineCode",{parentName:"li"},"produceState"),"\u5185\u6267\u884c\u5230",(0,i.kt)("inlineCode",{parentName:"li"}," updatedExecuteRequest(transformedRequest)"),"\u540e\u6302\u8d77\uff0c\u76f4\u5230\u8fd9\u4e2alambda\u8fd4\u56de\u7ed3\u679c\uff0cState\u7684\u503c\u5c06\u4f1a\u5728\u7ed3\u679c\u8fd4\u56de\u540e\u4ea7\u751f\u53d8\u5316\u3002\u5f53\u7136\uff0c\u5982\u679c\u534f\u7a0b\u88ab\u53d6\u6d88\uff0cPicasso\u4e5f\u4f1a\u53d6\u6d88\u52a0\u8f7d\u5230",(0,i.kt)("inlineCode",{parentName:"li"},"Target"),"\u90a3\u4e2a\u56fe\u7247\u8bf7\u6c42\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u56fe\u7247\u5927\u5c0f\u7ea6\u675f\uff1a\u4f9d\u8d56\u4e8e",(0,i.kt)("inlineCode",{parentName:"li"},"BoxWithConstraints"),"\u83b7\u5f97\u7684\u7ea6\u675f\u5927\u5c0f\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u6e10\u5165\u52a8\u753b\u5b9e\u73b0\uff1a\u4f7f\u7528\u52a8\u753bAPI ",(0,i.kt)("inlineCode",{parentName:"li"},"Transition "),"\u5bf9",(0,i.kt)("inlineCode",{parentName:"li"},"ColorFliter"),"\u7684alpha,brightness,saturation\u8fdb\u884c\u52a8\u6001\u4fee\u6539\uff0c\u4ece\u800c\u5b9e\u73b0\u6e10\u5165\u52a8\u753b\u3002"),(0,i.kt)("li",{parentName:"ol"},"loading\u5360\u4f4d\u56fe\u3001error\u663e\u793a\u7b49\uff1a\u4f9d\u8d56\u4e8e\u7528\u6237\u4f20\u5165\u7684",(0,i.kt)("inlineCode",{parentName:"li"},"@Composable"),"\u5185\u5bb9.\u6839\u636e",(0,i.kt)("inlineCode",{parentName:"li"},"produceState"),"\u751f\u6210\u7684\u72b6\u6001\uff0c",(0,i.kt)("inlineCode",{parentName:"li"},"PicassoImage"),"\u5185\u663e\u793a\u7684",(0,i.kt)("inlineCode",{parentName:"li"},"@Composable"),"\u5185\u5bb9\u4f1a\u52a8\u6001\u53d8\u5316\u3002")),(0,i.kt)("h2",{id:"glidein-version-0130"},"Glide(in version 0.13.0)"),(0,i.kt)("p",null,"0.3.0\u7248\u672c\u8bde\u751f\u4e8e2020\u5e7410\u6708\u4efd\uff0c\u800c\u5f53\u65f6\u95f4\u6765\u5230\u4e862021\u5e744\u6708\uff0cAccompanist\u53d1\u5e030.8.0\u7248\u672c\uff0cCoil \u548c Glide \u96c6\u6210\u5e93\u8fdb\u884c\u4e86\u5927\u89c4\u6a21\u7684\u91cd\u6784\u3002\u4e0a\u9762\u63d0\u5230\u7684\u7c7b\u4f3c\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"CoilImage()"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"GlideImage()"),"API\u90fd\u5df2\u7ecf\u88ab\u5f03\u7528\u4e86\u3002"),(0,i.kt)("p",null,"\u4ee5\u4e0b\u5bf9Glide\u96c6\u6210\u5e93\u7684\u5206\u6790\u57fa\u4e8e\u7248\u672c0.13.0\u7684\u4ee3\u7801\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u57280.13.0\u7248\u672c\u60f3\u8981\u52a0\u8f7d\u8fdc\u7a0b\u56fe\u7247\uff0c\u6216\u8bb8\u4f60\u4f1a\u5199\u51fa\u4ee5\u4e0b\u7684\u4ee3\u7801\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'Image(\n    painter = rememberGlidePainter(request = "http://..."),\n    contentDescription = null\n)\n')),(0,i.kt)("p",null,"\u65b0\u7684API\u4e0d\u518d\u9700\u8981\u4e13\u95e8\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"Image"),"\u7ec4\u4ef6\uff0c\u800c\u662f\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Painter"),"\u8fd9\u79cd\u6982\u5ff5\u6765\u8868\u73b0\u52a0\u8f7d\u7684\u7ed3\u679c\u3002\u65b0\u7684API\u5bf9\u6027\u80fd\u7684\u63d0\u5347\u4f3c\u4e4e\u6709\u6240\u63d0\u5347\uff1aCompose\u5185\u5bb9\u91cd\u7ec4\u540e\uff0c\u9700\u8981\u91cd\u7ed8\u7684\u4e0d\u518d\u662f\u4e0d\u540c\u7684Loading\u7ec4\u4ef6\u6216Success\u7ec4\u4ef6\uff0c\u73b0\u5728\u6838\u5fc3\u7ec4\u4ef6\u4e00\u5b9a\u662f\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"Image"),"\uff0c\u968f\u52a0\u8f7d\u72b6\u6001\u53d8\u5316\u7684\u53ea\u4e0d\u8fc7\u662fImage\u5185\u7ed8\u5236\u7684\u5185\u5bb9\u800c\u5df2\uff0c\u91cd\u7ed8\u8303\u56f4\u6709\u6240\u7f29\u5c0f\u3002\u8fd9\u5f88\u7b26\u5408\u6211\u4eec\u5bf9",(0,i.kt)("inlineCode",{parentName:"p"},"ImageView"),"\u7684\u60f3\u8c61\uff1a\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u663e\u793a\u4e00\u5f20placeholder\u5360\u4f4d\u56fe\uff0c\u6210\u529f\u663e\u793a\u6700\u7ec8\u7ed3\u679c\uff0c\u5426\u5219\u663e\u793aerror\u56fe\u7247\uff0c\u800cplaceholder\u548cerror\u90fd\u53ef\u4ee5\u53d1\u8d77\u56fe\u7247\u52a0\u8f7d\u8bf7\u6c42\u7684\u65f6\u5019\u8bbe\u7f6e\u3002"),(0,i.kt)("p",null,"Painter\u662f\u4e00\u4e2a\u4ec0\u4e48\u6837\u7684\u6982\u5ff5\uff1f\u6211\u4eec\u53ef\u4ee5\u5148\u770b\u4e00\u4e0b\u7c7b\u6ce8\u91ca\u662f\u600e\u4e48\u4ecb\u7ecd\u5b83\u7684\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n* \u5bf9\u53ef\u4ee5\u753b\u51fa\u6765\u7684\u4e1c\u897f\u7684\u62bd\u8c61\u3002\u9664\u4e86\u80fd\u591f\u7ed8\u5236\u5230\u6307\u5b9a\u7684\u6709\u754c\u533a\u57df\u5916\uff0cPainter\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9ad8\u7ea7\u673a\u5236\uff0c\u6d88\u8d39\u8005\u53ef\u4ee5\u4f7f\u7528\n* \u8fd9\u4e9b\u673a\u5236\u6765\u914d\u7f6e\u5185\u5bb9\u7684\u7ed8\u5236\u65b9\u5f0f\u3002\u5176\u4e2d\u5305\u62ecalpha\u3001ColorFilter\u548cRTL\n* \u5b9e\u73b0\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e2a\u6709\u610f\u4e49\u7684equals\u65b9\u6cd5\u6765\u6bd4\u8f83\u4e0d\u540cPainter\u5b50\u7c7b\u7684\u503c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u4f9d\u8d56\u4e8e\u5f15\u7528\u76f8\u7b49\n*/\nabstract class Painter {\n    ...\n    protected abstract fun DrawScope.onDraw()\n}\n")),(0,i.kt)("p",null,"\u63cf\u8ff0\u770b\u8d77\u6765\u6709\u70b9\u50cf",(0,i.kt)("inlineCode",{parentName:"p"},"Drawable"),"\uff0c\u4f46\u5b9e\u9645\u4e0a",(0,i.kt)("inlineCode",{parentName:"p"},"Drawable"),"\u6bd4",(0,i.kt)("inlineCode",{parentName:"p"},"Painter"),"\u66f4\u52a0\u590d\u6742\u4e00\u4e9b\uff0c\u9664\u4e86\u4e0a\u8ff0\u7684alpha\u3001ColorFilter\u3001LayoutDirection\u4e4b\u5916\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"Drawable"),"\u8fd8\u5177\u6709\u52a8\u753bCallback\u3001Level\u3001Hotspot\u7b49\u5c5e\u6027\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"DrawScope.onDraw()"),"\u65b9\u6cd5\u7c7b\u4f3c\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"Drawable"),"\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"draw(Canvas canvas)"),"\u3002"),(0,i.kt)("p",null,"\u7ee7\u7eed\u89c2\u5bdf",(0,i.kt)("inlineCode",{parentName:"p"},"rememberGlidePainter"),"\u7684\u5177\u4f53\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun rememberGlidePainter(\n    request: Any?,\n    requestManager: RequestManager = GlidePainterDefaults.defaultRequestManager(),\n    shouldRefetchOnSizeChange: ShouldRefetchOnSizeChange = ShouldRefetchOnSizeChange { _, _ -> false },\n    // \u6ce8\u610f\u8fd9\u91cc\u7684requestBuilder\uff0c\u52a0\u8f7d\u7684\u7ed3\u679c\u7c7b\u578b\u5df2\u7ecf\u88ab\u56fa\u5b9a\u4e3adrawable\n    requestBuilder: (RequestBuilder<Drawable>.(size: IntSize) -> RequestBuilder<Drawable>)? = null,\n    // \u65b0\u7684API\u4e5f\u80fd\u5f00\u542ffadeIn\u6548\u679c\n    fadeIn: Boolean = false,\n    fadeInDurationMs: Int = LoadPainterDefaults.FadeInTransitionDuration,\n    // \u662f\u4e0d\u662f\u5f88\u7591\u60d1\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6709\u4e2a\u5360\u4f4d\u56feid\u7684\u53c2\u6570\uff1fGlide\u672c\u8eab\u5c31\u652f\u6301\u5360\u4f4d\u56fe\u8bbe\u7f6e\uff0c\n    // \u5728Build Request\u7684\u65f6\u5019\u8bbe\u7f6e\u4e0d\u5c31\u884c\u4e86\u5417\uff1f\u5176\u5b9e\u8fd9\u4e2a\u53c2\u6570\u662f\u7ed9Compose\u9884\u89c8\u6a21\u5f0f\u7528\u7684\n    @DrawableRes previewPlaceholder: Int = 0,\n): LoadPainter<Any> {\n    // GlideLoader\u662f\u52a0\u8f7d\u903b\u8f91\u5b9e\u73b0\u7c7b\uff0c\u7a0d\u540e\u5c55\u793a\n    val glideLoader = remember {\n        GlideLoader(requestManager, requestBuilder)\n    }.apply {\n        // \u8fd9\u91cc\u7684\u903b\u8f91\u5e76\u4e0d\u662f\u591a\u4f59\u7684\uff0c\u8981\u77e5\u9053\u5982\u679ckey\u6ca1\u6709\u53d8\u5316\uff0cremember\u51fd\u6570\u4f1a\u76f4\u63a5\u8fd4\u56de\u4e0a\u6b21\u8ba1\u7b97\u7684\u7ed3\u679c\uff0c\n        // \u8fd9\u91cc\u60f3\u8868\u8fbe\u7684\u662f\uff0c\u5bf9\u4e0a\u6b21\u7684\u7ed3\u679c\u8c03\u7528apply\uff0c\u66f4\u65b0requestManager\u548crequestBuilder\n        this.requestManager = requestManager\n        this.requestBuilder = requestBuilder\n    }\n    // rememberLoadPainter\u4f4d\u4e8e\u4e4b\u524d\u6240\u8bf4\u7684imageloading-core\u7684\u6838\u5fc3\u5e93\n    // \u57280.13.0\u7248\u672cCoil\u548cGlide\u90fd\u7528\u5230\u8fd9\u4e2a\u5e93\u6765\u83b7\u53d6LoadPainter\n    return rememberLoadPainter(\n        loader = glideLoader,\n        request = checkData(request),\n        shouldRefetchOnSizeChange = shouldRefetchOnSizeChange,\n        fadeIn = fadeIn,\n        fadeInDurationMs = fadeInDurationMs,\n        previewPlaceholder = previewPlaceholder\n    )\n}\n// checkData\u68c0\u67e5\u4e86request\u7684\u7c7b\u578b\nprivate fun checkData(data: Any?): Any? {\n    when (data) {\n        is Drawable -> {\n            throw IllegalArgumentException(....)\n        }\n        is ImageBitmap -> {\n            throw IllegalArgumentException(....)\n        }\n        is ImageVector -> {\n            throw IllegalArgumentException(....)\n        }\n        is Painter -> {\n            throw IllegalArgumentException(....)\n        }\n    }\n    return data\n}\n")),(0,i.kt)("p",null,"imageloading-core\u8fd9\u6b21\u5982\u4f55\u62bd\u8c61\u56fe\u7247\u52a0\u8f7d\u884c\u4e3a\uff1f\u6211\u4eec\u5148\u89c2\u5bdf\u4e00\u4e0b",(0,i.kt)("inlineCode",{parentName:"p"},"rememberLoadPainter"),"\u7684\u53c2\u6570\u5217\u8868\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun <R> rememberLoadPainter(\n    loader: Loader<R>,\n    request: R?,\n    shouldRefetchOnSizeChange: ShouldRefetchOnSizeChange,\n    fadeIn: Boolean = false,\n    fadeInDurationMs: Int = LoadPainterDefaults.FadeInTransitionDuration,\n    @DrawableRes previewPlaceholder: Int = 0,\n): LoadPainter<R> {...}\n\n@Stable\nfun interface Loader<R> {\n    fun load(request: R, size: IntSize): Flow<ImageLoadState>\n}\n")),(0,i.kt)("p",null,"\u4e0e0.6.2\u7248\u672c\u4e0d\u540c\uff0c\u52a0\u8f7d\u903b\u8f91\u5b9e\u73b0\u7c7b\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u72b6\u6001\u6d41",(0,i.kt)("inlineCode",{parentName:"p"},"Flow<ImageLoadState>"),"\uff0c\u800c\u4e0d\u518d\u662f\u5355\u4e00\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"ImageLoadState"),"\uff0c\u867d\u7136\u8bf7\u6c42\u7c7b\u578b\u4ecd\u7136\u662f\u6cdb\u578b\u7684\uff0c\u4f46\u662f\u5df2\u7ecf\u4e0d\u9700\u8981\u8868\u8fbe\u7c7b\u4f3c\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"RequestBuilder"),"\u8fd9\u6837\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u5982\u4f55\u6784\u5efa\u3001\u53d1\u8d77\u8bf7\u6c42\u7531",(0,i.kt)("inlineCode",{parentName:"p"},"Loader"),"\u81ea\u5df1\u51b3\u5b9a\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ImageLoadState"),"\u7684\u5b9e\u73b0\u5982\u4e0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sealed class ImageLoadState {\n    object Empty : ImageLoadState()\n    data class Loading(\n        val placeholder: Painter?,\n        val request: Any,\n    ) : ImageLoadState()\n    data class Success(\n        val result: Painter,\n        val source: DataSource,\n        val request: Any,\n    ) : ImageLoadState()\n    data class Error(\n        val request: Any,\n        val result: Painter? = null,\n        val throwable: Throwable? = null\n    ) : ImageLoadState()\n}\n")),(0,i.kt)("p",null,"\u4e0d\u96be\u53d1\u73b0\u6240\u6709\u7684\u56fe\u7247\u52a0\u8f7d\u7ed3\u679c\u90fd\u8981\u6c42\u5c01\u88c5\u6210",(0,i.kt)("inlineCode",{parentName:"p"},"Painter"),"\u8fdb\u884c\u8fd4\u56de\uff0c\u4f46\u5c34\u5c2c\u7684\u662f\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"Drawable"),"\u4e0e",(0,i.kt)("inlineCode",{parentName:"p"},"Painter"),"\u5e76\u4e0d\u662f\u5929\u751f\u4e92\u901a\u7684\u7c7b\u578b\uff08Compose 1.0.5\u53ea\u6709\u4e09\u79cd",(0,i.kt)("inlineCode",{parentName:"p"},"Painter"),"\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"BitmapPainter"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"VectorPainter"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"ColorPainter"),"\uff09\uff0c\u597d\u5728Accompanist\u63d0\u4f9b\u4e86\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"DrawablePainter"),"\u3002\u4e0d\u8fc7\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u4e3a\u4ec0\u4e48\u975e\u5f97\u8981\u6c42\u751f\u4ea7\u8005Loader\u8fd4\u56de",(0,i.kt)("inlineCode",{parentName:"p"},"Painter"),"\u4e0d\u53ef\u5462\uff1f\u90a3\u662f\u56e0\u4e3a\u52a0\u8f7d\u8bf7\u6c42\u662f\u591a\u7c7b\u578b\u7684\uff0c\u6d88\u8d39\u8005LoadPainter\u5176\u5b9e\u65e0\u6cd5\u786e\u5b9a\u751f\u4ea7\u8005\u8fd4\u56de\u7684\u7ed3\u679c\u7684\u7c7b\u578b\uff0c\u81ea\u7136\u4e5f\u4e0d\u786e\u5b9a\u5982\u4f55\u7ed8\u5236\u5b83\uff0c\u56e0\u6b64LoadPainter\u91c7\u7528\u4e86\u7c7b\u4f3c\u4e8e\u88c5\u9970\u8005\u6a21\u5f0f\u7684\u8bbe\u8ba1\uff0c\u56fe\u7247\u7ed3\u679c\u7ed8\u5236\u4ea4\u7531State\u5185\u7684Painter\u5b8c\u6210\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GlideLoader"),"\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'internal class GlideLoader(\n    requestManager: RequestManager,\n    requestBuilder: (RequestBuilder<Drawable>.(size: IntSize) -> RequestBuilder<Drawable>)?,\n) : Loader<Any> {\n    var requestManager by mutableStateOf(requestManager)\n    var requestBuilder by mutableStateOf(requestBuilder)\n\n    /**\n     * \u4e0d\u8981\u5220\u9664callbackFlow\u4e0a\u7684\u663e\u5f0f\u7c7b\u578b<ImageLoadState>\u3002IR\u7f16\u8bd1\u5668\u4e0d\u559c\u6b22\u9690\u5f0f\u7c7b\u578b\u3002\n     */\n    @Suppress("RemoveExplicitTypeArguments")\n    @OptIn(ExperimentalCoroutinesApi::class)\n    override fun load(\n        request: Any,\n        size: IntSize\n    ): Flow<ImageLoadState> = callbackFlow<ImageLoadState> {\n        var failException: Throwable? = null\n        // \u8fd9\u91cc\u540c\u65f6\u4f7f\u7528Target\u4e0eListener\u4e24\u79cd\u673a\u5236\u6765\u76d1\u542c\u52a0\u8f7d\u72b6\u6001\uff0c\u5e76\u5411flow\u53d1\u9001\u5bf9\u5e94\u72b6\u6001\n        // Target\u5e76\u4e0d\u4f1a\u53bb\u5904\u7406Success\u7684\u72b6\u6001\uff0cListener\u5df2\u7ecf\u62a2\u5148\u5904\u7406\u5e76\u62e6\u622a\u4e86Target\u7684Success\u8c03\u7528\n        val target = object : EmptyCustomTarget(\n            if (size.width > 0) size.width else Target.SIZE_ORIGINAL,\n            if (size.height > 0) size.height else Target.SIZE_ORIGINAL\n        ) {\n            override fun onLoadStarted(placeholder: Drawable?) {\n                trySendBlocking(\n                    ImageLoadState.Loading(\n                        placeholder = placeholder?.let(::DrawablePainter),\n                        request = request\n                    )\n                )\n            }\n\n            override fun onLoadFailed(errorDrawable: Drawable?) {\n                trySendBlocking(\n                    ImageLoadState.Error(\n                        result = errorDrawable?.let(::DrawablePainter),\n                        request = request,\n                        throwable = failException\n                            ?: IllegalArgumentException("Error while loading $request")\n                    )\n                )\n                // Close the channel[Flow]\n                channel.close()\n            }\n\n            override fun onLoadCleared(resource: Drawable?) {\n                // Glide\u60f3\u8981\u91ca\u653e\u8d44\u6e90\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6e05\u9664\u7ed3\u679c\uff0c\u5426\u5219\u6211\u4eec\u53ef\u80fd\u4f1a\u7ed8\u5236\u5df2\u7ecf\u88ab\u56de\u6536\u7684\u89c6\u56fe\n                trySendBlocking(ImageLoadState.Empty)\n                // Close the channel[Flow]\n                channel.close()\n            }\n        }\n\n        val listener = object : RequestListener<Drawable> {\n            override fun onResourceReady(\n                drawable: Drawable,\n                model: Any,\n                target: Target<Drawable>,\n                dataSource: com.bumptech.glide.load.DataSource,\n                isFirstResource: Boolean\n            ): Boolean {\n                // \u8fd9\u91cc\u53d1\u9001\u7684Painter\u7c7b\u578b\n                trySendBlocking(\n                    ImageLoadState.Success(\n                        result = DrawablePainter(drawable),\n                        source = dataSource.toDataSource(),\n                        request = request\n                    )\n                )\n                // Close the channel[Flow]\n                channel.close()\n                // Return true so that the target doesn\'t receive the drawable\n                // \u8fd9\u91cc\u8fd4\u56detrue\uff0cTarget\u5c31\u6536\u4e0d\u5230\u7ed3\u679c\u4e86\n                return true\n            }\n\n            override fun onLoadFailed(\n                e: GlideException?,\n                model: Any,\n                target: Target<Drawable>,\n                isFirstResource: Boolean\n            ): Boolean {\n                // Glide\u53ea\u4e3aListener\u6d3e\u53d1\u9519\u8bef\u7684Exception\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u7f13\u5b58\u4e00\u4e0b\n                failException = e\n                // \u8fd4\u56defalse\uff0c\u5141\u8bb8Target\u88ab\u56de\u8c03onLoadFailed\n                return false\n            }\n        }\n\n        // Start the image request into the target\n        requestManager.load(request)\n            .apply { requestBuilder?.invoke(this, size) }\n            .addListener(listener)\n            .into(target)\n\n        // Await the channel being closed and request finishing...\n        awaitClose {\n            // \u8fd9\u91cc\u6ca1\u6709\u8c03\u7528Glide.clear()\uff0c\u56e0\u4e3aclear\u4e4b\u540ePainter\u8fdb\u884c\u7ed8\u5236\u7684\u4f4d\u56fe\u53ef\u80fd\u4f1a\u88ab\u56de\u6536\uff0c\u8fd9\u4f1a\u62a5\u9519\n            // See https://github.com/google/accompanist/issues/419\n        }\n    }\n}\n')),(0,i.kt)("p",null,"\u603b\u4f53\u6765\u8bf4\u72b6\u6001\u8f6c\u6362\u903b\u8f91\u548c\u4ee5\u524d\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"callbackFlow"),"\u751f\u6210\u6570\u636e\u6d41\u540e\uff0c\u72b6\u6001\u53d1\u9001\u663e\u5f97\u66f4\u52a0\u4f18\u96c5\u4e86\u3002"),(0,i.kt)("p",null,"\u63a5\u4e0b\u6765\u5173\u6ce8",(0,i.kt)("inlineCode",{parentName:"p"},"rememberLoadPainter"),"\u7684\u5177\u4f53\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n\u4e00\u4e2a\u901a\u7528\u7684 image loading painter\uff0c\u5b83\u4e3a\u8981\u5b9e\u73b0\u7684\u56fe\u50cf\u52a0\u8f7d\u5e93\u63d0\u4f9bLoader\u63a5\u53e3\u3002\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4e0d\u5e94\u8be5\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u800c\u66f4\u63a8\u8350\u4f7f\u7528\u5728\u6b64\u57fa\u7840\u4e0a\u6784\u5efa\u7684\u6269\u5c55\u5e93\uff0c\u4f8b\u5982Coil\u548cGlide\u5e93\u3002\n*/\n@Composable\nfun <R> rememberLoadPainter(\n    loader: Loader<R>,\n    request: R?,\n    shouldRefetchOnSizeChange: ShouldRefetchOnSizeChange,\n    fadeIn: Boolean = false,\n    fadeInDurationMs: Int = LoadPainterDefaults.FadeInTransitionDuration,\n    @DrawableRes previewPlaceholder: Int = 0,\n): LoadPainter<R> {\n    val coroutineScope = rememberCoroutineScope()\n\n    // Our LoadPainter. This invokes the loader as appropriate to display the result.\n    val painter = remember(loader, coroutineScope) {\n        LoadPainter(loader, coroutineScope)\n    }\n    painter.request = request\n    painter.shouldRefetchOnSizeChange = shouldRefetchOnSizeChange\n    // \u7f13\u5b58\u7236\u5e03\u5c40\u7684\u5927\u5c0f\uff0c\u5728\u8ba1\u7b97\u56fe\u7247\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\u4f1a\u53c2\u8003\u6b64\u503c\n    painter.rootViewSize = LocalView.current.let { IntSize(it.width, it.height) }\n\n    // fadeIn\u52a8\u753b\u7684ColorFilter\n    // \u5b9e\u73b0\u539f\u7406\u548c0.6.2\u7248\u672c\u7c7b\u4f3c\uff0c\u4e5f\u662f\u4fee\u6539\u4e86ColorFliter\u7684alpha(\u900f\u660e\u5ea6),\n    // brightness(\u4eae\u5ea6),saturation(\u9971\u548c\u5ea6)\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u7684ColorFliter\u7531LoadPainter\u76f4\u63a5\u8fdb\u884c\u5904\u7406\n    animateFadeInColorFilter(\n        painter = painter,\n        enabled = { result ->\n            // \u4ece disk/network \u624d\u53bb\u5c55\u793afadeIn\u52a8\u753b\n            // \u8fd9\u4f7f\u6211\u4eec\u53ef\u4ee5\u8fd1\u4f3c\u5730\u53ea\u5728\u201c\u9996\u6b21\u52a0\u8f7d\u201d\u65f6\u8fd0\u884c\u52a8\u753b\n            fadeIn && result is ImageLoadState.Success && result.source != DataSource.MEMORY\n        },\n        durationMs = fadeInDurationMs,\n    )\n\n    // Our result painter, created from the ImageState with some composition lifecycle\n    // callbacks\n    // \u6211\u4eec\u7684result painter\uff0c\u901a\u8fc7\u4e00\u4e9bcomposition\u751f\u547d\u5468\u671f\u7684\u56de\u8c03\u4eceImageState\u521b\u5efa\n    updatePainter(painter, previewPlaceholder)\n\n    return painter\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"LoaderPainter"),"\u7684\u5b9e\u73b0\u5982\u4e0b\u3002\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\u8fd9\u4e2a\u63a5\u53e3\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\u662f\u4e00\u4e2a\u80fd\u591f\u5b9e\u73b0\u5bf9remember\u884c\u4e3a\u7684\u89c2\u5bdf\u7684\u63a5\u53e3\uff0c\u5982\u679ccomposition\u8bb0\u4f4f\u6216\u8005\u9057\u5fd8\u7684\u662f\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\u5bf9\u8c61\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\u80fd\u591f\u6536\u5230\u8fd9\u4e2a\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5bf9",(0,i.kt)("inlineCode",{parentName:"p"},"LoaderPainter"),"\u5f88\u6709\u7528\u3002\u56e0\u4e3aLoaderPainter\u6bd5\u7adf\u5e76\u4e0d\u662f\u4e00\u4e2aCompose\u7ec4\u4ef6\uff0c\u4f46\u662f\u5b83\u5fc5\u987b\u4e86\u89e3\u5b83\u6240\u5728\u7684\u7236\u7ec4\u4ef6\u5728\u4ec0\u4e48\u65f6\u5019\u79bb\u5f00\u4e86\u5c4f\u5e55\u88ab\u9500\u6bc1\u4e86\uff08\u4f8b\u5982\u9ad8\u901f\u6ed1\u52a8\u5217\u8868\u65f6\uff09\uff0c\u8fd9\u6837\u5b83\u80fd\u591f\u53ca\u65f6\u53d6\u6d88\u5bf9\u72b6\u6001\u6d41",(0,i.kt)("inlineCode",{parentName:"p"},"Flow<ImageLoadState>"),"\u7684\u6536\u96c6\uff0c\u8fd9\u662f\u907f\u514d\u53d1\u751f\u56fe\u7247\u95ea\u70c1\u3001\u9519\u4f4d\u7b49\u95ee\u9898\u7684\u5173\u952e\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class LoadPainter<R> internal constructor(\n    private val loader: Loader<R>,\n    private val coroutineScope: CoroutineScope,\n) : Painter(), RememberObserver {\n    private val paint by lazy(LazyThreadSafetyMode.NONE) { Paint() }\n\n    internal var painter by mutableStateOf<Painter>(EmptyPainter)\n    // \u8fd9\u4e2aColorFilter\u548c\u6e10\u5165\u52a8\u753b\u6709\u5173\n    internal var transitionColorFilter by mutableStateOf<ColorFilter?>(null)\n    // CoroutineScope for the current request\n    private var requestCoroutineScope: CoroutineScope? = null\n    /**\n     * The current request object.\n     */\n    var request by mutableStateOf<R?>(null)\n    /**\n     * The root view size.\n     */\n    internal var rootViewSize by mutableStateOf(IntSize(0, 0))\n    /**\n     * Lambda which will be invoked when the size changes, allowing\n     * optional re-fetching of the image.\n     */\n    var shouldRefetchOnSizeChange by mutableStateOf(ShouldRefetchOnSizeChange { _, _ -> false })\n\n    /**\n     * The current [ImageLoadState].\n     * \u88ab\u89c2\u5bdf\u7684ImageLoadState\n     */\n    var loadState: ImageLoadState by mutableStateOf(ImageLoadState.Empty)\n        private set\n\n    private var alpha: Float by mutableStateOf(1f)\n    private var colorFilter: ColorFilter? by mutableStateOf(null)\n\n    /**\n     * \u6267\u884c\u56fe\u50cf\u52a0\u8f7d\u8bf7\u6c42\u65f6\u8981\u4f7f\u7528\u7684\u5927\u5c0f\n     */\n    private var requestSize by mutableStateOf<IntSize?>(null)\n\n    // Painter\u5185\u7684\u5c5e\u6027\uff0c\u6307\u5b9a\u8fb9\u754c\u5927\u5c0f\n    override val intrinsicSize: Size\n        get() = painter.intrinsicSize\n\n    override fun applyAlpha(alpha: Float): Boolean {\n        this.alpha = alpha\n        return true\n    }\n\n    override fun applyColorFilter(colorFilter: ColorFilter?): Boolean {\n        this.colorFilter = colorFilter\n        return true\n    }\n\n    override fun DrawScope.onDraw() {\n        // \u6839\u636eCanvas\u7684\u5927\u5c0f\u786e\u5b9arequestSize\uff0c\u662f\u4e0d\u662f\u6ce8\u610f\u5230requestSize\u7684\u786e\u5b9a\u5176\u5b9e\u662f\u5b58\u5728\u5ef6\u65f6\u7684\uff1f\n        updateRequestSize(canvasSize = size)\n        \n        // \u4e0b\u9762\u662f\u4e00\u4e9b\u7ed8\u5236\u903b\u8f91\n        val transitionColorFilter = transitionColorFilter\n        if (colorFilter != null && transitionColorFilter != null) {\n            // If we have a transition color filter, \n            // and a specified color filter we need to\n            // draw the content in a layer for both to apply.\n            // See https://github.com/google/accompanist/issues/262\n           drawIntoCanvas { canvas ->\n                paint.colorFilter = transitionColorFilter\n                canvas.saveLayer(bounds = size.toRect(), paint = paint)\n                with(painter) {\n                    draw(size, alpha, colorFilter)\n                }\n                canvas.restore()\n        } else {\n            // Otherwise we just draw the content directly, using the filter\n            with(painter) {\n                draw(size, alpha, colorFilter ?: transitionColorFilter)\n            }\n        }\n    }\n    // RememberObserver\u7684\u65b9\u6cd5\n    // remember\u8fd0\u884c\u4e86\u8ba1\u7b97\u7684lambda\u4f46\u662fcomposition\u6ca1\u8bb0\u4f4f\u8fd9\u4e2a\u5bf9\u8c61\u65f6\u56de\u8c03\n    override fun onAbandoned() {\n        // We've been abandoned from composition, so cancel our request scope\n        requestCoroutineScope?.cancel()\n        requestCoroutineScope = null\n    }\n    // RememberObserver\u7684\u65b9\u6cd5\n    // composition\u5fd8\u8bb0\u4e86\u8fd9\u4e2a\u5bf9\u8c61\u65f6\u56de\u8c03\n    override fun onForgotten() {\n        // We've been forgotten from composition, so cancel our request scope\n        // onAbandoned\u548conForgotten\u65f6\u90fd\u4f1acancel\u8fd0\u884c\u4e2d\u7684\u534f\u7a0b\n        requestCoroutineScope?.cancel()\n        requestCoroutineScope = null\n    }\n    // RememberObserver\u7684\u65b9\u6cd5\n    // \u5f53composition\u6210\u529f\u8bb0\u4f4f\u6b64\u5bf9\u8c61\u65f6\u8c03\u7528\u3002\n    override fun onRemembered() {\n        // Cancel any on-going scope (this shouldn't really happen anyway)\n        // \u5148\u53d6\u6d88\u4ee5\u524d\u6b63running\u7684\u534f\u7a0b\n        requestCoroutineScope?.cancel()\n\n        // \u4e3a\u5f53\u524d\u8bf7\u6c42\u521b\u5efa\u65b0\u7684scope\uff0c\u8fd9\u5141\u8bb8\u6211\u4eec\u53d6\u6d88\u4f5c\u7528\u57df\uff0c\u800c\u4e0d\u5f71\u54cd\u7236\u4f5c\u7528\u57df\u7684\u4f5c\u4e1a\u3002\n        val scope = coroutineScope.coroutineContext.let { context ->\n            CoroutineScope(context + Job(context[Job]))\n        }.also { requestCoroutineScope = it }\n\n        // \u6211\u4eec\u5df2\u7ecf\u88ab\u8bb0\u4f4f\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u6765\u89c2\u5bdf\u5f53\u524d\u7684\u8bf7\u6c42\u5bf9\u8c61\u548c\u8bf7\u6c42\u5927\u5c0f\u3002\n        // \u6bcf\u5f53\u8fd9\u4e9b\u503c\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u53d1\u751f\u53d8\u5316\u65f6\uff0ccollectLatest\u5757\u5c06\u8fd0\u884c\u5e76\u6267\u884c\u56fe\u50cf\u52a0\u8f7d\uff08\u4efb\u4f55\u6b63\u5728\u8fdb\u884c\u7684\u8bf7\u6c42\u90fd\u5c06\u88ab\u53d6\u6d88\uff09\u3002\n        scope.launch {\n            // combine\u65b9\u6cd5\u5982\u5176\u540d\uff0c\u80fd\u628a\u4e24\u4e2a\u6d41\u5408\u5e76\u6210\u4e00\u4e2a\u6d41\n            // \u4e0d\u8fc7\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u4f7f\u7528snapshotFlow\u628aState\u8f6c\u5316\u6210\u6d41\u5462\uff1f\n            // \u56e0\u4e3a\u4f7f\u7528\u6d41\u6765\u76d1\u542cState\u53d8\u5316\u7684\u6700\u5927\u597d\u5904\u5c31\u662fcollectLatest\u80fd\u591f\n            // \u53d6\u6d88\u6389\u4e0a\u4e00\u6b21\u7684execute\u8c03\u7528\u5e76\u542f\u52a8\u65b0\u4e00\u8f6e\u7684\u52a0\u8f7d\n            combine(\n                snapshotFlow { request },\n                snapshotFlow { requestSize },\n                transform = { request, size -> request to size }\n            ).collectLatest { (request, size) ->\n                execute(request, size)\n            }\n        }\n\n        // \u81ea\u52a8\u4fdd\u9669\u3002\u5982\u679c\u6ca1\u6709\u4eceonDraw()\u83b7\u5f97\u5408\u9002\u7684\u5927\u5c0f\uff0c\n        // \u6211\u4eec\u4f1a\u5c06\u8bf7\u6c42\u5927\u5c0f\u66f4\u65b0\u4e3a-1\uff0c-1\uff0c\u8fd9\u5c06\u52a0\u8f7d\u539f\u59cb\u5927\u5c0f\u7684\u56fe\u50cf\u3002\n        scope.launch {\n            if (requestSize == null) {\n                // 32ms should be enough time for measure/layout/draw to happen.\n                // \u5fae\u5999\u768432\u6beb\u79d2\n                delay(32) \n\n                if (requestSize == null) {\n                   // If we still don't have a request size, resolve the size without\n                   // the canvas size\n                    // \u6ca1\u83b7\u53d6\u5230Canvas\u5927\u5c0f\uff0c\u4f7f\u7528\u539f\u59cb\u5c3a\u5bf8\n                    updateRequestSize(canvasSize = Size.Zero)\n                }\n            }\n        }\n    }\n\n    /**\n     * \u6267\u884c\u56fe\u7247\u52a0\u8f7d\u8bf7\u6c42\u5e76\u6839\u636e\u7ed3\u679c\u66f4\u65b0loadState\u7684\u65b9\u6cd5\n     \u4e0b\u9762\u63cf\u8ff0\u7684\u662f\u4e00\u4e9b\u72b6\u6001\u8f6c\u6362\u903b\u8f91\uff0c\u6bd4\u5982\u5982\u679c\u8bf7\u6c42\u4e3anull\uff0c\u72b6\u6001\u5c31\u8f6c\u53d8\u4e3aEmpty\n     */\n    private suspend fun execute(request: R?, size: IntSize?) {\n        if (request == null || size == null) {\n            // If we don't have a request, set our state to Empty and return\n            loadState = ImageLoadState.Empty\n            return\n        }\n        // ...\n\n        loader.load(request, size)\n            .catch { throwable ->\n                when (throwable) {\n                    is Error -> throw throwable\n                    is IllegalStateException -> throw throwable\n                    is IllegalArgumentException -> throw throwable\n                    else -> {\n                        emit(\n                            ImageLoadState.Error(\n                                result = null,\n                                throwable = throwable,\n                                request = request\n                            )\n                        )\n                    }\n                }\n            }\n            .collect { loadState = it }\n        // \u4e0a\u9762collect\u6536\u96c6\u4e86\u52a0\u8f7d\u7684\u72b6\u6001\uff0c\u6ce8\u610f\uff0c\u4ee3\u8868\u56fe\u7247\u7ed3\u679c\u7684Painter\u6ca1\u88ab\u8bbe\u7f6e\u5230LoadPainter\u7684\u5b57\u6bb5\u5185\n    }\n\n    private fun updateRequestSize(canvasSize: Size) {\n        requestSize = IntSize(\n            width = when {\n                // If we have a canvas width, use it...\n                canvasSize.width >= 0.5f -> canvasSize.width.roundToInt()\n                // \u8fd8\u8bb0\u5f97\u8fd9\u4e2arootViewSize\u5417\uff1f\u5b83\u5728rememberLoadPainter\u51fd\u6570\u5185\u88ab\u8bbe\u7f6e\n                rootViewSize.width > 0 -> rootViewSize.width\n                else -> -1\n            },\n            height = when {\n                // If we have a canvas height, use it...\n                canvasSize.height >= 0.5f -> canvasSize.height.roundToInt()\n                // Otherwise we fall-back to the root view size as an upper bound\n                rootViewSize.height > 0 -> rootViewSize.height\n                else -> -1\n            },\n        )\n    }\n}\n")),(0,i.kt)("p",null,"\u867d\u7136\u8bf4",(0,i.kt)("inlineCode",{parentName:"p"},"LoadPainter"),"\u786e\u5b9e\u662f\u5b9e\u73b0\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\uff0c\u4f46\u662f\uff0c\u8fd9\u4e2a\u56de\u8c03\u662f\u600e\u4e48\u88ab\u6ce8\u518c\u7684\u5462\uff1f\u7b54\u6848\u85cf\u5728\u4e60\u4ee5\u4e3a\u5e38\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"remember"),"\u51fd\u6570\u4e2d\uff0c\u4f20\u5165",(0,i.kt)("inlineCode",{parentName:"p"},"remember"),"\u7684key\uff0c\u6216\u8005\u662fcalculation\u5f97\u51fa\u7684\u503c\uff0c\u5b83\u4eec\u5982\u679c\u662f\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\uff0c\u5219\u4f1a\u88ab\u63d2\u5165\u5230",(0,i.kt)("inlineCode",{parentName:"p"},"RememberManager"),"\u7684\u961f\u5217\u4e2d\uff0c\u6bcf\u5f53\u201c\u8bb0\u5fc6\u201d\u548c\u201c\u9057\u5fd8\u201d\u4e8b\u4ef6\u53d1\u751f\u65f6\u90fd\u4f1a\u5f97\u5230\u901a\u77e5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\ninline fun <T> remember(\n    key1: Any?,\n    calculation: @DisallowComposableCalls () -> T\n): T {\n    return currentComposer.cache(currentComposer.changed(key1), calculation)\n}\n// \u6ce8\u610f\u68c0\u67e5key\u662f\u5426\u6709\u53d8\u5316\u7684changed\u51fd\u6570\n@ComposeCompilerApi\noverride fun changed(value: Any?): Boolean {\n    return if (nextSlot() != value) {\n        updateValue(value)\n        true\n    } else {\n        false\n    }\n}\n\n@PublishedApi\n@OptIn(InternalComposeApi::class)\ninternal fun updateValue(value: Any?) {\n    // \u4e24\u4e2aif\u5206\u652f\u6211\u4eec\u90fd\u53ef\u4ee5\u770b\u5230 rememberManager.remembering()\n    // rememberManager.forgetting()\u8fd9\u4e9b\u8c03\u7528\n    if (inserting) {\n        writer.update(value)\n        if (value is RememberObserver) {\n            // \u6ce8\u610f\uff0c\u5224\u65advalue\u662f\u4e0d\u662fRememberObserver\n            record { _, _, rememberManager -> rememberManager.remembering(value) }\n        }\n    } else {\n        val groupSlotIndex = reader.groupSlotIndex - 1\n        recordSlotTableOperation(forParent = true) { _, slots, rememberManager ->\n            if (value is RememberObserver) {\n                abandonSet.add(value)\n                rememberManager.remembering(value)\n            }\n            when (val previous = slots.set(groupSlotIndex, value)) {\n                is RememberObserver ->\n                    rememberManager.forgetting(previous)\n                is RecomposeScopeImpl -> {\n                    val composition = previous.composition\n                    if (composition != null) {\n                        previous.composition = null\n                        composition.pendingInvalidScopes = true\n                    }\n                }\n            }\n        }\n    }\n}\n// RememberManager\u662f\u4e2a\u63a5\u53e3\ninternal interface RememberManager {\n    /**\n     * The [RememberObserver] is being remembered by a slot in the slot table.\n     */\n    fun remembering(instance: RememberObserver)\n\n    /**\n     * The [RememberObserver] is being forgotten by a slot in the slot table.\n     */\n    fun forgetting(instance: RememberObserver)\n    \n    ...\n}\n// RememberManager\u7684\u5b9e\u73b0\u7c7b\nprivate class RememberEventDispatcher(\n    private val abandoning: MutableSet<RememberObserver>\n) : RememberManager {\n    private val remembering = mutableListOf<RememberObserver>()\n    private val forgetting = mutableListOf<RememberObserver>()\n    private val sideEffects = mutableListOf<() -> Unit>()\n\n    override fun remembering(instance: RememberObserver) {\n        forgetting.lastIndexOf(instance).let { index ->\n            if (index >= 0) {\n                forgetting.removeAt(index)\n                abandoning.remove(instance)\n            } else {\n                remembering.add(instance)\n            }\n        }\n    }\n\n    override fun forgetting(instance: RememberObserver) {\n        remembering.lastIndexOf(instance).let { index ->\n            if (index >= 0) {\n                remembering.removeAt(index)\n                abandoning.remove(instance)\n            } else {\n                forgetting.add(instance)\n            }\n        }\n    }\n    fun dispatchRememberObservers() {\n        // \u6d3e\u53d1forgetting\u548cremembering\u4e8b\u4ef6\u7684\u903b\u8f91\n        if (forgetting.isNotEmpty()) {\n            for (i in forgetting.size - 1 downTo 0) {\n                val instance = forgetting[i]\n                if (instance !in abandoning) {\n                    instance.onForgotten()\n                }\n            }\n        }\n        if (remembering.isNotEmpty()) {\n            remembering.fastForEach { instance ->\n                abandoning.remove(instance)\n                instance.onRemembered()\n            }\n        }\n    }\n    // ....\n}\n")),(0,i.kt)("p",null,"\u6211\u4eec\u5df2\u7ecf\u660e\u767d",(0,i.kt)("inlineCode",{parentName:"p"},"LoadPainter"),"\u5230\u5e95\u662f\u600e\u4e48\u7ba1\u7406Loader\u8fd4\u56de\u7684\u6d41\u7ed3\u679c\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5728\u51fd\u6570",(0,i.kt)("inlineCode",{parentName:"p"},"updatePainter"),"\u91cc\uff0c\u8fd9\u4e2a\u8c03\u7528\u4f4d\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"rememberLoadPainter"),"\u6700\u540e\uff0c\u51fd\u6570\u5b9e\u73b0\u4f1a\u6839\u636e\u56fe\u7247\u52a0\u8f7dState\u7684\u53d8\u5316\u6765\u4e3aLoadPainter\u8bbe\u7f6ePainter\u3002\u4e0d\u8fc7\u8fd9\u4e0d\u662f\u515c\u4e86\u4e2a\u5708\u5b50\u5417\uff1f\u4f3c\u4e4e\u4e5f\u53ef\u4ee5\u5728collect\u66f4\u65b0State\u7684\u540c\u65f6\u628aPainter\u66f4\u65b0\u4e00\u4e0b\uff1f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n* \u5141\u8bb8\u6211\u4eec\u4ee5\u72b6\u6001\u89c2\u5bdf\u5f53\u524d\u7ed3\u679c\u3002\u8fd9\u4e2a\u51fd\u6570\u5141\u8bb8\u6211\u4eec\u6700\u5c0f\u5316\u91cd\u7ec4\u8303\u56f4\uff0c\u8fd9\u6837\u5f53loadState\u6539\u53d8\u65f6\uff0c\u53ea\u6709\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u91cd\u65b0\n* \u542f\u52a8\u3002\n*/\n@Composable\nprivate fun <R> updatePainter(\n    loadPainter: LoadPainter<R>,\n    @DrawableRes previewPlaceholder: Int = 0,\n) {\n    loadPainter.painter = if (LocalInspectionMode.current && previewPlaceholder != 0) {\n        // \u5982\u679c\u6211\u4eec\u5904\u4e8e\u68c0\u67e5\u6a21\u5f0f\uff08\u9884\u89c8\uff09\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u9884\u89c8\u5360\u4f4d\u7b26\uff0c\u53ea\u9700\u4f7f\u7528\u56fe\u50cf\u7ed8\u5236\u5b83\u5e76\u8fd4\u56de\n        // \u8fd8\u8bb0\u5f97rememberGlidePainter\u7684\u53c2\u6570\u5417\uff1f\u8fd9\u91cc\u5c31\u662f\u4f20\u5165\u7684\u53c2\u6570previewPlaceholder\u7684\u7528\u9014\n        // \u8fd9\u4e2a\u51fd\u6570\u4ee4LoadPainter\u5b8c\u5168\u5ffd\u7565\u4e86State\u7684\u53d8\u5316\uff0c\u53ea\u5c55\u793a\u9759\u6001\u56fe\u7247\n        painterResource(previewPlaceholder)\n    } else {\n        // remember\u5728\u8fd9\u91cc\u770b\u4e0a\u53bb\u50cf\u662f\u6beb\u65e0\u5fc5\u8981\u7684\u8c03\u7528\uff0c\n        // \u4f46\u8fd9\u5141\u8bb8\u4efb\u4f55Painter\u5b9e\u4f8b\u63a5\u6536\u8bb0\u5fc6\u4e8b\u4ef6\uff08\u5982\u679c\u5b83\u5b9e\u73b0\u4e86RememberObserver\uff09\u3002\u4e0d\u8981\u79fb\u9664\u3002\n        remember(loadPainter.loadState) { loadPainter.loadState.painter } ?: EmptyPainter\n    }\n}\n")),(0,i.kt)("p",null,"\u73b0\u5728\u6765\u603b\u7ed3\u4e00\u4e0b0.13.0\u7248\u672c\u7684Glide\u8fdc\u7a0b\u56fe\u7247\u6269\u5c55\u7684\u5b9e\u73b0\u601d\u8def\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u56fe\u7247\u52a0\u8f7d\uff1a\u4f9d\u7136\u662f\u7528Target\u56de\u8c03\u83b7\u53d6\u52a0\u8f7d\u7684\u7ed3\u679c\u3002\u4f46\u662f\u52a0\u8f7d\u72b6\u6001\u7684\u8fd4\u56de\u73b0\u5728\u4f7f\u7528\u6d41\uff08Flow\uff09\u6765\u5c01\u88c5\uff0c\u4e0d\u7ba1\u662f\u53d1\u8d77\u52a0\u8f7d\uff0c\u5f02\u5e38\u5904\u7406\uff0c\u52a0\u8f7d\u53d6\u6d88\u90fd\u66f4\u52a0\u4f18\u96c5\u76f4\u89c2\u4e86\u3002Loader\u662f\u5f7b\u5f7b\u5e95\u5e95\u7684\u751f\u4ea7\u8005\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"LoadPainter"),"\u5219\u662f\u6d88\u8d39\u8005\u3002"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"LoadPainter"),"\u5e76\u4e0d\u5177\u6709@Composable\u4e0a\u4e0b\u6587\uff0c\u4f5c\u4e3a\u66ff\u4ee3\uff0c\u5b83\u5b9e\u73b0\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\u6765\u76d1\u542c\u63a7\u4ef6\u662f\u5426\u5df2\u7ecf\u79bb\u5c4f\u9500\u6bc1\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u56fe\u7247\u5927\u5c0f\u7ea6\u675f\uff1a\u4f9d\u8d56\u4e8eLoadPainter\u83b7\u53d6\u7684Canvas\u7684\u5927\u5c0f\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u6e10\u5165\u52a8\u753b\u5b9e\u73b0\uff1a\u8ddf0.6.2\u7248\u672c\u7684\u601d\u8def\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u6d88\u8d39ColorFilter\u7684\u7c7b\u53d8\u6210\u4e86LoadPainter\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"loading\u5360\u4f4d\u56fe\u3001error\u56fe\u7b49\uff1a\u8fd9\u4e9b\u529f\u80fd\u76f4\u63a5\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u56fe\u7247\u52a0\u8f7d\u6846\u67b6\u7684\u5b9e\u73b0\uff0c\u6709\u5219\u6709\uff0c\u65e0\u5219\u65e0\u30020.13.0\u7248\u672c\u7a0d\u5fae\u820d\u53bb\u4e86\u4e00\u4e9b\u7075\u6d3b\u6027\uff0c\u4e0d\u80fd\u591f\u50cfPicassoImage\u4e00\u6837\u76f4\u63a5\u4f20\u5165error\u3001loading\u7684Compose\u5185\u5bb9\uff08\u63a7\u4ef6\uff09\uff0c\u4e0d\u8fc7\u4ecd\u7136\u7559\u6709\u76d1\u542c\u56fe\u7247\u52a0\u8f7d\u72b6\u6001\u7684\u65b9\u5f0f\uff0c\u6ce8\u610f\uff0cLoadPainter\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"loadState"),"\u5b57\u6bb5\u662f\u516c\u5f00\u7684\uff1a"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * The current [ImageLoadState].\n */\nvar loadState: ImageLoadState by mutableStateOf(ImageLoadState.Empty)\n    private set\n")))),(0,i.kt)("h2",{id:"coil"},"Coil"),(0,i.kt)("p",null,"Accompanist\u5185\u7684Coil\u96c6\u6210\u5e93\u6700\u7ec8\u96c6\u6210\u5230\u4e86Coil\u5185\u90e8\uff0c\u6210\u4e3a\u5176\u6269\u5c55\uff0cGlide\u7684\u96c6\u6210\u652f\u6301\u5219\u57282021\u5e748\u6708\u76840.16.0\u7248\u672c\u88ab\u5220\u9664\u3002"),(0,i.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u7b80\u8981\u5206\u6790Coil\u7684\u56fe\u7247\u52a0\u8f7d\u903b\u8f91\uff08\u7248\u672c2.0.0-alpha06\uff09\u3002Coil\u6269\u5c55\u5e93\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\u6765\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\uff0c\u4e24\u79cd\u65b9\u5f0f\u6b63\u5de7\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u57280.6.2\u7248\u672c\u4e0e\u57280.13.0\u7248\u672c\u7684\u4e24\u79cd\u5b9e\u73b0\u5f62\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// \u5b9e\u73b0\u5f62\u5f0f1\n@Composable\nfun AsyncImage(\n    model: Any?,\n    contentDescription: String?,\n    imageLoader: ImageLoader,\n    modifier: Modifier = Modifier,\n    loading: @Composable (AsyncImageScope.(State.Loading) -> Unit)? = null,\n    success: @Composable (AsyncImageScope.(State.Success) -> Unit)? = null,\n    error: @Composable (AsyncImageScope.(State.Error) -> Unit)? = null,\n    alignment: Alignment = Alignment.Center,\n    contentScale: ContentScale = ContentScale.Fit,\n    alpha: Float = DefaultAlpha,\n    colorFilter: ColorFilter? = null,\n    filterQuality: FilterQuality = DefaultFilterQuality,\n) {...}\n// \u5b9e\u73b0\u5f62\u5f0f2\n@Composable\nfun rememberAsyncImagePainter(\n    model: Any?,\n    imageLoader: ImageLoader,\n    filterQuality: FilterQuality = DefaultFilterQuality,\n): AsyncImagePainter {...}\n")),(0,i.kt)("p",null,"\u6211\u4eec\u91cd\u70b9\u5206\u6790\u7b2c\u4e8c\u79cd\u5f62\u5f0f\uff0c\u5373rememberAsyncImagePainter\u51fd\u6570\uff0c\u5176\u5b9e\u8be5\u51fd\u6570\u7684\u5b9e\u73b0\u903b\u8f91\u4e0eGlide\u6269\u5c55\u5e93\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u53ea\u5728\u67d0\u4e9b\u7ec6\u8282\u6709\u6240\u533a\u522b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'// \u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u5206\u6790\u6e90\u7801\uff0c\u6311\u91cd\u8981\u7684\u8bb2\n@Composable\nfun rememberAsyncImagePainter(\n    model: Any?,\n    imageLoader: ImageLoader,\n    filterQuality: FilterQuality = DefaultFilterQuality,\n): AsyncImagePainter {\n    val request = requestOf(model)\n    requireSupportedData(request.data)\n    // \u6ce8\u610f\u8fd9\u91cc\uff0c\u8fd9\u91cc\u8981\u6c42request\u7684target\u4e3anull\n    require(request.target == null) { "request.target must be null." }\n\n    // Dispatchers.Main.immediate\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u534f\u7a0b\u8c03\u5ea6\u5668\uff0c\u5177\u4f53\u6548\u679c\u89c1\u7c7b\u6ce8\u91ca\n    val scope = rememberCoroutineScope { Dispatchers.Main.immediate }\n    // AsyncImagePainter\n    val painter = remember(scope) { AsyncImagePainter(scope, request, imageLoader) }\n    painter.request = request\n    painter.imageLoader = imageLoader\n    painter.filterQuality = filterQuality\n    // \u662f\u5426\u5904\u4e8e\u9884\u89c8\u6a21\u5f0f\n    painter.isPreview = LocalInspectionMode.current\n    // \u8fd9\u91cc\u624b\u52a8\u8c03\u7528\u4e86\u4e00\u6b21onRemembered\uff0conRemembered\u91cc\u6709\u5411ImageLoader\u63d0\u4ea4request\u7684\u903b\u8f91\n    painter.onRemembered() // Invoke this manually so `painter.state` is up to date immediately.\n    // \u8fd9\u91cc\u7684updatePainter\u66f4\u52a0\u590d\u6742\uff0c\u91cc\u9762\u6709\u5904\u7406fadeIn\u52a8\u753b\u7684\u903b\u8f91\n    updatePainter(painter, request, imageLoader)\n    return painter\n}\n')),(0,i.kt)("p",null,"Dispatchers.Main.immediate\u6bd4\u5355\u7eaf\u7684Dispatchers.Main\u66f4\u52a0\u667a\u80fd\uff0c\u5b83\u4f1a\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8c03\u5ea6\uff0c\u5f53\u5b83\u5df2\u7ecf\u5728\u6b63\u786e\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5b83\u4f1a\u7acb\u523b\u6267\u884c\u76f8\u5e94\u903b\u8f91\u800c\u65e0\u9700\u989d\u5916\u7684\u91cd\u65b0\u8c03\u5ea6\u3002\u6548\u679c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"suspend fun updateUiElement(val text: String) {\n  /*\n   * \u5047\u8bbeupdateUiElement\u65e2\u4f1a\u88abMain\u7ebf\u7a0b\u8c03\u7528\u4e5f\u4f1a\u88ab\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528\u3002\n   * \u90a3\u4e48\uff0c\u5f53updateUiElement\u662f\u5728Main\u7ebf\u7a0b\u88ab\u8c03\u7528\u7684\uff0c\u66f4\u65b0uiElement.text \u8fd9\u6bb5\u4ee3\u7801\u4f1a\u76f4\u63a5\u8fd0\u884c\uff0c\u800c\u6362\u6210Dispatchers.Main\u7684\u8bdd\uff0c\u5b83\u4f1a\u518d\u8fdb\u884c\u4e00\u6b21\u5230Main\u7684\u8c03\u5ea6\uff08\u660e\u663e\u8fd9\u662f\u8d58\u4f59\u7684\u8c03\u5ea6\uff09\u3002\n   */\n  withContext(Dispatchers.Main.immediate) {\n    uiElement.text = text\n  }\n  // Do context-independent logic such as logging\n}\n")),(0,i.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u5173\u6ce8AsyncImagePainter\u7684\u5177\u4f53\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n * \u5f02\u6b65\u6267\u884cImageRequest\u5e76\u5448\u73b0\u7ed3\u679c\u7684Painter\u3002\n */\nclass AsyncImagePainter internal constructor(\n    private val parentScope: CoroutineScope,\n    request: ImageRequest,\n    imageLoader: ImageLoader\n) : Painter(), RememberObserver {\n\n    private var rememberScope: CoroutineScope? = null\n    // \u56fe\u7247\u8bf7\u6c42\u7684\u534f\u7a0b\u7684Job\n    private var requestJob: Job? = null\n    private var drawSize = MutableStateFlow(Size.Zero)\n\n    private var alpha: Float by mutableStateOf(1f)\n    private var colorFilter: ColorFilter? by mutableStateOf(null)\n\n    internal var painter: Painter? by mutableStateOf(null)\n    internal var filterQuality = DefaultFilterQuality\n    internal var isPreview = false\n\n    /** The current [AsyncImagePainter.State]. */\n    var state: State by mutableStateOf(State.Empty)\n        private set\n\n    var request: ImageRequest by mutableStateOf(request)\n        internal set\n\n    var imageLoader: ImageLoader by mutableStateOf(imageLoader)\n        internal set\n\n    override val intrinsicSize: Size\n        get() = painter?.intrinsicSize ?: Size.Unspecified\n\n    override fun DrawScope.onDraw() {\n        // \u7ed8\u5236\u903b\u8f91\u975e\u5e38\u6e05\u723d\n        drawSize.value = size\n        // Draw the current painter.\n        painter?.apply { draw(size, alpha, colorFilter) }\n    }\n    ...\n\n    override fun onRemembered() {\n        // \u5982\u679c\u6211\u4eec\u5904\u4e8e\u68c0\u67e5\u6a21\u5f0f\uff08\u9884\u89c8\uff09\uff0c\u8bf7\u8df3\u8fc7\u6267\u884c\u56fe\u50cf\u8bf7\u6c42\uff0c\u5e76\u5c06\u72b6\u6001\u8bbe\u7f6e\u4e3a\u52a0\u8f7d\u3002\n        // \u5bf9\u4e8e\u9884\u89c8\u6a21\u5f0f\u7684\u652f\u6301\n        if (isPreview) {\n            val request = request.newBuilder().defaults(imageLoader.defaults).build()\n            state = State.Loading(request.placeholder?.toPainter())\n            return\n        }\n        // \u4e0eGlide\u6269\u5c55\u7c7b\u4f3c\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u5b50\u4f5c\u7528\u57df\n        if (rememberScope != null) return\n        val scope = parentScope + SupervisorJob(parentScope.coroutineContext.job)\n        rememberScope = scope\n\n        // \u89c2\u5bdf\u5f53\u524d\u8bf7\u6c42+\u8bf7\u6c42\u5927\u5c0f\uff0c\u5e76\u6839\u636e\u9700\u8981\u542f\u52a8\u65b0\u8bf7\u6c42\u3002\n        // Coil\u5929\u7136\u652f\u6301Kotlin\u534f\u7a0b\uff0c\u65e0\u9700\u4e3a\u751f\u4ea7\u8005\u989d\u5916\u7f16\u5199\u4ee3\u7801\n        scope.launch {\n            snapshotFlow { request }.collect { request ->\n                requestJob?.cancel()\n                requestJob = launch {\n                    // execute\u662f\u6302\u8d77\u51fd\u6570\uff0c\u8fd4\u56deImageResult\n                    state = imageLoader.execute(updateRequest(request)).toState()\n                }\n            }\n        }\n    }\n\n    override fun onForgotten() {\n        rememberScope?.cancel()\n        rememberScope = null\n        requestJob?.cancel()\n        requestJob = null\n    }\n\n    override fun onAbandoned() = onForgotten()\n\n    /** Update the [request] to work with [AsyncImagePainter]. */\n    private fun updateRequest(request: ImageRequest): ImageRequest {\n        return request.newBuilder()\n            .target(\n                onStart = { placeholder ->\n                     // \u8fd9\u91cc\u83b7\u53d6\u5230placeholder\u7684Painter\u5e76\u66f4\u65b0State\u4e3aLoading\n                    state = State.Loading(placeholder?.toPainter())\n                }\n            )\n            .apply {\n                if (request.defined.sizeResolver == null) {\n                    // Coil\u5185\u5173\u4e8e\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f\u7684\u4ee3\u7801\n                    // size\u63a5\u53d7\u4e00\u4e2aSizeResolver\uff0c\u4e00\u4e2a\u542bsuspend\u51fd\u6570\u7684\u63a5\u53e3\n                    // \u83b7\u53d6\u5c3a\u5bf8\u7684\u51fd\u6570\u662f\u6302\u8d77\u51fd\u6570\uff0c\u975e\u5e38\u5408\u7406\uff0c\u56e0\u4e3a\u5f88\u591a\u65f6\u5019\u9700\u8981\u7b49\u5f85\u63a7\u4ef6\u6d4b\u91cf\u5b8c\u6bd5\u624d\u77e5\u9053\u5927\u5c0f\n                    size(DrawSizeResolver())\n                }\n                if (request.defined.precision != Precision.EXACT) {\n                    precision(Precision.INEXACT)\n                }\n            }\n            .build()\n    }\n\n    private fun ImageResult.toState() = when (this) {....}\n    private fun Drawable.toPainter() = when (this) {...}\n\n    /** Suspends until the draw size for this [AsyncImagePainter] is unspecified or positive. */\n    private inner class DrawSizeResolver : SizeResolver {\n\n        override suspend fun size() = drawSize\n            .mapNotNull { size ->\n                when {\n                    // mapNotNull\u4f1a\u5c06drawSize\u8f6c\u5316\u4e3aFlow\uff0c\u540c\u65f6\u8fc7\u6ee4null\u503c\uff0c\u7136\u540e\u6302\u8d77\u51fd\u6570first()\n                    // \u5c06\u4f1a\u8fd4\u56deFlow\u4e2d\u4f20\u9001\u7684\u7b2c\u4e00\u4e2a\u503c\n                    size.isUnspecified -> CoilSize.ORIGINAL\n                    size.isPositive -> CoilSize(size.width.roundToInt(), size.height.roundToInt())\n                    else -> null\n                }\n            }\n            .first()\n    }\n\n    /**\n     * The current state of the [AsyncImagePainter].\n     * \u72b6\u6001\u5b9a\u4e49\n     */\n    sealed class State {\n        abstract val painter: Painter?\n        object Empty : State() {\n            override val painter: Painter? get() = null\n        }\n        data class Loading(\n            override val painter: Painter?,\n        ) : State()\n        data class Success(\n            override val painter: Painter,\n            val result: SuccessResult,\n        ) : State()\n        data class Error(\n            override val painter: Painter?,\n            val result: ErrorResult,\n        ) : State()\n    }\n}\n")),(0,i.kt)("p",null,"\u4e0eGlide\u6269\u5c55\u5e93\u7684\u601d\u8def\u7c7b\u4f3c\uff0cupdatePainter\u51fd\u6570\u4f1a\u76d1\u542cAsyncImagePainter\u7684\u52a0\u8f7d\u72b6\u6001\u53d8\u5316\uff0c\u540c\u65f6\u66f4\u65b0AsyncImagePainter\u5185\u7684Painter\u5b57\u6bb5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nprivate fun updatePainter(\n    imagePainter: AsyncImagePainter,\n    request: ImageRequest,\n    imageLoader: ImageLoader\n) {\n    // This may look like a useless remember, but this allows any painter instances\n    // to receive remember events (if it implements RememberObserver). Do not remove.\n    // \u4e0eGlide\u6269\u5c55\u5e93\u4e00\u6837\uff0c\u5141\u8bb8\u7ed3\u679cPainter\u5b9e\u4f8b\u63a5\u6536remember\u4e8b\u4ef6\uff08\u5982\u679c\u5b83\u5b9e\u73b0\u4e86RememberObserver\uff09\n    val state = imagePainter.state\n    val painter = remember(state) { state.painter }\n\n    // \u5982\u679c\u6ca1\u6709CrossfadeTransition\uff08\u5b9e\u73b0\u6e10\u5165\u53d8\u6362\uff09\u7684\u8bdd\uff0c\u76f4\u63a5\u8bbe\u7f6eimagePainter.painter\u5e76\u8fd4\u56de\n    val transition = request.defined.transitionFactory ?: imageLoader.defaults.transitionFactory\n    if (transition !is CrossfadeTransition.Factory) {\n        imagePainter.painter = painter\n        return\n    }\n\n    // ValueHolder\u662f\u4e00\u4e2a\u5305\u542bstatic field\u7684\u6570\u636e\u7c7b\uff0c\u76ee\u7684\u662f\u50a8\u5b58state.painter\u7684\u503c\uff0c\n    // \u907f\u514d\u5728state.painter\u503c\u66f4\u65b0\u540e\u51fd\u6570rememberCrossfadePainter\u91cd\u7ec4\uff0c\n    // \u4e0erememberUpdatedState\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\uff0c\u4f30\u8ba1\u662f\u56e0\u4e3arememberUpdatedState\u6ca1\u6709\n    // \u4f20\u5165key\u7684API\uff08\u8fd9\u91cc\u8981\u76d1\u542crequest\u53d8\u5316\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u63d0\u4f9b\u4e86\u7b80\u6613\u7684\u907f\u514d\u91cd\u7ec4\u7684\u5b9e\u73b0\n    val loading = remember(request) { ValueHolder<Painter?>(null) }\n    if (state is State.Loading) loading.value = state.painter\n\n    // \u5fc5\u987b\u4f4d\u4e8eSuccess\u72b6\u6001\u4e14\u56fe\u7247\u662f\u4ece\u7f51\u7edc\u6216\u78c1\u76d8\u52a0\u8f7d\u7684\uff0c\u624d\u5141\u8bb8\u542f\u52a8Crossfade\uff0c\u5426\u5219\u8fd4\u56de\u5373\u53ef\n    if (state !is State.Success || state.result.dataSource == DataSource.MEMORY_CACHE) {\n        imagePainter.painter = painter\n        return\n    }\n\n    // Set the crossfade painter.\n    // \u5343\u547c\u4e07\u5524\u59cb\u51fa\u6765\u7684CrossfadePainter\n    imagePainter.painter = rememberCrossfadePainter(\n        key = state,\n        start = loading.value,\n        end = painter,\n        scale = request.scale,\n        durationMillis = transition.durationMillis,\n        fadeStart = !state.result.isPlaceholderCached,\n        preferExactIntrinsicSize = transition.preferExactIntrinsicSize\n    )\n}\n/** A simple mutable value holder that avoids recomposition. */\n// \u4f7f\u7528\u9759\u6001\u5b57\u6bb5\uff08static\uff09\u907f\u514d\u91cd\u7ec4\nprivate class ValueHolder<T>(@JvmField var value: T)\n")),(0,i.kt)("p",null,"CrossfadePainter\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Stable\nprivate class CrossfadePainter(\n    private var start: Painter?,\n    private val end: Painter?,\n    private val scale: Scale,\n    private val durationMillis: Int,\n    private val fadeStart: Boolean,\n    private val preferExactIntrinsicSize: Boolean,\n) : Painter() {\n\n    private var invalidateTick by mutableStateOf(0)\n    private var startTimeMillis = -1L\n    private var isDone = false\n\n    private var maxAlpha: Float by mutableStateOf(1f)\n    private var colorFilter: ColorFilter? by mutableStateOf(null)\n\n    override val intrinsicSize get() = computeIntrinsicSize()\n\n    override fun DrawScope.onDraw() {\n        // \u5982\u679cAlpha\u53d8\u5316\u5b8c\u6bd5\uff0c\u76f4\u63a5\u4f7f\u7528end\u7ed8\u5236\n        if (isDone) {\n            drawPainter(end, maxAlpha)\n            return\n        }\n\n        // Initialize startTimeMillis the first time we're drawn.\n        val uptimeMillis = SystemClock.uptimeMillis()\n        if (startTimeMillis == -1L) {\n            startTimeMillis = uptimeMillis\n        }\n\n        // Alpha\u7684\u767e\u5206\u6bd4 = (\u5f53\u524d\u65f6\u95f4 - \u5f00\u59cb\u65f6\u95f4) / \u6301\u7eed\u65f6\u95f4\n        val percent = (uptimeMillis - startTimeMillis) / durationMillis.toFloat()\n        val endAlpha = percent.coerceIn(0f, 1f) * maxAlpha\n        val startAlpha = if (fadeStart) maxAlpha - endAlpha else maxAlpha\n        isDone = percent >= 1.0\n\n        // Loading\u5360\u4f4d\u56fe\u6e10\u51fa\uff0cSuccess\u56fe\u7247\u7ed3\u679c\u6e10\u5165\n        drawPainter(start, startAlpha)\n        drawPainter(end, endAlpha)\n\n        if (isDone) {\n            start = null\n        } else {\n            // Increment this value to force the painter to be redrawn.\n            invalidateTick++\n        }\n    }\n    ...\n}\n")),(0,i.kt)("p",null,"\u73b0\u5728\u6765\u603b\u7ed3\u4e00\u4e0bCoil\u8fdc\u7a0b\u56fe\u7247\u6269\u5c55\u7684\u5b9e\u73b0\u601d\u8def\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u56fe\u7247\u52a0\u8f7d\uff1aCoil\u5bf9\u534f\u7a0b\u63d0\u4f9b\u76f4\u63a5\u7684\u652f\u6301\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"size"),"\u51fd\u6570\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"execute"),"\u52a0\u8f7d\u51fd\u6570\u672c\u8eab\u5c31\u662f\u6302\u8d77\u51fd\u6570\uff0c\u56e0\u6b64\u65e0\u9700\u989d\u5916\u7684\u8f6c\u6362\u903b\u8f91\u3002\u800c",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncImagePainter"),"\u5219\u4f7f\u7528Job\u6765\u63a7\u5236\u56fe\u7247\u52a0\u8f7d\u534f\u7a0b\u3002"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"AsyncImagePainter"),"\u5e76\u4e0d\u5177\u6709@Composable\u4e0a\u4e0b\u6587\uff0c\u4f5c\u4e3a\u66ff\u4ee3\uff0c\u5b83\u5b9e\u73b0\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"RememberObserver"),"\u6765\u76d1\u542c\u63a7\u4ef6\u662f\u5426\u5df2\u7ecf\u79bb\u5c4f\u9500\u6bc1\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u56fe\u7247\u5927\u5c0f\u7ea6\u675f\uff1a\u4f9d\u8d56\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"DrawContext"),"\u7684Size\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u6e10\u5165\u52a8\u753b\u5b9e\u73b0\uff1a\u4f9d\u8d56\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"DrawScope.onDraw()"),"\u5185\u7684\u91cd\u7ed8\u884c\u4e3a\uff0c\u901a\u8fc7\u5bf9\u900f\u660e\u5ea6Alpha\u7684\u767e\u5206\u6bd4\u8ba1\u7b97\u6765\u5b9e\u73b0\uff0c\u4ee4Loading\u72b6\u6001\u7684\u5360\u4f4d\u56fe\u6e10\u51fa\uff0cSuccess\u72b6\u6001\u7684\u6700\u7ec8\u7ed3\u679c\u6e10\u5165\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"loading\u5360\u4f4d\u56fe\u3001error\u56fe\u7b49\uff1a\u7531Coil\u63d0\u4f9b\u5177\u4f53\u7684\u5b9e\u73b0\u3002"))),(0,i.kt)("p",null,"\u6839\u636e\u4e0a\u8ff0\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u76f8\u6bd4\u4e8eGlide\u6216\u662fPicasso\uff0c\u57fa\u4e8eKotlin\u534f\u7a0b\u5b9e\u73b0\u7684\u56fe\u7247\u52a0\u8f7d\u5e93Coil\uff0c\u7684\u786e\u80fd\u591f\u5f88\u8f7b\u677e\u4e0eJetpack Compose\u914d\u5408\u5de5\u4f5c\u3002"),(0,i.kt)("p",null,"\u81f3\u6b64\u5bf9\u6269\u5c55\u5e93\u7684\u5206\u6790\u5df2\u7ecf\u5b8c\u6bd5\u3002\u6a2a\u5411\u5bf9\u6bd4\u6765\u8bf4\uff0c\u65e0\u8bba\u662f\u5bf9Picasso\u8fd8\u662fGlide\u8fdb\u884c\u6269\u5c55\uff0c\u6211\u4eec\u90fd\u5f97\u989d\u5916\u505a\u4e00\u4e9b\u5904\u7406\uff0c\u624d\u80fd\u591f\u4ee4\u672c\u8eab\u4e0d\u652f\u6301\u534f\u7a0b\u7684\u5b83\u4eec\u5728Compose\u4e0b\u6b63\u5e38\u5de5\u4f5c\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5355\u7eaf\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684Target\u628a\u7ed3\u679c\u8fd4\u56de\u5230\u67d0\u4e2aState\uff0c\u8fd9\u79cd\u7b80\u5355\u7684\u505a\u6cd5\u5728\u5217\u8868\u4e2d\u53ef\u80fd\u4f1a\u9047\u5230\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\uff0c\u56e0\u4e3aGlide\u4e5f\u597d\uff0cPicasso\u4e5f\u597d\uff0c\u5b83\u4eec\u5185\u90e8\u5b9e\u73b0\u4e2d\u53d6\u6d88\u56fe\u7247\u52a0\u8f7d\u4ee5\u907f\u514d\u56fe\u7247\u9519\u4f4d\u3001\u95ea\u70c1\u7684\u91cd\u8981\u53c2\u7167\u7269\u5c31\u662fImageView\uff0c\u968f\u7740\u5217\u8868\u6ed1\u52a8\u4e0d\u65ad\u521b\u5efa\u7684\u81ea\u5b9a\u4e49\u7684Target\u65e0\u6cd5\u88ab\u5b83\u4eec\u8bc6\u522b\u5e76\u8fdb\u884c\u76f8\u5e94\u5904\u7406\u3002\u76f8\u6bd4\u4e4b\u4e0b\u57fa\u4e8e\u534f\u7a0b\u7684Coil\u7684\u52a0\u8f7d\u80fd\u591f\u53d8\u5f97\u7b80\u5355\u5f97\u591a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5229\u7528Job\u672c\u8eab\u5c31\u53ef\u4ee5\u63a7\u5236\u52a0\u8f7d\u7684\u534f\u7a0b\u3002"))}c.isMDXComponent=!0}}]);